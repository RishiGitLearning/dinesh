/*
 * frmSynchronize.java
 *
 * Created on July 7, 2004, 5:18 PM
 */ 

/*<APPLET CODE=frmSynchronize WIDTH=504 HEIGHT=430></APPLET>*/

package EITLERP.Utils;

import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import EITLERP.*;
import java.sql.*;
import java.net.*;
import java.util.*;
import javax.sql.*;
 

/**
 *
 * @author  root
 */
public class frmSynchronize extends javax.swing.JApplet {
    
    private int MaxValue=0;
    private int recValue=0;
    
    private EITLComboModel cmbCompanyModel=new EITLComboModel();
    private EITLComboModel cmbFromModel=new EITLComboModel();
    
    private int SelCompanyID=0;
    
    private HashMap Tables=new HashMap();
    
    
    /** Initializes the applet frmSynchronize */
    public void init() {
        setSize(504, 430);
        initComponents();
        GenerateCombo();
        SelCompanyID=EITLERPGLOBAL.getComboCode(cmbCompany);
        GenerateYearCombo();
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLabel1 = new javax.swing.JLabel();
        cmbCompany = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cmbFromYear = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        txtToYear = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        Bar = new javax.swing.JProgressBar();
        lblTitle = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblLocation = new javax.swing.JLabel();
        cmdSyncFrom = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        cmdSyncTo = new javax.swing.JButton();
        chkUpdate = new javax.swing.JCheckBox();
        
        getContentPane().setLayout(null);
        
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        
        jLabel1.setFont(new java.awt.Font("Verdana", 0, 11));
        jLabel1.setText("Select");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(7, 52, 62, 14);
        
        cmbCompany.setBackground(new java.awt.Color(174, 208, 253));
        cmbCompany.setOpaque(false);
        cmbCompany.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbCompanyItemStateChanged(evt);
            }
        });
        
        getContentPane().add(cmbCompany);
        cmbCompany.setBounds(75, 50, 304, 20);
        
        jPanel2.setLayout(null);
        
        jPanel2.setBackground(new java.awt.Color(176, 176, 196));
        jPanel2.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel2.setOpaque(false);
        jLabel5.setFont(new java.awt.Font("Verdana", 1, 11));
        jLabel5.setText("Financial Year");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(6, 8, 124, 14);
        
        jLabel6.setFont(new java.awt.Font("Verdana", 0, 11));
        jLabel6.setText("From");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(12, 42, 38, 14);
        
        cmbFromYear.setBackground(new java.awt.Color(174, 208, 253));
        cmbFromYear.setOpaque(false);
        cmbFromYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFromYearItemStateChanged(evt);
            }
        });
        
        jPanel2.add(cmbFromYear);
        cmbFromYear.setBounds(58, 38, 102, 24);
        
        jLabel7.setFont(new java.awt.Font("Verdana", 0, 11));
        jLabel7.setText("To");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(184, 42, 24, 14);
        
        txtToYear.setEditable(false);
        txtToYear.setOpaque(false);
        jPanel2.add(txtToYear);
        txtToYear.setBounds(216, 38, 102, 19);
        
        getContentPane().add(jPanel2);
        jPanel2.setBounds(8, 76, 374, 78);
        
        jLabel2.setText("Synchronize data from location");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 160, 201, 15);
        
        jPanel1.setLayout(null);
        
        jPanel1.setBorder(new javax.swing.border.EtchedBorder());
        Bar.setStringPainted(true);
        jPanel1.add(Bar);
        Bar.setBounds(8, 69, 355, 27);
        
        lblTitle.setText("Status");
        jPanel1.add(lblTitle);
        lblTitle.setBounds(8, 6, 354, 15);
        
        lblStatus.setForeground(new java.awt.Color(102, 102, 255));
        lblStatus.setText("Idle");
        lblStatus.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanel1.add(lblStatus);
        lblStatus.setBounds(9, 28, 353, 34);
        
        getContentPane().add(jPanel1);
        jPanel1.setBounds(7, 282, 373, 103);
        
        jLabel4.setBackground(new java.awt.Color(0, 102, 153));
        jLabel4.setForeground(java.awt.Color.white);
        jLabel4.setText(" DATA SYNCHRONIZATION");
        jLabel4.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel4.setOpaque(true);
        getContentPane().add(jLabel4);
        jLabel4.setBounds(1, 3, 650, 25);
        
        lblLocation.setFont(new java.awt.Font("Dialog", 0, 12));
        lblLocation.setText("Location");
        getContentPane().add(lblLocation);
        lblLocation.setBounds(10, 180, 372, 15);
        
        cmdSyncFrom.setText("Sync From");
        cmdSyncFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSyncFromActionPerformed(evt);
            }
        });
        
        getContentPane().add(cmdSyncFrom);
        cmdSyncFrom.setBounds(9, 252, 108, 25);
        
        cmdExit.setText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        
        getContentPane().add(cmdExit);
        cmdExit.setBounds(395, 53, 88, 25);
        
        cmdSyncTo.setText("Sync To");
        cmdSyncTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSyncToActionPerformed(evt);
            }
        });
        
        getContentPane().add(cmdSyncTo);
        cmdSyncTo.setBounds(119, 252, 108, 25);
        
        chkUpdate.setSelected(true);
        chkUpdate.setText("Update the states of database ");
        getContentPane().add(chkUpdate);
        chkUpdate.setBounds(10, 222, 225, 23);
        
    }//GEN-END:initComponents

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseClicked
    
    private void cmdSyncToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSyncToActionPerformed
        // TODO add your handling code here:
        SyncDataToSource();
    }//GEN-LAST:event_cmdSyncToActionPerformed
    
    private void cmdSyncFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSyncFromActionPerformed
        // TODO add your handling code here:
        SyncDataFromSource();
    }//GEN-LAST:event_cmdSyncFromActionPerformed
    
    private void cmbFromYearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFromYearItemStateChanged
        // TODO add your handling code here:
        try {
            int ToYear=Integer.parseInt((String)cmbFromYear.getSelectedItem())+1;
            txtToYear.setText(Integer.toString(ToYear));
            
            //============== Get Source and Destination db URLs =============//
            long nCompanyID = cmbCompanyModel.getCode((long) cmbCompany.getSelectedIndex());
            int tmpFromYear=Integer.parseInt((String)cmbFromYear.getSelectedItem());
            String sourceURL=clsFinYear.getSyncURL((int)nCompanyID,tmpFromYear);
            String destURL=clsFinYear.getDBURL((int)nCompanyID,tmpFromYear);
            lblLocation.setText(sourceURL);
            lblLocation.repaint();
            //===============================================================//
            
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmbFromYearItemStateChanged
    
    private void cmbCompanyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbCompanyItemStateChanged
        // TODO add your handling code here:
        SelCompanyID=EITLERPGLOBAL.getComboCode(cmbCompany);
        EITLERPGLOBAL.gCompanyID=SelCompanyID;
        GenerateYearCombo();
    }//GEN-LAST:event_cmbCompanyItemStateChanged
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar Bar;
    private javax.swing.JCheckBox chkUpdate;
    private javax.swing.JComboBox cmbCompany;
    private javax.swing.JComboBox cmbFromYear;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdSyncFrom;
    private javax.swing.JButton cmdSyncTo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblLocation;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtToYear;
    // End of variables declaration//GEN-END:variables
    
    
    private void SyncData() {
        SyncDataFromSource();
        SyncDataToSource();
    }
    
    private void SyncDataFromSource() {
        
        Bar.setMaximum(100);
        Bar.setMinimum(0);
        Bar.setValue(0);
        
        HashMap Tables=new HashMap();
        
        new Thread(){
            public void run() {
                try {
                    
                    cmdSyncFrom.setEnabled(false);
                    cmdSyncTo.setEnabled(false);
                    cmdExit.setEnabled(false);
                    
                    Connection tmpConn,srcConn,destConn;
                    Statement stTmp,stSrc,stDest,stDel;
                    ResultSet rsTmp,rsSrc,rsDest;
                    ResultSetMetaData rsInfo;
                    String Condition="";
                    int ColType=0,RecCount=0,RecPointer=0;
                    
                    lblTitle.setText("Synchronizing from Source");
                    lblTitle.repaint();
                    
                    //============== Get Source and Destination db URLs =============//
                    long nCompanyID = cmbCompanyModel.getCode((long) cmbCompany.getSelectedIndex());
                    int tmpFromYear=Integer.parseInt((String)cmbFromYear.getSelectedItem());
                    String currentURL=clsFinYear.getDBURL((int)nCompanyID,tmpFromYear);
                    String srcURL=clsFinYear.getSyncURL((int)nCompanyID,tmpFromYear);
                    //===============================================================//
                    
                    lblStatus.setText("Establishing Connection with target database");
                    lblStatus.repaint();
                    
                    tmpConn=data.getConn();
                    DatabaseMetaData dbInfo=tmpConn.getMetaData();
                    
                    srcConn=data.getConn(srcURL);
                    destConn=data.getConn(currentURL);
                    
                    destConn.setAutoCommit(false); //Turning AutoCommit off
                    srcConn.setAutoCommit(false);
                    
                    //====================== Gather Database Information ================//
                    String[] names = {"TABLE"};
                    HashMap Tables=new HashMap();
                    int Counter=0;
                    int PKCounter=0;
                    ResultSet tableNames = dbInfo.getTables(null,"%", "%", names);
                    
                    lblStatus.setText("Retrieving Database Information");
                    lblStatus.repaint();
                    
                    while (tableNames.next()) {
                        Counter++;
                        Tables.put(Integer.toString(Counter),tableNames.getString("TABLE_NAME"));
                        String TableName=tableNames.getString("TABLE_NAME");
                        
                        clsTableInfo ObjTable=new clsTableInfo();
                        ObjTable.TableName=TableName;
                        
                        ResultSet rsPrimary=dbInfo.getPrimaryKeys(null,null, TableName);
                        
                        PKCounter=0;
                        while(rsPrimary.next()) {
                            PKCounter++;
                            String Column=rsPrimary.getString("COLUMN_NAME");
                            
                            clsPrimaryKey ObjPrimaryKey=new clsPrimaryKey();
                            
                            ObjPrimaryKey.ColumnName=Column;
                            
                            //=========== Get the Primary Key Datatype =====//
                            rsTmp=data.getResult("SELECT "+Column+" FROM "+TableName+" LIMIT 1");
                            rsInfo=rsTmp.getMetaData();
                            
                            ObjPrimaryKey.ColumnType=rsInfo.getColumnType(1);
                            //=============================================//
                            
                            ObjTable.colPrimaryKeys.put(Integer.toString(PKCounter),ObjPrimaryKey);
                        }
                        
                        Tables.put(Integer.toString(Counter),ObjTable);
                    }
                    //=============== Done Gathering Database Information ==================//
                    
                    
                    System.gc();
                    
                    lblStatus.setText("Retrieving data from Tables");
                    
                    //=Step (1) Get the data from Source and Update it to the current Database //
                    for(int i=1;i<=Tables.size();i++) {
                        clsTableInfo ObjTable=(clsTableInfo)Tables.get(Integer.toString(i));
                        String TableName=ObjTable.TableName;
                        
                        String strSQL="SELECT COUNT(*) AS RECCOUNT FROM "+TableName+" WHERE CHANGED=1";
                        stSrc=srcConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                        rsSrc=stSrc.executeQuery(strSQL);
                        rsSrc.first();
                        
                        RecCount=rsSrc.getInt("RECCOUNT");
                        
                        rsSrc.close();
                        
                        lblStatus.setText("Table "+TableName);
                        lblStatus.repaint();
                        
                        
                        //===Setting up Progress Bar ====//
                        Bar.setMaximum(RecCount);
                        Bar.setMinimum(0);
                        Bar.setValue(0);
                        Bar.repaint();
                        //===============================//
                        
                        strSQL="SELECT * FROM "+TableName+" WHERE CHANGED=1";
                        stSrc=srcConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                        rsSrc=stSrc.executeQuery(strSQL);
                        rsSrc.first();
                        
                        rsInfo=rsSrc.getMetaData();
                        
                        if(rsSrc.getRow()>0) {
                            //Open Destination Recordset for insertion
                            stDest=destConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                            rsDest=stDest.executeQuery("SELECT * FROM "+TableName+" LIMIT 1");
                            
                            while(!rsSrc.isAfterLast()) {
                                
                                Bar.setValue(rsSrc.getRow());
                                Bar.repaint();
                                
                                //Check the Record Existence in destination
                                //If record exist - Remove it as source database is
                                //Dominant database
                                Condition="";
                                
                                //============= Building the Condition ===============//
                                for(int p=1;p<=ObjTable.colPrimaryKeys.size();p++) {
                                    clsPrimaryKey ObjPrimaryKey=(clsPrimaryKey)ObjTable.colPrimaryKeys.get(Integer.toString(p));
                                    
                                    String PKName=ObjPrimaryKey.ColumnName;
                                    ColType=ObjPrimaryKey.ColumnType;
                                    
                                    //Now based on the type we have to retrieve the value of field
                                    switch(ColType) {
                                        case -5: //Long
                                            Condition=Condition+" AND "+PKName+"="+rsSrc.getLong(PKName);
                                            break;
                                        case 4: //Integer,Small int
                                            Condition=Condition+" AND "+PKName+"="+rsSrc.getInt(PKName);
                                            break;
                                        case 5: //Integer,Small int
                                            Condition=Condition+" AND "+PKName+"="+rsSrc.getInt(PKName);
                                            break;
                                        case -6: //Integer,Small int
                                            Condition=Condition+" AND "+PKName+"="+rsSrc.getInt(PKName);
                                            break;
                                        case 16: //Boolean
                                            Condition=Condition+" AND "+PKName+"="+rsSrc.getShort(PKName);
                                            break;
                                        case 91: //Date
                                            Condition=Condition+" AND "+PKName+"="+rsSrc.getDate(PKName);
                                            break;
                                        case 8: //Double
                                            Condition=Condition+" AND "+PKName+"="+rsSrc.getDouble(PKName);
                                            break;
                                        case 6: //Float
                                            Condition=Condition+" AND "+PKName+"="+rsSrc.getFloat(PKName);
                                            break;
                                        case 12 ://Varchar
                                            Condition=Condition+" AND "+PKName+"='"+rsSrc.getString(PKName)+"'";
                                            break;
                                        case 1 ://char
                                            Condition=Condition+" AND "+PKName+"='"+rsSrc.getString(PKName)+"'";
                                            break;
                                        default : //Varchar
                                            Condition=Condition+" AND "+PKName+"='"+rsSrc.getString(PKName)+"'";
                                            break;
                                    } //Switch
                                }
                                //=============== Building Condition Completed =====================//
                                
                                if(!Condition.trim().equals("")) {
                                    Condition=" WHERE "+Condition.substring(5); //Removing 'AND' from begining of the statement
                                }
                                
                                
                                boolean RecordExist=false;
                                
                                
                                strSQL="SELECT COUNT(*) AS RECCOUNT FROM "+TableName+Condition;
                                
                                stDest=destConn.createStatement();
                                rsTmp=stDest.executeQuery(strSQL);
                                rsTmp.first();
                                
                                if(rsTmp.getRow()>0) {
                                    
                                    int ERecCount=rsTmp.getInt("RECCOUNT");
                                    
                                    if(ERecCount>0) {
                                        RecordExist=true; //Record in Destination database exist
                                        
                                        //Remove it
                                        strSQL="DELETE FROM "+TableName+" "+Condition;
                                        
                                        stDel=destConn.createStatement();
                                        stDel.executeUpdate(strSQL);
                                    }
                                }
                                
                                rsTmp.close();
                                //============= Record Existence and Removal Completed ===============//
                                
                                
                                //========== Insert Actual Record in destination database =============//
                                lblTitle.setText("Starting Insertion");
                                lblTitle.repaint();
                                
                                rsDest.moveToInsertRow();
                                
                                for(int f=1;f<=rsInfo.getColumnCount();f++) {
                                    //Now based on the type update the Fields
                                    ColType=rsInfo.getColumnType(f);
                                    switch(ColType) {
                                        case -5: //Long
                                            rsDest.updateLong(f,rsSrc.getLong(f));
                                            break;
                                        case 4: //Integer,Small int
                                            rsDest.updateInt(f,rsSrc.getInt(f));
                                            break;
                                        case 5: //Integer,Small int
                                            rsDest.updateInt(f,rsSrc.getInt(f));
                                            break;
                                        case -6: //Integer,Small int
                                            rsDest.updateInt(f,rsSrc.getInt(f));
                                            break;
                                        case 16: //Boolean
                                            rsDest.updateBoolean(f,rsSrc.getBoolean(f));
                                            break;
                                        case 91: //Date
                                            rsDest.updateDate(f,rsSrc.getDate(f));
                                            break;
                                        case 8: //Double
                                            rsDest.updateDouble(f,rsSrc.getDouble(f));
                                            break;
                                        case 6: //Float
                                            rsDest.updateFloat(f,rsSrc.getFloat(f));
                                            break;
                                        case 12 ://Varchar
                                            rsDest.updateString(f,rsSrc.getString(f));
                                            break;
                                        case 1 ://char
                                            rsDest.updateString(f,rsSrc.getString(f));
                                            break;
                                        default : //Varchar
                                            rsDest.updateString(f,rsSrc.getString(f));
                                            break;
                                    } //Switch
                                    
                                }
                                
                                //Now Explicitly set the Changed Flag to False
                                rsDest.updateBoolean("CHANGED",false);
                                rsDest.updateString("CHANGED_DATE",EITLERPGLOBAL.getCurrentDateDB());
                                rsDest.insertRow();
                                
                                //=====================================================================//
                                
                                //Read the Record and Update the destination
                                rsSrc.next();
                                
                            }
                            
                        }
                        
                    }
                    //=========================================================================//
                    
                    
                    //===============Updating the States of Source Database =============//
                    if(chkUpdate.isSelected()) {
                        lblTitle.setText("Updating States of database");
                        lblTitle.repaint();
                        
                        Bar.setMaximum(Tables.size());
                        Bar.setMinimum(0);
                        Bar.setValue(0);
                        Bar.repaint();
                        
                        for(int i=1;i<=Tables.size();i++) {
                            
                            Bar.setValue(i);
                            Bar.repaint();
                            
                            clsTableInfo ObjTable=(clsTableInfo)Tables.get(Integer.toString(i));
                            String TableName=ObjTable.TableName;
                            
                            lblStatus.setText("Updating "+TableName);
                            lblStatus.repaint();
                            
                            stSrc=srcConn.createStatement();
                            stSrc.executeUpdate("UPDATE "+TableName+" SET CHANGED=0 WHERE CHANGED=1");
                        }
                    }
                    //==================================================================//

                    
                    //Now Actually Update the data
                    srcConn.commit();
                    destConn.commit();
                    
                    lblTitle.setText("Idle");
                    lblStatus.setText("");
                    
                    Bar.setValue(0);
                    
                    cmdSyncFrom.setEnabled(true);
                    cmdSyncTo.setEnabled(true);
                    cmdExit.setEnabled(true);
                    
                    JOptionPane.showMessageDialog(null,"Process Completed successfully");
                    
                    
                }
                catch(Exception c) {
                    lblTitle.setText("Idle");
                    lblStatus.setText("");
                    
                    Bar.setValue(0);
                    
                    c.printStackTrace();
                    //JOptionPane.showMessageDialog(null,c.getMessage());
                    cmdSyncFrom.setEnabled(true);
                    cmdSyncTo.setEnabled(true);
                    cmdExit.setEnabled(true);
                    
                    JOptionPane.showMessageDialog(null,"Error occured while synchronizing. Error is \n"+c.getMessage());
                }
            }
        }.start();
        
        
    }
    
    private void SyncDataToSource() {
        
        Bar.setMaximum(100);
        Bar.setMinimum(0);
        Bar.setValue(0);
        
        HashMap Tables=new HashMap();
        
        new Thread(){
            public void run() {
                try {
                    
                    cmdSyncFrom.setEnabled(false);
                    cmdSyncTo.setEnabled(false);
                    cmdExit.setEnabled(false);
                    
                    Connection tmpConn,srcConn,destConn;
                    Statement stTmp,stSrc,stDest,stDel;
                    ResultSet rsTmp,rsSrc,rsDest;
                    ResultSetMetaData rsInfo;
                    String Condition="";
                    int ColType=0,RecCount=0,RecPointer=0;
                    
                    lblTitle.setText("Synchronizing To Source");
                    
                    //============== Get Source and Destination db URLs =============//
                    long nCompanyID = cmbCompanyModel.getCode((long) cmbCompany.getSelectedIndex());
                    int tmpFromYear=Integer.parseInt((String)cmbFromYear.getSelectedItem());
                    String currentURL=clsFinYear.getSyncURL((int)nCompanyID,tmpFromYear);
                    String srcURL=clsFinYear.getDBURL((int)nCompanyID,tmpFromYear);
                    //===============================================================//
                    
                    lblStatus.setText("Establishing Connection with target database");
                    lblStatus.repaint();
                    
                    tmpConn=data.getCreatedConn();
                    DatabaseMetaData dbInfo=tmpConn.getMetaData();
                    
                    srcConn=data.getConn(srcURL);
                    destConn=data.getConn(currentURL);
                    
                    destConn.setAutoCommit(false);
                    srcConn.setAutoCommit(false);
                                        
                    //====================== Gather Database Information ================//
                    String[] names = {"TABLE"};
                    HashMap Tables=new HashMap();
                    int Counter=0;
                    int PKCounter=0;
                    ResultSet tableNames = dbInfo.getTables(null,"%", "%", names);
                    
                    lblStatus.setText("Retrieving Database Information");
                    lblStatus.repaint();
                    
                    while (tableNames.next()) {
                        Counter++;
                        Tables.put(Integer.toString(Counter),tableNames.getString("TABLE_NAME"));
                        String TableName=tableNames.getString("TABLE_NAME");
                        
                        clsTableInfo ObjTable=new clsTableInfo();
                        ObjTable.TableName=TableName;
                        
                        ResultSet rsPrimary=dbInfo.getPrimaryKeys(null,null, TableName);
                        
                        PKCounter=0;
                        while(rsPrimary.next()) {
                            PKCounter++;
                            String Column=rsPrimary.getString("COLUMN_NAME");
                            
                            clsPrimaryKey ObjPrimaryKey=new clsPrimaryKey();
                            
                            ObjPrimaryKey.ColumnName=Column;
                            
                            //=========== Get the Primary Key Datatype =====//
                            rsTmp=data.getResult("SELECT "+Column+" FROM "+TableName+" LIMIT 1");
                            rsInfo=rsTmp.getMetaData();
                            
                            ObjPrimaryKey.ColumnType=rsInfo.getColumnType(1);
                            //=============================================//
                            
                            ObjTable.colPrimaryKeys.put(Integer.toString(PKCounter),ObjPrimaryKey);
                        }
                        
                        Tables.put(Integer.toString(Counter),ObjTable);
                    }
                    //=============== Done Gathering Database Information ==================//
                    
                    
                    System.gc();
                    
                    lblStatus.setText("Retrieving data from Tables");
                    
                    //=Step (1) Get the data from Source and Update it to the current Database //
                    for(int i=1;i<=Tables.size();i++) {
                        clsTableInfo ObjTable=(clsTableInfo)Tables.get(Integer.toString(i));
                        String TableName=ObjTable.TableName;
                        
                        String strSQL="SELECT COUNT(*) AS RECCOUNT FROM "+TableName+" WHERE CHANGED=1";
                        stSrc=srcConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                        rsSrc=stSrc.executeQuery(strSQL);
                        rsSrc.first();
                        
                        RecCount=rsSrc.getInt("RECCOUNT");
                        
                        rsSrc.close();
                        
                        lblStatus.setText("Table "+TableName);
                        lblStatus.repaint();
                        
                        
                        //===Setting up Progress Bar ====//
                        Bar.setMaximum(RecCount);
                        Bar.setMinimum(0);
                        Bar.setValue(0);
                        Bar.repaint();
                        //===============================//
                        
                        strSQL="SELECT * FROM "+TableName+" WHERE CHANGED=1";
                        stSrc=srcConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                        rsSrc=stSrc.executeQuery(strSQL);
                        rsSrc.first();
                        
                        rsInfo=rsSrc.getMetaData();
                        
                        if(rsSrc.getRow()>0) {
                            //Open Destination Recordset for insertion
                            stDest=destConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                            rsDest=stDest.executeQuery("SELECT * FROM "+TableName+" LIMIT 1");
                            
                            while(!rsSrc.isAfterLast()) {
                                
                                Bar.setValue(rsSrc.getRow());
                                Bar.repaint();
                                
                                //Check the Record Existence in destination
                                //If record exist - Remove it as source database is
                                //Dominant database
                                Condition="";
                                
                                //============= Building the Condition ===============//
                                for(int p=1;p<=ObjTable.colPrimaryKeys.size();p++) {
                                    clsPrimaryKey ObjPrimaryKey=(clsPrimaryKey)ObjTable.colPrimaryKeys.get(Integer.toString(p));
                                    
                                    String PKName=ObjPrimaryKey.ColumnName;
                                    ColType=ObjPrimaryKey.ColumnType;
                                    
                                    //Now based on the type we have to retrieve the value of field
                                    switch(ColType) {
                                        case -5: //Long
                                            Condition=Condition+" AND "+PKName+"="+rsSrc.getLong(PKName);
                                            break;
                                        case 4: //Integer,Small int
                                            Condition=Condition+" AND "+PKName+"="+rsSrc.getInt(PKName);
                                            break;
                                        case 5: //Integer,Small int
                                            Condition=Condition+" AND "+PKName+"="+rsSrc.getInt(PKName);
                                            break;
                                        case -6: //Integer,Small int
                                            Condition=Condition+" AND "+PKName+"="+rsSrc.getInt(PKName);
                                            break;
                                        case 16: //Boolean
                                            Condition=Condition+" AND "+PKName+"="+rsSrc.getShort(PKName);
                                            break;
                                        case 91: //Date
                                            Condition=Condition+" AND "+PKName+"="+rsSrc.getDate(PKName);
                                            break;
                                        case 8: //Double
                                            Condition=Condition+" AND "+PKName+"="+rsSrc.getDouble(PKName);
                                            break;
                                        case 6: //Float
                                            Condition=Condition+" AND "+PKName+"="+rsSrc.getFloat(PKName);
                                            break;
                                        case 12 ://Varchar
                                            Condition=Condition+" AND "+PKName+"='"+rsSrc.getString(PKName)+"'";
                                            break;
                                        case 1 ://char
                                            Condition=Condition+" AND "+PKName+"='"+rsSrc.getString(PKName)+"'";
                                            break;
                                        default : //Varchar
                                            Condition=Condition+" AND "+PKName+"='"+rsSrc.getString(PKName)+"'";
                                            break;
                                    } //Switch
                                }
                                //=============== Building Condition Completed =====================//
                                
                                if(!Condition.trim().equals("")) {
                                    Condition=" WHERE "+Condition.substring(5); //Removing 'AND' from begining of the statement
                                }
                                
                                
                                boolean RecordExist=false;
                                
                                
                                strSQL="SELECT COUNT(*) AS RECCOUNT FROM "+TableName+Condition;
                                
                                stDest=destConn.createStatement();
                                rsTmp=stDest.executeQuery(strSQL);
                                rsTmp.first();
                                
                                if(rsTmp.getRow()>0) {
                                    
                                    int ERecCount=rsTmp.getInt("RECCOUNT");
                                    
                                    if(ERecCount>0) {
                                        RecordExist=true; //Record in Destination database exist
                                        
                                        //Remove it
                                        strSQL="DELETE FROM "+TableName+" "+Condition;
                                        stDel=destConn.createStatement();
                                        stDel.executeUpdate(strSQL);
                                    }
                                }
                                
                                rsTmp.close();
                                //============= Record Existence and Removal Completed ===============//
                                
                                
                                //========== Insert Actual Record in destination database =============//
                                lblTitle.setText("Starting Insertion");
                                lblTitle.repaint();
                                
                                rsDest.moveToInsertRow();
                                
                                for(int f=1;f<=rsInfo.getColumnCount();f++) {
                                    //Now based on the type update the Fields
                                    ColType=rsInfo.getColumnType(f);
                                    switch(ColType) {
                                        case -5: //Long
                                            rsDest.updateLong(f,rsSrc.getLong(f));
                                            break;
                                        case 4: //Integer,Small int
                                            rsDest.updateInt(f,rsSrc.getInt(f));
                                            break;
                                        case 5: //Integer,Small int
                                            rsDest.updateInt(f,rsSrc.getInt(f));
                                            break;
                                        case -6: //Integer,Small int
                                            rsDest.updateInt(f,rsSrc.getInt(f));
                                            break;
                                        case 16: //Boolean
                                            rsDest.updateBoolean(f,rsSrc.getBoolean(f));
                                            break;
                                        case 91: //Date
                                            rsDest.updateDate(f,rsSrc.getDate(f));
                                            break;
                                        case 8: //Double
                                            rsDest.updateDouble(f,rsSrc.getDouble(f));
                                            break;
                                        case 6: //Float
                                            rsDest.updateFloat(f,rsSrc.getFloat(f));
                                            break;
                                        case 12 ://Varchar
                                            rsDest.updateString(f,rsSrc.getString(f));
                                            break;
                                        case 1 ://char
                                            rsDest.updateString(f,rsSrc.getString(f));
                                            break;
                                        default : //Varchar
                                            rsDest.updateString(f,rsSrc.getString(f));
                                            break;
                                    } //Switch
                                    
                                }
                                
                                //Now Explicitly set the Changed Flag to False
                                    rsDest.updateBoolean("CHANGED",false);
                                    rsDest.updateString("CHANGED_DATE",EITLERPGLOBAL.getCurrentDateDB());
                                    rsDest.insertRow();
                                 //=====================================================================//
                                //Read the Record and Update the destination
                                rsSrc.next();
                                
                            }
                            
                        }
                        
                    }
                    //=========================================================================//
                    
                    //===============Updating the States of Source Database =============//
                    if(chkUpdate.isSelected()) {
                        lblTitle.setText("Updating States of database");
                        lblTitle.repaint();
                        
                        Bar.setMaximum(Tables.size());
                        Bar.setMinimum(0);
                        Bar.setValue(0);
                        Bar.repaint();
                        
                        for(int i=1;i<=Tables.size();i++) {
                            
                            Bar.setValue(i);
                            Bar.repaint();
                            
                            clsTableInfo ObjTable=(clsTableInfo)Tables.get(Integer.toString(i));
                            String TableName=ObjTable.TableName;
                            
                            lblStatus.setText("Updating "+TableName);
                            lblStatus.repaint();
                            
                            stSrc=srcConn.createStatement();
                            stSrc.executeUpdate("UPDATE "+TableName+" SET CHANGED=0 WHERE CHANGED=1");
                        }
                    }
                    //==================================================================//

        
                    //Now Actually Update the database
                    srcConn.commit();
                    destConn.commit();
                    
                    lblTitle.setText("Idle");
                    lblStatus.setText("");
                    
                    Bar.setValue(0);
                    
                    cmdSyncFrom.setEnabled(true);
                    cmdSyncTo.setEnabled(true);
                    cmdExit.setEnabled(true);
                    
                    JOptionPane.showMessageDialog(null,"Process Completed Successfully");
                    
                }
                catch(Exception c) {
                    lblTitle.setText("Idle");
                    lblStatus.setText("");
                    
                    Bar.setValue(0);
                    
                    c.printStackTrace();
                    //JOptionPane.showMessageDialog(null,c.getMessage());
                    
                    cmdSyncFrom.setEnabled(true);
                    cmdSyncTo.setEnabled(true);
                    cmdExit.setEnabled(true);
                    
                    JOptionPane.showMessageDialog(null,"Error occured while synchronizing. Error is \n"+c.getMessage());
                }
            }
        }.start();
        
    
        
        
    }
    
    
    private void GenerateCombo() {
        HashMap List=new HashMap();
        clsCompany ObjCompany;
        
        cmbCompany.setModel(cmbCompanyModel);
        cmbCompany.removeAllItems();  //Clearing previous contents
        
        List=clsCompany.getList("");
        
        for(int i=1;i<=List.size();i++) {
            ObjCompany=(clsCompany) List.get(Integer.toString(i));
            
            ComboData aData=new ComboData();
            
            aData.Text=(String)ObjCompany.getAttribute("COMPANY_NAME").getObj();
            aData.Code=(long)ObjCompany.getAttribute("COMPANY_ID").getVal();
            cmbCompanyModel.addElement(aData);
            
        }
    }
    
    private void GenerateYearCombo() {
        HashMap List=new HashMap();
        
        cmbFromYear.setModel(cmbFromModel);
        cmbFromYear.removeAllItems();
        
        List=clsFinYear.getList(" WHERE COMPANY_ID="+SelCompanyID);
        
        for(int i=1;i<=List.size();i++) {
            clsFinYear ObjYear =(clsFinYear) List.get(Integer.toString(i));
            
            ComboData cmbData=new ComboData();
            cmbData.Text=Integer.toString((int)ObjYear.getAttribute("YEAR_FROM").getVal());
            cmbData.Code=(int)ObjYear.getAttribute("YEAR_FROM").getVal();
            cmbData.strCode =Integer.toString((int)ObjYear.getAttribute("YEAR_FROM").getVal());
            cmbFromModel.addElement(cmbData);
        }
    }
    
    
}
