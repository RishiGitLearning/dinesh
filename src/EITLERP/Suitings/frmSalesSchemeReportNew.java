/*
 * frmSalesSchemeReport.java
 *
 * Created on December 20, 2013, 12:14 PM
 */

package EITLERP.Suitings;

import java.util.HashMap;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.net.URL;
import javax.swing.JOptionPane;

import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.data;
import EITLERP.ComboData;
import EITLERP.clsUser;
/**
 *
 * @author  Vivek Kumar
 */
public class frmSalesSchemeReportNew extends javax.swing.JApplet {
    
    EITLComboModel schemeNameModel;
    EITLTableModel DataModel;
    
    private boolean printReport=false;
    private boolean schemeClosed=false;
    
    
    /** Initializes the applet frmKhakiReport */
    public void init() {
        initComponents();
        setSize(680,480);
        disabled();
        generateSchemeNameCombo();
        formatGrid();
        //processARCreditNoteInput(7,"2013");
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPopupMenu = new javax.swing.JPopupMenu();
        jMenuItemSummary = new javax.swing.JMenuItem();
        jMenuItemDetail = new javax.swing.JMenuItem();
        jMenuItemEligibility = new javax.swing.JMenuItem();
        jMenuItemSalesReport = new javax.swing.JMenuItem();
        jMenuItemAllIndiaSalesReport = new javax.swing.JMenuItem();
        jMenuItemCreditNoteInput = new javax.swing.JMenuItem();
        jMenuItemDetailwithCrNote = new javax.swing.JMenuItem();
        cmbSchemeName = new javax.swing.JComboBox();
        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        lblStatus = new javax.swing.JLabel();
        cmdReport = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtBookCode = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtMainCode = new javax.swing.JTextField();
        txtDraftNo = new javax.swing.JTextField();
        txtDraftDate = new javax.swing.JTextField();
        txtLinkSrNo = new javax.swing.JTextField();
        txtDraftSrNo = new javax.swing.JTextField();
        btnData = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtReasonCode = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();

        jMenuItemSummary.setText("Summary Report");
        jMenuItemSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSummaryActionPerformed(evt);
            }
        });

        jPopupMenu.add(jMenuItemSummary);

        jMenuItemDetail.setText("Detail Report");
        jMenuItemDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDetailActionPerformed(evt);
            }
        });

        jPopupMenu.add(jMenuItemDetail);

        jMenuItemEligibility.setText("Eligiblity Report");
        jMenuItemEligibility.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEligibilityActionPerformed(evt);
            }
        });

        jPopupMenu.add(jMenuItemEligibility);

        jMenuItemSalesReport.setText("Sales Report");
        jMenuItemSalesReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSalesReportActionPerformed(evt);
            }
        });

        jPopupMenu.add(jMenuItemSalesReport);

        jMenuItemAllIndiaSalesReport.setText("All India Sales");
        jMenuItemAllIndiaSalesReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAllIndiaSalesReportActionPerformed(evt);
            }
        });

        jPopupMenu.add(jMenuItemAllIndiaSalesReport);

        jMenuItemCreditNoteInput.setText("Credit Note Input");
        jMenuItemCreditNoteInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCreditNoteInputActionPerformed(evt);
            }
        });

        jPopupMenu.add(jMenuItemCreditNoteInput);

        jMenuItemDetailwithCrNote.setText("Detail Report CrNote");
        jMenuItemDetailwithCrNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDetailwithCrNoteActionPerformed(evt);
            }
        });

        jPopupMenu.add(jMenuItemDetailwithCrNote);

        getContentPane().setLayout(null);

        cmbSchemeName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSchemeNameActionPerformed(evt);
            }
        });

        getContentPane().add(cmbSchemeName);
        cmbSchemeName.setBounds(10, 40, 450, 24);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText("SUITINGS SALES SCHEME REPORT");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(10, 0, 680, 25);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 70, 630, 160);

        lblStatus.setFont(new java.awt.Font("Dialog", 1, 14));
        lblStatus.setForeground(new java.awt.Color(0, 51, 255));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(10, 350, 450, 20);

        cmdReport.setText("View Report");
        cmdReport.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdReport.setEnabled(false);
        cmdReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdReportActionPerformed(evt);
            }
        });

        getContentPane().add(cmdReport);
        cmdReport.setBounds(10, 240, 140, 25);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Book Code");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(330, 240, 120, 20);

        getContentPane().add(txtBookCode);
        txtBookCode.setBounds(470, 240, 160, 20);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Main Code");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(330, 260, 120, 20);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Draft No");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(330, 280, 120, 20);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Draft Date");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(330, 300, 120, 20);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Link Sr.No");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(330, 320, 120, 20);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Draft Sr.No");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(330, 340, 120, 20);

        getContentPane().add(txtMainCode);
        txtMainCode.setBounds(470, 260, 160, 20);

        getContentPane().add(txtDraftNo);
        txtDraftNo.setBounds(470, 280, 160, 20);

        getContentPane().add(txtDraftDate);
        txtDraftDate.setBounds(470, 300, 160, 20);

        getContentPane().add(txtLinkSrNo);
        txtLinkSrNo.setBounds(470, 320, 160, 20);

        getContentPane().add(txtDraftSrNo);
        txtDraftSrNo.setBounds(470, 340, 160, 20);

        btnData.setText("GenerateCr.Data");
        btnData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDataActionPerformed(evt);
            }
        });

        getContentPane().add(btnData);
        btnData.setBounds(380, 390, 250, 25);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Reason Code");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(330, 360, 120, 20);

        getContentPane().add(txtReasonCode);
        txtReasonCode.setBounds(470, 360, 160, 20);

        getContentPane().add(jLabel8);
        jLabel8.setBounds(420, 430, 150, 15);

    }//GEN-END:initComponents

    private void btnDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDataActionPerformed

        int schemeId=EITLERPGLOBAL.getComboCode(cmbSchemeName);
        
        try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            ResultSet rsScheme=stmt.executeQuery("SELECT SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+schemeId);
            rsScheme.first();
            String seasonId=rsScheme.getString("SCHEME_SEASON_ID");
        
            processCreditNoteInputPara(schemeId, seasonId);
            
            jLabel8.setText(data.getStringValueFromDB("SELECT MAX(SCH_LEGACY_NO) FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID='"+schemeId+"'"));
           // processCNVOUCHER(schemeId);
        }catch(Exception e){}
        
    }//GEN-LAST:event_btnDataActionPerformed

    private void jMenuItemDetailwithCrNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDetailwithCrNoteActionPerformed
 if(printReport) new Thread(){
            public void run(){
                if(!printDetailWithCrNoteReport(EITLERPGLOBAL.getComboCode(cmbSchemeName)))
                    JOptionPane.showMessageDialog(frmSalesSchemeReportNew.this,"Report Not Generated.", "ERROR",JOptionPane.ERROR_MESSAGE);
            }
        }.start();
    }//GEN-LAST:event_jMenuItemDetailwithCrNoteActionPerformed

    private void jMenuItemAllIndiaSalesReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAllIndiaSalesReportActionPerformed
        if(printReport)new Thread(){
            public void run(){
                String schemeName=EITLERPGLOBAL.getCombostrCode(cmbSchemeName);
                
                if(schemeName.contains("KHAKI")){
                    printSalesReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),6);
                }else if(schemeName.contains("TWEED")){
                    printSalesReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),6);
                }else if(schemeName.contains("RETAILER'S")){
                    printSalesReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),8);
                    
                     }else if(schemeName.contains("SHIRTING_WHOLESALER")){
                    printSalesReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),8);
                 
                } else if(schemeName.contains("SHIRTING_RETAILERS")){
                    printSalesReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),8);
                    
                    
                }else if(schemeName.contains("SQL")){
                    printSalesReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),10);
                }else if(schemeName.contains("SPL")){
                    printSalesReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),12);
                }else if(schemeName.contains("DHANVARSHA")){
                    printSalesReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),15);
              
                  }else if(schemeName.contains("SCHEME_")){
                    printSalesReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),15);
              
                }else if(schemeName.contains("ASR")){
                    //printSalesReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),3);
                }
            }
        }.start();
    }//GEN-LAST:event_jMenuItemAllIndiaSalesReportActionPerformed

    private void jMenuItemSalesReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSalesReportActionPerformed
        if(printReport)new Thread(){
            public void run(){
                String schemeName=EITLERPGLOBAL.getCombostrCode(cmbSchemeName);
                
                if(schemeName.contains("KHAKI")){
                    printSalesReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),5);                    
                }else if(schemeName.contains("RETAILER'S")){
                    printSalesReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),7);  
                    
                      }else if(schemeName.contains("SHIRTING_RETAILER")){
                    printSalesReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),7);    
                }else if(schemeName.contains("SHIRTING_WHOLESALER")){
                    printSalesReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),7);    
                    
                       
                    
                    
                    
                }else if(schemeName.contains("TWEED")){
                    printSalesReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),5);                    
                }else if(schemeName.contains("SQL")){
                    printSalesReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),9);                    
                }else if(schemeName.contains("SPL")){
                    printSalesReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),11);
                }else if(schemeName.contains("DHANVARSHA")){
                    printSalesReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),14);    
                }else if(schemeName.contains("SCHEME_")){
                    printSalesReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),14);                    
         
                }else if(schemeName.contains("ASR")){
                    //printSalesReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),3);
                }
            }
        }.start();
    }//GEN-LAST:event_jMenuItemSalesReportActionPerformed
    
    private void jMenuItemSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSummaryActionPerformed
        if(printReport) new Thread(){
            public void run(){
                if(!printSummaryReport(EITLERPGLOBAL.getComboCode(cmbSchemeName)))
                    JOptionPane.showMessageDialog(frmSalesSchemeReportNew.this,"Report Not Generated.", "ERROR",JOptionPane.ERROR_MESSAGE);
            }
        }.start();
    }//GEN-LAST:event_jMenuItemSummaryActionPerformed
    
    private void jMenuItemCreditNoteInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCreditNoteInputActionPerformed
        if(printReport) new Thread(){
            public void run(){
                if(schemeClosed)
                    if(!printCreditNoteInputReport(EITLERPGLOBAL.getComboCode(cmbSchemeName)))
                        JOptionPane.showMessageDialog(frmSalesSchemeReportNew.this,"Report Not Generated.", "ERROR",JOptionPane.ERROR_MESSAGE);
            }
        }.start();
    }//GEN-LAST:event_jMenuItemCreditNoteInputActionPerformed
    
    private void jMenuItemDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDetailActionPerformed
        if(printReport) new Thread(){
            public void run(){
                if(!printDetailReport(EITLERPGLOBAL.getComboCode(cmbSchemeName)))
                    JOptionPane.showMessageDialog(frmSalesSchemeReportNew.this,"Report Not Generated.", "ERROR",JOptionPane.ERROR_MESSAGE);
            }
        }.start();
    }//GEN-LAST:event_jMenuItemDetailActionPerformed
    
    private void jMenuItemEligibilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEligibilityActionPerformed
        if(printReport)new Thread(){
            public void run(){
                String schemeName=EITLERPGLOBAL.getCombostrCode(cmbSchemeName);
                
                if(schemeName.contains("KHAKI")){
                    printEligiblityCheckReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),1);
                }else if(schemeName.contains("RETAILER'S")){
                    printEligiblityCheckReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),2);
                    
                     }else if(schemeName.contains("SHIRTING_RETAILER")){
                    printEligiblityCheckReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),2);
              }else if(schemeName.contains("SHIRTING_WHOLESALER")){
                    printEligiblityCheckReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),2);
             
                      
                    
                    
                    
                }else if(schemeName.contains("TWEED")){
                    printEligiblityCheckReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),1);
                }else if(schemeName.contains("SQL")){
                    printEligiblityCheckReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),3);
                }else if(schemeName.contains("SPL")){
                    printEligiblityCheckReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),3);
                }else if(schemeName.contains("DHANVARSHA")){
                    printEligiblityCheckReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),13);
                }else if(schemeName.contains("SCHEME_")){
                    printEligiblityCheckReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),13);
                }else if(schemeName.contains("ASR")){
                    //printEligiblityCheckReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),3);
                }
            }
        }.start();
    }//GEN-LAST:event_jMenuItemEligibilityActionPerformed
    
    private void cmdReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdReportActionPerformed
        jPopupMenu.show(cmdReport, 0, 25);
    }//GEN-LAST:event_cmdReportActionPerformed
    
    private void cmbSchemeNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSchemeNameActionPerformed
        if(EITLERPGLOBAL.getComboCode(cmbSchemeName)!=0){
            formatGrid();
            try{
                ResultSet rs=data.getResult("SELECT * FROM SALES.D_SAL_SCHEME_SLAB WHERE SLAB_SCHEME_ID="+EITLERPGLOBAL.getComboCode(cmbSchemeName) +" ORDER BY SLAB_SR_NO,SLAB_PARTY_CODE,SR_NO");
                if(rs.getRow()>0){
                    while(!rs.isAfterLast()){
                        Object[] rowData=new Object[8];
                        rowData[0]=rs.getString("SLAB_SR_NO");
                        rowData[1]=rs.getString("SLAB_PARTY_CODE");
                        rowData[2]=EITLERPGLOBAL.formatDate(rs.getString("SLAB_FROM_DATE"));
                        rowData[3]=EITLERPGLOBAL.formatDate(rs.getString("SLAB_TO_DATE"));
                        rowData[4]=rs.getString("SLAB_FROM");
                        rowData[5]=rs.getString("SLAB_TO");
                        rowData[6]=rs.getString("SLAB_OUTPUT");
                        rowData[7]=rs.getString("SLAB_OUTPUT_UNIT");
                        
                        DataModel.addRow(rowData);
                        rs.next();
                    }
                    rs.close();
                }
                
                if(data.getBoolValueFromDB("SELECT SCHEME_CLOSED FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+EITLERPGLOBAL.getComboCode(cmbSchemeName))){
                    printReport=true;
                    schemeClosed=true;
                    cmdReport.setEnabled(true);
                    cmbSchemeName.setEnabled(true);
                    if(EITLERPGLOBAL.gUserDeptID == 76 || EITLERPGLOBAL.gUserDeptID == 0 || EITLERPGLOBAL.gUserDeptID == 4){
                        enabled();  
                        setField();
                    }
                }else {
                    disabled();
                    lblStatus.setText("Processing ...");
                    cmbSchemeName.setEnabled(false);
                    cmdReport.setEnabled(false);
                    printReport=false;
                    schemeClosed=false;
                    
                    new Thread(){
                        public void run(){
                            if(processScheme(EITLERPGLOBAL.getComboCode(cmbSchemeName))){
                                cmdReport.setEnabled(true);
                                cmbSchemeName.setEnabled(true);
                                lblStatus.setText("Finished ...");
                            }else {
                                cmbSchemeName.setEnabled(true);
                                lblStatus.setText("Finished ...");
                                JOptionPane.showMessageDialog(frmSalesSchemeReportNew.this,"Scheme Not Processed.", "ERROR",JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }.start();
                }
                
            }catch(SQLException sqe){sqe.printStackTrace();}
        }
    }//GEN-LAST:event_cmbSchemeNameActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnData;
    private javax.swing.JComboBox cmbSchemeName;
    private javax.swing.JButton cmdReport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuItem jMenuItemAllIndiaSalesReport;
    private javax.swing.JMenuItem jMenuItemCreditNoteInput;
    private javax.swing.JMenuItem jMenuItemDetail;
    private javax.swing.JMenuItem jMenuItemDetailwithCrNote;
    private javax.swing.JMenuItem jMenuItemEligibility;
    private javax.swing.JMenuItem jMenuItemSalesReport;
    private javax.swing.JMenuItem jMenuItemSummary;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable table;
    private javax.swing.JTextField txtBookCode;
    private javax.swing.JTextField txtDraftDate;
    private javax.swing.JTextField txtDraftNo;
    private javax.swing.JTextField txtDraftSrNo;
    private javax.swing.JTextField txtLinkSrNo;
    private javax.swing.JTextField txtMainCode;
    private javax.swing.JTextField txtReasonCode;
    // End of variables declaration//GEN-END:variables
    
    private boolean processScheme(int schemeId){
        String schemeName=EITLERPGLOBAL.getCombostrCode(cmbSchemeName);
        
        if(schemeName.contains("KHAKI")){
            return processKhakiScheme(schemeId);
        }else if(schemeName.contains("ALLRETAILER'S")){
            return processRetailerScheme(schemeId);
        }else if(schemeName.contains("JSBK")){
            return processJSBKScheme(schemeId);
            
        }else if(schemeName.contains("SHIRTING_RETAILERS")){
            return processSHIRTING_RETAILERScheme(schemeId);
        
        }else if(schemeName.contains("SHIRTING_WHOLESALER")){
            return processSHIRTING_WHOLESALERScheme(schemeId);
        
     
            
        }else if(schemeName.contains("NORTH")){
            return processNORTHScheme(schemeId);
       }else if(schemeName.contains("TWEED")){
            return processTWEEDScheme(schemeId);
       }else if(schemeName.contains("SQL")){
            return processSQLScheme(schemeId);
        }else if(schemeName.contains("SPL")){
            return processSPLScheme(schemeId);
        }else if(schemeName.contains("VOUCHER")){
            return processCNVOUCHER(schemeId);
        }else if(schemeName.contains("ABD")){
            return processABDScheme(schemeId);
        }else if(schemeName.contains("BONANZA")){
            return processBONANZAScheme(schemeId);
        }else if(schemeName.contains("DHANVARSHA")){
            return processDHANVARSHAScheme(schemeId);
        }else if(schemeName.contains("SCHEME_")){
            return processS17Scheme(schemeId);
            
        }else if(schemeName.contains("ASR")){
            return processASRScheme(schemeId);
        }else{
            return false;
        }
    }
    
    private boolean printDetailReport(int schemeId) {
        String schemeName=EITLERPGLOBAL.getCombostrCode(cmbSchemeName);
        
        if(schemeName.contains("KHAKI")){
            return printKhakiDetailReport(schemeId);
        }else if(schemeName.contains("TWEED")){
            return printRetailerDetailReport(schemeId);
        }else if(schemeName.contains("ABD")){
            return printRetailerDetailReport(schemeId);
        }else if(schemeName.contains("BONANZA")){
            return printRetailerDetailReport(schemeId);
          
                 }else if(schemeName.contains("SHIRTING_RETAILERS")){
            return printRetailerDetailReport(schemeId);
     }else if(schemeName.contains("SHIRTING_WHOLESALER")){
            return printRetailerDetailReport(schemeId);


            
            
        }else if(schemeName.contains("RETAILER'S")){
            return printRetailerDetailReport(schemeId);
        }else if(schemeName.contains("SQL")){
            return printSQLSchemeDetailReport(schemeId);
        }else if(schemeName.contains("SPL")){
            return printSQLSchemeDetailReport(schemeId);
        }else if(schemeName.contains("DHANVARSHA")){
            return printDHANVARSHADetailReport(schemeId);
     //   }else if(schemeName.contains("SCHEME_")){
         //   return printS17SchemeDetailReport(schemeId);
        }else if(schemeName.contains("ASR")){
            return printASRDetailReport(schemeId);
        }else{
            return false;
        }
    }
    
    
    private boolean printDetailWithCrNoteReport(int schemeId) {
        String schemeName=EITLERPGLOBAL.getCombostrCode(cmbSchemeName);
        
        if(schemeName.contains("RETAILER'S")){
            return printRetailerDetailWithCrNoteReport(schemeId);
        }else if(schemeName.contains("ABD")){
            return printRetailerDetailWithCrNoteReport(schemeId);
        }else if(schemeName.contains("BONANZA")){
            return printBonanzaDetailWithCrNoteReport(schemeId);
            
            
            }else if(schemeName.contains("SHIRTING_RETAILERS")){
            return printRetailerDetailWithCrNoteReport(schemeId);
        }else if(schemeName.contains("SHIRTING_WHOLESALER")){
            return printRetailerDetailWithCrNoteReport(schemeId);
     
        
        
            
            
            
          }else if(schemeName.contains("SQL")){
            return printSQLSchemeDetailWithCrNoteReport(schemeId);
      }else if(schemeName.contains("SPL")){
            return printSQLSchemeDetailWithCrNoteReport(schemeId);
        }else if(schemeName.contains("DHANVARSHA")){
            return printDHANVARSHADetailWithCrNoteReport(schemeId);
        }else if(schemeName.contains("SCHEME_")){
            return printSCHEMES17DetailWithCrNoteReport(schemeId);
        }else{
            return false;
        }
    }
    
    
    
    private boolean printSummaryReport(int schemeId) {
        String schemeName=EITLERPGLOBAL.getCombostrCode(cmbSchemeName);
        
        if(schemeName.contains("KHAKI")){
            return printOldSummaryReport(schemeId);
        }else if(schemeName.contains("TWEED")){
            return printOldSummaryReport(schemeId);
        }else if(schemeName.contains("ABD")){
            return printOldSummaryReport(schemeId);
        }else if(schemeName.contains("BONANZA")){
            return printALLSummaryReport(schemeId);
        }else if(schemeName.contains("RETAILER'S")){
            return printOldSummaryReport(schemeId);
            
            }else if(schemeName.contains("SHIRTING_RETAILERS")){
            return printOldSummaryReport(schemeId);
        
        }else if(schemeName.contains("SHIRTING_WHOLESALER")){
            return printOldSummaryReport(schemeId);

  
            
            
        }else if(schemeName.contains("SQL")){
            return printOldSummaryReport(schemeId);
        }else if(schemeName.contains("SPL")){
            return printOldSummaryReport(schemeId);
        }else if(schemeName.contains("DHANVARSHA")){
            return printOldSummaryReport(schemeId);
        }else if(schemeName.contains("SCHEME_")){
            return printOldSummaryReport(schemeId);
        }else if(schemeName.contains("NEW")){
            return printOldSummaryReport(schemeId);
        }else if(schemeName.contains("ASR")){
            return printASRSummaryReport(schemeId);
        }else{
            return false;
        }
    }    
    
    private boolean printCreditNoteInputReport(int schemeId) {
        String schemeName=EITLERPGLOBAL.getCombostrCode(cmbSchemeName);
        
        if(schemeName.contains("ASR")){
            return printASRCreditNoteInputReport(schemeId);
         }else if(schemeName.contains("BONANZA")){
          return printCreditNoteInputBonzReport(schemeId); 
        }else if(schemeName.contains("DHANVARSHA")){
          return printCreditNoteInputBonzReport(schemeId); 
        }else{
            return printCreditNoteInputOldReport(schemeId);
        }
    }
    
    
    private void printEligiblityCheckReport(int schemeId, int reportId){
        try {
            
            URL reportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/rptSuitingsSalesSchemeReport.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&SCHEME_ID="+schemeId+"&REPORT_ID="+reportId+"&RUN_BY="+clsUser.getUserName(2,EITLERPGLOBAL.gNewUserID)+"&RUN_DATE="+EITLERPGLOBAL.getCurrentDate()+" "+data.getStringValueFromDB("SELECT CURTIME() FROM DUAL").substring(0,5));
            EITLERPGLOBAL.loginContext.showDocument(reportFile,"_blank");
            
            // if(schemeId==4 || schemeId==6) printSQLDetailReport(schemeId,4);
            
        }catch(Exception e) {
            JOptionPane.showMessageDialog(this,"File error "+e.getMessage(),"FILE ERROR",JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    
    private void printSalesReport(int schemeId, int reportId){
        try {   
            
            URL reportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/rptSuitingsSalesSchemeReport.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&SCHEME_ID="+schemeId+"&REPORT_ID="+reportId+"&RUN_BY="+clsUser.getUserName(2,EITLERPGLOBAL.gNewUserID)+"&RUN_DATE="+EITLERPGLOBAL.getCurrentDate()+" "+data.getStringValueFromDB("SELECT CURTIME() FROM DUAL").substring(0,5));
            System.out.println(reportFile);
            EITLERPGLOBAL.loginContext.showDocument(reportFile,"_blank");
                                    
        }catch(Exception e) {
            JOptionPane.showMessageDialog(this,"File error "+e.getMessage(),"FILE ERROR",JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    
    
    private boolean printOldSummaryReport(int schemeId) {
        try{
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            
            objData.AddColumn("SEASON_ID");
            objData.AddColumn("SCHEME_NAME");
            objData.AddColumn("SCHEME_PERIOD");
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("STATION");
            objData.AddColumn("GROSS_QUANTITY");
            objData.AddColumn("NET_QUANTITY");
            objData.AddColumn("NET_AMOUNT");
            objData.AddColumn("DISC_AMOUNT");
            
            String str="SELECT SCH_SCHEME_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_TOTAL_GR_LIFT_QTY,SCH_TOTAL_NET_LIFT_QTY,SCH_TOTAL_INV_AMOUNT,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT FROM SALES.D_SAL_SCHEME_HEADER,SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID ="+schemeId+" AND SCH_ELIGIBILITY='Y' AND SCHEME_ID=SCH_SCHEME_ID AND SCHEME_SEASON_ID=SCH_SEASON_ID ORDER BY SCH_PARTY_CODE";
            
            ResultSet  rsTemp =data.getResult(str);
            int counter=1;
            while(!rsTemp.isAfterLast()){
                TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                
                objRow.setValue("SR_NO", Integer.toString(counter++));
                objRow.setValue("SEASON_ID",rsTemp.getString("SCH_SEASON_ID"));
                objRow.setValue("SCHEME_NAME",rsTemp.getString("SCHEME_NAME"));
                objRow.setValue("SCHEME_PERIOD","("+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_START"))+"-"+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_END"))+")");
                objRow.setValue("PARTY_CODE", rsTemp.getString("SCH_PARTY_CODE"));
                objRow.setValue("PARTY_NAME", rsTemp.getString("SCH_PARTY_NAME"));
                objRow.setValue("STATION", rsTemp.getString("SCH_CITY"));
                objRow.setValue("GROSS_QUANTITY", rsTemp.getString("SCH_TOTAL_GR_LIFT_QTY"));
                objRow.setValue("NET_QUANTITY", rsTemp.getString("SCH_TOTAL_NET_LIFT_QTY"));
                objRow.setValue("NET_AMOUNT", rsTemp.getString("SCH_TOTAL_INV_AMOUNT"));
                objRow.setValue("DISC_AMOUNT", rsTemp.getString("SCH_DISC_AMOUNT"));
                
                objData.AddRow(objRow);
                rsTemp.next();
              }
            
            HashMap parameter=new HashMap();
            parameter.put("RUN_BY", clsUser.getUserName(2,EITLERPGLOBAL.gNewUserID));
            parameter.put("RUN_TIME", data.getStringValueFromDB("SELECT CURTIME() FROM DUAL").substring(0,8));
            
            EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/" +
            "" +
            "rptSummaryReport.rpt",parameter,objData);
            rsTemp.close();
            
            return true;
        }catch(SQLException e) {
            e.printStackTrace();
            return false;
        }
        
    }
    
    private boolean processKhakiScheme(int schemeId){
        try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            ResultSet rsScheme=stmt.executeQuery("SELECT SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+schemeId);
            rsScheme.first();
            String seasonId=rsScheme.getString("SCHEME_SEASON_ID");
            
    InvoiceTable(schemeId);

            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeDetailQry="INSERT INTO SALES.D_SAL_SCHEME_DETAIL(SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_FLAG,SCD_UNIT_CODE,SCD_GROSS_QTY,SCD_GROSS_AMOUNT,SCD_NET_QTY,SCD_NET_AMOUNT,SCD_AGENT_LAST_INVOICE,SCD_AGENT_SR_NO,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_INV_RATE,SCD_PL_RATE,SCD_QUALITY_ELIGIBLE,SCD_DISC_PER_MTR_RATE,SCD_DISC_PERCENT,SCD_DISC_AMOUNT,SCD_GATE_PASS_NO,SCD_GATEPASS_DATE,SCD_BALE_NO) " +
            "SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO,B.PATTERN_CODE AS SHADE ,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,0,'',0,0,0,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO " +
            "FROM SALES.TMP_SAL_INVOICE_HEADER A,SALES.TMP_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D,SALES.D_SAL_SCHEME_MASTER E " +
         /* "WHERE A.INVOICE_TYPE =1 AND A.INVOICE_DATE = B.INVOICE_DATE AND A.WAREHOUSE_CODE =1 AND A.QUALITY_INDICATOR IN (0,3) AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE >= DATE_FROM  AND A.INVOICE_DATE <= DATE_TO AND SCHEME_SEASON_ID = SEASON_ID AND SCHEME_ID ="+schemeId+" AND SEASON_ID ='"+seasonId+"' AND B.QUALITY_NO/10 IN (SCHEME_QUALITY_ID) ORDER BY A.PARTY_CODE,B.QUALITY_NO,B.PATTERN_CODE,INVOICE_NO,INVOICE_DATE LIMIT 1000000";
           */ 
            "WHERE A.INVOICE_TYPE =1 AND A.INVOICE_DATE = B.INVOICE_DATE AND B.PATTERN_CODE IN (1,2) AND RATE =221 AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE >= DATE_FROM  AND A.INVOICE_DATE <= DATE_TO AND SCHEME_SEASON_ID = SEASON_ID AND SCHEME_ID ="+schemeId+" AND SEASON_ID ='"+seasonId+"' AND B.QUALITY_NO/10 IN (SCHEME_QUALITY_ID) ORDER BY A.PARTY_CODE,B.QUALITY_NO,B.PATTERN_CODE,INVOICE_NO,INVOICE_DATE LIMIT 1000000";
            
            stmt.execute(schemeDetailQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL,DINESHMILLS.D_SAL_PRICE_LIST_DETAIL SET SCD_PL_RATE=EX_MILL_RATE WHERE SCD_QUALITY_ID/10=QUALITY_ID AND SCD_SEASON_ID=SUBSTRING(PRICE_LIST_NO,3,5) AND SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID ="+schemeId);
            /*
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_QUALITY_ELIGIBLE = CASE WHEN SCD_INV_RATE - SCD_PL_RATE =0 THEN 'Y' ELSE 'N' END WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            */
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_QUALITY_ELIGIBLE = 'Y' WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
        
            
            String schemeHeaderQry="INSERT INTO SALES.D_SAL_SCHEME_HEADER(SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_CHARGE_CODE,SCH_BOOK_CODE,SCH_MAIN_CODE,SCH_DRAFT_CR_NOTE_NO,SCH_DRAFT_CR_NOTE_DATE,SCH_REASON_CODE,SCH_LINK_NO,SCH_TOTAL_GR_LIFT_QTY,SCH_TOTAL_NET_LIFT_QTY,SCH_TOTAL_INV_AMOUNT,SCH_DISC_RATE,SCH_DISC_PERCENT,SCH_DISC_AMOUNT,SCH_TOTAL_AMOUNT,SCH_ELIGIBILITY,SCH_CREATED_BY,SCH_CREATED_DATE,SCH_MODIFIED_BY,SCH_MODIFIED_DATE,SCH_APPROVED,SCH_APPROVED_DATE,SCH_CANCELLED,SCH_CANCELLED_DATE,SCH_REJECTED,SCH_REJECTED_DATE,SCH_CHANGED,SCH_CHANGED_DATE) "+
            "SELECT SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,'','','','','','','0000-00-00','','',SUM(SCD_GROSS_QTY),SUM(SCD_NET_QTY),0,0,0,0,0,'N',1,NOW(),0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',1,NOW() "+
            "FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID= '"+seasonId+"' AND SCD_QUALITY_ELIGIBLE ='Y'  AND SCD_SCHEME_ID ="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE ";
            
            stmt.execute(schemeHeaderQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,DINESHMILLS.D_SAL_PARTY_MASTER SET SCH_PARTY_NAME=PARTY_NAME,SCH_CITY=CITY_ID,SCH_CHARGE_CODE=CHARGE_CODE WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_SLAB,SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_RATE=SLAB_OUTPUT WHERE SLAB_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SLAB_SEASON_ID = SCH_SEASON_ID AND SCH_SCHEME_ID =SLAB_SCHEME_ID AND SCH_TOTAL_GR_LIFT_QTY >=SLAB_FROM AND SCH_TOTAL_GR_LIFT_QTY<=SLAB_TO");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_ELIGIBILITY =CASE WHEN SCH_DISC_RATE!=0  THEN 'Y' ELSE 'N' END  WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_AMOUNT=SCH_DISC_RATE*SCH_TOTAL_NET_LIFT_QTY WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PER_MTR_RATE=SCH_DISC_RATE, SCD_DISC_AMOUNT=SCD_NET_QTY*SCH_DISC_RATE WHERE SCD_SCHEME_ID=SCH_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE AND SCD_QUALITY_ELIGIBLE='Y' AND SCH_SEASON_ID ='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            processKhakiCreditNote(schemeId, seasonId);
            
            printReport=true;
            return true;
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
    }

   
  
      private boolean processSHIRTING_RETAILERScheme(int schemeId){
        try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            ResultSet rsScheme=stmt.executeQuery("SELECT SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+schemeId);
            rsScheme.first();
            String seasonId=rsScheme.getString("SCHEME_SEASON_ID");
            
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeDetailQry="INSERT INTO SALES.D_SAL_SCHEME_DETAIL(SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_FLAG,SCD_UNIT_CODE,SCD_GROSS_QTY,SCD_GROSS_AMOUNT,SCD_NET_QTY,SCD_NET_AMOUNT,SCD_AGENT_LAST_INVOICE,SCD_AGENT_SR_NO,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_INV_RATE,SCD_PL_RATE,SCD_QUALITY_ELIGIBLE,SCD_DISC_PER_MTR_RATE,SCD_DISC_PERCENT,SCD_DISC_AMOUNT,SCD_GATE_PASS_NO,SCD_GATEPASS_DATE,SCD_BALE_NO) " +
            "SELECT SCHEME_ID,I.SEASON_ID,PARTY_CODE,QUALITY_NO,SHADE ,PIECE_NO,FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,NET_AMOUNT,AGENT_LAST_INVOICE,AGENT_SR_NO,INVOICE_NO,INVOICE_DATE,RATE,0,'',0,0,0,GATEPASS_NO,GATEPASS_DATE,BALE_NO FROM  "+
            "(SELECT QUALITY_ID,SEASON_ID FROM D_SAL_QUALITY_MASTER WHERE SEASON_ID='"+seasonId+"' AND CATEGORY_LIST IN('SHIRTING')) Q "+
            "INNER JOIN "+
            //"(SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO/10 QUALITY_NO,B.PATTERN_CODE AS SHADE,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO FROM DINESHMILLS.D_SAL_INVOICE_HEADER A,DINESHMILLS.D_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D, SALES.D_SAL_SCHEME_MASTER E, D_SAL_PARTY_MASTER P WHERE A.INVOICE_TYPE =1 AND A.WAREHOUSE_CODE =1 AND A.QUALITY_INDICATOR IN (0,3) AND  A.PARTY_CODE=P.PARTY_CODE AND A.PARTY_CODE NOT IN (478808,155999) AND SUBSTRING(A.PARTY_CODE,1,2) NOT IN (74,69,59,77,47,58,57) AND PARTY_TYPE=2 AND A.INVOICE_DATE=B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE>=DATE_FROM AND A.INVOICE_DATE<=DATE_TO AND SCHEME_SEASON_ID=SEASON_ID AND SCHEME_ID="+schemeId+" AND SEASON_ID='"+seasonId+"') I ON SUBSTRING(QUALITY_ID,2,5)=SUBSTRING(QUALITY_NO,2,5) AND Q.SEASON_ID=I.SEASON_ID "+
           // "(SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO/10 QUALITY_NO,B.PATTERN_CODE AS SHADE,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO FROM DINESHMILLS.D_SAL_INVOICE_HEADER A,DINESHMILLS.D_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D, SALES.D_SAL_SCHEME_MASTER E, D_SAL_PARTY_MASTER P WHERE A.INVOICE_TYPE =1 AND A.WAREHOUSE_CODE =1 AND A.QUALITY_INDICATOR IN (0,3) AND  A.PARTY_CODE=P.PARTY_CODE AND A.PARTY_CODE NOT IN (478808,719907) AND SUBSTRING(A.PARTY_CODE,1,2) NOT IN (74,69,59,77,47,58,57) AND PARTY_TYPE=2 AND A.INVOICE_DATE=B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE>=DATE_FROM AND A.INVOICE_DATE<=DATE_TO AND SCHEME_SEASON_ID=SEASON_ID AND SCHEME_ID="+schemeId+" AND SEASON_ID='"+seasonId+"') I ON SUBSTRING(QUALITY_ID,2,5)=SUBSTRING(QUALITY_NO,2,5) AND Q.SEASON_ID=I.SEASON_ID "+
            "(SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO/10 QUALITY_NO,B.PATTERN_CODE AS SHADE,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO FROM DINESHMILLS.D_SAL_INVOICE_HEADER A,DINESHMILLS.D_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D, SALES.D_SAL_SCHEME_MASTER E, D_SAL_PARTY_MASTER P WHERE A.INVOICE_TYPE =1 AND A.WAREHOUSE_CODE =1 AND A.QUALITY_INDICATOR IN (0,3) AND  A.PARTY_CODE=P.PARTY_CODE AND PARTY_TYPE=2 AND A.INVOICE_DATE=B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE>=DATE_FROM AND A.INVOICE_DATE<=DATE_TO AND SCHEME_SEASON_ID=SEASON_ID AND SCHEME_ID="+schemeId+" AND SEASON_ID='"+seasonId+"') I ON SUBSTRING(QUALITY_ID,2,5)=SUBSTRING(QUALITY_NO,2,5) AND Q.SEASON_ID=I.SEASON_ID "+
           // "(SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO/10 QUALITY_NO,B.PATTERN_CODE AS SHADE,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO FROM DINESHMILLS.D_SAL_INVOICE_HEADER A,DINESHMILLS.D_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D, SALES.D_SAL_SCHEME_MASTER E, D_SAL_PARTY_MASTER P WHERE A.INVOICE_TYPE =1 AND A.WAREHOUSE_CODE =1 AND A.QUALITY_INDICATOR IN (0,3) AND  A.PARTY_CODE=P.PARTY_CODE AND A.PARTY_CODE NOT IN (478808,155999) AND A.INVOICE_DATE=B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE>=DATE_FROM AND A.INVOICE_DATE<=DATE_TO AND SCHEME_SEASON_ID=SEASON_ID AND SCHEME_ID="+schemeId+" AND SEASON_ID='"+seasonId+"') I ON SUBSTRING(QUALITY_ID,2,5)=SUBSTRING(QUALITY_NO,2,5) AND Q.SEASON_ID=I.SEASON_ID "+
            // UPDATED BY RISHI ON 14/07/2014            
            //"UNION ALL SELECT EXCP_SCHEME_ID,EXCP_SEASON_ID,EXCP_PARTY_CODE,B.QUALITY_NO/10,B.PATTERN_CODE AS SHADE ,B.PIECE_NO,FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,B.AGENT_SR_NO,B.INVOICE_NO,B.INVOICE_DATE,RATE,RATE,'',0,0,0,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO  FROM DINESHMILLS.D_SAL_INVOICE_HEADER A,DINESHMILLS.D_SAL_INVOICE_DETAIL  B,SALES.D_SAL_EXCEPTION_INVOICE C  WHERE A.INVOICE_TYPE =1 AND A.INVOICE_DATE = B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_NO = EXCP_INVOICE_NO AND A.PARTY_CODE = EXCP_PARTY_CODE AND A.PARTY_CODE NOT IN (478808,155999) AND  A.INVOICE_DATE = EXCP_INVOICE_DATE AND EXCP_FLAG ='INSERT' AND EXCP_SCHEME_ID = "+schemeId+" AND EXCP_SEASON_ID  ='"+seasonId+"'";
            "UNION ALL SELECT EXCP_SCHEME_ID,EXCP_SEASON_ID,EXCP_PARTY_CODE,B.QUALITY_NO/10,B.PATTERN_CODE AS SHADE ,B.PIECE_NO,FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,B.AGENT_SR_NO,B.INVOICE_NO,B.INVOICE_DATE,RATE,RATE,'',0,0,0,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO  FROM DINESHMILLS.D_SAL_INVOICE_HEADER A,DINESHMILLS.D_SAL_INVOICE_DETAIL  B,SALES.D_SAL_EXCEPTION_INVOICE C  WHERE A.INVOICE_TYPE =1 AND A.INVOICE_DATE = B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_NO = EXCP_INVOICE_NO AND A.PARTY_CODE = EXCP_PARTY_CODE AND  A.INVOICE_DATE = EXCP_INVOICE_DATE AND EXCP_FLAG ='INSERT' AND EXCP_SCHEME_ID = "+schemeId+" AND EXCP_SEASON_ID  ='"+seasonId+"'";
            stmt.execute(schemeDetailQry);
            
            stmt.execute("DELETE FROM  SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SCHEME_ID=0 AND SCD_SEASON_ID =0 AND SCD_PARTY_CODE =0  AND SCD_QUALITY_ID =0");
            
            // UPDATED BY RISHI ON 14/07/2014
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_EXCEPTION_INVOICE SET SCD_SCHEME_ID = 0,SCD_SEASON_ID =0 ,SCD_PARTY_CODE =0 ,SCD_QUALITY_ID =0 WHERE EXCP_PARTY_CODE = SCD_PARTY_CODE AND SCD_SEASON_ID = EXCP_SEASON_ID AND SCD_SCHEME_ID = EXCP_SCHEME_ID AND SCD_SEASON_ID= '"+seasonId+"' AND SCD_SCHEME_ID ="+schemeId+"  AND  SCD_INVOICE_DATE >=EXCP_INVOICE_FROM_DATE AND SCD_INVOICE_DATE <=EXCP_INVOICE_TO_DATE AND EXCP_FLAG ='DELETE'");
            // UPDATED BY RISHI ON 14/07/2014
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_EXCEPTION_INVOICE SET SCD_SCHEME_ID = 0,SCD_SEASON_ID =0 ,SCD_PARTY_CODE =0 ,SCD_QUALITY_ID =0 WHERE EXCP_PARTY_CODE = SCD_PARTY_CODE AND SCD_SEASON_ID = EXCP_SEASON_ID AND SCD_SCHEME_ID = EXCP_SCHEME_ID AND SCD_SEASON_ID= '"+seasonId+"' AND SCD_SCHEME_ID ="+schemeId+"  AND  SCD_INVOICE_DATE =EXCP_INVOICE_DATE  AND EXCP_FLAG ='DELETE'  AND SCD_INVOICE_NO = EXCP_INVOICE_NO");
            
            // UPDATED BY RISHI ON 14/07/2014
            stmt.execute("DELETE FROM  SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SCHEME_ID=0 AND SCD_SEASON_ID =0 AND SCD_PARTY_CODE =0  AND SCD_QUALITY_ID =0");
            
            //stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL,DINESHMILLS.D_SAL_PRICE_LIST_DETAIL SET SCD_PL_RATE=EX_MILL_RATE WHERE SUBSTRING(SCD_QUALITY_ID,2,5)=SUBSTRING(QUALITY_ID,2,5) AND SCD_SEASON_ID=SUBSTRING(PRICE_LIST_NO,3,5) AND SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID ="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL LEFT JOIN (SELECT SEASON_ID,DATE_FROM,DATE_TO FROM DINESHMILLS.D_SAL_SEASON_MASTER WHERE SEASON_ID ='"+seasonId+"') S ON SCD_SEASON_ID=SEASON_ID LEFT JOIN (SELECT SUBSTRING(PR.PRICE_LIST_NO,3,5) SEAS_ID,QUALITY_ID,PR.EX_MILL_RATE,PR.EFFECTIVE_DATE FROM DINESHMILLS.D_SAL_PRICE_LIST_DETAIL PD, DINESHMILLS.D_SAL_PRICE_LIST_RATE PR WHERE PD.PRICE_LIST_NO=PR.PRICE_LIST_NO AND PD.SR_NO=PRICE_LIST_SR_NO AND SUBSTRING(PR.PRICE_LIST_NO,3,3) ='"+seasonId+"' AND QUALITY_ID NOT LIKE '72%') PL ON SUBSTRING(SCD_QUALITY_ID,2,5)=SUBSTRING(QUALITY_ID,2,5) AND SEASON_ID=SEAS_ID AND EX_MILL_RATE=SCD_INV_RATE AND SCD_INVOICE_DATE>=EFFECTIVE_DATE SET SCD_PL_RATE=CASE WHEN SCD_INV_RATE=EX_MILL_RATE THEN EX_MILL_RATE ELSE 0 END WHERE SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId+" AND SCD_INVOICE_DATE>=DATE_FROM AND SCD_INVOICE_DATE<=DATE_TO");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_QUALITY_ELIGIBLE=CASE WHEN SCD_INV_RATE-SCD_PL_RATE=0 THEN 'Y' ELSE 'N' END WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeHeaderQry="INSERT INTO SALES.D_SAL_SCHEME_HEADER(SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_CHARGE_CODE,SCH_BOOK_CODE,SCH_MAIN_CODE,SCH_DRAFT_CR_NOTE_NO,SCH_DRAFT_CR_NOTE_DATE,SCH_REASON_CODE,SCH_LINK_NO,SCH_TOTAL_GR_LIFT_QTY,SCH_TOTAL_NET_LIFT_QTY,SCH_TOTAL_INV_AMOUNT,SCH_TOTAL_FGR_LIFT_QTY,SCH_DISC_PERCENT,SCH_DISC_AMOUNT,SCH_TOTAL_AMOUNT,SCH_ELIGIBILITY,SCH_CREATED_BY,SCH_CREATED_DATE,SCH_MODIFIED_BY,SCH_MODIFIED_DATE,SCH_APPROVED,SCH_APPROVED_DATE,SCH_CANCELLED,SCH_CANCELLED_DATE,SCH_REJECTED,SCH_REJECTED_DATE,SCH_CHANGED,SCH_CHANGED_DATE) "+
            "SELECT SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,'','','','','','','0000-00-00','','',SUM(SCD_GROSS_QTY),SUM(SCD_NET_QTY),SUM(SCD_NET_AMOUNT),SUM(SCD_GROSS_QTY),0,0,0,'N',1,NOW(),0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',1,NOW() "+
            "FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID= '"+seasonId+"' AND SCD_QUALITY_ELIGIBLE ='Y' AND SCD_SCHEME_ID="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE ";
            
            stmt.execute(schemeHeaderQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,DINESHMILLS.D_SAL_PARTY_MASTER SET SCH_PARTY_NAME=PARTY_NAME,SCH_CITY=CITY_ID,SCH_CHARGE_CODE=CHARGE_CODE WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            //UPDATE FOR 5 LACK CONDITION IN SCHEME --- TOTAL GROSS QTY IS INSERTED INTO SCH_TOTAL_FGR_LIFT_QTY FOR SLAB CALCULATION
    //        stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER, (SELECT SCH_PARTY_CODE PARTY_CODE ,SUM(SCH_TOTAL_INV_AMOUNT) AMT,SUM(SCH_TOTAL_GR_LIFT_QTY) GQT FROM SALES.`D_SAL_SCHEME_HEADER` WHERE SCH_SCHEME_ID IN(9,11,14) GROUP BY SCH_PARTY_CODE HAVING AMT>=500000 ) G SET SCH_TOTAL_FGR_LIFT_QTY=GQT WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
         //   stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER, (SELECT SCH_PARTY_CODE PARTY_CODE ,SUM(SCH_TOTAL_INV_AMOUNT) AMT,SUM(SCH_TOTAL_GR_LIFT_QTY) GQT FROM SALES.`D_SAL_SCHEME_HEADER` WHERE SCH_SCHEME_ID IN(18,19,20) GROUP BY SCH_PARTY_CODE HAVING AMT>=500000 ) G SET SCH_TOTAL_FGR_LIFT_QTY=GQT WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_SLAB,SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_PERCENT=SLAB_OUTPUT,SCH_ELIGIBILITY =CASE WHEN SLAB_OUTPUT!=0 THEN 'Y' ELSE 'N' END WHERE SLAB_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SLAB_SEASON_ID=SCH_SEASON_ID AND SCH_SCHEME_ID=SLAB_SCHEME_ID AND SCH_TOTAL_FGR_LIFT_QTY>=SLAB_FROM AND SCH_TOTAL_FGR_LIFT_QTY<=SLAB_TO");
            
            //UPDATE FOR JSBK PARTY
            //stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_PERCENT=SCH_DISC_PERCENT/2 WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId +" AND SCH_PARTY_CODE IN (478808,155999)");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_AMOUNT=SCH_DISC_PERCENT*SCH_TOTAL_INV_AMOUNT/100 WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PERCENT=SCH_DISC_PERCENT,SCD_DISC_AMOUNT=SCD_NET_AMOUNT*SCH_DISC_PERCENT/100 WHERE SCD_SCHEME_ID=SCH_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE AND SCD_QUALITY_ELIGIBLE='Y' AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
        //    processRetailerCreditNote(schemeId, seasonId);
//            setData(schemeId, seasonId);
//            processCreditNoteInput(schemeId, seasonId);
//            
            printReport=true;
            return true;
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
    }
    
    
        
    
      private boolean processSHIRTING_WHOLESALERScheme(int schemeId){
        try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            ResultSet rsScheme=stmt.executeQuery("SELECT SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+schemeId);
            rsScheme.first();
            String seasonId=rsScheme.getString("SCHEME_SEASON_ID");
            
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeDetailQry="INSERT INTO SALES.D_SAL_SCHEME_DETAIL(SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_FLAG,SCD_UNIT_CODE,SCD_GROSS_QTY,SCD_GROSS_AMOUNT,SCD_NET_QTY,SCD_NET_AMOUNT,SCD_AGENT_LAST_INVOICE,SCD_AGENT_SR_NO,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_INV_RATE,SCD_PL_RATE,SCD_QUALITY_ELIGIBLE,SCD_DISC_PER_MTR_RATE,SCD_DISC_PERCENT,SCD_DISC_AMOUNT,SCD_GATE_PASS_NO,SCD_GATEPASS_DATE,SCD_BALE_NO) " +
            "SELECT SCHEME_ID,I.SEASON_ID,PARTY_CODE,QUALITY_NO,SHADE ,PIECE_NO,FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,NET_AMOUNT,AGENT_LAST_INVOICE,AGENT_SR_NO,INVOICE_NO,INVOICE_DATE,RATE,0,'',0,0,0,GATEPASS_NO,GATEPASS_DATE,BALE_NO FROM  "+
            "(SELECT QUALITY_ID,SEASON_ID FROM D_SAL_QUALITY_MASTER WHERE SEASON_ID='"+seasonId+"' AND CATEGORY_LIST IN('SHIRTING')) Q "+
            "INNER JOIN "+
            //"(SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO/10 QUALITY_NO,B.PATTERN_CODE AS SHADE,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO FROM DINESHMILLS.D_SAL_INVOICE_HEADER A,DINESHMILLS.D_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D, SALES.D_SAL_SCHEME_MASTER E, D_SAL_PARTY_MASTER P WHERE A.INVOICE_TYPE =1 AND A.WAREHOUSE_CODE =1 AND A.QUALITY_INDICATOR IN (0,3) AND  A.PARTY_CODE=P.PARTY_CODE AND A.PARTY_CODE NOT IN (478808,155999) AND SUBSTRING(A.PARTY_CODE,1,2) NOT IN (74,69,59,77,47,58,57) AND PARTY_TYPE=2 AND A.INVOICE_DATE=B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE>=DATE_FROM AND A.INVOICE_DATE<=DATE_TO AND SCHEME_SEASON_ID=SEASON_ID AND SCHEME_ID="+schemeId+" AND SEASON_ID='"+seasonId+"') I ON SUBSTRING(QUALITY_ID,2,5)=SUBSTRING(QUALITY_NO,2,5) AND Q.SEASON_ID=I.SEASON_ID "+
            "(SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO/10 QUALITY_NO,B.PATTERN_CODE AS SHADE,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO FROM DINESHMILLS.D_SAL_INVOICE_HEADER A,DINESHMILLS.D_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D, SALES.D_SAL_SCHEME_MASTER E, D_SAL_PARTY_MASTER P WHERE A.INVOICE_TYPE =1 AND A.WAREHOUSE_CODE =1 AND A.QUALITY_INDICATOR IN (0,3) AND  A.PARTY_CODE=P.PARTY_CODE AND A.PARTY_CODE NOT IN (478808,719907) AND SUBSTRING(A.PARTY_CODE,1,2) NOT IN (74,69,59,77,47,58,57) AND PARTY_TYPE=3 AND A.INVOICE_DATE=B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE>=DATE_FROM AND A.INVOICE_DATE<=DATE_TO AND SCHEME_SEASON_ID=SEASON_ID AND SCHEME_ID="+schemeId+" AND SEASON_ID='"+seasonId+"') I ON SUBSTRING(QUALITY_ID,2,5)=SUBSTRING(QUALITY_NO,2,5) AND Q.SEASON_ID=I.SEASON_ID "+
           // "(SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO/10 QUALITY_NO,B.PATTERN_CODE AS SHADE,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO FROM DINESHMILLS.D_SAL_INVOICE_HEADER A,DINESHMILLS.D_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D, SALES.D_SAL_SCHEME_MASTER E, D_SAL_PARTY_MASTER P WHERE A.INVOICE_TYPE =1 AND A.WAREHOUSE_CODE =1 AND A.QUALITY_INDICATOR IN (0,3) AND  A.PARTY_CODE=P.PARTY_CODE AND A.PARTY_CODE NOT IN (478808,155999) AND A.INVOICE_DATE=B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE>=DATE_FROM AND A.INVOICE_DATE<=DATE_TO AND SCHEME_SEASON_ID=SEASON_ID AND SCHEME_ID="+schemeId+" AND SEASON_ID='"+seasonId+"') I ON SUBSTRING(QUALITY_ID,2,5)=SUBSTRING(QUALITY_NO,2,5) AND Q.SEASON_ID=I.SEASON_ID "+
            // UPDATED BY RISHI ON 14/07/2014            
            //"UNION ALL SELECT EXCP_SCHEME_ID,EXCP_SEASON_ID,EXCP_PARTY_CODE,B.QUALITY_NO/10,B.PATTERN_CODE AS SHADE ,B.PIECE_NO,FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,B.AGENT_SR_NO,B.INVOICE_NO,B.INVOICE_DATE,RATE,RATE,'',0,0,0,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO  FROM DINESHMILLS.D_SAL_INVOICE_HEADER A,DINESHMILLS.D_SAL_INVOICE_DETAIL  B,SALES.D_SAL_EXCEPTION_INVOICE C  WHERE A.INVOICE_TYPE =1 AND A.INVOICE_DATE = B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_NO = EXCP_INVOICE_NO AND A.PARTY_CODE = EXCP_PARTY_CODE AND A.PARTY_CODE NOT IN (478808,155999) AND  A.INVOICE_DATE = EXCP_INVOICE_DATE AND EXCP_FLAG ='INSERT' AND EXCP_SCHEME_ID = "+schemeId+" AND EXCP_SEASON_ID  ='"+seasonId+"'";
            "UNION ALL SELECT EXCP_SCHEME_ID,EXCP_SEASON_ID,EXCP_PARTY_CODE,B.QUALITY_NO/10,B.PATTERN_CODE AS SHADE ,B.PIECE_NO,FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,B.AGENT_SR_NO,B.INVOICE_NO,B.INVOICE_DATE,RATE,RATE,'',0,0,0,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO  FROM DINESHMILLS.D_SAL_INVOICE_HEADER A,DINESHMILLS.D_SAL_INVOICE_DETAIL  B,SALES.D_SAL_EXCEPTION_INVOICE C  WHERE A.INVOICE_TYPE =1 AND A.INVOICE_DATE = B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_NO = EXCP_INVOICE_NO AND A.PARTY_CODE = EXCP_PARTY_CODE AND A.PARTY_CODE NOT IN (478808,719907) AND  A.INVOICE_DATE = EXCP_INVOICE_DATE AND EXCP_FLAG ='INSERT' AND EXCP_SCHEME_ID = "+schemeId+" AND EXCP_SEASON_ID  ='"+seasonId+"'";
            stmt.execute(schemeDetailQry);
            
            stmt.execute("DELETE FROM  SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SCHEME_ID=0 AND SCD_SEASON_ID =0 AND SCD_PARTY_CODE =0  AND SCD_QUALITY_ID =0");
            
            // UPDATED BY RISHI ON 14/07/2014
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_EXCEPTION_INVOICE SET SCD_SCHEME_ID = 0,SCD_SEASON_ID =0 ,SCD_PARTY_CODE =0 ,SCD_QUALITY_ID =0 WHERE EXCP_PARTY_CODE = SCD_PARTY_CODE AND SCD_SEASON_ID = EXCP_SEASON_ID AND SCD_SCHEME_ID = EXCP_SCHEME_ID AND SCD_SEASON_ID= '"+seasonId+"' AND SCD_SCHEME_ID ="+schemeId+"  AND  SCD_INVOICE_DATE >=EXCP_INVOICE_FROM_DATE AND SCD_INVOICE_DATE <=EXCP_INVOICE_TO_DATE AND EXCP_FLAG ='DELETE'");
            // UPDATED BY RISHI ON 14/07/2014
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_EXCEPTION_INVOICE SET SCD_SCHEME_ID = 0,SCD_SEASON_ID =0 ,SCD_PARTY_CODE =0 ,SCD_QUALITY_ID =0 WHERE EXCP_PARTY_CODE = SCD_PARTY_CODE AND SCD_SEASON_ID = EXCP_SEASON_ID AND SCD_SCHEME_ID = EXCP_SCHEME_ID AND SCD_SEASON_ID= '"+seasonId+"' AND SCD_SCHEME_ID ="+schemeId+"  AND  SCD_INVOICE_DATE =EXCP_INVOICE_DATE  AND EXCP_FLAG ='DELETE'  AND SCD_INVOICE_NO = EXCP_INVOICE_NO");
            
            // UPDATED BY RISHI ON 14/07/2014
            stmt.execute("DELETE FROM  SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SCHEME_ID=0 AND SCD_SEASON_ID =0 AND SCD_PARTY_CODE =0  AND SCD_QUALITY_ID =0");
            
            //stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL,DINESHMILLS.D_SAL_PRICE_LIST_DETAIL SET SCD_PL_RATE=EX_MILL_RATE WHERE SUBSTRING(SCD_QUALITY_ID,2,5)=SUBSTRING(QUALITY_ID,2,5) AND SCD_SEASON_ID=SUBSTRING(PRICE_LIST_NO,3,5) AND SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID ="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL LEFT JOIN (SELECT SEASON_ID,DATE_FROM,DATE_TO FROM DINESHMILLS.D_SAL_SEASON_MASTER WHERE SEASON_ID ='"+seasonId+"') S ON SCD_SEASON_ID=SEASON_ID LEFT JOIN (SELECT SUBSTRING(PR.PRICE_LIST_NO,3,5) SEAS_ID,QUALITY_ID,PR.EX_MILL_RATE,PR.EFFECTIVE_DATE FROM DINESHMILLS.D_SAL_PRICE_LIST_DETAIL PD, DINESHMILLS.D_SAL_PRICE_LIST_RATE PR WHERE PD.PRICE_LIST_NO=PR.PRICE_LIST_NO AND PD.SR_NO=PRICE_LIST_SR_NO AND SUBSTRING(PR.PRICE_LIST_NO,3,3) ='"+seasonId+"' AND QUALITY_ID NOT LIKE '72%') PL ON SUBSTRING(SCD_QUALITY_ID,2,5)=SUBSTRING(QUALITY_ID,2,5) AND SEASON_ID=SEAS_ID AND EX_MILL_RATE=SCD_INV_RATE AND SCD_INVOICE_DATE>=EFFECTIVE_DATE SET SCD_PL_RATE=CASE WHEN SCD_INV_RATE=EX_MILL_RATE THEN EX_MILL_RATE ELSE 0 END WHERE SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId+" AND SCD_INVOICE_DATE>=DATE_FROM AND SCD_INVOICE_DATE<=DATE_TO");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_QUALITY_ELIGIBLE=CASE WHEN SCD_INV_RATE-SCD_PL_RATE=0 THEN 'Y' ELSE 'N' END WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeHeaderQry="INSERT INTO SALES.D_SAL_SCHEME_HEADER(SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_CHARGE_CODE,SCH_BOOK_CODE,SCH_MAIN_CODE,SCH_DRAFT_CR_NOTE_NO,SCH_DRAFT_CR_NOTE_DATE,SCH_REASON_CODE,SCH_LINK_NO,SCH_TOTAL_GR_LIFT_QTY,SCH_TOTAL_NET_LIFT_QTY,SCH_TOTAL_INV_AMOUNT,SCH_TOTAL_FGR_LIFT_QTY,SCH_DISC_PERCENT,SCH_DISC_AMOUNT,SCH_TOTAL_AMOUNT,SCH_ELIGIBILITY,SCH_CREATED_BY,SCH_CREATED_DATE,SCH_MODIFIED_BY,SCH_MODIFIED_DATE,SCH_APPROVED,SCH_APPROVED_DATE,SCH_CANCELLED,SCH_CANCELLED_DATE,SCH_REJECTED,SCH_REJECTED_DATE,SCH_CHANGED,SCH_CHANGED_DATE) "+
            "SELECT SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,'','','','','','','0000-00-00','','',SUM(SCD_GROSS_QTY),SUM(SCD_NET_QTY),SUM(SCD_NET_AMOUNT),SUM(SCD_GROSS_QTY),0,0,0,'N',1,NOW(),0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',1,NOW() "+
            "FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID= '"+seasonId+"' AND SCD_QUALITY_ELIGIBLE ='Y' AND SCD_SCHEME_ID="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE ";
            
            stmt.execute(schemeHeaderQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,DINESHMILLS.D_SAL_PARTY_MASTER SET SCH_PARTY_NAME=PARTY_NAME,SCH_CITY=CITY_ID,SCH_CHARGE_CODE=CHARGE_CODE WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            //UPDATE FOR 5 LACK CONDITION IN SCHEME --- TOTAL GROSS QTY IS INSERTED INTO SCH_TOTAL_FGR_LIFT_QTY FOR SLAB CALCULATION
    //        stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER, (SELECT SCH_PARTY_CODE PARTY_CODE ,SUM(SCH_TOTAL_INV_AMOUNT) AMT,SUM(SCH_TOTAL_GR_LIFT_QTY) GQT FROM SALES.`D_SAL_SCHEME_HEADER` WHERE SCH_SCHEME_ID IN(9,11,14) GROUP BY SCH_PARTY_CODE HAVING AMT>=500000 ) G SET SCH_TOTAL_FGR_LIFT_QTY=GQT WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
         //   stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER, (SELECT SCH_PARTY_CODE PARTY_CODE ,SUM(SCH_TOTAL_INV_AMOUNT) AMT,SUM(SCH_TOTAL_GR_LIFT_QTY) GQT FROM SALES.`D_SAL_SCHEME_HEADER` WHERE SCH_SCHEME_ID IN(18,19,20) GROUP BY SCH_PARTY_CODE HAVING AMT>=500000 ) G SET SCH_TOTAL_FGR_LIFT_QTY=GQT WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_SLAB,SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_PERCENT=SLAB_OUTPUT,SCH_ELIGIBILITY =CASE WHEN SLAB_OUTPUT!=0 THEN 'Y' ELSE 'N' END WHERE SLAB_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SLAB_SEASON_ID=SCH_SEASON_ID AND SCH_SCHEME_ID=SLAB_SCHEME_ID AND SCH_TOTAL_FGR_LIFT_QTY>=SLAB_FROM AND SCH_TOTAL_FGR_LIFT_QTY<=SLAB_TO");
            
            //UPDATE FOR JSBK PARTY
            //stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_PERCENT=SCH_DISC_PERCENT/2 WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId +" AND SCH_PARTY_CODE IN (478808,155999)");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_AMOUNT=SCH_DISC_PERCENT*SCH_TOTAL_INV_AMOUNT/100 WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PERCENT=SCH_DISC_PERCENT,SCD_DISC_AMOUNT=SCD_NET_AMOUNT*SCH_DISC_PERCENT/100 WHERE SCD_SCHEME_ID=SCH_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE AND SCD_QUALITY_ELIGIBLE='Y' AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
        //    processRetailerCreditNote(schemeId, seasonId);
//            setData(schemeId, seasonId);
//            processCreditNoteInput(schemeId, seasonId);
//            
            printReport=true;
            return true;
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
    }

    
        

    
    
    
    
    private boolean processS17Scheme(int schemeId){
        try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            ResultSet rsScheme=stmt.executeQuery("SELECT SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+schemeId);
            rsScheme.first();
            String seasonId=rsScheme.getString("SCHEME_SEASON_ID");
            
         InvoiceTable(schemeId);
            
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
                         
            stmt.execute("INSERT INTO SALES.D_SAL_SCHEME_DETAIL(SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_FLAG,SCD_UNIT_CODE,SCD_GROSS_QTY,SCD_GROSS_AMOUNT,SCD_NET_QTY,SCD_NET_AMOUNT,SCD_AGENT_LAST_INVOICE,SCD_AGENT_SR_NO,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_INV_RATE,SCD_PL_RATE,SCD_QUALITY_ELIGIBLE,SCD_DISC_PER_MTR_RATE,SCD_DISC_PERCENT,SCD_DISC_AMOUNT,SCD_GATE_PASS_NO,SCD_GATEPASS_DATE,SCD_BALE_NO) SELECT SCHEME_ID,I.SEASON_ID,PARTY_CODE,QUALITY_NO,SHADE ,PIECE_NO,FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,NET_AMOUNT,AGENT_LAST_INVOICE,AGENT_SR_NO,INVOICE_NO,INVOICE_DATE,RATE,0,'',0,0,0,GATEPASS_NO,GATEPASS_DATE,BALE_NO FROM (SELECT QUALITY_ID,SEASON_ID FROM DINESHMILLS.D_SAL_QUALITY_MASTER WHERE SEASON_ID='"+seasonId+"' AND CATEGORY_LIST IN ('S-QL','REGULAR') ) Q  INNER JOIN (SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO/10 QUALITY_NO,B.PATTERN_CODE AS SHADE,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO FROM SALES.TMP_SAL_INVOICE_HEADER A,SALES.TMP_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D, SALES.D_SAL_SCHEME_MASTER E, D_SAL_PARTY_MASTER P WHERE A.INVOICE_TYPE =1 AND A.PARTY_CODE=P.PARTY_CODE AND A.PARTY_CODE IN (SELECT SLAB_PARTY_CODE FROM SALES.D_SAL_SCHEME_SLAB WHERE SLAB_SCHEME_ID ="+schemeId+" AND SLAB_SEASON_ID='"+seasonId+"' ) AND PARTY_TYPE=3    AND A.WAREHOUSE_CODE =1 AND A.QUALITY_INDICATOR IN (0,3) AND GROSS_QTY  >= 7.90 AND A.INVOICE_DATE=B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE >= DATE_FROM  AND A.INVOICE_DATE <= DATE_TO AND SCHEME_SEASON_ID = SEASON_ID AND SCHEME_ID ="+schemeId+" AND SEASON_ID='"+seasonId+"') I ON SUBSTRING(QUALITY_ID,2,5)=SUBSTRING(QUALITY_NO,2,5) AND Q.SEASON_ID=I.SEASON_ID ");
            
                       
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL LEFT JOIN (SELECT SEASON_ID,DATE_FROM,DATE_TO FROM DINESHMILLS.D_SAL_SEASON_MASTER WHERE SEASON_ID ='"+seasonId+"') S ON SCD_SEASON_ID=SEASON_ID LEFT JOIN (SELECT SUBSTRING(PR.PRICE_LIST_NO,3,5) SEAS_ID,QUALITY_ID,PR.EX_MILL_RATE,PR.EFFECTIVE_DATE FROM DINESHMILLS.D_SAL_PRICE_LIST_DETAIL PD, DINESHMILLS.D_SAL_PRICE_LIST_RATE PR WHERE PD.PRICE_LIST_NO=PR.PRICE_LIST_NO AND PD.SR_NO=PRICE_LIST_SR_NO AND SUBSTRING(PR.PRICE_LIST_NO,3,3) ='"+seasonId+"' AND QUALITY_ID NOT LIKE '72%') PL ON SUBSTRING(SCD_QUALITY_ID,2,5)=SUBSTRING(QUALITY_ID,2,5) AND SEASON_ID=SEAS_ID AND EX_MILL_RATE=SCD_INV_RATE AND SCD_INVOICE_DATE>=EFFECTIVE_DATE SET SCD_PL_RATE=CASE WHEN SCD_INV_RATE=EX_MILL_RATE THEN EX_MILL_RATE ELSE 0 END WHERE SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId+" AND SCD_INVOICE_DATE>=DATE_FROM AND SCD_INVOICE_DATE<=DATE_TO");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_QUALITY_ELIGIBLE=CASE WHEN SCD_INV_RATE-SCD_PL_RATE=0 THEN 'Y' ELSE 'N' END WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId+"");
                        
            stmt.execute("INSERT INTO SALES.D_SAL_SCHEME_HEADER(SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_CHARGE_CODE,SCH_BOOK_CODE,SCH_MAIN_CODE,SCH_DRAFT_CR_NOTE_NO,SCH_DRAFT_CR_NOTE_DATE,SCH_REASON_CODE,SCH_LINK_NO,SCH_TOTAL_GR_LIFT_QTY,SCH_TOTAL_NET_LIFT_QTY,SCH_TOTAL_FGR_LIFT_QTY,SCH_TOTAL_SGR_LIFT_QTY,SCH_TOTAL_FNET_LIFT_QTY,SCH_TOTAL_SNET_LIFT_QTY,SCH_TOTAL_INV_AMOUNT,SCH_TOTAL_FINV_AMOUNT,SCH_TOTAL_SINV_AMOUNT,SCH_DISC_RATE,SCH_DISC_PERCENT,SCH_DISC_AMOUNT,SCH_FDISC_PERCENT,SCH_SDISC_PERCENT,SCH_FDISC_AMOUNT,SCH_SDISC_AMOUNT,SCH_TOTAL_AMOUNT,SCH_ELIGIBILITY,SCH_CREATED_BY,SCH_CREATED_DATE,SCH_MODIFIED_BY,SCH_MODIFIED_DATE,SCH_APPROVED,SCH_APPROVED_DATE,SCH_CANCELLED,SCH_CANCELLED_DATE,SCH_REJECTED,SCH_REJECTED_DATE,SCH_CHANGED,SCH_CHANGED_DATE)  SELECT SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,'','','','','','','0000-00-00','','',SUM(SCD_GROSS_QTY),SUM(SCD_NET_QTY),0,0,0,0,SUM(SCD_NET_AMOUNT),0,0,0,0,0,0,0,0,0,0,'N',0,NOW(),0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',1,NOW()  FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"'  AND SCD_SCHEME_ID="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE") ;
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,DINESHMILLS.D_SAL_PARTY_MASTER SET SCH_PARTY_NAME=PARTY_NAME,SCH_CITY=CITY_ID,SCH_CHARGE_CODE=CHARGE_CODE WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+"");
  
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_SLAB,SALES.D_SAL_SCHEME_HEADER SET SCH_ELIGIBILITY =SR_NO WHERE SLAB_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID = "+schemeId+"  AND SLAB_SEASON_ID=SCH_SEASON_ID AND SCH_SCHEME_ID=SLAB_SCHEME_ID AND SCH_TOTAL_GR_LIFT_QTY >=SLAB_FROM AND SCH_TOTAL_GR_LIFT_QTY<=SLAB_TO AND SLAB_PARTY_CODE=SCH_PARTY_CODE") ;

            stmt.execute("UPDATE  SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_SCHEME_HEADER  SET SCD_QUALITY_ELIGIBLE =SCH_ELIGIBILITY WHERE SCD_SCHEME_ID=SCH_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+""); 

            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL,SALES.D_SAL_SCHEME_SLAB SET SCD_DISC_PERCENT = SLAB_OUTPUT WHERE SLAB_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID = "+schemeId+"  AND SLAB_SEASON_ID=SCD_SEASON_ID AND SCD_SCHEME_ID=SLAB_SCHEME_ID  AND SLAB_PARTY_CODE=SCD_PARTY_CODE AND SCD_INVOICE_DATE >= SLAB_FROM_DATE AND SCD_INVOICE_DATE <= SLAB_TO_DATE  AND SCD_QUALITY_ELIGIBLE = SR_NO");
            
         //   stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL,SALES.D_SAL_SCHEME_SLAB SET SCD_DISC_PERCENT = SCD_DISC_PERCENT + 2  WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID = "+schemeId+"  AND SCD_QUALITY_ID = 313004");

            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_AMOUNT=SCD_NET_AMOUNT* SCD_DISC_PERCENT / 100   WHERE SCD_SEASON_ID= '"+seasonId+"' AND SCD_SCHEME_ID= "+schemeId+" ");

            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER, (SELECT SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SUM(SCD_DISC_AMOUNT) AS AMT  FROM SALES.D_SAL_SCHEME_DETAIL  WHERE SCD_SEASON_ID= '"+seasonId+"' AND SCD_SCHEME_ID= "+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE) AS D  SET SCH_DISC_AMOUNT = AMT WHERE SCD_SCHEME_ID=SCH_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" ") ;
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_ELIGIBILITY ='Y' WHERE SCH_SEASON_ID ='"+seasonId+"' AND SCH_SCHEME_ID = '"+schemeId+"'  ");
           
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER A,SALES.D_SAL_SCHEME_SLAB B SET SCH_TARGET_AMOUNT = ROUND(SLAB_TO,0) WHERE SLAB_SCHEME_ID ="+schemeId+" AND SCH_PARTY_CODE = SLAB_PARTY_CODE AND SCH_SCHEME_ID = SLAB_SCHEME_ID AND SLAB_SR_NO =0");
            
         //   processKhakiCreditNote(schemeId, seasonId);
            
            printReport=true;
            return true;
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
    }
    
        private boolean processTWEEDScheme(int schemeId){
        try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            ResultSet rsScheme=stmt.executeQuery("SELECT SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+schemeId);
            rsScheme.first();
            String seasonId=rsScheme.getString("SCHEME_SEASON_ID");

    InvoiceTable(schemeId);

            
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeDetailQry="INSERT INTO SALES.D_SAL_SCHEME_DETAIL(SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_FLAG,SCD_UNIT_CODE,SCD_GROSS_QTY,SCD_GROSS_AMOUNT,SCD_NET_QTY,SCD_NET_AMOUNT,SCD_AGENT_LAST_INVOICE,SCD_AGENT_SR_NO,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_INV_RATE,SCD_PL_RATE,SCD_QUALITY_ELIGIBLE,SCD_DISC_PER_MTR_RATE,SCD_DISC_PERCENT,SCD_DISC_AMOUNT,SCD_GATE_PASS_NO,SCD_GATEPASS_DATE,SCD_BALE_NO) " +
            "SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO,B.PATTERN_CODE AS SHADE ,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,0,'',0,0,0,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO " +
            "FROM SALES.TMP_SAL_INVOICE_HEADER A,SALES.TMP_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D,SALES.D_SAL_SCHEME_MASTER E " +
            "WHERE A.INVOICE_TYPE =1 AND A.INVOICE_DATE = B.INVOICE_DATE AND A.WAREHOUSE_CODE =1 AND A.QUALITY_INDICATOR IN (0,3) AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE >= DATE_FROM  AND A.INVOICE_DATE <= DATE_TO AND SCHEME_SEASON_ID = SEASON_ID AND SCHEME_ID ="+schemeId+" AND SEASON_ID ='"+seasonId+"' AND B.QUALITY_NO/10 IN (SCHEME_QUALITY_ID) ORDER BY A.PARTY_CODE,B.QUALITY_NO,B.PATTERN_CODE,INVOICE_NO,INVOICE_DATE LIMIT 1000000";
            
            stmt.execute(schemeDetailQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL,DINESHMILLS.D_SAL_PRICE_LIST_DETAIL SET SCD_PL_RATE=EX_MILL_RATE WHERE SCD_QUALITY_ID/10=QUALITY_ID AND SCD_SEASON_ID=SUBSTRING(PRICE_LIST_NO,3,5) AND SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID ="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_QUALITY_ELIGIBLE = CASE WHEN SCD_INV_RATE - SCD_PL_RATE =0 THEN 'Y' ELSE 'N' END WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeHeaderQry="INSERT INTO SALES.D_SAL_SCHEME_HEADER(SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_CHARGE_CODE,SCH_BOOK_CODE,SCH_MAIN_CODE,SCH_DRAFT_CR_NOTE_NO,SCH_DRAFT_CR_NOTE_DATE,SCH_REASON_CODE,SCH_LINK_NO,SCH_TOTAL_GR_LIFT_QTY,SCH_TOTAL_NET_LIFT_QTY,SCH_TOTAL_INV_AMOUNT,SCH_DISC_RATE,SCH_DISC_PERCENT,SCH_DISC_AMOUNT,SCH_TOTAL_AMOUNT,SCH_ELIGIBILITY,SCH_CREATED_BY,SCH_CREATED_DATE,SCH_MODIFIED_BY,SCH_MODIFIED_DATE,SCH_APPROVED,SCH_APPROVED_DATE,SCH_CANCELLED,SCH_CANCELLED_DATE,SCH_REJECTED,SCH_REJECTED_DATE,SCH_CHANGED,SCH_CHANGED_DATE) "+
            "SELECT SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,'','','','','','','0000-00-00','','',SUM(SCD_GROSS_QTY),SUM(SCD_NET_QTY),0,0,0,0,0,'N',1,NOW(),0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',1,NOW() "+
            "FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID= '"+seasonId+"' AND SCD_QUALITY_ELIGIBLE ='Y'  AND SCD_SCHEME_ID ="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE ";
            
            stmt.execute(schemeHeaderQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,DINESHMILLS.D_SAL_PARTY_MASTER SET SCH_PARTY_NAME=PARTY_NAME,SCH_CITY=CITY_ID,SCH_CHARGE_CODE=CHARGE_CODE WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_SLAB,SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_RATE=SLAB_OUTPUT WHERE SLAB_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SLAB_SEASON_ID = SCH_SEASON_ID AND SCH_SCHEME_ID =SLAB_SCHEME_ID AND SCH_TOTAL_GR_LIFT_QTY >=SLAB_FROM AND SCH_TOTAL_GR_LIFT_QTY<=SLAB_TO");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_ELIGIBILITY =CASE WHEN SCH_DISC_RATE!=0  THEN 'Y' ELSE 'N' END  WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_AMOUNT=SCH_DISC_RATE*SCH_TOTAL_NET_LIFT_QTY WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PER_MTR_RATE=SCH_DISC_RATE, SCD_DISC_AMOUNT=SCD_NET_QTY*SCH_DISC_RATE WHERE SCD_SCHEME_ID=SCH_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE AND SCD_QUALITY_ELIGIBLE='Y' AND SCH_SEASON_ID ='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            processKhakiCreditNote(schemeId, seasonId);
            
            printReport=true;
            return true;
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
    }

    
    
    
    
    private boolean printCreditNoteInputOldReport(int schemeId){
        try{
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            
            objData.AddColumn("SEASON_ID");
            objData.AddColumn("SCHEME_NAME");
            objData.AddColumn("SCHEME_PERIOD");
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("STATION");
            objData.AddColumn("BOOK_CODE");
            objData.AddColumn("MAIN_CODE");
            objData.AddColumn("DRAFT_CREDIT_NOTE_NO");
            objData.AddColumn("DRAFT_CREDIT_NOTE_DATE");
            objData.AddColumn("REASON_CODE");
            objData.AddColumn("LINK_NO");
            objData.AddColumn("NET_AMOUNT");
            objData.AddColumn("GROSS_QUANTITY");
            
            String str ="SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_NAME,SCH_CITY,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_BOOK_CODE,SCH_MAIN_CODE,SCH_DRAFT_CR_NOTE_NO,SCH_DRAFT_CR_NOTE_DATE,SCH_REASON_CODE,SCH_LINK_NO,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT, SCH_TOTAL_GR_LIFT_QTY FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCH_ELIGIBILITY='Y' ORDER BY SCH_PARTY_CODE";
            ResultSet  rsTemp =data.getResult(str);
            if(rsTemp.getRow()>0){
                while(!rsTemp.isAfterLast()){
                    
                    TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                    
                    objRow.setValue("SEASON_ID",rsTemp.getString("SCHEME_SEASON_ID"));
                    objRow.setValue("SCHEME_NAME",rsTemp.getString("SCHEME_NAME"));
                    objRow.setValue("SCHEME_PERIOD","("+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_START"))+" TO "+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_END"))+")");
                    objRow.setValue("PARTY_CODE", rsTemp.getString("SCH_PARTY_CODE"));
                    objRow.setValue("PARTY_NAME", rsTemp.getString("SCH_PARTY_NAME"));
                    objRow.setValue("STATION", rsTemp.getString("SCH_CITY"));
                    objRow.setValue("BOOK_CODE", rsTemp.getString("SCH_BOOK_CODE"));
                    objRow.setValue("MAIN_CODE", rsTemp.getString("SCH_MAIN_CODE"));
                    objRow.setValue("DRAFT_CREDIT_NOTE_NO", rsTemp.getString("SCH_DRAFT_CR_NOTE_NO"));
                    objRow.setValue("DRAFT_CREDIT_NOTE_DATE", EITLERPGLOBAL.formatDate(rsTemp.getString("SCH_DRAFT_CR_NOTE_DATE")));
                    objRow.setValue("REASON_CODE", rsTemp.getString("SCH_REASON_CODE"));
                    objRow.setValue("LINK_NO", rsTemp.getString("SCH_LINK_NO"));
                    objRow.setValue("NET_AMOUNT", rsTemp.getString("SCH_DISC_AMOUNT"));
                    objRow.setValue("GROSS_QUANTITY", rsTemp.getString("SCH_TOTAL_GR_LIFT_QTY"));
                    
                    objData.AddRow(objRow);
                    rsTemp.next();
                }
                
                EITLERPGLOBAL.PAGE_BREAK=true;
                new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/rptCreditNoteInput.rpt",new HashMap(),objData);
                rsTemp.close();
                
                return true;
            }else return false;
        }catch(SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
    
    
    private boolean printCreditNoteInputBonzReport(int schemeId){
        try{
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            
            objData.AddColumn("SEASON_ID");
            objData.AddColumn("SCHEME_NAME");
            objData.AddColumn("SCHEME_PERIOD");
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("STATION");
            objData.AddColumn("BOOK_CODE");
            objData.AddColumn("MAIN_CODE");
            objData.AddColumn("DRAFT_CREDIT_NOTE_NO");
            objData.AddColumn("DRAFT_CREDIT_NOTE_DATE");
            objData.AddColumn("REASON_CODE");
            objData.AddColumn("LINK_NO");
            objData.AddColumn("NET_AMOUNT");
            objData.AddColumn("GROSS_QUANTITY");
            
            String str ="SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_NAME,SCH_CITY,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_BOOK_CODE,SCH_MAIN_CODE,SCH_DRAFT_CR_NOTE_NO,SCH_DRAFT_CR_NOTE_DATE,SCH_REASON_CODE,SCH_LINK_NO,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT, SCH_TOTAL_GR_LIFT_QTY FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCH_ELIGIBILITY='Y' ORDER BY SCH_PARTY_CODE";
            ResultSet  rsTemp =data.getResult(str);
            if(rsTemp.getRow()>0){
                while(!rsTemp.isAfterLast()){
                    
                    TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                    
                    objRow.setValue("SEASON_ID",rsTemp.getString("SCHEME_SEASON_ID"));
                    objRow.setValue("SCHEME_NAME",rsTemp.getString("SCHEME_NAME"));
                    objRow.setValue("SCHEME_PERIOD","("+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_START"))+" TO "+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_END"))+")");
                    objRow.setValue("PARTY_CODE", rsTemp.getString("SCH_PARTY_CODE"));
                    objRow.setValue("PARTY_NAME", rsTemp.getString("SCH_PARTY_NAME"));
                    objRow.setValue("STATION", rsTemp.getString("SCH_CITY"));
                    objRow.setValue("BOOK_CODE", rsTemp.getString("SCH_BOOK_CODE"));
                    objRow.setValue("MAIN_CODE", rsTemp.getString("SCH_MAIN_CODE"));
                    objRow.setValue("DRAFT_CREDIT_NOTE_NO", rsTemp.getString("SCH_DRAFT_CR_NOTE_NO"));
                    objRow.setValue("DRAFT_CREDIT_NOTE_DATE", EITLERPGLOBAL.formatDate(rsTemp.getString("SCH_DRAFT_CR_NOTE_DATE")));
                    objRow.setValue("REASON_CODE", rsTemp.getString("SCH_REASON_CODE"));
                    objRow.setValue("LINK_NO", rsTemp.getString("SCH_LINK_NO"));
                    objRow.setValue("NET_AMOUNT", rsTemp.getString("SCH_DISC_AMOUNT"));
                    objRow.setValue("GROSS_QUANTITY", rsTemp.getString("SCH_TOTAL_GR_LIFT_QTY"));
                    
                    objData.AddRow(objRow);
                    rsTemp.next();
                }
                
                EITLERPGLOBAL.PAGE_BREAK=true;
                new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/rptCreditNoteInput.rpt",new HashMap(),objData);
                rsTemp.close();
                
                return true;
            }else return false;
        }catch(SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
    
    private boolean printKhakiDetailReport(int schemeId) {
        try{
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            
            objData.AddColumn("SEASON_ID");
            objData.AddColumn("SCHEME_NAME");
            objData.AddColumn("SCHEME_PERIOD");
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("STATION");
            objData.AddColumn("ELIGIBILE");
            objData.AddColumn("DISC_RATE");
            objData.AddColumn("DISC_AMOUNT");
            objData.AddColumn("QUALITY_NO");
            objData.AddColumn("SHADE_NO");
            objData.AddColumn("PIECE_NO");
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("RATE");
            objData.AddColumn("GROSS_QUANTITY");
            objData.AddColumn("NET_QUANTITY");
            objData.AddColumn("FLAG");
            
            String str ="SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_NAME,SCH_CITY,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_ELIGIBILITY,SCH_DISC_RATE,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_FLAG,SCD_GROSS_QTY,SCD_NET_QTY,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_INV_RATE FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCD_SEASON_ID=SCH_SEASON_ID AND SCD_PARTY_CODE=SCH_PARTY_CODE AND SCH_SCHEME_ID=SCD_SCHEME_ID AND SCD_QUALITY_ELIGIBLE='Y' ORDER BY SCH_ELIGIBILITY DESC,SCH_PARTY_CODE";
            ResultSet  rsTemp =data.getResult(str);
            while(!rsTemp.isAfterLast()){
                TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                
                objRow.setValue("SEASON_ID",rsTemp.getString("SCHEME_SEASON_ID"));
                objRow.setValue("SCHEME_NAME",rsTemp.getString("SCHEME_NAME"));
                objRow.setValue("SCHEME_PERIOD","("+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_START"))+"-"+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_END"))+")");
                objRow.setValue("PARTY_CODE", rsTemp.getString("SCH_PARTY_CODE"));
                objRow.setValue("PARTY_NAME", rsTemp.getString("SCH_PARTY_NAME"));
                objRow.setValue("STATION", rsTemp.getString("SCH_CITY"));
                objRow.setValue("ELIGIBILE", rsTemp.getString("SCH_ELIGIBILITY"));
                objRow.setValue("DISC_RATE", rsTemp.getString("SCH_DISC_RATE"));
                objRow.setValue("DISC_AMOUNT", rsTemp.getString("SCH_DISC_AMOUNT"));
                objRow.setValue("QUALITY_NO", rsTemp.getString("SCD_QUALITY_ID"));
                objRow.setValue("SHADE_NO", rsTemp.getString("SCD_SHADE"));
                objRow.setValue("PIECE_NO", rsTemp.getString("SCD_PIECE_NO"));
                objRow.setValue("INVOICE_NO", rsTemp.getString("SCD_INVOICE_NO"));
                objRow.setValue("INVOICE_DATE", EITLERPGLOBAL.formatDate(rsTemp.getString("SCD_INVOICE_DATE")));
                objRow.setValue("RATE", rsTemp.getString("SCD_INV_RATE"));
                objRow.setValue("GROSS_QUANTITY", rsTemp.getString("SCD_GROSS_QTY"));
                objRow.setValue("NET_QUANTITY", rsTemp.getString("SCD_NET_QTY"));
                objRow.setValue("FLAG", rsTemp.getString("SCD_FLAG"));
                
                objData.AddRow(objRow);
                rsTemp.next();
            }
            
            HashMap parameter=new HashMap();
            parameter.put("RUN_BY", clsUser.getUserName(2,EITLERPGLOBAL.gNewUserID));
            parameter.put("RUN_TIME", data.getStringValueFromDB("SELECT CURTIME() FROM DUAL").substring(0,5));
            
            EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/rptKhakiDetailReport.rpt",parameter,objData);
            rsTemp.close();
            
            return true;
        }catch(SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
    
     
    
    private void generateSchemeNameCombo(){
        schemeNameModel=new EITLComboModel();
        schemeNameModel.removeAllElements();
        cmbSchemeName.setModel(schemeNameModel);
        try{
            ComboData combodata=new ComboData();
            combodata.Code=0;
            combodata.Text="Select Scheme Name";
            
            schemeNameModel.addElement(combodata);
            ResultSet rs=data.getResult("SELECT SCHEME_ID,SCHEME_NAME,SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_VISIBLE =0 ORDER BY SCHEME_ID+0 DESC");
            while(!rs.isAfterLast()){
                if(!rs.getString("SCHEME_NAME").contains("ACD")){
                    combodata=new ComboData();
                    combodata.Code=rs.getLong("SCHEME_ID");
                    combodata.strCode=rs.getString("SCHEME_NAME");
                    combodata.Text=rs.getString("SCHEME_NAME")+"-"+rs.getString("SCHEME_SEASON_ID");
                    
                    schemeNameModel.addElement(combodata);
                }
                rs.next();
            }
        }catch(SQLException e){e.printStackTrace();}
    }
    
    private void formatGrid(){
        DataModel=new EITLTableModel();
        table.removeAll();
        table.setModel(DataModel);
        
        DataModel.addColumn("Slab Sr. No.");
        DataModel.addColumn("Party Code");
        DataModel.addColumn("From Date");
        DataModel.addColumn("To Date");
        DataModel.addColumn("From(MTR)");
        DataModel.addColumn("To(MTR)");
        DataModel.addColumn("Discount");
        DataModel.addColumn("Disc. Unit");
    }
    
   private boolean InvoiceTable(int schemeId){
          try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            ResultSet rsScheme=stmt.executeQuery("SELECT SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+schemeId);
            rsScheme.first();
            String seasonId=rsScheme.getString("SCHEME_SEASON_ID");
      
             String sql = "DELETE FROM SALES.TMP_SAL_INVOICE_HEADER";
            stmt.execute(sql);            
            
            sql = "INSERT INTO SALES.TMP_SAL_INVOICE_HEADER SELECT A.*  FROM DINESHMILLS.D_SAL_INVOICE_HEADER A,DINESHMILLS.D_SAL_SEASON_MASTER D WHERE A.INVOICE_TYPE =1 AND A.INVOICE_DATE >= DATE_FROM AND A.INVOICE_DATE <= DATE_TO AND D.SEASON_ID ='"+seasonId+"'";
            stmt.execute(sql);            
            
            sql = "DELETE FROM SALES.TMP_SAL_INVOICE_DETAIL";
            stmt.execute(sql);            
            
            sql = "INSERT INTO SALES.TMP_SAL_INVOICE_DETAIL SELECT A.*   FROM DINESHMILLS.D_SAL_INVOICE_DETAIL A,DINESHMILLS.D_SAL_SEASON_MASTER D WHERE A.INVOICE_TYPE =1 AND A.INVOICE_DATE >= DATE_FROM AND A.INVOICE_DATE <= DATE_TO AND D.SEASON_ID ='"+seasonId+"'";
            stmt.execute(sql);            
            
            sql = "UPDATE SALES.TMP_SAL_INVOICE_HEADER SET PARTY_CODE = 159991 WHERE PARTY_CODE = 739901";
            stmt.execute(sql);            
            
            sql = "UPDATE SALES.TMP_SAL_INVOICE_DETAIL SET PARTY_CODE = 159991 WHERE PARTY_CODE = 739901";
            stmt.execute(sql);            
           
             sql = "UPDATE SALES.TMP_SAL_INVOICE_HEADER SET PARTY_CODE = 510901 WHERE PARTY_CODE = 510501";
            stmt.execute(sql);            
            
            sql = "UPDATE SALES.TMP_SAL_INVOICE_DETAIL SET PARTY_CODE = 510901 WHERE PARTY_CODE = 510501";
            stmt.execute(sql);  
        
               printReport=true;
            return true;
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
    }
    
    private boolean processRetailerScheme(int schemeId){
        try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            ResultSet rsScheme=stmt.executeQuery("SELECT SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+schemeId);
            rsScheme.first();
            String seasonId=rsScheme.getString("SCHEME_SEASON_ID");
            

    InvoiceTable(schemeId);

            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeDetailQry="INSERT INTO SALES.D_SAL_SCHEME_DETAIL(SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_FLAG,SCD_UNIT_CODE,SCD_GROSS_QTY,SCD_GROSS_AMOUNT,SCD_NET_QTY,SCD_NET_AMOUNT,SCD_AGENT_LAST_INVOICE,SCD_AGENT_SR_NO,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_INV_RATE,SCD_PL_RATE,SCD_QUALITY_ELIGIBLE,SCD_DISC_PER_MTR_RATE,SCD_DISC_PERCENT,SCD_DISC_AMOUNT,SCD_GATE_PASS_NO,SCD_GATEPASS_DATE,SCD_BALE_NO) " +
            "SELECT SCHEME_ID,I.SEASON_ID,PARTY_CODE,QUALITY_NO,SHADE ,PIECE_NO,FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,NET_AMOUNT,AGENT_LAST_INVOICE,AGENT_SR_NO,INVOICE_NO,INVOICE_DATE,RATE,0,'',0,0,0,GATEPASS_NO,GATEPASS_DATE,BALE_NO FROM  "+
            "(SELECT QUALITY_ID,SEASON_ID FROM D_SAL_QUALITY_MASTER WHERE SEASON_ID='"+seasonId+"' AND CATEGORY_LIST IN('REGULAR','S-QL')) Q "+
            "INNER JOIN "+
            //"(SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO/10 QUALITY_NO,B.PATTERN_CODE AS SHADE,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO FROM SALES.TMP_SAL_INVOICE_HEADER A,SALES.TMP_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D, SALES.D_SAL_SCHEME_MASTER E, D_SAL_PARTY_MASTER P WHERE A.INVOICE_TYPE =1 AND A.WAREHOUSE_CODE =1 AND A.QUALITY_INDICATOR IN (0,3) AND  A.PARTY_CODE=P.PARTY_CODE AND A.PARTY_CODE NOT IN (478808,155999) AND SUBSTRING(A.PARTY_CODE,1,2) NOT IN (74,69,59,77,47,58,57) AND PARTY_TYPE=2 AND A.INVOICE_DATE=B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE>=DATE_FROM AND A.INVOICE_DATE<=DATE_TO AND SCHEME_SEASON_ID=SEASON_ID AND SCHEME_ID="+schemeId+" AND SEASON_ID='"+seasonId+"') I ON SUBSTRING(QUALITY_ID,2,5)=SUBSTRING(QUALITY_NO,2,5) AND Q.SEASON_ID=I.SEASON_ID "+
            "(SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO/10 QUALITY_NO,B.PATTERN_CODE AS SHADE,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO FROM SALES.TMP_SAL_INVOICE_HEADER A,SALES.TMP_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D, SALES.D_SAL_SCHEME_MASTER E, D_SAL_PARTY_MASTER P WHERE A.INVOICE_TYPE =1 AND A.WAREHOUSE_CODE =1 AND A.QUALITY_INDICATOR IN (0,3) AND  A.PARTY_CODE=P.PARTY_CODE AND A.PARTY_CODE NOT IN (478808,719907) AND SUBSTRING(A.PARTY_CODE,1,2) NOT IN (43,74,69,59,77,47,58,57) AND PARTY_TYPE=2 AND A.INVOICE_DATE=B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE>=DATE_FROM AND A.INVOICE_DATE<=DATE_TO AND SCHEME_SEASON_ID=SEASON_ID AND SCHEME_ID="+schemeId+" AND SEASON_ID='"+seasonId+"') I ON SUBSTRING(QUALITY_ID,2,5)=SUBSTRING(QUALITY_NO,2,5) AND Q.SEASON_ID=I.SEASON_ID "+
           // "(SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO/10 QUALITY_NO,B.PATTERN_CODE AS SHADE,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO FROM SALES.TMP_SAL_INVOICE_HEADER A,SALES.TMP_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D, SALES.D_SAL_SCHEME_MASTER E, D_SAL_PARTY_MASTER P WHERE A.INVOICE_TYPE =1 AND A.WAREHOUSE_CODE =1 AND A.QUALITY_INDICATOR IN (0,3) AND  A.PARTY_CODE=P.PARTY_CODE AND A.PARTY_CODE NOT IN (478808,155999) AND A.INVOICE_DATE=B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE>=DATE_FROM AND A.INVOICE_DATE<=DATE_TO AND SCHEME_SEASON_ID=SEASON_ID AND SCHEME_ID="+schemeId+" AND SEASON_ID='"+seasonId+"') I ON SUBSTRING(QUALITY_ID,2,5)=SUBSTRING(QUALITY_NO,2,5) AND Q.SEASON_ID=I.SEASON_ID "+
            // UPDATED BY RISHI ON 14/07/2014            
            //"UNION ALL SELECT EXCP_SCHEME_ID,EXCP_SEASON_ID,EXCP_PARTY_CODE,B.QUALITY_NO/10,B.PATTERN_CODE AS SHADE ,B.PIECE_NO,FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,B.AGENT_SR_NO,B.INVOICE_NO,B.INVOICE_DATE,RATE,RATE,'',0,0,0,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO  FROM SALES.TMP_SAL_INVOICE_HEADER A,SALES.TMP_SAL_INVOICE_DETAIL  B,SALES.D_SAL_EXCEPTION_INVOICE C  WHERE A.INVOICE_TYPE =1 AND A.INVOICE_DATE = B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_NO = EXCP_INVOICE_NO AND A.PARTY_CODE = EXCP_PARTY_CODE AND A.PARTY_CODE NOT IN (478808,155999) AND  A.INVOICE_DATE = EXCP_INVOICE_DATE AND EXCP_FLAG ='INSERT' AND EXCP_SCHEME_ID = "+schemeId+" AND EXCP_SEASON_ID  ='"+seasonId+"'";
            "UNION ALL SELECT EXCP_SCHEME_ID,EXCP_SEASON_ID,EXCP_PARTY_CODE,B.QUALITY_NO/10,B.PATTERN_CODE AS SHADE ,B.PIECE_NO,FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,B.AGENT_SR_NO,B.INVOICE_NO,B.INVOICE_DATE,RATE,RATE,'',0,0,0,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO  FROM SALES.TMP_SAL_INVOICE_HEADER A,SALES.TMP_SAL_INVOICE_DETAIL  B,SALES.D_SAL_EXCEPTION_INVOICE C  WHERE A.INVOICE_TYPE =1 AND A.INVOICE_DATE = B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_NO = EXCP_INVOICE_NO AND A.PARTY_CODE = EXCP_PARTY_CODE AND A.PARTY_CODE NOT IN (478808,719907) AND  A.INVOICE_DATE = EXCP_INVOICE_DATE AND EXCP_FLAG ='INSERT' AND EXCP_SCHEME_ID = "+schemeId+" AND EXCP_SEASON_ID  ='"+seasonId+"'";
            stmt.execute(schemeDetailQry);
            
            stmt.execute("DELETE FROM  SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SCHEME_ID=0 AND SCD_SEASON_ID =0 AND SCD_PARTY_CODE =0  AND SCD_QUALITY_ID =0");
            
            // UPDATED BY RISHI ON 14/07/2014
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_EXCEPTION_INVOICE SET SCD_SCHEME_ID = 0,SCD_SEASON_ID =0 ,SCD_PARTY_CODE =0 ,SCD_QUALITY_ID =0 WHERE EXCP_PARTY_CODE = SCD_PARTY_CODE AND SCD_SEASON_ID = EXCP_SEASON_ID AND SCD_SCHEME_ID = EXCP_SCHEME_ID AND SCD_SEASON_ID= '"+seasonId+"' AND SCD_SCHEME_ID ="+schemeId+"  AND  SCD_INVOICE_DATE >=EXCP_INVOICE_FROM_DATE AND SCD_INVOICE_DATE <=EXCP_INVOICE_TO_DATE AND EXCP_FLAG ='DELETE'");
            // UPDATED BY RISHI ON 14/07/2014
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_EXCEPTION_INVOICE SET SCD_SCHEME_ID = 0,SCD_SEASON_ID =0 ,SCD_PARTY_CODE =0 ,SCD_QUALITY_ID =0 WHERE EXCP_PARTY_CODE = SCD_PARTY_CODE AND SCD_SEASON_ID = EXCP_SEASON_ID AND SCD_SCHEME_ID = EXCP_SCHEME_ID AND SCD_SEASON_ID= '"+seasonId+"' AND SCD_SCHEME_ID ="+schemeId+"  AND  SCD_INVOICE_DATE =EXCP_INVOICE_DATE  AND EXCP_FLAG ='DELETE'  AND SCD_INVOICE_NO = EXCP_INVOICE_NO");
            
            // UPDATED BY RISHI ON 14/07/2014
            stmt.execute("DELETE FROM  SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SCHEME_ID=0 AND SCD_SEASON_ID =0 AND SCD_PARTY_CODE =0  AND SCD_QUALITY_ID =0");
            
            //stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL,DINESHMILLS.D_SAL_PRICE_LIST_DETAIL SET SCD_PL_RATE=EX_MILL_RATE WHERE SUBSTRING(SCD_QUALITY_ID,2,5)=SUBSTRING(QUALITY_ID,2,5) AND SCD_SEASON_ID=SUBSTRING(PRICE_LIST_NO,3,5) AND SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID ="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL LEFT JOIN (SELECT SEASON_ID,DATE_FROM,DATE_TO FROM DINESHMILLS.D_SAL_SEASON_MASTER WHERE SEASON_ID ='"+seasonId+"') S ON SCD_SEASON_ID=SEASON_ID LEFT JOIN (SELECT SUBSTRING(PR.PRICE_LIST_NO,3,5) SEAS_ID,QUALITY_ID,PR.EX_MILL_RATE,PR.EFFECTIVE_DATE FROM DINESHMILLS.D_SAL_PRICE_LIST_DETAIL PD, DINESHMILLS.D_SAL_PRICE_LIST_RATE PR WHERE PD.PRICE_LIST_NO=PR.PRICE_LIST_NO AND PD.SR_NO=PRICE_LIST_SR_NO AND SUBSTRING(PR.PRICE_LIST_NO,3,3) ='"+seasonId+"' AND QUALITY_ID NOT LIKE '72%') PL ON SUBSTRING(SCD_QUALITY_ID,2,5)=SUBSTRING(QUALITY_ID,2,5) AND SEASON_ID=SEAS_ID AND EX_MILL_RATE=SCD_INV_RATE AND SCD_INVOICE_DATE>=EFFECTIVE_DATE SET SCD_PL_RATE=CASE WHEN SCD_INV_RATE=EX_MILL_RATE THEN EX_MILL_RATE ELSE 0 END WHERE SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId+" AND SCD_INVOICE_DATE>=DATE_FROM AND SCD_INVOICE_DATE<=DATE_TO");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_QUALITY_ELIGIBLE=CASE WHEN SCD_INV_RATE-SCD_PL_RATE=0 THEN 'Y' ELSE 'N' END WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeHeaderQry="INSERT INTO SALES.D_SAL_SCHEME_HEADER(SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_CHARGE_CODE,SCH_BOOK_CODE,SCH_MAIN_CODE,SCH_DRAFT_CR_NOTE_NO,SCH_DRAFT_CR_NOTE_DATE,SCH_REASON_CODE,SCH_LINK_NO,SCH_TOTAL_GR_LIFT_QTY,SCH_TOTAL_NET_LIFT_QTY,SCH_TOTAL_INV_AMOUNT,SCH_TOTAL_FGR_LIFT_QTY,SCH_DISC_PERCENT,SCH_DISC_AMOUNT,SCH_TOTAL_AMOUNT,SCH_ELIGIBILITY,SCH_CREATED_BY,SCH_CREATED_DATE,SCH_MODIFIED_BY,SCH_MODIFIED_DATE,SCH_APPROVED,SCH_APPROVED_DATE,SCH_CANCELLED,SCH_CANCELLED_DATE,SCH_REJECTED,SCH_REJECTED_DATE,SCH_CHANGED,SCH_CHANGED_DATE) "+
            "SELECT SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,'','','','','','','0000-00-00','','',SUM(SCD_GROSS_QTY),SUM(SCD_NET_QTY),SUM(SCD_NET_AMOUNT),SUM(SCD_GROSS_QTY),0,0,0,'N',1,NOW(),0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',1,NOW() "+
            "FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID= '"+seasonId+"' AND SCD_QUALITY_ELIGIBLE ='Y' AND SCD_SCHEME_ID="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE ";
            
            stmt.execute(schemeHeaderQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,DINESHMILLS.D_SAL_PARTY_MASTER SET SCH_PARTY_NAME=PARTY_NAME,SCH_CITY=CITY_ID,SCH_CHARGE_CODE=CHARGE_CODE WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            //UPDATE FOR 5 LACK CONDITION IN SCHEME --- TOTAL GROSS QTY IS INSERTED INTO SCH_TOTAL_FGR_LIFT_QTY FOR SLAB CALCULATION
    //        stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER, (SELECT SCH_PARTY_CODE PARTY_CODE ,SUM(SCH_TOTAL_INV_AMOUNT) AMT,SUM(SCH_TOTAL_GR_LIFT_QTY) GQT FROM SALES.`D_SAL_SCHEME_HEADER` WHERE SCH_SCHEME_ID IN(9,11,14) GROUP BY SCH_PARTY_CODE HAVING AMT>=500000 ) G SET SCH_TOTAL_FGR_LIFT_QTY=GQT WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
         //   stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER, (SELECT SCH_PARTY_CODE PARTY_CODE ,SUM(SCH_TOTAL_INV_AMOUNT) AMT,SUM(SCH_TOTAL_GR_LIFT_QTY) GQT FROM SALES.`D_SAL_SCHEME_HEADER` WHERE SCH_SCHEME_ID IN(18,19,20) GROUP BY SCH_PARTY_CODE HAVING AMT>=500000 ) G SET SCH_TOTAL_FGR_LIFT_QTY=GQT WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_SLAB,SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_PERCENT=SLAB_OUTPUT,SCH_ELIGIBILITY =CASE WHEN SLAB_OUTPUT!=0 THEN 'Y' ELSE 'N' END WHERE SLAB_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SLAB_SEASON_ID=SCH_SEASON_ID AND SCH_SCHEME_ID=SLAB_SCHEME_ID AND SCH_TOTAL_FGR_LIFT_QTY>=SLAB_FROM AND SCH_TOTAL_FGR_LIFT_QTY<=SLAB_TO");
            
            //UPDATE FOR JSBK PARTY
            //stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_PERCENT=SCH_DISC_PERCENT/2 WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId +" AND SCH_PARTY_CODE IN (478808,155999)");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_AMOUNT=SCH_DISC_PERCENT*SCH_TOTAL_INV_AMOUNT/100 WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PERCENT=SCH_DISC_PERCENT,SCD_DISC_AMOUNT=SCD_NET_AMOUNT*SCH_DISC_PERCENT/100 WHERE SCD_SCHEME_ID=SCH_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE AND SCD_QUALITY_ELIGIBLE='Y' AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
          
            
            
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER, (SELECT SCD_SEASON_ID,SCD_SCHEME_ID, SCD_PARTY_CODE,SUM(SCD_DISC_AMOUNT) AS DISC_AMT FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId+" AND SCD_QUALITY_ELIGIBLE ='Y' GROUP BY SCD_SEASON_ID,SCD_SCHEME_ID, SCD_PARTY_CODE HAVING SUM(SCD_DISC_AMOUNT) > 0) AS D SET SCH_DISC_AMOUNT = DISC_AMT WHERE SCD_SEASON_ID = SCH_SEASON_ID AND SCH_SCHEME_ID =SCD_SCHEME_ID  AND SCH_PARTY_CODE= SCD_PARTY_CODE AND DISC_AMT != SCH_DISC_AMOUNT");



             stmt.execute("UPDATE  SALES.D_SAL_SCHEME_DETAIL,DINESHMILLS.D_SAL_QUALITY_MASTER SET SCD_BRAND = BRAND_ID WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId+" AND SEASON_ID = SCD_SEASON_ID  AND QUALITY_ID = CONCAT(3,SUBSTRING(SCD_QUALITY_ID,2,5))") ;


             stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PER1= SCD_DISC_PERCENT,SCD_DISC_AMT1 =SCD_DISC_AMOUNT WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);


              stmt.execute("UPDATE  SALES.D_SAL_SCHEME_DETAIL,DINESHMILLS.D_SAL_QUALITY_MASTER SET SCD_DISC_PER2 = 3 ,SCD_DISC_PER1 = SCD_DISC_PERCENT,SCD_DISC_AMT2=3*SCD_NET_AMOUNT/100 WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId+" AND SEASON_ID = SCD_SEASON_ID AND QUALITY_ID = CONCAT(3,SUBSTRING(SCD_QUALITY_ID,2,5)) AND BRAND_ID IN ('CON','FAV','GG','TUZ','PR') AND SCD_DISC_PERCENT >0");

             stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PER_CAPTION = CASE WHEN SCD_DISC_PER1 > 0 AND SCD_DISC_PER2 = 0 THEN CONCAT(SCD_DISC_PER1,' + 0')  WHEN SCD_DISC_PER1 > 0 AND SCD_DISC_PER2 > 0 THEN CONCAT(SCD_DISC_PER1,' + 3')  WHEN SCD_DISC_PER1 = 0 AND SCD_DISC_PER2 = 0 THEN '0 + 0' END, SCD_DISC_AMOUNT = (SCD_DISC_AMT1+ SCD_DISC_AMT2)  WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);


              stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER, (SELECT SCD_SEASON_ID,SCD_SCHEME_ID, SCD_PARTY_CODE,SUM(SCD_DISC_AMOUNT) AS DISC_AMT FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID = '"+seasonId+"' AND SCD_SCHEME_ID="+schemeId+" AND SCD_QUALITY_ELIGIBLE ='Y' GROUP BY SCD_SEASON_ID,SCD_SCHEME_ID, SCD_PARTY_CODE HAVING SUM(SCD_DISC_AMOUNT) > 0) AS D SET SCH_DISC_AMOUNT = DISC_AMT WHERE SCD_SEASON_ID = SCH_SEASON_ID AND SCH_SCHEME_ID =SCD_SCHEME_ID  AND SCH_PARTY_CODE= SCD_PARTY_CODE AND DISC_AMT != SCH_DISC_AMOUNT");




            
            
            
            
        //    processRetailerCreditNote(schemeId, seasonId);
//            setData(schemeId, seasonId);
//            processCreditNoteInput(schemeId, seasonId);
//            
            printReport=true;
            return true;
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
    }
    
 private boolean processNORTHScheme(int schemeId){
        try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            ResultSet rsScheme=stmt.executeQuery("SELECT SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+schemeId);
            rsScheme.first();
            String seasonId=rsScheme.getString("SCHEME_SEASON_ID");
            
    InvoiceTable(schemeId);
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeDetailQry="INSERT INTO SALES.D_SAL_SCHEME_DETAIL(SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_FLAG,SCD_UNIT_CODE,SCD_GROSS_QTY,SCD_GROSS_AMOUNT,SCD_NET_QTY,SCD_NET_AMOUNT,SCD_AGENT_LAST_INVOICE,SCD_AGENT_SR_NO,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_INV_RATE,SCD_PL_RATE,SCD_QUALITY_ELIGIBLE,SCD_DISC_PER_MTR_RATE,SCD_DISC_PERCENT,SCD_DISC_AMOUNT,SCD_GATE_PASS_NO,SCD_GATEPASS_DATE,SCD_BALE_NO) " +
            "SELECT SCHEME_ID,I.SEASON_ID,PARTY_CODE,QUALITY_NO,SHADE ,PIECE_NO,FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,NET_AMOUNT,AGENT_LAST_INVOICE,AGENT_SR_NO,INVOICE_NO,INVOICE_DATE,RATE,0,'',0,0,0,GATEPASS_NO,GATEPASS_DATE,BALE_NO FROM  "+
            "(SELECT QUALITY_ID,SEASON_ID FROM D_SAL_QUALITY_MASTER WHERE SEASON_ID='"+seasonId+"' AND CATEGORY_LIST IN('REGULAR','S-QL')) Q "+
            "INNER JOIN "+
            //"(SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO/10 QUALITY_NO,B.PATTERN_CODE AS SHADE,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO FROM SALES.TMP_SAL_INVOICE_HEADER A,SALES.TMP_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D, SALES.D_SAL_SCHEME_MASTER E, D_SAL_PARTY_MASTER P WHERE A.INVOICE_TYPE =1 AND A.WAREHOUSE_CODE =1 AND A.QUALITY_INDICATOR IN (0,3) AND  A.PARTY_CODE=P.PARTY_CODE AND SUBSTRING(A.PARTY_CODE,1,2) IN (74,69,59,77,47,58,57) AND  A.PARTY_CODE NOT IN (478808,155999) AND PARTY_TYPE=2 AND A.INVOICE_DATE=B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE>=DATE_FROM AND A.INVOICE_DATE<=DATE_TO AND SCHEME_SEASON_ID=SEASON_ID AND SCHEME_ID="+schemeId+" AND SEASON_ID='"+seasonId+"') I ON SUBSTRING(QUALITY_ID,2,5)=SUBSTRING(QUALITY_NO,2,5) AND Q.SEASON_ID=I.SEASON_ID "+
            "(SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO/10 QUALITY_NO,B.PATTERN_CODE AS SHADE,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO FROM SALES.TMP_SAL_INVOICE_HEADER A,SALES.TMP_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D, SALES.D_SAL_SCHEME_MASTER E, D_SAL_PARTY_MASTER P WHERE A.INVOICE_TYPE =1 AND A.WAREHOUSE_CODE =1 AND A.QUALITY_INDICATOR IN (0,3) AND  A.PARTY_CODE=P.PARTY_CODE AND SUBSTRING(A.PARTY_CODE,1,2) IN (69,59,90,77,47,58,57,43) AND  A.PARTY_CODE NOT IN (478808,719907) AND PARTY_TYPE=2 AND A.INVOICE_DATE=B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE>=DATE_FROM AND A.INVOICE_DATE<=DATE_TO AND SCHEME_SEASON_ID=SEASON_ID AND SCHEME_ID="+schemeId+" AND SEASON_ID='"+seasonId+"') I ON SUBSTRING(QUALITY_ID,2,5)=SUBSTRING(QUALITY_NO,2,5) AND Q.SEASON_ID=I.SEASON_ID "+
           // "(SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO/10 QUALITY_NO,B.PATTERN_CODE AS SHADE,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO FROM SALES.TMP_SAL_INVOICE_HEADER A,SALES.TMP_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D, SALES.D_SAL_SCHEME_MASTER E, D_SAL_PARTY_MASTER P WHERE A.INVOICE_TYPE =1 AND A.WAREHOUSE_CODE =1 AND A.QUALITY_INDICATOR IN (0,3) AND  A.PARTY_CODE=P.PARTY_CODE AND A.PARTY_CODE NOT IN (478808,155999) AND A.INVOICE_DATE=B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE>=DATE_FROM AND A.INVOICE_DATE<=DATE_TO AND SCHEME_SEASON_ID=SEASON_ID AND SCHEME_ID="+schemeId+" AND SEASON_ID='"+seasonId+"') I ON SUBSTRING(QUALITY_ID,2,5)=SUBSTRING(QUALITY_NO,2,5) AND Q.SEASON_ID=I.SEASON_ID "+
            // UPDATED BY RISHI ON 14/07/2014            
            //"UNION ALL SELECT EXCP_SCHEME_ID,EXCP_SEASON_ID,EXCP_PARTY_CODE,B.QUALITY_NO/10,B.PATTERN_CODE AS SHADE ,B.PIECE_NO,FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,B.AGENT_SR_NO,B.INVOICE_NO,B.INVOICE_DATE,RATE,RATE,'',0,0,0,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO  FROM SALES.TMP_SAL_INVOICE_HEADER A,SALES.TMP_SAL_INVOICE_DETAIL  B,SALES.D_SAL_EXCEPTION_INVOICE C  WHERE A.INVOICE_TYPE =1 AND A.INVOICE_DATE = B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_NO = EXCP_INVOICE_NO AND A.PARTY_CODE = EXCP_PARTY_CODE AND A.PARTY_CODE NOT IN (478808,155999) AND  A.INVOICE_DATE = EXCP_INVOICE_DATE AND EXCP_FLAG ='INSERT' AND EXCP_SCHEME_ID = "+schemeId+" AND EXCP_SEASON_ID  ='"+seasonId+"'";
            "UNION ALL SELECT EXCP_SCHEME_ID,EXCP_SEASON_ID,EXCP_PARTY_CODE,B.QUALITY_NO/10,B.PATTERN_CODE AS SHADE ,B.PIECE_NO,FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,B.AGENT_SR_NO,B.INVOICE_NO,B.INVOICE_DATE,RATE,RATE,'',0,0,0,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO  FROM SALES.TMP_SAL_INVOICE_HEADER A,SALES.TMP_SAL_INVOICE_DETAIL  B,SALES.D_SAL_EXCEPTION_INVOICE C  WHERE A.INVOICE_TYPE =1 AND A.INVOICE_DATE = B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_NO = EXCP_INVOICE_NO AND A.PARTY_CODE = EXCP_PARTY_CODE AND A.PARTY_CODE NOT IN (478808,719907) AND  A.INVOICE_DATE = EXCP_INVOICE_DATE AND EXCP_FLAG ='INSERT' AND EXCP_SCHEME_ID = "+schemeId+" AND EXCP_SEASON_ID  ='"+seasonId+"'";
            stmt.execute(schemeDetailQry);
            
            stmt.execute("DELETE FROM  SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SCHEME_ID=0 AND SCD_SEASON_ID =0 AND SCD_PARTY_CODE =0  AND SCD_QUALITY_ID =0");
            
            // UPDATED BY RISHI ON 14/07/2014
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_EXCEPTION_INVOICE SET SCD_SCHEME_ID = 0,SCD_SEASON_ID =0 ,SCD_PARTY_CODE =0 ,SCD_QUALITY_ID =0 WHERE EXCP_PARTY_CODE = SCD_PARTY_CODE AND SCD_SEASON_ID = EXCP_SEASON_ID AND SCD_SCHEME_ID = EXCP_SCHEME_ID AND SCD_SEASON_ID= '"+seasonId+"' AND SCD_SCHEME_ID ="+schemeId+"  AND  SCD_INVOICE_DATE >=EXCP_INVOICE_FROM_DATE AND SCD_INVOICE_DATE <=EXCP_INVOICE_TO_DATE AND EXCP_FLAG ='DELETE'");
            // UPDATED BY RISHI ON 14/07/2014
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_EXCEPTION_INVOICE SET SCD_SCHEME_ID = 0,SCD_SEASON_ID =0 ,SCD_PARTY_CODE =0 ,SCD_QUALITY_ID =0 WHERE EXCP_PARTY_CODE = SCD_PARTY_CODE AND SCD_SEASON_ID = EXCP_SEASON_ID AND SCD_SCHEME_ID = EXCP_SCHEME_ID AND SCD_SEASON_ID= '"+seasonId+"' AND SCD_SCHEME_ID ="+schemeId+"  AND  SCD_INVOICE_DATE =EXCP_INVOICE_DATE  AND EXCP_FLAG ='DELETE'  AND SCD_INVOICE_NO = EXCP_INVOICE_NO");
            
            // UPDATED BY RISHI ON 14/07/2014
            stmt.execute("DELETE FROM  SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SCHEME_ID=0 AND SCD_SEASON_ID =0 AND SCD_PARTY_CODE =0  AND SCD_QUALITY_ID =0");
            
            //stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL,DINESHMILLS.D_SAL_PRICE_LIST_DETAIL SET SCD_PL_RATE=EX_MILL_RATE WHERE SUBSTRING(SCD_QUALITY_ID,2,5)=SUBSTRING(QUALITY_ID,2,5) AND SCD_SEASON_ID=SUBSTRING(PRICE_LIST_NO,3,5) AND SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID ="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL LEFT JOIN (SELECT SEASON_ID,DATE_FROM,DATE_TO FROM DINESHMILLS.D_SAL_SEASON_MASTER WHERE SEASON_ID ='"+seasonId+"') S ON SCD_SEASON_ID=SEASON_ID LEFT JOIN (SELECT SUBSTRING(PR.PRICE_LIST_NO,3,5) SEAS_ID,QUALITY_ID,PR.EX_MILL_RATE,PR.EFFECTIVE_DATE FROM DINESHMILLS.D_SAL_PRICE_LIST_DETAIL PD, DINESHMILLS.D_SAL_PRICE_LIST_RATE PR WHERE PD.PRICE_LIST_NO=PR.PRICE_LIST_NO AND PD.SR_NO=PRICE_LIST_SR_NO AND SUBSTRING(PR.PRICE_LIST_NO,3,3) ='"+seasonId+"' AND QUALITY_ID NOT LIKE '72%') PL ON SUBSTRING(SCD_QUALITY_ID,2,5)=SUBSTRING(QUALITY_ID,2,5) AND SEASON_ID=SEAS_ID AND EX_MILL_RATE=SCD_INV_RATE AND SCD_INVOICE_DATE>=EFFECTIVE_DATE SET SCD_PL_RATE=CASE WHEN SCD_INV_RATE=EX_MILL_RATE THEN EX_MILL_RATE ELSE 0 END WHERE SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId+" AND SCD_INVOICE_DATE>=DATE_FROM AND SCD_INVOICE_DATE<=DATE_TO");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_QUALITY_ELIGIBLE=CASE WHEN SCD_INV_RATE-SCD_PL_RATE=0 THEN 'Y' ELSE 'N' END WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeHeaderQry="INSERT INTO SALES.D_SAL_SCHEME_HEADER(SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_CHARGE_CODE,SCH_BOOK_CODE,SCH_MAIN_CODE,SCH_DRAFT_CR_NOTE_NO,SCH_DRAFT_CR_NOTE_DATE,SCH_REASON_CODE,SCH_LINK_NO,SCH_TOTAL_GR_LIFT_QTY,SCH_TOTAL_NET_LIFT_QTY,SCH_TOTAL_INV_AMOUNT,SCH_TOTAL_FGR_LIFT_QTY,SCH_DISC_PERCENT,SCH_DISC_AMOUNT,SCH_TOTAL_AMOUNT,SCH_ELIGIBILITY,SCH_CREATED_BY,SCH_CREATED_DATE,SCH_MODIFIED_BY,SCH_MODIFIED_DATE,SCH_APPROVED,SCH_APPROVED_DATE,SCH_CANCELLED,SCH_CANCELLED_DATE,SCH_REJECTED,SCH_REJECTED_DATE,SCH_CHANGED,SCH_CHANGED_DATE) "+
            "SELECT SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,'','','','','','','0000-00-00','','',SUM(SCD_GROSS_QTY),SUM(SCD_NET_QTY),SUM(SCD_NET_AMOUNT),SUM(SCD_GROSS_QTY),0,0,0,'N',1,NOW(),0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',1,NOW() "+
            "FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID= '"+seasonId+"' AND SCD_QUALITY_ELIGIBLE ='Y' AND SCD_SCHEME_ID="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE ";
            
            stmt.execute(schemeHeaderQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,DINESHMILLS.D_SAL_PARTY_MASTER SET SCH_PARTY_NAME=PARTY_NAME,SCH_CITY=CITY_ID,SCH_CHARGE_CODE=CHARGE_CODE WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            //UPDATE FOR 5 LACK CONDITION IN SCHEME --- TOTAL GROSS QTY IS INSERTED INTO SCH_TOTAL_FGR_LIFT_QTY FOR SLAB CALCULATION
    //        stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER, (SELECT SCH_PARTY_CODE PARTY_CODE ,SUM(SCH_TOTAL_INV_AMOUNT) AMT,SUM(SCH_TOTAL_GR_LIFT_QTY) GQT FROM SALES.`D_SAL_SCHEME_HEADER` WHERE SCH_SCHEME_ID IN(9,11,14) GROUP BY SCH_PARTY_CODE HAVING AMT>=500000 ) G SET SCH_TOTAL_FGR_LIFT_QTY=GQT WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
         //   stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER, (SELECT SCH_PARTY_CODE PARTY_CODE ,SUM(SCH_TOTAL_INV_AMOUNT) AMT,SUM(SCH_TOTAL_GR_LIFT_QTY) GQT FROM SALES.`D_SAL_SCHEME_HEADER` WHERE SCH_SCHEME_ID IN(18,19,20) GROUP BY SCH_PARTY_CODE HAVING AMT>=500000 ) G SET SCH_TOTAL_FGR_LIFT_QTY=GQT WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_SLAB,SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_PERCENT=SLAB_OUTPUT,SCH_ELIGIBILITY =CASE WHEN SLAB_OUTPUT!=0 THEN 'Y' ELSE 'N' END WHERE SLAB_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SLAB_SEASON_ID=SCH_SEASON_ID AND SCH_SCHEME_ID=SLAB_SCHEME_ID AND SCH_TOTAL_FGR_LIFT_QTY>=SLAB_FROM AND SCH_TOTAL_FGR_LIFT_QTY<=SLAB_TO");
            
            //UPDATE FOR JSBK PARTY
            //stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_PERCENT=SCH_DISC_PERCENT/2 WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId +" AND SCH_PARTY_CODE IN (478808,155999)");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_AMOUNT=SCH_DISC_PERCENT*SCH_TOTAL_INV_AMOUNT/100 WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PERCENT=SCH_DISC_PERCENT,SCD_DISC_AMOUNT=SCD_NET_AMOUNT*SCH_DISC_PERCENT/100 WHERE SCD_SCHEME_ID=SCH_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE AND SCD_QUALITY_ELIGIBLE='Y' AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            
            
          
            
              
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER, (SELECT SCD_SEASON_ID,SCD_SCHEME_ID, SCD_PARTY_CODE,SUM(SCD_DISC_AMOUNT) AS DISC_AMT FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId+" AND SCD_QUALITY_ELIGIBLE ='Y' GROUP BY SCD_SEASON_ID,SCD_SCHEME_ID, SCD_PARTY_CODE HAVING SUM(SCD_DISC_AMOUNT) > 0) AS D SET SCH_DISC_AMOUNT = DISC_AMT WHERE SCD_SEASON_ID = SCH_SEASON_ID AND SCH_SCHEME_ID =SCD_SCHEME_ID  AND SCH_PARTY_CODE= SCD_PARTY_CODE AND DISC_AMT != SCH_DISC_AMOUNT");



             stmt.execute("UPDATE  SALES.D_SAL_SCHEME_DETAIL,DINESHMILLS.D_SAL_QUALITY_MASTER SET SCD_BRAND = BRAND_ID WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId+" AND SEASON_ID = SCD_SEASON_ID  AND QUALITY_ID = CONCAT(3,SUBSTRING(SCD_QUALITY_ID,2,5))") ;


             stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PER1= SCD_DISC_PERCENT,SCD_DISC_AMT1 =SCD_DISC_AMOUNT WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);


              stmt.execute("UPDATE  SALES.D_SAL_SCHEME_DETAIL,DINESHMILLS.D_SAL_QUALITY_MASTER SET SCD_DISC_PER2 = 2 ,SCD_DISC_PER1 = SCD_DISC_PERCENT,SCD_DISC_AMT2=2*SCD_NET_AMOUNT/100 WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId+" AND SEASON_ID = SCD_SEASON_ID AND QUALITY_ID = CONCAT(3,SUBSTRING(SCD_QUALITY_ID,2,5)) AND BRAND_ID IN ('CON','FAV','GG','TUZ','PR') AND SCD_DISC_PERCENT >0");

             stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PER_CAPTION = CASE WHEN SCD_DISC_PER1 > 0 AND SCD_DISC_PER2 = 0 THEN CONCAT(SCD_DISC_PER1,' + 0')  WHEN SCD_DISC_PER1 > 0 AND SCD_DISC_PER2 > 0 THEN CONCAT(SCD_DISC_PER1,' + 2')  WHEN SCD_DISC_PER1 = 0 AND SCD_DISC_PER2 = 0 THEN '0 + 0' END, SCD_DISC_AMOUNT = (SCD_DISC_AMT1+ SCD_DISC_AMT2)  WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);


              stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER, (SELECT SCD_SEASON_ID,SCD_SCHEME_ID, SCD_PARTY_CODE,SUM(SCD_DISC_AMOUNT) AS DISC_AMT FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID = '"+seasonId+"' AND SCD_SCHEME_ID="+schemeId+" AND SCD_QUALITY_ELIGIBLE ='Y' GROUP BY SCD_SEASON_ID,SCD_SCHEME_ID, SCD_PARTY_CODE HAVING SUM(SCD_DISC_AMOUNT) > 0) AS D SET SCH_DISC_AMOUNT = DISC_AMT WHERE SCD_SEASON_ID = SCH_SEASON_ID AND SCH_SCHEME_ID =SCD_SCHEME_ID  AND SCH_PARTY_CODE= SCD_PARTY_CODE AND DISC_AMT != SCH_DISC_AMOUNT");




           
               
            
            
            
            
            
            
        //    processRetailerCreditNote(schemeId, seasonId);
//            setData(schemeId, seasonId);
//            processCreditNoteInput(schemeId, seasonId);
//            
            printReport=true;
            return true;
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
    }
       
    
    private boolean processJSBKScheme(int schemeId){
        try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            ResultSet rsScheme=stmt.executeQuery("SELECT SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+schemeId);
            rsScheme.first();
            String seasonId=rsScheme.getString("SCHEME_SEASON_ID");
            
    InvoiceTable(schemeId);

            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeDetailQry="INSERT INTO SALES.D_SAL_SCHEME_DETAIL(SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_FLAG,SCD_UNIT_CODE,SCD_GROSS_QTY,SCD_GROSS_AMOUNT,SCD_NET_QTY,SCD_NET_AMOUNT,SCD_AGENT_LAST_INVOICE,SCD_AGENT_SR_NO,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_INV_RATE,SCD_PL_RATE,SCD_QUALITY_ELIGIBLE,SCD_DISC_PER_MTR_RATE,SCD_DISC_PERCENT,SCD_DISC_AMOUNT,SCD_GATE_PASS_NO,SCD_GATEPASS_DATE,SCD_BALE_NO) " +
            "SELECT SCHEME_ID,I.SEASON_ID,PARTY_CODE,QUALITY_NO,SHADE ,PIECE_NO,FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,NET_AMOUNT,AGENT_LAST_INVOICE,AGENT_SR_NO,INVOICE_NO,INVOICE_DATE,RATE,0,'',0,0,0,GATEPASS_NO,GATEPASS_DATE,BALE_NO FROM  "+
            "(SELECT QUALITY_ID,SEASON_ID FROM D_SAL_QUALITY_MASTER WHERE SEASON_ID='"+seasonId+"' AND CATEGORY_LIST IN('REGULAR','S-QL')) Q "+
            "INNER JOIN "+
         //   "(SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO/10 QUALITY_NO,B.PATTERN_CODE AS SHADE,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO FROM SALES.TMP_SAL_INVOICE_HEADER A,SALES.TMP_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D, SALES.D_SAL_SCHEME_MASTER E, D_SAL_PARTY_MASTER P WHERE A.INVOICE_TYPE =1 AND A.WAREHOUSE_CODE =1 AND A.QUALITY_INDICATOR IN (0,3) AND  A.PARTY_CODE=P.PARTY_CODE AND A.PARTY_CODE IN (478808,155999) AND PARTY_TYPE=2 AND A.INVOICE_DATE=B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE>=DATE_FROM AND A.INVOICE_DATE<=DATE_TO AND SCHEME_SEASON_ID=SEASON_ID AND SCHEME_ID="+schemeId+" AND SEASON_ID='"+seasonId+"') I ON SUBSTRING(QUALITY_ID,2,5)=SUBSTRING(QUALITY_NO,2,5) AND Q.SEASON_ID=I.SEASON_ID "+
            //"(SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO/10 QUALITY_NO,B.PATTERN_CODE AS SHADE,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO FROM SALES.TMP_SAL_INVOICE_HEADER A,SALES.TMP_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D, SALES.D_SAL_SCHEME_MASTER E, D_SAL_PARTY_MASTER P WHERE A.INVOICE_TYPE =1 AND A.WAREHOUSE_CODE =1 AND A.QUALITY_INDICATOR IN (0,3) AND  A.PARTY_CODE=P.PARTY_CODE AND A.PARTY_CODE IN (478808,155999) AND A.INVOICE_DATE=B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE>=DATE_FROM AND A.INVOICE_DATE<=DATE_TO AND SCHEME_SEASON_ID=SEASON_ID AND SCHEME_ID="+schemeId+" AND SEASON_ID='"+seasonId+"') I ON SUBSTRING(QUALITY_ID,2,5)=SUBSTRING(QUALITY_NO,2,5) AND Q.SEASON_ID=I.SEASON_ID "+
            "(SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO/10 QUALITY_NO,B.PATTERN_CODE AS SHADE,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO FROM SALES.TMP_SAL_INVOICE_HEADER A,SALES.TMP_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D, SALES.D_SAL_SCHEME_MASTER E, D_SAL_PARTY_MASTER P WHERE A.INVOICE_TYPE =1 AND A.WAREHOUSE_CODE =1 AND A.QUALITY_INDICATOR IN (0,3) AND  A.PARTY_CODE=P.PARTY_CODE AND A.PARTY_CODE IN (478808,719907) AND A.INVOICE_DATE=B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE>=DATE_FROM AND A.INVOICE_DATE<=DATE_TO AND SCHEME_SEASON_ID=SEASON_ID AND SCHEME_ID="+schemeId+" AND SEASON_ID='"+seasonId+"') I ON SUBSTRING(QUALITY_ID,2,5)=SUBSTRING(QUALITY_NO,2,5) AND Q.SEASON_ID=I.SEASON_ID "+
            // UPDATED BY RISHI ON 14/07/2014            
            //"UNION ALL SELECT EXCP_SCHEME_ID,EXCP_SEASON_ID,EXCP_PARTY_CODE,B.QUALITY_NO/10,B.PATTERN_CODE AS SHADE ,B.PIECE_NO,FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,B.AGENT_SR_NO,B.INVOICE_NO,B.INVOICE_DATE,RATE,RATE,'',0,0,0,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO  FROM SALES.TMP_SAL_INVOICE_HEADER A,SALES.TMP_SAL_INVOICE_DETAIL  B,SALES.D_SAL_EXCEPTION_INVOICE C  WHERE A.INVOICE_TYPE =1 AND A.INVOICE_DATE = B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_NO = EXCP_INVOICE_NO AND A.PARTY_CODE = EXCP_PARTY_CODE AND A.PARTY_CODE IN (478808,155999) AND A.INVOICE_DATE = EXCP_INVOICE_DATE AND EXCP_FLAG ='INSERT' AND EXCP_SCHEME_ID = "+schemeId+" AND EXCP_SEASON_ID  ='"+seasonId+"'";
            "UNION ALL SELECT EXCP_SCHEME_ID,EXCP_SEASON_ID,EXCP_PARTY_CODE,B.QUALITY_NO/10,B.PATTERN_CODE AS SHADE ,B.PIECE_NO,FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,B.AGENT_SR_NO,B.INVOICE_NO,B.INVOICE_DATE,RATE,RATE,'',0,0,0,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO  FROM SALES.TMP_SAL_INVOICE_HEADER A,SALES.TMP_SAL_INVOICE_DETAIL  B,SALES.D_SAL_EXCEPTION_INVOICE C  WHERE A.INVOICE_TYPE =1 AND A.INVOICE_DATE = B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_NO = EXCP_INVOICE_NO AND A.PARTY_CODE = EXCP_PARTY_CODE AND A.PARTY_CODE IN (478808,719907) AND A.INVOICE_DATE = EXCP_INVOICE_DATE AND EXCP_FLAG ='INSERT' AND EXCP_SCHEME_ID = "+schemeId+" AND EXCP_SEASON_ID  ='"+seasonId+"'";
            stmt.execute(schemeDetailQry);
            
            stmt.execute("DELETE FROM  SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SCHEME_ID=0 AND SCD_SEASON_ID =0 AND SCD_PARTY_CODE =0  AND SCD_QUALITY_ID =0");
            
            // UPDATED BY RISHI ON 14/07/2014
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_EXCEPTION_INVOICE SET SCD_SCHEME_ID = 0,SCD_SEASON_ID =0 ,SCD_PARTY_CODE =0 ,SCD_QUALITY_ID =0 WHERE EXCP_PARTY_CODE = SCD_PARTY_CODE AND SCD_SEASON_ID = EXCP_SEASON_ID AND SCD_SCHEME_ID = EXCP_SCHEME_ID AND SCD_SEASON_ID= '"+seasonId+"' AND SCD_SCHEME_ID ="+schemeId+"  AND  SCD_INVOICE_DATE >=EXCP_INVOICE_FROM_DATE AND SCD_INVOICE_DATE <=EXCP_INVOICE_TO_DATE AND EXCP_FLAG ='DELETE'");
            // UPDATED BY RISHI ON 14/07/2014
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_EXCEPTION_INVOICE SET SCD_SCHEME_ID = 0,SCD_SEASON_ID =0 ,SCD_PARTY_CODE =0 ,SCD_QUALITY_ID =0 WHERE EXCP_PARTY_CODE = SCD_PARTY_CODE AND SCD_SEASON_ID = EXCP_SEASON_ID AND SCD_SCHEME_ID = EXCP_SCHEME_ID AND SCD_SEASON_ID= '"+seasonId+"' AND SCD_SCHEME_ID ="+schemeId+"  AND  SCD_INVOICE_DATE =EXCP_INVOICE_DATE  AND EXCP_FLAG ='DELETE'  AND SCD_INVOICE_NO = EXCP_INVOICE_NO");
            
            // UPDATED BY RISHI ON 14/07/2014
            stmt.execute("DELETE FROM  SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SCHEME_ID=0 AND SCD_SEASON_ID =0 AND SCD_PARTY_CODE =0  AND SCD_QUALITY_ID =0");
            
    
            //stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL,DINESHMILLS.D_SAL_PRICE_LIST_DETAIL SET SCD_PL_RATE=EX_MILL_RATE WHERE SUBSTRING(SCD_QUALITY_ID,2,5)=SUBSTRING(QUALITY_ID,2,5) AND SCD_SEASON_ID=SUBSTRING(PRICE_LIST_NO,3,5) AND SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID ="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL LEFT JOIN (SELECT SEASON_ID,DATE_FROM,DATE_TO FROM DINESHMILLS.D_SAL_SEASON_MASTER WHERE SEASON_ID ='"+seasonId+"') S ON SCD_SEASON_ID=SEASON_ID LEFT JOIN (SELECT SUBSTRING(PR.PRICE_LIST_NO,3,5) SEAS_ID,QUALITY_ID,PR.EX_MILL_RATE,PR.EFFECTIVE_DATE FROM DINESHMILLS.D_SAL_PRICE_LIST_DETAIL PD, DINESHMILLS.D_SAL_PRICE_LIST_RATE PR WHERE PD.PRICE_LIST_NO=PR.PRICE_LIST_NO AND PD.SR_NO=PRICE_LIST_SR_NO AND SUBSTRING(PR.PRICE_LIST_NO,3,3) ='"+seasonId+"' AND QUALITY_ID NOT LIKE '72%') PL ON SUBSTRING(SCD_QUALITY_ID,2,5)=SUBSTRING(QUALITY_ID,2,5) AND SEASON_ID=SEAS_ID AND EX_MILL_RATE=SCD_INV_RATE AND SCD_INVOICE_DATE>=EFFECTIVE_DATE SET SCD_PL_RATE=CASE WHEN SCD_INV_RATE=EX_MILL_RATE THEN EX_MILL_RATE ELSE 0 END WHERE SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId+" AND SCD_INVOICE_DATE>=DATE_FROM AND SCD_INVOICE_DATE<=DATE_TO");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_QUALITY_ELIGIBLE=CASE WHEN SCD_INV_RATE-SCD_PL_RATE=0 THEN 'Y' ELSE 'N' END WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeHeaderQry="INSERT INTO SALES.D_SAL_SCHEME_HEADER(SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_CHARGE_CODE,SCH_BOOK_CODE,SCH_MAIN_CODE,SCH_DRAFT_CR_NOTE_NO,SCH_DRAFT_CR_NOTE_DATE,SCH_REASON_CODE,SCH_LINK_NO,SCH_TOTAL_GR_LIFT_QTY,SCH_TOTAL_NET_LIFT_QTY,SCH_TOTAL_INV_AMOUNT,SCH_TOTAL_FGR_LIFT_QTY,SCH_DISC_PERCENT,SCH_DISC_AMOUNT,SCH_TOTAL_AMOUNT,SCH_ELIGIBILITY,SCH_CREATED_BY,SCH_CREATED_DATE,SCH_MODIFIED_BY,SCH_MODIFIED_DATE,SCH_APPROVED,SCH_APPROVED_DATE,SCH_CANCELLED,SCH_CANCELLED_DATE,SCH_REJECTED,SCH_REJECTED_DATE,SCH_CHANGED,SCH_CHANGED_DATE) "+
            "SELECT SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,'','','','','','','0000-00-00','','',SUM(SCD_GROSS_QTY),SUM(SCD_NET_QTY),SUM(SCD_NET_AMOUNT),SUM(SCD_GROSS_QTY),0,0,0,'N',1,NOW(),0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',1,NOW() "+
            "FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID= '"+seasonId+"' AND SCD_QUALITY_ELIGIBLE ='Y' AND SCD_SCHEME_ID="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE ";
            
            stmt.execute(schemeHeaderQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,DINESHMILLS.D_SAL_PARTY_MASTER SET SCH_PARTY_NAME=PARTY_NAME,SCH_CITY=CITY_ID,SCH_CHARGE_CODE=CHARGE_CODE WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            //UPDATE FOR 5 LACK CONDITION IN SCHEME --- TOTAL GROSS QTY IS INSERTED INTO SCH_TOTAL_FGR_LIFT_QTY FOR SLAB CALCULATION
    //        stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER, (SELECT SCH_PARTY_CODE PARTY_CODE ,SUM(SCH_TOTAL_INV_AMOUNT) AMT,SUM(SCH_TOTAL_GR_LIFT_QTY) GQT FROM SALES.`D_SAL_SCHEME_HEADER` WHERE SCH_SCHEME_ID IN(9,11,14) GROUP BY SCH_PARTY_CODE HAVING AMT>=500000 ) G SET SCH_TOTAL_FGR_LIFT_QTY=GQT WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
        //    stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER, (SELECT SCH_PARTY_CODE PARTY_CODE ,SUM(SCH_TOTAL_INV_AMOUNT) AMT,SUM(SCH_TOTAL_GR_LIFT_QTY) GQT FROM SALES.`D_SAL_SCHEME_HEADER` WHERE SCH_SCHEME_ID IN(18,19,20) GROUP BY SCH_PARTY_CODE HAVING AMT>=500000 ) G SET SCH_TOTAL_FGR_LIFT_QTY=GQT WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_SLAB,SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_PERCENT=SLAB_OUTPUT,SCH_ELIGIBILITY =CASE WHEN SLAB_OUTPUT!=0 THEN 'Y' ELSE 'N' END WHERE SLAB_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SLAB_SEASON_ID=SCH_SEASON_ID AND SCH_SCHEME_ID=SLAB_SCHEME_ID AND SCH_TOTAL_FGR_LIFT_QTY>=SLAB_FROM AND SCH_TOTAL_FGR_LIFT_QTY<=SLAB_TO");
            
            //UPDATE FOR JSBK PARTY
          //  stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_PERCENT=SCH_DISC_PERCENT/2 WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId +" AND SCH_PARTY_CODE IN (478808,155999)");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_AMOUNT=SCH_DISC_PERCENT*SCH_TOTAL_INV_AMOUNT/100 WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PERCENT=SCH_DISC_PERCENT,SCD_DISC_AMOUNT=SCD_NET_AMOUNT*SCH_DISC_PERCENT/100 WHERE SCD_SCHEME_ID=SCH_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE AND SCD_QUALITY_ELIGIBLE='Y' AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
           
            
            
            
            
            
              
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER, (SELECT SCD_SEASON_ID,SCD_SCHEME_ID, SCD_PARTY_CODE,SUM(SCD_DISC_AMOUNT) AS DISC_AMT FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId+" AND SCD_QUALITY_ELIGIBLE ='Y' GROUP BY SCD_SEASON_ID,SCD_SCHEME_ID, SCD_PARTY_CODE HAVING SUM(SCD_DISC_AMOUNT) > 0) AS D SET SCH_DISC_AMOUNT = DISC_AMT WHERE SCD_SEASON_ID = SCH_SEASON_ID AND SCH_SCHEME_ID =SCD_SCHEME_ID  AND SCH_PARTY_CODE= SCD_PARTY_CODE AND DISC_AMT != SCH_DISC_AMOUNT");



             stmt.execute("UPDATE  SALES.D_SAL_SCHEME_DETAIL,DINESHMILLS.D_SAL_QUALITY_MASTER SET SCD_BRAND = BRAND_ID WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId+" AND SEASON_ID = SCD_SEASON_ID  AND QUALITY_ID = CONCAT(3,SUBSTRING(SCD_QUALITY_ID,2,5))") ;


             stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PER1= SCD_DISC_PERCENT,SCD_DISC_AMT1 =SCD_DISC_AMOUNT WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);


              stmt.execute("UPDATE  SALES.D_SAL_SCHEME_DETAIL,DINESHMILLS.D_SAL_QUALITY_MASTER SET SCD_DISC_PER2 = 3 ,SCD_DISC_PER1 = SCD_DISC_PERCENT,SCD_DISC_AMT2=3*SCD_NET_AMOUNT/100 WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId+" AND SEASON_ID = SCD_SEASON_ID AND QUALITY_ID = CONCAT(3,SUBSTRING(SCD_QUALITY_ID,2,5)) AND BRAND_ID IN ('CON','FAV','GG','TUZ','PR') AND SCD_DISC_PERCENT >0");

             stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PER_CAPTION = CASE WHEN SCD_DISC_PER1 > 0 AND SCD_DISC_PER2 = 0 THEN CONCAT(SCD_DISC_PER1,' + 0')  WHEN SCD_DISC_PER1 > 0 AND SCD_DISC_PER2 > 0 THEN CONCAT(SCD_DISC_PER1,' + 3')  WHEN SCD_DISC_PER1 = 0 AND SCD_DISC_PER2 = 0 THEN '0 + 0' END, SCD_DISC_AMOUNT = (SCD_DISC_AMT1+ SCD_DISC_AMT2)  WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);


              stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER, (SELECT SCD_SEASON_ID,SCD_SCHEME_ID, SCD_PARTY_CODE,SUM(SCD_DISC_AMOUNT) AS DISC_AMT FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID = '"+seasonId+"' AND SCD_SCHEME_ID="+schemeId+" AND SCD_QUALITY_ELIGIBLE ='Y' GROUP BY SCD_SEASON_ID,SCD_SCHEME_ID, SCD_PARTY_CODE HAVING SUM(SCD_DISC_AMOUNT) > 0) AS D SET SCH_DISC_AMOUNT = DISC_AMT WHERE SCD_SEASON_ID = SCH_SEASON_ID AND SCH_SCHEME_ID =SCD_SCHEME_ID  AND SCH_PARTY_CODE= SCD_PARTY_CODE AND DISC_AMT != SCH_DISC_AMOUNT");




            
            
            
        //    processRetailerCreditNote(schemeId, seasonId);
//            setData(schemeId, seasonId);
//            processCreditNoteInput(schemeId, seasonId);
            
            printReport=true;
            return true;
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
    }    
    
  
       
    

    
    
    
    private boolean printDHANVARSHADetailReport(int schemeId) {
        //return false;
        try{
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            
            objData.AddColumn("SEASON_ID");
            objData.AddColumn("SCHEME_NAME");
            objData.AddColumn("SCHEME_PERIOD");
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("STATION");
            objData.AddColumn("ELIGIBILE");
            objData.AddColumn("DISC_PERCENT");
            objData.AddColumn("DISC_AMOUNT");
            objData.AddColumn("QUALITY_NO");
            objData.AddColumn("SHADE_NO");
            objData.AddColumn("PIECE_NO");
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("RATE");
            objData.AddColumn("GROSS_QUANTITY");
            objData.AddColumn("NET_QUANTITY");
            objData.AddColumn("FLAG");
            
            String str ="SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_NAME,SCH_CITY,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_ELIGIBILITY,SCH_DISC_PERCENT,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_FLAG,SCD_GROSS_QTY,SCD_NET_QTY,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_INV_RATE,SCD_NET_AMOUNT FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCD_SEASON_ID=SCH_SEASON_ID AND SCD_PARTY_CODE=SCH_PARTY_CODE AND SCH_SCHEME_ID=SCD_SCHEME_ID AND SCD_QUALITY_ELIGIBLE='Y' ORDER BY SCH_ELIGIBILITY DESC,SCH_PARTY_CODE,SCD_INVOICE_DATE,SCD_INVOICE_NO,SCD_QUALITY_ID,SCD_SHADE";
            ResultSet  rsTemp =data.getResult(str);
            while(!rsTemp.isAfterLast()){
                TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                
                objRow.setValue("SEASON_ID",rsTemp.getString("SCHEME_SEASON_ID"));
                objRow.setValue("SCHEME_NAME",rsTemp.getString("SCHEME_NAME"));
                objRow.setValue("SCHEME_PERIOD","("+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_START"))+"-"+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_END"))+")");
                objRow.setValue("PARTY_CODE", rsTemp.getString("SCH_PARTY_CODE"));
                objRow.setValue("PARTY_NAME", rsTemp.getString("SCH_PARTY_NAME"));
                objRow.setValue("STATION", rsTemp.getString("SCH_CITY"));
                objRow.setValue("ELIGIBILE", rsTemp.getString("SCH_ELIGIBILITY"));
                objRow.setValue("DISC_PERCENT", rsTemp.getString("SCH_DISC_PERCENT"));
                objRow.setValue("DISC_AMOUNT", rsTemp.getString("SCH_DISC_AMOUNT"));
                objRow.setValue("QUALITY_NO", rsTemp.getString("SCD_QUALITY_ID"));
                objRow.setValue("SHADE_NO", rsTemp.getString("SCD_SHADE"));
                objRow.setValue("PIECE_NO", rsTemp.getString("SCD_PIECE_NO"));
                objRow.setValue("INVOICE_NO", rsTemp.getString("SCD_INVOICE_NO"));
                objRow.setValue("INVOICE_DATE", EITLERPGLOBAL.formatDate(rsTemp.getString("SCD_INVOICE_DATE")));
                objRow.setValue("RATE", rsTemp.getString("SCD_INV_RATE"));
                objRow.setValue("GROSS_QUANTITY", rsTemp.getString("SCD_GROSS_QTY"));
                objRow.setValue("NET_QUANTITY", rsTemp.getString("SCD_NET_QTY"));
                objRow.setValue("NET_AMOUNT", rsTemp.getString("SCD_NET_AMOUNT"));
                objRow.setValue("FLAG", rsTemp.getString("SCD_FLAG"));
                
                objData.AddRow(objRow);
                rsTemp.next();
            }
            
            HashMap parameter=new HashMap();
            parameter.put("RUN_BY", clsUser.getUserName(2,EITLERPGLOBAL.gNewUserID));
            parameter.put("RUN_TIME", data.getStringValueFromDB("SELECT CURTIME() FROM DUAL").substring(0,5));
            
            EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/rptRetailerSchemeDetailReportNew.rpt",parameter,objData);
            rsTemp.close();
            
            return true;
        }catch(SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
    
    
    
    private boolean printRetailerDetailReport(int schemeId) {
        try{
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            
            objData.AddColumn("SEASON_ID");
            objData.AddColumn("SCHEME_NAME");
            objData.AddColumn("SCHEME_PERIOD");
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("STATION");
            objData.AddColumn("ELIGIBILE");
            objData.AddColumn("DISC_PERCENT");
            objData.AddColumn("DISC_AMOUNT");
            objData.AddColumn("QUALITY_NO");
            objData.AddColumn("SHADE_NO");
            objData.AddColumn("PIECE_NO");
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("RATE");
            objData.AddColumn("GROSS_QUANTITY");
            objData.AddColumn("NET_QUANTITY");
            objData.AddColumn("FLAG");
            
            String str ="SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_NAME,SCH_CITY,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_ELIGIBILITY,SCH_DISC_PERCENT,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_FLAG,SCD_GROSS_QTY,SCD_NET_QTY,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_INV_RATE,SCD_NET_AMOUNT FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCD_SEASON_ID=SCH_SEASON_ID AND SCD_PARTY_CODE=SCH_PARTY_CODE AND SCH_SCHEME_ID=SCD_SCHEME_ID AND SCD_QUALITY_ELIGIBLE='Y' ORDER BY SCH_ELIGIBILITY DESC,SCH_PARTY_CODE,SCD_INVOICE_DATE,SCD_INVOICE_NO,SCD_QUALITY_ID,SCD_SHADE";
            ResultSet  rsTemp =data.getResult(str);
            while(!rsTemp.isAfterLast()){
                TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                
                objRow.setValue("SEASON_ID",rsTemp.getString("SCHEME_SEASON_ID"));
                objRow.setValue("SCHEME_NAME",rsTemp.getString("SCHEME_NAME"));
                objRow.setValue("SCHEME_PERIOD","("+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_START"))+"-"+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_END"))+")");
                objRow.setValue("PARTY_CODE", rsTemp.getString("SCH_PARTY_CODE"));
                objRow.setValue("PARTY_NAME", rsTemp.getString("SCH_PARTY_NAME"));
                objRow.setValue("STATION", rsTemp.getString("SCH_CITY"));
                objRow.setValue("ELIGIBILE", rsTemp.getString("SCH_ELIGIBILITY"));
                objRow.setValue("DISC_PERCENT", rsTemp.getString("SCH_DISC_PERCENT"));
                objRow.setValue("DISC_AMOUNT", rsTemp.getString("SCH_DISC_AMOUNT"));
                objRow.setValue("QUALITY_NO", rsTemp.getString("SCD_QUALITY_ID"));
                objRow.setValue("SHADE_NO", rsTemp.getString("SCD_SHADE"));
                objRow.setValue("PIECE_NO", rsTemp.getString("SCD_PIECE_NO"));
                objRow.setValue("INVOICE_NO", rsTemp.getString("SCD_INVOICE_NO"));
                objRow.setValue("INVOICE_DATE", EITLERPGLOBAL.formatDate(rsTemp.getString("SCD_INVOICE_DATE")));
                objRow.setValue("RATE", rsTemp.getString("SCD_INV_RATE"));
                objRow.setValue("GROSS_QUANTITY", rsTemp.getString("SCD_GROSS_QTY"));
                objRow.setValue("NET_QUANTITY", rsTemp.getString("SCD_NET_QTY"));
                objRow.setValue("NET_AMOUNT", rsTemp.getString("SCD_NET_AMOUNT"));
                objRow.setValue("FLAG", rsTemp.getString("SCD_FLAG"));
                
                objData.AddRow(objRow);
                rsTemp.next();
            }
            
            HashMap parameter=new HashMap();
            parameter.put("RUN_BY", clsUser.getUserName(2,EITLERPGLOBAL.gNewUserID));
            parameter.put("RUN_TIME", data.getStringValueFromDB("SELECT CURTIME() FROM DUAL").substring(0,5));
            
            EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/rptRetailerSchemeDetailReportNew.rpt",parameter,objData);
            rsTemp.close();
            
            return true;
        }catch(SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
    
    private boolean printRetailerDetailWithCrNoteReport(int schemeId) {
        try{
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            
            objData.AddColumn("SEASON_ID");
            objData.AddColumn("SCHEME_NAME");
            objData.AddColumn("SCHEME_PERIOD");
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("STATION");
            objData.AddColumn("ELIGIBILE");
            objData.AddColumn("DISC_PERCENT");
            objData.AddColumn("DISC_AMOUNT");
            objData.AddColumn("QUALITY_NO");
            objData.AddColumn("SHADE_NO");
            objData.AddColumn("PIECE_NO");
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("RATE");
            objData.AddColumn("GROSS_QUANTITY");
            objData.AddColumn("NET_QUANTITY");
            objData.AddColumn("FLAG");
            objData.AddColumn("SCD_DISC_PERCENT");
            objData.AddColumn("SCD_DISC_AMOUNT");
            objData.AddColumn("SCD_DISC_AMT1");
            objData.AddColumn("SCD_DISC_AMT2");
            objData.AddColumn("SCD_DISC_PER1");
            objData.AddColumn("SCD_DISC_PER2");
            objData.AddColumn("SCD_BRAND");
            
            
            
            String str ="SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_NAME,SCH_CITY,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_ELIGIBILITY,SCD_DISC_PERCENT,SCD_DISC_AMOUNT,SCH_DISC_PERCENT,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_FLAG,SCD_GROSS_QTY,SCD_NET_QTY,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_INV_RATE,SCD_NET_AMOUNT,SCD_BRAND,SCD_DISC_PER1,SCD_DISC_PER2,SCD_DISC_AMT1,SCD_DISC_AMT2 FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCD_SEASON_ID=SCH_SEASON_ID AND SCD_PARTY_CODE=SCH_PARTY_CODE AND SCH_SCHEME_ID=SCD_SCHEME_ID AND SCD_QUALITY_ELIGIBLE='Y' ORDER BY SCH_ELIGIBILITY DESC,SCH_PARTY_CODE,SCD_INVOICE_DATE,SCD_INVOICE_NO,SCD_QUALITY_ID,SCD_SHADE";
            ResultSet  rsTemp =data.getResult(str);
            while(!rsTemp.isAfterLast()){
                TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                
                objRow.setValue("SEASON_ID",rsTemp.getString("SCHEME_SEASON_ID"));
                objRow.setValue("SCHEME_NAME",rsTemp.getString("SCHEME_NAME"));
                objRow.setValue("SCHEME_PERIOD","("+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_START"))+"-"+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_END"))+")");
                objRow.setValue("PARTY_CODE", rsTemp.getString("SCH_PARTY_CODE"));
                objRow.setValue("PARTY_NAME", rsTemp.getString("SCH_PARTY_NAME"));
                objRow.setValue("STATION", rsTemp.getString("SCH_CITY"));
                objRow.setValue("ELIGIBILE", rsTemp.getString("SCH_ELIGIBILITY"));
                objRow.setValue("DISC_PERCENT", rsTemp.getString("SCH_DISC_PERCENT"));
                objRow.setValue("DISC_AMOUNT", rsTemp.getString("SCH_DISC_AMOUNT"));
                objRow.setValue("QUALITY_NO", rsTemp.getString("SCD_QUALITY_ID"));
                objRow.setValue("SHADE_NO", rsTemp.getString("SCD_SHADE"));
                objRow.setValue("PIECE_NO", rsTemp.getString("SCD_PIECE_NO"));
                objRow.setValue("INVOICE_NO", rsTemp.getString("SCD_INVOICE_NO"));
                objRow.setValue("INVOICE_DATE", EITLERPGLOBAL.formatDate(rsTemp.getString("SCD_INVOICE_DATE")));
                objRow.setValue("RATE", rsTemp.getString("SCD_INV_RATE"));
                objRow.setValue("GROSS_QUANTITY", rsTemp.getString("SCD_GROSS_QTY"));
                objRow.setValue("NET_QUANTITY", rsTemp.getString("SCD_NET_QTY"));
                objRow.setValue("NET_AMOUNT", rsTemp.getString("SCD_NET_AMOUNT"));
                objRow.setValue("FLAG", rsTemp.getString("SCD_FLAG"));
                objRow.setValue("SCD_DISC_PERCENT", rsTemp.getString("SCD_DISC_PERCENT"));
                objRow.setValue("SCD_DISC_AMOUNT", rsTemp.getString("SCD_DISC_AMOUNT"));
                
                objRow.setValue("SCD_DISC_AMT1", rsTemp.getString("SCD_DISC_AMT1"));
                objRow.setValue("SCD_DISC_AMT2", rsTemp.getString("SCD_DISC_AMT2"));
                objRow.setValue("SCD_DISC_PER1", rsTemp.getString("SCD_DISC_PER1"));
                objRow.setValue("SCD_DISC_PER2", rsTemp.getString("SCD_DISC_PER2"));
                objRow.setValue("SCD_BRAND", rsTemp.getString("SCD_BRAND"));
                
                objData.AddRow(objRow);
                rsTemp.next();
            }
            
            HashMap parameter=new HashMap();
            parameter.put("RUN_BY", clsUser.getUserName(2,EITLERPGLOBAL.gNewUserID));
            parameter.put("RUN_TIME", data.getStringValueFromDB("SELECT CURTIME() FROM DUAL").substring(0,5));
            
            EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/rptRetailerSchemeDetailWithCrNoteReportNew.rpt",parameter,objData);
            rsTemp.close();
            
            return true;
        }catch(SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
    
    
    
           private boolean PrintBonanza(int schemeId){
        try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            ResultSet rsScheme=stmt.executeQuery("SELECT SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+schemeId);
            rsScheme.first();
            String seasonId=rsScheme.getString("SCHEME_SEASON_ID");
            
           
            
            stmt.execute("DELETE FROM TEMP_DATABASE.TMP8");
            
          String Str1 = "INSERT INTO  TEMP_DATABASE.TMP8 SELECT *,'','','','','' FROM ( SELECT CONCAT(RPAD(CONCAT('PARTY CODE: ',SCH_PARTY_CODE,' NAME : ' ,SCH_PARTY_NAME, ', ',SCH_CITY),71,' ') , LPAD(CONCAT('TARGET AMOUNT : ' , SCH_TARGET_AMOUNT,   '   ELIGIBILITY :-' ,SCH_ELIGIBILITY ),52,' ')) AS A,SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,1 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT LPAD(' ',125,'-') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,2 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT CONCAT(RPAD(SCD_QUALITY_ID,10,' '), RPAD(SCD_SHADE,5,' '),LPAD(SCD_PIECE_NO,10,' '),LPAD(SCD_INVOICE_NO,10,' '),LPAD(CONCAT(SUBSTRING(SCD_INVOICE_DATE,9,2),'/',SUBSTRING(SCD_INVOICE_DATE,6,2),'/',SUBSTRING(SCD_INVOICE_DATE,1,4)),15,' '),LPAD(SCD_INV_RATE,8,' ') ,LPAD(SCD_GROSS_QTY,10,' ')," +
           "LPAD(SCD_FLAG,5,' '),LPAD(SCD_NET_QTY,10,' '),LPAD(SCD_NET_AMOUNT,15,' '), LPAD(SCD_DISC_PERCENT,10,' '),LPAD(SCD_DISC_AMOUNT,15,' '))  AS A ,SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,1 AS M ,4 AS  N,SCD_INVOICE_DATE,SCD_INVOICE_DATE,SCD_QUALITY_ID FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT LPAD(' ',125,'-') AS A,SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,5 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT CONCAT(LPAD('TOTAL',53,' '), LPAD(SCH_TOTAL_GR_LIFT_QTY,15,' '),LPAD(SCH_TOTAL_NET_LIFT_QTY,15,' '),LPAD(SCH_TOTAL_INV_AMOUNT,15,' '),LPAD(SCH_DISC_AMOUNT,25,' ') )AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,6 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT LPAD(' ',125,'-') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,7 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT RPAD(' SUMMARY PERIOD',125,' ') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,8 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT LPAD(' ',125,'-') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,9 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT CONCAT(LPAD('FROM DATE',28,' '),LPAD('TO DATE',15,' '),LPAD('GROSS MTR' ,25,' '),LPAD('NET MTR',15,' '),LPAD('NET AMOUNT',15,' '), LPAD('DISC % ' ,10 ,' '), LPAD('DISC AMOUNT',15,' '))  AS A,SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,10 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT LPAD(' ',125,'-') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,11 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT CONCAT(LPAD(CONCAT(SUBSTRING(A.SLAB_FROM_DATE,9,2),'/',SUBSTRING(A.SLAB_FROM_DATE,6,2),'/',SUBSTRING(A.SLAB_FROM_DATE,1,4)),28,' '),LPAD(CONCAT(SUBSTRING(A.SLAB_TO_DATE,9,2),'/',SUBSTRING(A.SLAB_TO_DATE,6,2),'/',SUBSTRING(A.SLAB_TO_DATE,1,4)),15,' '),LPAD(COALESCE(SCD_GROSS_QTY,0) ,25,' '),LPAD(COALESCE(SCD_NET_QTY,0),15,' '),LPAD(COALESCE(SCD_NET_AMOUNT,0),15,' '), LPAD(A.SLAB_OUTPUT,10 ,' '), LPAD(COALESCE(SCD_DISC_AMOUNT,0),15,' ')) AS A ,A.SLAB_SCHEME_ID,A.SLAB_SEASON_ID,A.SLAB_PARTY_CODE,1 AS M ,12 AS N,A.SLAB_SR_NO AS O,'' AS P,'' AS Q  FROM (SELECT * FROM SALES.D_SAL_SCHEME_SLAB WHERE SLAB_SCHEME_ID = '"+schemeId+"') AS A LEFT JOIN (SELECT SLAB_SCHEME_ID, SLAB_PARTY_CODE,SLAB_SR_NO,SLAB_FROM_DATE,SLAB_TO_DATE,SLAB_OUTPUT, SUM(SCD_GROSS_QTY) AS SCD_GROSS_QTY ,SUM(SCD_NET_QTY) AS SCD_NET_QTY,SUM(SCD_NET_AMOUNT) AS SCD_NET_AMOUNT, SUM(SCD_DISC_AMOUNT) AS SCD_DISC_AMOUNT FROM SALES.D_SAL_SCHEME_SLAB ,SALES.D_SAL_SCHEME_DETAIL WHERE SLAB_SCHEME_ID = '"+schemeId+"' AND  SLAB_SCHEME_ID = SCD_SCHEME_ID AND SLAB_FROM_DATE <=SCD_INVOICE_DATE AND SLAB_TO_DATE >=SCD_INVOICE_DATE AND SLAB_PARTY_CODE = SCD_PARTY_CODE GROUP BY SLAB_SCHEME_ID, SLAB_PARTY_CODE,SLAB_SR_NO,SLAB_FROM_DATE,SLAB_TO_DATE,SLAB_OUTPUT) AS B ON   A.SLAB_SCHEME_ID = B.SLAB_SCHEME_ID AND A.SLAB_PARTY_CODE = B.SLAB_PARTY_CODE AND A.SLAB_SR_NO = B.SLAB_SR_NO WHERE A.SLAB_SR_NO IN (1,2) UNION ALL SELECT LPAD(' ',125,'-') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,13 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT CONCAT(LPAD( ' ' , 28,' '), LPAD('TOTAL',15,' '), LPAD(COALESCE(SCD_GROSS_QTY,0) ,25,' '),LPAD(COALESCE(SCD_NET_QTY,0),15,' '),LPAD(COALESCE(SCD_NET_AMOUNT,0),15,' '), LPAD(' ',10 ,' '), LPAD(COALESCE(SCD_DISC_AMOUNT,0),15,' ')) AS A ,A.SLAB_SCHEME_ID,A.SLAB_SEASON_ID,A.SLAB_PARTY_CODE,1 AS M ,14 AS N,A.SLAB_SR_NO AS O,'' AS P,'' AS Q  FROM (SELECT * FROM SALES.D_SAL_SCHEME_SLAB WHERE SLAB_SCHEME_ID = '"+schemeId+"' AND SLAB_SR_NO IN (1)) AS A LEFT JOIN (SELECT SLAB_SCHEME_ID, SLAB_PARTY_CODE,SUM(SCD_GROSS_QTY) AS SCD_GROSS_QTY ,SUM(SCD_NET_QTY) AS SCD_NET_QTY,SUM(SCD_NET_AMOUNT) AS SCD_NET_AMOUNT, SUM(SCD_DISC_AMOUNT) AS SCD_DISC_AMOUNT,AVG(SCD_QUALITY_ELIGIBLE) AS SCD_QUALITY_ELIGIBLE FROM SALES.D_SAL_SCHEME_SLAB ,SALES.D_SAL_SCHEME_DETAIL WHERE SLAB_SCHEME_ID = '"+schemeId+"' AND  SLAB_SCHEME_ID = SCD_SCHEME_ID AND SLAB_FROM_DATE <=SCD_INVOICE_DATE AND SLAB_TO_DATE >=SCD_INVOICE_DATE AND SLAB_PARTY_CODE = SCD_PARTY_CODE AND SLAB_SR_NO IN (1,2) GROUP BY SLAB_SCHEME_ID, SLAB_PARTY_CODE) AS B ON   A.SLAB_SCHEME_ID = B.SLAB_SCHEME_ID AND A.SLAB_PARTY_CODE = B.SLAB_PARTY_CODE UNION ALL SELECT LPAD(' ',125,'-') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,15 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT CONCAT( LPAD(CONCAT(SUBSTRING(A.SLAB_FROM_DATE,9,2),'/',SUBSTRING(A.SLAB_FROM_DATE,6,2),'/',SUBSTRING(A.SLAB_FROM_DATE,1,4)),28,' '), LPAD(CONCAT(SUBSTRING(A.SLAB_TO_DATE,9,2),'/',SUBSTRING(A.SLAB_TO_DATE,6,2),'/',SUBSTRING(A.SLAB_TO_DATE,1,4)),15,' '),LPAD(COALESCE(SCD_GROSS_QTY,0) ,25,' '),LPAD(COALESCE(SCD_NET_QTY,0),15,' '), LPAD(COALESCE(SCD_NET_AMOUNT,0),15,' '), LPAD(A.SLAB_OUTPUT,10 ,' '), LPAD(COALESCE(SCD_DISC_AMOUNT,0),15,' ')) AS A ,A.SLAB_SCHEME_ID,A.SLAB_SEASON_ID,A.SLAB_PARTY_CODE,1 AS M ,16 AS N,A.SLAB_SR_NO AS O,'' AS P,'' AS Q  FROM (SELECT * FROM SALES.D_SAL_SCHEME_SLAB WHERE SLAB_SCHEME_ID = '"+schemeId+"') AS A LEFT JOIN (SELECT SLAB_SCHEME_ID,SLAB_PARTY_CODE,SLAB_SR_NO,SLAB_FROM_DATE,SLAB_TO_DATE,SLAB_OUTPUT, SUM(SCD_GROSS_QTY) AS SCD_GROSS_QTY ,SUM(SCD_NET_QTY) AS SCD_NET_QTY,SUM(SCD_NET_AMOUNT) AS SCD_NET_AMOUNT, SUM(SCD_DISC_AMOUNT) AS SCD_DISC_AMOUNT FROM SALES.D_SAL_SCHEME_SLAB ,SALES.D_SAL_SCHEME_DETAIL WHERE SLAB_SCHEME_ID = '"+schemeId+"' AND  SLAB_SCHEME_ID = SCD_SCHEME_ID AND SLAB_FROM_DATE <=SCD_INVOICE_DATE AND SLAB_TO_DATE >=SCD_INVOICE_DATE AND SLAB_PARTY_CODE = SCD_PARTY_CODE GROUP BY SLAB_SCHEME_ID, SLAB_PARTY_CODE,SLAB_SR_NO,SLAB_FROM_DATE,SLAB_TO_DATE,SLAB_OUTPUT) AS B ON   A.SLAB_SCHEME_ID = B.SLAB_SCHEME_ID AND A.SLAB_PARTY_CODE = B.SLAB_PARTY_CODE AND A.SLAB_SR_NO = B.SLAB_SR_NO  WHERE A.SLAB_SR_NO IN (3) UNION ALL  SELECT LPAD(' ',125,'-') AS A,SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,17 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT CONCAT(LPAD( ' ' , 28,' '), LPAD(' BONANZA TOTAL',15,' '),LPAD(COALESCE(SCD_GROSS_QTY,0) ,25,' '),LPAD(COALESCE(SCD_NET_QTY,0),15,' '),LPAD(COALESCE(SCD_NET_AMOUNT,0),15,' '), LPAD(' ',10 ,' '), LPAD(COALESCE(ROUND(ROUND(SCD_DISC_AMOUNT,0),2),0),15,' ')) AS A ,A.SLAB_SCHEME_ID,A.SLAB_SEASON_ID,A.SLAB_PARTY_CODE,1 AS M ,18 AS N,A.SLAB_SR_NO AS O,'' AS P,'' AS Q  FROM (SELECT * FROM SALES.D_SAL_SCHEME_SLAB WHERE SLAB_SCHEME_ID = '"+schemeId+"' AND SLAB_SR_NO IN (3)) AS A LEFT JOIN (SELECT SLAB_SCHEME_ID, SLAB_PARTY_CODE, SUM(SCD_GROSS_QTY) AS SCD_GROSS_QTY ,SUM(SCD_NET_QTY) AS SCD_NET_QTY,SUM(SCD_NET_AMOUNT) AS SCD_NET_AMOUNT, SUM(SCD_DISC_AMOUNT) AS SCD_DISC_AMOUNT FROM SALES.D_SAL_SCHEME_SLAB ,SALES.D_SAL_SCHEME_DETAIL WHERE SLAB_SCHEME_ID = '"+schemeId+"' AND  SLAB_SCHEME_ID = SCD_SCHEME_ID AND SLAB_FROM_DATE <=SCD_INVOICE_DATE AND SLAB_TO_DATE >=SCD_INVOICE_DATE AND SLAB_PARTY_CODE = SCD_PARTY_CODE AND SLAB_SR_NO IN (1,2,3) GROUP BY SLAB_SCHEME_ID, SLAB_PARTY_CODE) AS B ON   A.SLAB_SCHEME_ID = B.SLAB_SCHEME_ID AND A.SLAB_PARTY_CODE = B.SLAB_PARTY_CODE UNION ALL SELECT LPAD(' ',125,'-') AS A,SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,19 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"') AS A";           
             stmt.execute(Str1);
          
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER A,TEMP_DATABASE.TMP8  SET COL11= SCH_PARTY_NAME,COL12 = SCH_TARGET_AMOUNT,COL13 = SCH_ELIGIBILITY WHERE SCH_SCHEME_ID = '"+schemeId+"' AND SCH_SCHEME_ID = COL02+0 AND SCH_PARTY_CODE = COL04+0");
            stmt.execute("UPDATE  TEMP_DATABASE.TMP8 SET COL10 =COL04,COL14 = COL13" );
            stmt.execute("UPDATE  TEMP_DATABASE.TMP8 SET COL10 =' ', COL11=' ',COL12=' ', COL13=' ' WHERE  COL05 =1 AND COL06 =19");
            stmt.execute("UPDATE  TEMP_DATABASE.TMP8 SET COL10 =' ', COL11=' ',COL12=' ', COL13='' WHERE  COL05 =1 AND COL06 =1");
              printReport=true;
            return true;
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
    }    
    
   
           private boolean PrintDHANVARSHA(int schemeId){
               try{
                   Connection conn=data.getConn();
                   Statement stmt=conn.createStatement();
                   ResultSet rsScheme=stmt.executeQuery("SELECT SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+schemeId);
                   rsScheme.first();
                   String seasonId=rsScheme.getString("SCHEME_SEASON_ID");
                   
                   
                   
                   stmt.execute("DELETE FROM TEMP_DATABASE.TMP8");
                   
                   String Str1 = "INSERT INTO  TEMP_DATABASE.TMP8 SELECT *,'','','','','' FROM ( SELECT CONCAT(RPAD(CONCAT('PARTY CODE: ',SCH_PARTY_CODE,' NAME : ' ,SCH_PARTY_NAME, ', ',SCH_CITY),71,' ') , LPAD(CONCAT('TARGET AMOUNT : ' , SCH_TARGET_AMOUNT,   '   ELIGIBILITY :-' ,SCH_ELIGIBILITY ),52,' ')) AS A,SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,1 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT LPAD(' ',125,'-') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,2 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT CONCAT(RPAD(SCD_QUALITY_ID,10,' '), RPAD(SCD_SHADE,5,' '),LPAD(SCD_PIECE_NO,10,' '),LPAD(SCD_INVOICE_NO,10,' '),LPAD(CONCAT(SUBSTRING(SCD_INVOICE_DATE,9,2),'/',SUBSTRING(SCD_INVOICE_DATE,6,2),'/',SUBSTRING(SCD_INVOICE_DATE,1,4)),15,' '),LPAD(SCD_INV_RATE,8,' ') ,LPAD(SCD_GROSS_QTY,10,' ')," +
                   "LPAD(SCD_FLAG,5,' '),LPAD(SCD_NET_QTY,10,' '),LPAD(SCD_NET_AMOUNT,15,' '), LPAD(SCD_DISC_PERCENT,10,' '),LPAD(SCD_DISC_AMOUNT,15,' '))  AS A ,SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,1 AS M ,4 AS  N,SCD_INVOICE_DATE,SCD_INVOICE_DATE,SCD_QUALITY_ID FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT LPAD(' ',125,'-') AS A,SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,5 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT CONCAT(LPAD('TOTAL',53,' '), LPAD(SCH_TOTAL_GR_LIFT_QTY,15,' '),LPAD(SCH_TOTAL_NET_LIFT_QTY,15,' '),LPAD(SCH_TOTAL_INV_AMOUNT,15,' '),LPAD(SCH_DISC_AMOUNT,25,' ') )AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,6 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT LPAD(' ',125,'-') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,7 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT RPAD(' SUMMARY PERIOD',125,' ') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,8 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT LPAD(' ',125,'-') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,9 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT CONCAT(LPAD('FROM DATE',28,' '),LPAD('TO DATE',15,' '),LPAD('GROSS MTR' ,25,' '),LPAD('NET MTR',15,' '),LPAD('NET AMOUNT',15,' '), LPAD('DISC % ' ,10 ,' '), LPAD('DISC AMOUNT',15,' '))  AS A,SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,10 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT LPAD(' ',125,'-') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,11 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT CONCAT(LPAD(CONCAT(SUBSTRING(A.SLAB_ORDER_FROMDATE,9,2),'/',SUBSTRING(A.SLAB_ORDER_FROMDATE,6,2),'/',SUBSTRING(A.SLAB_ORDER_FROMDATE,1,4)),28,' '),LPAD(CONCAT(SUBSTRING(A.SLAB_ORDER_TO_DATE,9,2),'/',SUBSTRING(A.SLAB_ORDER_TO_DATE,6,2),'/',SUBSTRING(A.SLAB_ORDER_TO_DATE,1,4)),15,' '),LPAD(COALESCE(SCD_GROSS_QTY,0) ,25,' '),LPAD(COALESCE(SCD_NET_QTY,0),15,' '),LPAD(COALESCE(SCD_NET_AMOUNT,0),15,' '), LPAD(A.SLAB_OUTPUT,10 ,' '), LPAD(COALESCE(SCD_DISC_AMOUNT,0),15,' ')) AS A ,A.SLAB_SCHEME_ID,A.SLAB_SEASON_ID,A.SLAB_PARTY_CODE,1 AS M ,12 AS N,A.SR_NO AS O,'' AS P,'' AS Q  FROM (SELECT * FROM SALES.D_SAL_SCHEME_SLAB WHERE SLAB_SCHEME_ID = '"+schemeId+"' ) AS A LEFT JOIN (SELECT SLAB_SCHEME_ID, SLAB_PARTY_CODE,SR_NO,SLAB_ORDER_FROMDATE,SLAB_ORDER_TO_DATE,SLAB_OUTPUT, SUM(SCD_GROSS_QTY) AS SCD_GROSS_QTY ,SUM(SCD_NET_QTY) AS SCD_NET_QTY,SUM(SCD_NET_AMOUNT) AS SCD_NET_AMOUNT, SUM(SCD_DISC_AMOUNT) AS SCD_DISC_AMOUNT FROM SALES.D_SAL_SCHEME_SLAB ,SALES.D_SAL_SCHEME_DETAIL WHERE SLAB_SCHEME_ID = '"+schemeId+"' AND  SLAB_SCHEME_ID = SCD_SCHEME_ID AND SLAB_ORDER_FROMDATE <=SCD_INVOICE_DATE AND SLAB_ORDER_TO_DATE >=SCD_INVOICE_DATE AND SLAB_PARTY_CODE = SCD_PARTY_CODE AND SLAB_SR_NO=2 GROUP BY SLAB_PARTY_CODE,SLAB_SCHEME_ID,SR_NO,SLAB_ORDER_FROMDATE,SLAB_ORDER_TO_DATE,SLAB_OUTPUT) AS B ON   A.SLAB_SCHEME_ID = B.SLAB_SCHEME_ID AND A.SLAB_PARTY_CODE = B.SLAB_PARTY_CODE AND A.SR_NO = B.SR_NO WHERE A.SLAB_SR_NO IN (2) UNION ALL SELECT LPAD(' ',125,'-') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,13 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT CONCAT(LPAD( ' ' , 28,' '), LPAD('TOTAL',15,' '), LPAD(COALESCE(SCD_GROSS_QTY,0) ,25,' '),LPAD(COALESCE(SCD_NET_QTY,0),15,' '),LPAD(COALESCE(SCD_NET_AMOUNT,0),15,' '), LPAD(' ',10 ,' '), LPAD(COALESCE(SCD_DISC_AMOUNT,0),15,' ')) AS A ,A.SLAB_SCHEME_ID,A.SLAB_SEASON_ID,A.SLAB_PARTY_CODE,1 AS M ,14 AS N,A.SLAB_SR_NO AS O,'' AS P,'' AS Q  FROM (SELECT * FROM SALES.D_SAL_SCHEME_SLAB WHERE SLAB_SCHEME_ID = '"+schemeId+"' AND SLAB_SR_NO IN (1)) AS A LEFT JOIN (SELECT SLAB_SCHEME_ID, SLAB_PARTY_CODE,SUM(SCD_GROSS_QTY) AS SCD_GROSS_QTY ,SUM(SCD_NET_QTY) AS SCD_NET_QTY,SUM(SCD_NET_AMOUNT) AS SCD_NET_AMOUNT, SUM(SCD_DISC_AMOUNT) AS SCD_DISC_AMOUNT,AVG(SCD_QUALITY_ELIGIBLE) AS SCD_QUALITY_ELIGIBLE FROM SALES.D_SAL_SCHEME_SLAB ,SALES.D_SAL_SCHEME_DETAIL WHERE SLAB_SCHEME_ID = '"+schemeId+"' AND  SLAB_SCHEME_ID = SCD_SCHEME_ID AND SLAB_ORDER_FROMDATE <=SCD_INVOICE_DATE AND SLAB_ORDER_TO_DATE >=SCD_INVOICE_DATE AND SLAB_PARTY_CODE = SCD_PARTY_CODE AND SLAB_SR_NO IN (2) GROUP BY SLAB_SCHEME_ID, SLAB_PARTY_CODE) AS B ON   A.SLAB_SCHEME_ID = B.SLAB_SCHEME_ID AND A.SLAB_PARTY_CODE = B.SLAB_PARTY_CODE UNION ALL SELECT LPAD(' ',125,'-') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,15 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT CONCAT( LPAD(CONCAT(SUBSTRING(A.SLAB_FROM_DATE,9,2),'/',SUBSTRING(A.SLAB_FROM_DATE,6,2),'/',SUBSTRING(A.SLAB_FROM_DATE,1,4)),28,' '), LPAD(CONCAT(SUBSTRING(A.SLAB_TO_DATE,9,2),'/',SUBSTRING(A.SLAB_TO_DATE,6,2),'/',SUBSTRING(A.SLAB_TO_DATE,1,4)),15,' '),LPAD(COALESCE(SCD_GROSS_QTY,0) ,25,' '),LPAD(COALESCE(SCD_NET_QTY,0),15,' '), LPAD(COALESCE(SCD_NET_AMOUNT,0),15,' '), LPAD(A.SLAB_OUTPUT,10 ,' '), LPAD(COALESCE(SCD_DISC_AMOUNT,0),15,' ')) AS A ,A.SLAB_SCHEME_ID,A.SLAB_SEASON_ID,A.SLAB_PARTY_CODE,1 AS M ,16 AS N,A.SLAB_SR_NO AS O,'' AS P,'' AS Q  FROM (SELECT * FROM SALES.D_SAL_SCHEME_SLAB WHERE SLAB_SCHEME_ID = '"+schemeId+"') AS A LEFT JOIN (SELECT SLAB_SCHEME_ID,SLAB_PARTY_CODE,SLAB_SR_NO,SLAB_FROM_DATE,SLAB_TO_DATE,SLAB_OUTPUT, SUM(SCD_GROSS_QTY) AS SCD_GROSS_QTY ,SUM(SCD_NET_QTY) AS SCD_NET_QTY,SUM(SCD_NET_AMOUNT) AS SCD_NET_AMOUNT, SUM(SCD_DISC_AMOUNT) AS SCD_DISC_AMOUNT FROM SALES.D_SAL_SCHEME_SLAB ,SALES.D_SAL_SCHEME_DETAIL WHERE SLAB_SCHEME_ID = '"+schemeId+"' AND  SLAB_SCHEME_ID = SCD_SCHEME_ID AND SLAB_FROM_DATE <=SCD_INVOICE_DATE AND SLAB_TO_DATE >=SCD_INVOICE_DATE AND SLAB_PARTY_CODE = SCD_PARTY_CODE GROUP BY SLAB_SCHEME_ID, SLAB_PARTY_CODE,SLAB_SR_NO,SLAB_FROM_DATE,SLAB_TO_DATE,SLAB_OUTPUT) AS B ON   A.SLAB_SCHEME_ID = B.SLAB_SCHEME_ID AND A.SLAB_PARTY_CODE = B.SLAB_PARTY_CODE AND A.SLAB_SR_NO = B.SLAB_SR_NO  WHERE A.SLAB_SR_NO IN (3) UNION ALL  SELECT LPAD(' ',125,'-') AS A,SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,17 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT CONCAT(LPAD( ' ' , 28,' '), LPAD(' BONANZA TOTAL',15,' '),LPAD(COALESCE(SCD_GROSS_QTY,0) ,25,' '),LPAD(COALESCE(SCD_NET_QTY,0),15,' '),LPAD(COALESCE(SCD_NET_AMOUNT,0),15,' '), LPAD(' ',10 ,' '), LPAD(COALESCE(ROUND(ROUND(SCD_DISC_AMOUNT,0),2),0),15,' ')) AS A ,A.SLAB_SCHEME_ID,A.SLAB_SEASON_ID,A.SLAB_PARTY_CODE,1 AS M ,18 AS N,A.SLAB_SR_NO AS O,'' AS P,'' AS Q  FROM (SELECT * FROM SALES.D_SAL_SCHEME_SLAB WHERE SLAB_SCHEME_ID = '"+schemeId+"' AND SLAB_SR_NO IN (3)) AS A LEFT JOIN (SELECT SLAB_SCHEME_ID, SLAB_PARTY_CODE, SUM(SCD_GROSS_QTY) AS SCD_GROSS_QTY ,SUM(SCD_NET_QTY) AS SCD_NET_QTY,SUM(SCD_NET_AMOUNT) AS SCD_NET_AMOUNT, SUM(SCD_DISC_AMOUNT) AS SCD_DISC_AMOUNT FROM SALES.D_SAL_SCHEME_SLAB ,SALES.D_SAL_SCHEME_DETAIL WHERE SLAB_SCHEME_ID = '"+schemeId+"' AND  SLAB_SCHEME_ID = SCD_SCHEME_ID AND SLAB_FROM_DATE <=SCD_INVOICE_DATE AND SLAB_TO_DATE >=SCD_INVOICE_DATE AND SLAB_PARTY_CODE = SCD_PARTY_CODE AND SLAB_SR_NO IN (1,2,3) GROUP BY SLAB_SCHEME_ID, SLAB_PARTY_CODE) AS B ON   A.SLAB_SCHEME_ID = B.SLAB_SCHEME_ID AND A.SLAB_PARTY_CODE = B.SLAB_PARTY_CODE UNION ALL SELECT LPAD(' ',125,'-') AS A,SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,19 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"') AS A";
                   stmt.execute(Str1);
                   
                   stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER A,TEMP_DATABASE.TMP8  SET COL11= SCH_PARTY_NAME,COL12 = SCH_TARGET_AMOUNT,COL13 = SCH_ELIGIBILITY WHERE SCH_SCHEME_ID = '"+schemeId+"' AND SCH_SCHEME_ID = COL02+0 AND SCH_PARTY_CODE = COL04+0");
                   stmt.execute("UPDATE  TEMP_DATABASE.TMP8 SET COL10 =COL04,COL14 = COL13" );
                   stmt.execute("UPDATE  TEMP_DATABASE.TMP8 SET COL10 =' ', COL11=' ',COL12=' ', COL13=' ' WHERE  COL05 =1 AND COL06 =19");
                   stmt.execute("UPDATE  TEMP_DATABASE.TMP8 SET COL10 =' ', COL11=' ',COL12=' ', COL13='' WHERE  COL05 =1 AND COL06 =1");
                   printReport=true;
                   return true;
               }catch(SQLException sqe){
                   sqe.printStackTrace();
                   return false;
        }
           }        
           
           
           
               private boolean PrintSCHEMES17(int schemeId){
               try{
                   Connection conn=data.getConn();
                   Statement stmt=conn.createStatement();
                   ResultSet rsScheme=stmt.executeQuery("SELECT SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+schemeId);
                   rsScheme.first();
                   String seasonId=rsScheme.getString("SCHEME_SEASON_ID");
                   
                   
                   
                   stmt.execute("DELETE FROM TEMP_DATABASE.TMP8");
                   
                //   String Str1 = "INSERT INTO  TEMP_DATABASE.TMP8 SELECT *,'','','','','' FROM ( SELECT CONCAT(RPAD(CONCAT('PARTY CODE: ',SCH_PARTY_CODE,' NAME : ' ,SCH_PARTY_NAME, ', ',SCH_CITY),71,' ') , LPAD(CONCAT('TARGET AMOUNT : ' , SCH_TARGET_AMOUNT,   '   ELIGIBILITY :-' ,SCH_ELIGIBILITY ),52,' ')) AS A,SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,1 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT LPAD(' ',125,'-') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,2 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT CONCAT(RPAD(SCD_QUALITY_ID,10,' '), RPAD(SCD_SHADE,5,' '),LPAD(SCD_PIECE_NO,10,' '),LPAD(SCD_INVOICE_NO,10,' '),LPAD(CONCAT(SUBSTRING(SCD_INVOICE_DATE,9,2),'/',SUBSTRING(SCD_INVOICE_DATE,6,2),'/',SUBSTRING(SCD_INVOICE_DATE,1,4)),15,' '),LPAD(SCD_INV_RATE,8,' ') ,LPAD(SCD_GROSS_QTY,10,' ')," +
                  // "LPAD(SCD_FLAG,5,' '),LPAD(SCD_NET_QTY,10,' '),LPAD(SCD_NET_AMOUNT,15,' '), LPAD(SCD_DISC_PERCENT,10,' '),LPAD(SCD_DISC_AMOUNT,15,' '))  AS A ,SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,1 AS M ,4 AS  N,SCD_INVOICE_DATE,SCD_INVOICE_DATE,SCD_QUALITY_ID FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT LPAD(' ',125,'-') AS A,SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,5 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT CONCAT(LPAD('TOTAL',53,' '), LPAD(SCH_TOTAL_GR_LIFT_QTY,15,' '),LPAD(SCH_TOTAL_NET_LIFT_QTY,15,' '),LPAD(SCH_TOTAL_INV_AMOUNT,15,' '),LPAD(SCH_DISC_AMOUNT,25,' ') )AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,6 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT LPAD(' ',125,'-') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,7 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT RPAD(' SUMMARY PERIOD',125,' ') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,8 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT LPAD(' ',125,'-') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,9 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT CONCAT(LPAD('FROM DATE',28,' '),LPAD('TO DATE',15,' '),LPAD('GROSS MTR' ,25,' '),LPAD('NET MTR',15,' '),LPAD('NET AMOUNT',15,' '), LPAD('DISC % ' ,10 ,' '), LPAD('DISC AMOUNT',15,' '))  AS A,SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,10 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT LPAD(' ',125,'-') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,11 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT CONCAT(LPAD(CONCAT(SUBSTRING(A.SLAB_ORDER_FROMDATE,9,2),'/',SUBSTRING(A.SLAB_ORDER_FROMDATE,6,2),'/',SUBSTRING(A.SLAB_ORDER_FROMDATE,1,4)),28,' '),LPAD(CONCAT(SUBSTRING(A.SLAB_ORDER_TO_DATE,9,2),'/',SUBSTRING(A.SLAB_ORDER_TO_DATE,6,2),'/',SUBSTRING(A.SLAB_ORDER_TO_DATE,1,4)),15,' '),LPAD(COALESCE(SCD_GROSS_QTY,0) ,25,' '),LPAD(COALESCE(SCD_NET_QTY,0),15,' '),LPAD(COALESCE(SCD_NET_AMOUNT,0),15,' '), LPAD(A.SLAB_OUTPUT,10 ,' '), LPAD(COALESCE(SCD_DISC_AMOUNT,0),15,' ')) AS A ,A.SLAB_SCHEME_ID,A.SLAB_SEASON_ID,A.SLAB_PARTY_CODE,1 AS M ,12 AS N,A.SR_NO AS O,'' AS P,'' AS Q  FROM (SELECT * FROM SALES.D_SAL_SCHEME_SLAB WHERE SLAB_SCHEME_ID = '"+schemeId+"' ) AS A LEFT JOIN (SELECT SLAB_SCHEME_ID, SLAB_PARTY_CODE,SR_NO,SLAB_ORDER_FROMDATE,SLAB_ORDER_TO_DATE,SLAB_OUTPUT, SUM(SCD_GROSS_QTY) AS SCD_GROSS_QTY ,SUM(SCD_NET_QTY) AS SCD_NET_QTY,SUM(SCD_NET_AMOUNT) AS SCD_NET_AMOUNT, SUM(SCD_DISC_AMOUNT) AS SCD_DISC_AMOUNT FROM SALES.D_SAL_SCHEME_SLAB ,SALES.D_SAL_SCHEME_DETAIL WHERE SLAB_SCHEME_ID = '"+schemeId+"' AND  SLAB_SCHEME_ID = SCD_SCHEME_ID AND SLAB_ORDER_FROMDATE <=SCD_INVOICE_DATE AND SLAB_ORDER_TO_DATE >=SCD_INVOICE_DATE AND SLAB_PARTY_CODE = SCD_PARTY_CODE AND SLAB_SR_NO=2 GROUP BY SLAB_PARTY_CODE,SLAB_SCHEME_ID,SR_NO,SLAB_ORDER_FROMDATE,SLAB_ORDER_TO_DATE,SLAB_OUTPUT) AS B ON   A.SLAB_SCHEME_ID = B.SLAB_SCHEME_ID AND A.SLAB_PARTY_CODE = B.SLAB_PARTY_CODE AND A.SR_NO = B.SR_NO WHERE A.SLAB_SR_NO IN (2) UNION ALL SELECT LPAD(' ',125,'-') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,13 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT CONCAT(LPAD( ' ' , 28,' '), LPAD('TOTAL',15,' '), LPAD(COALESCE(SCD_GROSS_QTY,0) ,25,' '),LPAD(COALESCE(SCD_NET_QTY,0),15,' '),LPAD(COALESCE(SCD_NET_AMOUNT,0),15,' '), LPAD(' ',10 ,' '), LPAD(COALESCE(SCD_DISC_AMOUNT,0),15,' ')) AS A ,A.SLAB_SCHEME_ID,A.SLAB_SEASON_ID,A.SLAB_PARTY_CODE,1 AS M ,14 AS N,A.SLAB_SR_NO AS O,'' AS P,'' AS Q  FROM (SELECT * FROM SALES.D_SAL_SCHEME_SLAB WHERE SLAB_SCHEME_ID = '"+schemeId+"' AND SLAB_SR_NO IN (1)) AS A LEFT JOIN (SELECT SLAB_SCHEME_ID, SLAB_PARTY_CODE,SUM(SCD_GROSS_QTY) AS SCD_GROSS_QTY ,SUM(SCD_NET_QTY) AS SCD_NET_QTY,SUM(SCD_NET_AMOUNT) AS SCD_NET_AMOUNT, SUM(SCD_DISC_AMOUNT) AS SCD_DISC_AMOUNT,AVG(SCD_QUALITY_ELIGIBLE) AS SCD_QUALITY_ELIGIBLE FROM SALES.D_SAL_SCHEME_SLAB ,SALES.D_SAL_SCHEME_DETAIL WHERE SLAB_SCHEME_ID = '"+schemeId+"' AND  SLAB_SCHEME_ID = SCD_SCHEME_ID AND SLAB_ORDER_FROMDATE <=SCD_INVOICE_DATE AND SLAB_ORDER_TO_DATE >=SCD_INVOICE_DATE AND SLAB_PARTY_CODE = SCD_PARTY_CODE AND SLAB_SR_NO IN (2) GROUP BY SLAB_SCHEME_ID, SLAB_PARTY_CODE) AS B ON   A.SLAB_SCHEME_ID = B.SLAB_SCHEME_ID AND A.SLAB_PARTY_CODE = B.SLAB_PARTY_CODE UNION ALL SELECT LPAD(' ',125,'-') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,15 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT CONCAT( LPAD(CONCAT(SUBSTRING(A.SLAB_FROM_DATE,9,2),'/',SUBSTRING(A.SLAB_FROM_DATE,6,2),'/',SUBSTRING(A.SLAB_FROM_DATE,1,4)),28,' '), LPAD(CONCAT(SUBSTRING(A.SLAB_TO_DATE,9,2),'/',SUBSTRING(A.SLAB_TO_DATE,6,2),'/',SUBSTRING(A.SLAB_TO_DATE,1,4)),15,' '),LPAD(COALESCE(SCD_GROSS_QTY,0) ,25,' '),LPAD(COALESCE(SCD_NET_QTY,0),15,' '), LPAD(COALESCE(SCD_NET_AMOUNT,0),15,' '), LPAD(A.SLAB_OUTPUT,10 ,' '), LPAD(COALESCE(SCD_DISC_AMOUNT,0),15,' ')) AS A ,A.SLAB_SCHEME_ID,A.SLAB_SEASON_ID,A.SLAB_PARTY_CODE,1 AS M ,16 AS N,A.SLAB_SR_NO AS O,'' AS P,'' AS Q  FROM (SELECT * FROM SALES.D_SAL_SCHEME_SLAB WHERE SLAB_SCHEME_ID = '"+schemeId+"') AS A LEFT JOIN (SELECT SLAB_SCHEME_ID,SLAB_PARTY_CODE,SLAB_SR_NO,SLAB_FROM_DATE,SLAB_TO_DATE,SLAB_OUTPUT, SUM(SCD_GROSS_QTY) AS SCD_GROSS_QTY ,SUM(SCD_NET_QTY) AS SCD_NET_QTY,SUM(SCD_NET_AMOUNT) AS SCD_NET_AMOUNT, SUM(SCD_DISC_AMOUNT) AS SCD_DISC_AMOUNT FROM SALES.D_SAL_SCHEME_SLAB ,SALES.D_SAL_SCHEME_DETAIL WHERE SLAB_SCHEME_ID = '"+schemeId+"' AND  SLAB_SCHEME_ID = SCD_SCHEME_ID AND SLAB_FROM_DATE <=SCD_INVOICE_DATE AND SLAB_TO_DATE >=SCD_INVOICE_DATE AND SLAB_PARTY_CODE = SCD_PARTY_CODE GROUP BY SLAB_SCHEME_ID, SLAB_PARTY_CODE,SLAB_SR_NO,SLAB_FROM_DATE,SLAB_TO_DATE,SLAB_OUTPUT) AS B ON   A.SLAB_SCHEME_ID = B.SLAB_SCHEME_ID AND A.SLAB_PARTY_CODE = B.SLAB_PARTY_CODE AND A.SLAB_SR_NO = B.SLAB_SR_NO  WHERE A.SLAB_SR_NO IN (3) UNION ALL  SELECT LPAD(' ',125,'-') AS A,SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,17 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT CONCAT(LPAD( ' ' , 28,' '), LPAD(' BONANZA TOTAL',15,' '),LPAD(COALESCE(SCD_GROSS_QTY,0) ,25,' '),LPAD(COALESCE(SCD_NET_QTY,0),15,' '),LPAD(COALESCE(SCD_NET_AMOUNT,0),15,' '), LPAD(' ',10 ,' '), LPAD(COALESCE(ROUND(ROUND(SCD_DISC_AMOUNT,0),2),0),15,' ')) AS A ,A.SLAB_SCHEME_ID,A.SLAB_SEASON_ID,A.SLAB_PARTY_CODE,1 AS M ,18 AS N,A.SLAB_SR_NO AS O,'' AS P,'' AS Q  FROM (SELECT * FROM SALES.D_SAL_SCHEME_SLAB WHERE SLAB_SCHEME_ID = '"+schemeId+"' AND SLAB_SR_NO IN (3)) AS A LEFT JOIN (SELECT SLAB_SCHEME_ID, SLAB_PARTY_CODE, SUM(SCD_GROSS_QTY) AS SCD_GROSS_QTY ,SUM(SCD_NET_QTY) AS SCD_NET_QTY,SUM(SCD_NET_AMOUNT) AS SCD_NET_AMOUNT, SUM(SCD_DISC_AMOUNT) AS SCD_DISC_AMOUNT FROM SALES.D_SAL_SCHEME_SLAB ,SALES.D_SAL_SCHEME_DETAIL WHERE SLAB_SCHEME_ID = '"+schemeId+"' AND  SLAB_SCHEME_ID = SCD_SCHEME_ID AND SLAB_FROM_DATE <=SCD_INVOICE_DATE AND SLAB_TO_DATE >=SCD_INVOICE_DATE AND SLAB_PARTY_CODE = SCD_PARTY_CODE AND SLAB_SR_NO IN (1,2,3) GROUP BY SLAB_SCHEME_ID, SLAB_PARTY_CODE) AS B ON   A.SLAB_SCHEME_ID = B.SLAB_SCHEME_ID AND A.SLAB_PARTY_CODE = B.SLAB_PARTY_CODE UNION ALL SELECT LPAD(' ',125,'-') AS A,SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,19 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"') AS A";
                   
                   String Str1 = "INSERT INTO  TEMP_DATABASE.TMP8 SELECT *,'','','','','' FROM ( SELECT CONCAT(RPAD(CONCAT('PARTY CODE: ',SCH_PARTY_CODE,' NAME : ' ,SCH_PARTY_NAME, ', ',SCH_CITY),71,' ') , LPAD(CONCAT('TARGET AMOUNT : ' , SCH_TARGET_AMOUNT,   '   ELIGIBILITY :-' ,SCH_ELIGIBILITY ),52,' ')) AS A,SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,1 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT LPAD(' ',125,'-') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,2 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL  SELECT CONCAT(RPAD(SCD_QUALITY_ID,7,' '),RPAD(SUBSTRING(QLT_NEW_OLD,1,1),3,' '), RPAD(SCD_SHADE,5,' '),LPAD(SCD_PIECE_NO,10,' '),LPAD(SCD_INVOICE_NO,10,' '),LPAD(CONCAT(SUBSTRING(SCD_INVOICE_DATE,9,2),'/',SUBSTRING(SCD_INVOICE_DATE,6,2),'/',SUBSTRING(SCD_INVOICE_DATE,1,4)),15,' '),LPAD(SCD_INV_RATE,8,' ') ,LPAD(SCD_GROSS_QTY,10,' '),LPAD(SCD_FLAG,5,' '),LPAD(SCD_NET_QTY,10,' '),LPAD(SCD_NET_AMOUNT,15,' '), LPAD(SCD_DISC_PERCENT,10,' '),LPAD(SCD_DISC_AMOUNT,15,' '))  AS A ,SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,1 AS M ,4 AS  N,SCD_INVOICE_DATE,SCD_INVOICE_DATE,CONCAT(SCD_QUALITY_ID,SCD_SHADE) AS SCD_QUALITY_ID FROM DINESHMILLS.D_SAL_QUALITY_MASTER A ,SALES.D_SAL_SCHEME_DETAIL B WHERE SCD_SCHEME_ID = '"+schemeId+"' AND SUBSTRING(QUALITY_ID,2,5) = SUBSTRING(SCD_QUALITY_ID,2,5) AND SEASON_ID = 'S17' AND SEASON_ID = SCD_SEASON_ID UNION ALL SELECT LPAD(' ',125,'-') AS A,SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,5 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER  WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT CONCAT(LPAD('TOTAL',53,' '), LPAD(SCH_TOTAL_GR_LIFT_QTY,15,' '),LPAD(SCH_TOTAL_NET_LIFT_QTY,15,' '),LPAD(SCH_TOTAL_INV_AMOUNT,15,' '),LPAD(SCH_DISC_AMOUNT,25,' ') )AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,6 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"'  UNION ALL  SELECT LPAD(' ',125,'-') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,7 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT RPAD(' SUMMARY PERIOD',125,' ') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,8 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT LPAD(' ',125,'-') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,9 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT CONCAT(LPAD('FROM DATE',28,' '),LPAD('TO DATE',15,' '),LPAD('GROSS MTR' ,25,' '),LPAD('NET MTR',15,' '),LPAD('NET AMOUNT',15,' '), LPAD('DISC % ' ,10 ,' '), LPAD('DISC AMOUNT',15,' '))  AS A,SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,10 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT LPAD(' ',125,'-') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,11 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL  SELECT CONCAT(LPAD(CONCAT(SUBSTRING(SLAB_FROM_DATE,9,2),'/',SUBSTRING(SLAB_FROM_DATE,6,2),'/',SUBSTRING(SLAB_FROM_DATE,1,4)),28,' '),LPAD(CONCAT(SUBSTRING(SLAB_TO_DATE,9,2),'/',SUBSTRING(SLAB_TO_DATE,6,2),'/',SUBSTRING(SLAB_TO_DATE,1,4)),15,' '),LPAD(COALESCE(SCD_GROSS_QTY,0) ,25,' '),LPAD(COALESCE(SCD_NET_QTY,0),15,' '),LPAD(COALESCE(SCD_NET_AMOUNT,0),15,' '), LPAD(SLAB_OUTPUT,10 ,' '), LPAD(COALESCE(SCD_DISC_AMOUNT,0),15,' ')) AS A ,SLAB_SCHEME_ID,SLAB_SEASON_ID,SLAB_PARTY_CODE,1 AS M ,12 AS N,SR_NO AS O,'' AS P,'' AS Q  FROM (SELECT SLAB_SEASON_ID,SLAB_SCHEME_ID, SLAB_PARTY_CODE,SR_NO,SLAB_FROM_DATE,SLAB_TO_DATE,SCD_DISC_PERCENT AS SLAB_OUTPUT, SUM(SCD_GROSS_QTY) AS SCD_GROSS_QTY ,SUM(SCD_NET_QTY) AS SCD_NET_QTY,SUM(SCD_NET_AMOUNT) AS SCD_NET_AMOUNT, SUM(SCD_DISC_AMOUNT) AS SCD_DISC_AMOUNT FROM SALES.D_SAL_SCHEME_SLAB ,SALES.D_SAL_SCHEME_DETAIL WHERE SLAB_SCHEME_ID = '"+schemeId+"' AND  SLAB_SCHEME_ID = SCD_SCHEME_ID AND SLAB_FROM_DATE <=SCD_INVOICE_DATE AND SLAB_TO_DATE >=SCD_INVOICE_DATE AND SLAB_PARTY_CODE = SCD_PARTY_CODE AND SCD_QUALITY_ELIGIBLE = SR_NO GROUP BY SLAB_PARTY_CODE,SLAB_SCHEME_ID,SR_NO,SLAB_FROM_DATE,SLAB_TO_DATE,SCD_DISC_PERCENT) AS B  UNION ALL SELECT LPAD(' ',125,'-') AS A, SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,13 AS N,'' AS O,'' AS P,'' AS Q  FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"' UNION ALL SELECT CONCAT(LPAD( ' ' , 28,' '), LPAD('  SCHEME TOTAL',15,' '),LPAD(COALESCE(SCD_GROSS_QTY,0) ,25,' '),LPAD(COALESCE(SCD_NET_QTY,0),15,' '),LPAD(COALESCE(SCD_NET_AMOUNT,0),15,' '), LPAD(' ',10 ,' '), LPAD(COALESCE(ROUND(ROUND(SCD_DISC_AMOUNT,0),2),0),15,' ')) AS A ,SLAB_SCHEME_ID,SLAB_SEASON_ID,SLAB_PARTY_CODE,1 AS M ,18 AS N,'' AS O,'' AS P,'' AS Q  FROM  (SELECT SLAB_SEASON_ID,SLAB_SCHEME_ID, SLAB_PARTY_CODE, SUM(SCD_GROSS_QTY) AS SCD_GROSS_QTY ,SUM(SCD_NET_QTY) AS SCD_NET_QTY,SUM(SCD_NET_AMOUNT) AS SCD_NET_AMOUNT, SUM(SCD_DISC_AMOUNT) AS SCD_DISC_AMOUNT  FROM SALES.D_SAL_SCHEME_SLAB ,SALES.D_SAL_SCHEME_DETAIL  WHERE SLAB_SCHEME_ID = '"+schemeId+"' AND  SLAB_SCHEME_ID = SCD_SCHEME_ID AND SLAB_FROM_DATE <=SCD_INVOICE_DATE  AND SLAB_TO_DATE >=SCD_INVOICE_DATE AND SLAB_PARTY_CODE = SCD_PARTY_CODE AND SCD_QUALITY_ELIGIBLE = SR_NO GROUP BY SLAB_PARTY_CODE,SLAB_SCHEME_ID) AS B UNION ALL SELECT LPAD(' ',125,'-') AS A,SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,1 AS M ,19 AS N,'' AS O,'' AS P,'' AS Q FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID = '"+schemeId+"') AS A ";
                   
                   stmt.execute(Str1);
                   
                   stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER A,TEMP_DATABASE.TMP8  SET COL11= SCH_PARTY_NAME,COL12 = SCH_TARGET_AMOUNT,COL13 = SCH_ELIGIBILITY WHERE SCH_SCHEME_ID = '"+schemeId+"' AND SCH_SCHEME_ID = COL02+0 AND SCH_PARTY_CODE = COL04+0");
                   stmt.execute("UPDATE  TEMP_DATABASE.TMP8 SET COL10 =COL04,COL14 = COL13" );
                   stmt.execute("UPDATE  TEMP_DATABASE.TMP8 SET COL10 =' ', COL11=' ',COL12=' ', COL13=' ' WHERE  COL05 =1 AND COL06 =19");
                   stmt.execute("UPDATE  TEMP_DATABASE.TMP8 SET COL10 =' ', COL11=' ',COL12=' ', COL13='' WHERE  COL05 =1 AND COL06 =1");
                   printReport=true;
                   return true;
               }catch(SQLException sqe){
                   sqe.printStackTrace();
                   return false;
        }
           }        
    private boolean printBonanzaDetailWithCrNoteReport(int schemeId) {
        try{
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            
            objData.AddColumn("COL01");
            objData.AddColumn("COL02");
            objData.AddColumn("COL03");
            objData.AddColumn("COL04");
            objData.AddColumn("COL05");
            objData.AddColumn("COL06");
            objData.AddColumn("COL07");
            objData.AddColumn("COL08");
            objData.AddColumn("COL09");
            objData.AddColumn("COL10");
            objData.AddColumn("COL11");
            objData.AddColumn("COL12");
            objData.AddColumn("COL13");
            objData.AddColumn("COL14");
            
            PrintBonanza(schemeId);
            String str ="SELECT * FROM  TEMP_DATABASE.TMP8 ORDER BY COL14 DESC,COL04,COL05+0,COL06+0,COL07,COL08,SUBSTRING(COL09,2,6)+0";

            
            ResultSet  rsTemp =data.getResult(str);
            while(!rsTemp.isAfterLast()){
                TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                
                objRow.setValue("COL01",rsTemp.getString("COL01"));
                objRow.setValue("COL02",rsTemp.getString("COL02"));
                objRow.setValue("COL03",rsTemp.getString("COL03"));
                objRow.setValue("COL04",rsTemp.getString("COL04"));
                objRow.setValue("COL05",rsTemp.getString("COL05"));
                objRow.setValue("COL06",rsTemp.getString("COL06"));
                objRow.setValue("COL07",rsTemp.getString("COL07"));
                objRow.setValue("COL08",rsTemp.getString("COL08"));
                objRow.setValue("COL09",rsTemp.getString("COL09"));
                objRow.setValue("COL10",rsTemp.getString("COL10"));
                objRow.setValue("COL11",rsTemp.getString("COL11"));
                objRow.setValue("COL12",rsTemp.getString("COL12"));
                objRow.setValue("COL13",rsTemp.getString("COL13"));
                objRow.setValue("COL14",rsTemp.getString("COL14"));
                
                objData.AddRow(objRow);
                rsTemp.next();
            }
            
                      
            HashMap parameter=new HashMap();
            parameter.put("RUN_BY", clsUser.getUserName(2,EITLERPGLOBAL.gNewUserID));
            parameter.put("RUN_TIME", data.getStringValueFromDB("SELECT CURTIME() FROM DUAL").substring(0,5));
            
                       
            EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/rptBonanzaSchemeDetailWithCrNoteReport.rpt",parameter,objData);
            rsTemp.close();
            
            return true;
        }catch(SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
    
    
    
   private boolean printDHANVARSHADetailWithCrNoteReport(int schemeId) {
        try{
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            
            objData.AddColumn("COL01");
            objData.AddColumn("COL02");
            objData.AddColumn("COL03");
            objData.AddColumn("COL04");
            objData.AddColumn("COL05");
            objData.AddColumn("COL06");
            objData.AddColumn("COL07");
            objData.AddColumn("COL08");
            objData.AddColumn("COL09");
            objData.AddColumn("COL10");
            objData.AddColumn("COL11");
            objData.AddColumn("COL12");
            objData.AddColumn("COL13");
            objData.AddColumn("COL14");
            
            PrintDHANVARSHA(schemeId);
            String str ="SELECT DISTINCT * FROM  TEMP_DATABASE.TMP8 ORDER BY COL14 DESC,COL04,COL05+0,COL06+0,COL07,COL08,SUBSTRING(COL09,2,6)+0";

            
            ResultSet  rsTemp =data.getResult(str);
            while(!rsTemp.isAfterLast()){
                TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                
                objRow.setValue("COL01",rsTemp.getString("COL01"));
                objRow.setValue("COL02",rsTemp.getString("COL02"));
                objRow.setValue("COL03",rsTemp.getString("COL03"));
                objRow.setValue("COL04",rsTemp.getString("COL04"));
                objRow.setValue("COL05",rsTemp.getString("COL05"));
                objRow.setValue("COL06",rsTemp.getString("COL06"));
                objRow.setValue("COL07",rsTemp.getString("COL07"));
                objRow.setValue("COL08",rsTemp.getString("COL08"));
                objRow.setValue("COL09",rsTemp.getString("COL09"));
                objRow.setValue("COL10",rsTemp.getString("COL10"));
                objRow.setValue("COL11",rsTemp.getString("COL11"));
                objRow.setValue("COL12",rsTemp.getString("COL12"));
                objRow.setValue("COL13",rsTemp.getString("COL13"));
                objRow.setValue("COL14",rsTemp.getString("COL14"));
                
                objData.AddRow(objRow);
                rsTemp.next();
            }
            
            String FromDate = table.getValueAt(1, 2).toString();
            String ToDate = table.getValueAt(1, 3).toString();
            
            HashMap parameter=new HashMap();
            parameter.put("RUN_BY", clsUser.getUserName(2,EITLERPGLOBAL.gNewUserID));
            parameter.put("RUN_TIME", data.getStringValueFromDB("SELECT CURTIME() FROM DUAL").substring(0,5));
            parameter.put("FROM_DATE", FromDate);
            parameter.put("TO_DATE", ToDate);
            
            EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/rptDhanvarshaSchemeDetailWithCrNoteReport.rpt",parameter,objData);
            rsTemp.close();
            
            return true;
        }catch(SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
     
    
     private boolean printSCHEMES17DetailWithCrNoteReport(int schemeId) {
        try{
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            
            objData.AddColumn("COL01");
            objData.AddColumn("COL02");
            objData.AddColumn("COL03");
            objData.AddColumn("COL04");
            objData.AddColumn("COL05");
            objData.AddColumn("COL06");
            objData.AddColumn("COL07");
            objData.AddColumn("COL08");
            objData.AddColumn("COL09");
            objData.AddColumn("COL10");
            objData.AddColumn("COL11");
            objData.AddColumn("COL12");
            objData.AddColumn("COL13");
            objData.AddColumn("COL14");
            
            PrintSCHEMES17(schemeId);
            String str ="SELECT DISTINCT * FROM  TEMP_DATABASE.TMP8 ORDER BY COL14 DESC,COL04,COL05+0,COL06+0,SUBSTRING(COL09,2,9)+0,COL07,COL08";

            
            ResultSet  rsTemp =data.getResult(str);
            while(!rsTemp.isAfterLast()){
                TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                
                objRow.setValue("COL01",rsTemp.getString("COL01"));
                objRow.setValue("COL02",rsTemp.getString("COL02"));
                objRow.setValue("COL03",rsTemp.getString("COL03"));
                objRow.setValue("COL04",rsTemp.getString("COL04"));
                objRow.setValue("COL05",rsTemp.getString("COL05"));
                objRow.setValue("COL06",rsTemp.getString("COL06"));
                objRow.setValue("COL07",rsTemp.getString("COL07"));
                objRow.setValue("COL08",rsTemp.getString("COL08"));
                objRow.setValue("COL09",rsTemp.getString("COL09"));
                objRow.setValue("COL10",rsTemp.getString("COL10"));
                objRow.setValue("COL11",rsTemp.getString("COL11"));
                objRow.setValue("COL12",rsTemp.getString("COL12"));
                objRow.setValue("COL13",rsTemp.getString("COL13"));
                objRow.setValue("COL14",rsTemp.getString("COL14"));
                
                objData.AddRow(objRow);
                rsTemp.next();
            }
            
            String FromDate = table.getValueAt(1, 2).toString();
            String ToDate = table.getValueAt(1, 3).toString();
            
            HashMap parameter=new HashMap();
            parameter.put("RUN_BY", clsUser.getUserName(2,EITLERPGLOBAL.gNewUserID));
            parameter.put("RUN_TIME", data.getStringValueFromDB("SELECT CURTIME() FROM DUAL").substring(0,5));
            parameter.put("FROM_DATE", FromDate);
            parameter.put("TO_DATE", ToDate);
            
            EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/rptDhanvarshaSchemeDetailWithCrNoteReport.rpt",parameter,objData);
            rsTemp.close();
            
            return true;
        }catch(SQLException e) {
            e.printStackTrace();
            return false;
        }
    }  
    
    
    
    
    
    
    
    private boolean processKhakiCreditNote(int schemeId, String seasonId){
        try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            
            String bookCode="TR-15";
            String mainCode="435187";
            String draftNo="KHAKI "+seasonId+" - ";
            String draftDate="2016-01-31";
            String linkNo=" /"+Integer.toString(EITLERPGLOBAL.FinYearFrom)+"-"+Integer.toString(EITLERPGLOBAL.FinYearTo);
            int draftSrNo=517;
            int linkSrNo=7501;
            int reasonCode=36;
            int counter=0;
            
            ResultSet rsSchemeHeader=stmt.executeQuery("SELECT SCH_PARTY_CODE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SEASON_ID='"+seasonId+"' AND SCH_ELIGIBILITY='Y' ORDER BY SCH_PARTY_CODE");
            rsSchemeHeader.first();
            if(rsSchemeHeader.getRow()>0){
                while(!rsSchemeHeader.isAfterLast()){
                    stmt.executeUpdate("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_BOOK_CODE='"+bookCode+"',SCH_MAIN_CODE='"+mainCode+"',SCH_DRAFT_CR_NOTE_NO='"+draftNo+(draftSrNo+counter)+"',SCH_DRAFT_CR_NOTE_DATE='"+draftDate+"',SCH_REASON_CODE="+reasonCode+",SCH_LINK_NO='"+(linkSrNo+counter)+linkNo+"' WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SCH_PARTY_CODE='"+rsSchemeHeader.getString("SCH_PARTY_CODE")+"'");
                    rsSchemeHeader.next();
                    counter++;
                }
            }
            
            printReport=true;
            return true;
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
    }
    
    private boolean processCreditNoteInput(int schemeId, String seasonId){
                
        try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            
            String bookCode="TR-15";
            String mainCode="435187";
         
            String draftNo="RET."+seasonId+" - ";                
          //  String draftNo="SP.RET."+seasonId+" - ";          
            
            //String draftNo="SSQL."+seasonId+" - ";     
            //String draftNo="SPL."+seasonId+" - ";
              
         //   String draftNo="BONZ. "+seasonId+" - ";
            //String draftNo="ABD "+seasonId+" - ";
            
            String draftDate="2016-01-31";
    //        String draftDate="2014-2015";
            String linkNo=" /"+Integer.toString(EITLERPGLOBAL.FinYearFrom)+"-"+Integer.toString(EITLERPGLOBAL.FinYearTo); 
            int draftSrNo=521;
            int linkSrNo=7653;
            //int reasonCode=34;
           int reasonCode=36;
            
            int counter=0;
            
            ResultSet rsSchemeHeader=stmt.executeQuery("SELECT SCH_PARTY_CODE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SEASON_ID='"+seasonId+"' AND SCH_ELIGIBILITY='Y' ORDER BY SCH_PARTY_CODE");
          //  ResultSet rsSchemeHeader=stmt.executeQuery("SELECT SCH_PARTY_CODE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SEASON_ID='"+seasonId+"' ORDER BY SCH_PARTY_CODE");
            rsSchemeHeader.first();
            if(rsSchemeHeader.getRow()>0){
                while(!rsSchemeHeader.isAfterLast()){
                    stmt.executeUpdate("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_BOOK_CODE='"+bookCode+"',SCH_MAIN_CODE='"+mainCode+"',SCH_DRAFT_CR_NOTE_NO='"+draftNo+(draftSrNo+counter)+"',SCH_DRAFT_CR_NOTE_DATE='"+draftDate+"',SCH_REASON_CODE="+reasonCode+",SCH_LINK_NO='"+(linkSrNo+counter)+linkNo+"' WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SCH_PARTY_CODE='"+rsSchemeHeader.getString("SCH_PARTY_CODE")+"'"); 
                    rsSchemeHeader.next();
                    counter++;
                }
            }
            
            printReport=true;
            return true;
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
    }
   
      private boolean processBonanzaCreditNoteInput(int schemeId, String seasonId){
        try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            
            String bookCode="TR-15";
            String mainCode="435187";
         //   String draftNo="RET."+seasonId+" - ";
         //   String draftNo="SPL."+seasonId+" - ";
          String draftNo="SSQL."+seasonId+" - ";
     
        //    String draftNo="BONZ. "+seasonId+" - ";
     //       String draftNo="ABD "+seasonId+" - ";
            String draftDate="2015-08-31";
    //        String draftDate="2014-2015";
            String linkNo=" /"+Integer.toString(EITLERPGLOBAL.FinYearFrom)+"-"+Integer.toString(EITLERPGLOBAL.FinYearTo);
            int draftSrNo=309;
            int linkSrNo=7051;
            int reasonCode=34;
            int counter=0;
            
          //  ResultSet rsSchemeHeader=stmt.executeQuery("SELECT SCH_PARTY_CODE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SEASON_ID='"+seasonId+"' AND SCH_ELIGIBILITY='Y' ORDER BY SCH_PARTY_CODE");
            ResultSet rsSchemeHeader=stmt.executeQuery("SELECT SCH_PARTY_CODE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SEASON_ID='"+seasonId+"' ORDER BY SCH_PARTY_CODE");
            rsSchemeHeader.first();
            if(rsSchemeHeader.getRow()>0){
                while(!rsSchemeHeader.isAfterLast()){
                    stmt.executeUpdate("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_BOOK_CODE='"+bookCode+"',SCH_MAIN_CODE='"+mainCode+"',SCH_DRAFT_CR_NOTE_NO='"+draftNo+(draftSrNo+counter)+"',SCH_DRAFT_CR_NOTE_DATE='"+draftDate+"',SCH_REASON_CODE="+reasonCode+",SCH_LINK_NO='"+(linkSrNo+counter)+linkNo+"' WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SCH_PARTY_CODE='"+rsSchemeHeader.getString("SCH_PARTY_CODE")+"'");
                    rsSchemeHeader.next();
                    counter++;
                }
            }
            
            printReport=true;
            return true;
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
    }
  
    private boolean processCNVOUCHER(int schemeId){
        try{
         
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            ResultSet rsScheme=stmt.executeQuery("SELECT SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+schemeId);
            rsScheme.first();
            String seasonId=rsScheme.getString("SCHEME_SEASON_ID");
            
      //      stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER  SET SCH_VOUCHER_NO = CONCAT('CN',151500000 +ABS(REPLACE(RIGHT( SCH_DRAFT_CR_NOTE_NO,4),' ',''))),SCH_LEGACY_NO = ABS(REPLACE(RIGHT( SCH_DRAFT_CR_NOTE_NO,4),' ',''))   WHERE SCH_SEASON_ID='"+seasonId+"'  AND SCH_BOOK_CODE ='TR-15'");
            
            stmt.execute("DELETE FROM TEMP_DATABASE.L_FIN_VOUCHER_HEADER");
            stmt.execute("DELETE FROM TEMP_DATABASE.L_FIN_VOUCHER_DETAIL");
            stmt.execute("DELETE FROM TEMP_DATABASE.L_FIN_VOUCHER_DETAIL_EX");
            stmt.execute("DELETE FROM TEMP_DATABASE.L_COM_DOC_DATA");
            
            
            stmt.execute("INSERT INTO TEMP_DATABASE.L_FIN_VOUCHER_HEADER SELECT 2,SCH_VOUCHER_NO,15,'','0000-00-00','0000-00-00','', 'CREDIT-NOTES- CLOTH-OTH','',0,'0000-00-00',0,'0000-00-00','','ADMIN',NOW(),'','0000-00-00',1502,0,'0000-00-00', 0,CONCAT(SCHEME_NAME,' ( ',SCH_DRAFT_CR_NOTE_NO,')'),SCH_DRAFT_CR_NOTE_DATE,0,7,0,SCH_LEGACY_NO,SCH_DRAFT_CR_NOTE_DATE,'','',SCH_REASON_CODE,1  FROM  SALES.D_SAL_SCHEME_MASTER,SALES.D_SAL_SCHEME_HEADER WHERE SCH_SEASON_ID = SCHEME_SEASON_ID AND SCH_SCHEME_ID = SCHEME_ID  AND SCH_ELIGIBILITY = 'Y' AND  SCH_BOOK_CODE = 'TR-15' AND SCH_SEASON_ID='"+seasonId+"' ");
            stmt.execute("INSERT INTO  TEMP_DATABASE.L_FIN_VOUCHER_DETAIL SELECT 2,SCH_VOUCHER_NO,1,'C',1,210027,SCH_PARTY_CODE,ROUND(SCH_DISC_AMOUNT,0),0,0,1,'ADMIN','0000-00-00','','0000-00-00',0,0,'0000-00-00','','0000-00-00','','0000-00-00',SCH_DRAFT_CR_NOTE_DATE,'','0000-00-00',0,0,REPLACE(SCH_LINK_NO,'2017-2018','1718'),0,0,0,0,0,0,'0000-00-00',0,0,0,0,0,0,0,0 FROM  SALES.D_SAL_SCHEME_HEADER WHERE SCH_SEASON_ID='"+seasonId+"'  AND SCH_BOOK_CODE ='TR-15' AND SCH_ELIGIBILITY = 'Y'  UNION ALL SELECT 2,SCH_VOUCHER_NO,2,'D',1,435187,'',ROUND(SCH_DISC_AMOUNT,0),0,0,1,'ADMIN','0000-00-00','','0000-00-00',0,0,'0000-00-00','','0000-00-00','','0000-00-00',SCH_DRAFT_CR_NOTE_DATE,'','0000-00-00',0,0,REPLACE(SCH_LINK_NO,'2017-2018','1718'),0,0,0,0,0,0,'0000-00-00',0,0,0,0,0,0,0,0 FROM  SALES.D_SAL_SCHEME_HEADER WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_BOOK_CODE ='TR-15' AND SCH_ELIGIBILITY = 'Y' ");
            stmt.execute("INSERT INTO  TEMP_DATABASE.L_FIN_VOUCHER_DETAIL_EX  SELECT 2,SCH_VOUCHER_NO,1,'C',1,210027,SCH_PARTY_CODE,ROUND(SCH_DISC_AMOUNT,0),0,0,1,'ADMIN','0000-00-00','','0000-00-00',0,0,'0000-00-00',1,'','0000-00-00','','0000-00-00',SCH_DRAFT_CR_NOTE_DATE,'','0000-00-00',0,0,REPLACE(SCH_LINK_NO,'2017-2018','1718'),0,0,0,0,0,0,'0000-00-00',0,0,0,0,0,0,0,0 FROM  SALES.D_SAL_SCHEME_HEADER WHERE SCH_SEASON_ID ='"+seasonId+"'  AND SCH_BOOK_CODE ='TR-15'  AND SCH_ELIGIBILITY = 'Y' UNION ALL SELECT 2,SCH_VOUCHER_NO,2,'D',1,435187,'',ROUND(SCH_DISC_AMOUNT,0),0,0,1,'ADMIN','0000-00-00','','0000-00-00',0,0,'0000-00-00',1,'','0000-00-00','','0000-00-00',SCH_DRAFT_CR_NOTE_DATE,'','0000-00-00',0,0,REPLACE(SCH_LINK_NO,'2017-2018','1718'),0,0,0,0,0,0,'0000-00-00',0,0,0,0,0,0,0,0 FROM  SALES.D_SAL_SCHEME_HEADER WHERE SCH_SEASON_ID ='"+seasonId+"'  AND SCH_BOOK_CODE ='TR-15'  AND SCH_ELIGIBILITY = 'Y' ");
            stmt.execute("INSERT INTO  TEMP_DATABASE.L_COM_DOC_DATA SELECT 2,70,VOUCHER_NO,NOW(),USER_ID,CASE WHEN CREATOR =1 THEN 'W' ELSE 'P'  END, CASE WHEN CREATOR =0 THEN 'A' ELSE 'C'  END,'',SR_NO,0,'','0000-00-00','0000-00-00',0,'0000-00-00'  FROM DINESHMILLS.D_COM_HIERARCHY_RIGHTS A,TEMP_DATABASE.L_FIN_VOUCHER_HEADER B WHERE B.HIERARCHY_ID =1502  AND A.HIERARCHY_ID = B.HIERARCHY_ID limit 1000000");
            
            printReport = false;
            return true;
            
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
        
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    private boolean processSQLScheme(int schemeId){
        try{
         //   String fSchemeFromDate="2015-12-22";
         //   String fSchemeToDate="2016-02-29";
         //   String sSchemeFromDate="2016-03-01";
         //   String sSchemeToDate="2016-06-21";
            
            
              String fSchemeFromDate="2018-07-01";
            String fSchemeToDate="2018-08-31";
            String sSchemeFromDate="2018-09-01";
            String sSchemeToDate="2018-12-31";
          
            
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            ResultSet rsScheme=stmt.executeQuery("SELECT SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+schemeId);
            rsScheme.first();
            String seasonId=rsScheme.getString("SCHEME_SEASON_ID");
            
    InvoiceTable(schemeId);
            
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeDetailQry="INSERT INTO SALES.D_SAL_SCHEME_DETAIL(SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_FLAG,SCD_UNIT_CODE,SCD_GROSS_QTY,SCD_GROSS_AMOUNT,SCD_NET_QTY,SCD_NET_AMOUNT,SCD_AGENT_LAST_INVOICE,SCD_AGENT_SR_NO,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_INV_RATE,SCD_PL_RATE,SCD_QUALITY_ELIGIBLE,SCD_DISC_PER_MTR_RATE,SCD_DISC_PERCENT,SCD_DISC_AMOUNT,SCD_GATE_PASS_NO,SCD_GATEPASS_DATE,SCD_BALE_NO) " +
            "SELECT SCHEME_ID,I.SEASON_ID,PARTY_CODE,QUALITY_NO,SHADE ,PIECE_NO,FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,NET_AMOUNT,AGENT_LAST_INVOICE,AGENT_SR_NO,INVOICE_NO,INVOICE_DATE,RATE,0,'',0,0,0,GATEPASS_NO,GATEPASS_DATE,BALE_NO FROM  "+
            "(SELECT QUALITY_ID,SEASON_ID FROM D_SAL_QUALITY_MASTER WHERE SEASON_ID='"+seasonId+"' AND CATEGORY_LIST='S-QL') Q "+
            "INNER JOIN "+
            "(SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO/10 QUALITY_NO,B.PATTERN_CODE AS SHADE,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO FROM SALES.TMP_SAL_INVOICE_HEADER A,SALES.TMP_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D, SALES.D_SAL_SCHEME_MASTER E, D_SAL_PARTY_MASTER P WHERE A.INVOICE_TYPE =1 AND A.PARTY_CODE=P.PARTY_CODE AND A.PARTY_CODE IN (SELECT SLAB_PARTY_CODE FROM SALES.D_SAL_SCHEME_SLAB WHERE SLAB_SCHEME_ID ="+schemeId+" AND SLAB_SEASON_ID='"+seasonId+"' ) AND PARTY_TYPE=3    AND A.WAREHOUSE_CODE =1 AND A.QUALITY_INDICATOR IN (0,3) AND A.INVOICE_DATE=B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE >= DATE_FROM  AND A.INVOICE_DATE <= DATE_TO AND SCHEME_SEASON_ID = SEASON_ID AND SCHEME_ID ="+schemeId+" AND SEASON_ID='"+seasonId+"') I ON SUBSTRING(QUALITY_ID,2,5)=SUBSTRING(QUALITY_NO,2,5) AND Q.SEASON_ID=I.SEASON_ID ";
            
               stmt.execute(schemeDetailQry);
               
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_PARTY_CODE =159991 WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_PARTY_CODE = '739901' AND SCD_SCHEME_ID="+schemeId);
           
           
            
        //    stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_PARTY_CODE =300170 AND SCD_SCHEME_ID = 43 AND SCD_INVOICE_DATE >='2016-05-20'");
            
            
        //    stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_PARTY_CODE =300170 AND SCD_SCHEME_ID = 20 AND SCD_INVOICE_DATE ='2015-02-27' AND SCD_INVOICE_NO >=7"+schemeId+"9");
            
    //       stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_PARTY_CODE =300170 AND SCD_SCHEME_ID = 43 AND SCD_INVOICE_DATE ='2016-05-19' AND SCD_INVOICE_NO =602  AND SCD_PIECE_NO IN ('13798/04','28117W03')");
            
            
        //    stmt.execute("INSERT INTO SALES.D_SAL_SCHEME_DETAIL SELECT  43,'S16',300170,519395,17,'13798/04','','01',1.05,509.25,1.05,509.25,'RB',198,000602,'2016-05-19',485.00,485.00,'Y',0.00,0,0,000689,'2016-05-19',000838");
            
        
            
            
            //stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL,DINESHMILLS.D_SAL_PRICE_LIST_DETAIL SET SCD_PL_RATE=EX_MILL_RATE WHERE SUBSTRING(SCD_QUALITY_ID,2,5)=SUBSTRING(QUALITY_ID,2,5) AND SCD_SEASON_ID=SUBSTRING(PRICE_LIST_NO,3,5) AND SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID ="+schemeId);
            
             stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL LEFT JOIN (SELECT SEASON_ID,DATE_FROM,DATE_TO FROM DINESHMILLS.D_SAL_SEASON_MASTER WHERE SEASON_ID ='"+seasonId+"') S ON SCD_SEASON_ID=SEASON_ID LEFT JOIN (SELECT SUBSTRING(PR.PRICE_LIST_NO,3,5) SEAS_ID,QUALITY_ID,PR.EX_MILL_RATE,PR.EFFECTIVE_DATE FROM DINESHMILLS.D_SAL_PRICE_LIST_DETAIL PD, DINESHMILLS.D_SAL_PRICE_LIST_RATE PR WHERE PD.PRICE_LIST_NO=PR.PRICE_LIST_NO AND PD.SR_NO=PRICE_LIST_SR_NO AND SUBSTRING(PR.PRICE_LIST_NO,3,3) ='"+seasonId+"' AND QUALITY_ID NOT LIKE '72%') PL ON SUBSTRING(SCD_QUALITY_ID,2,5)=SUBSTRING(QUALITY_ID,2,5) AND SEASON_ID=SEAS_ID AND EX_MILL_RATE=SCD_INV_RATE AND SCD_INVOICE_DATE>=EFFECTIVE_DATE SET SCD_PL_RATE=CASE WHEN SCD_INV_RATE=EX_MILL_RATE THEN EX_MILL_RATE ELSE 0 END WHERE SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId+" AND SCD_INVOICE_DATE>=DATE_FROM AND SCD_INVOICE_DATE<=DATE_TO");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_QUALITY_ELIGIBLE=CASE WHEN SCD_INV_RATE-SCD_PL_RATE=0 THEN 'Y' ELSE 'N' END WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
                        
            
            String schemeHeaderQry="INSERT INTO SALES.D_SAL_SCHEME_HEADER(SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_CHARGE_CODE,SCH_BOOK_CODE,SCH_MAIN_CODE,SCH_DRAFT_CR_NOTE_NO,SCH_DRAFT_CR_NOTE_DATE,SCH_REASON_CODE,SCH_LINK_NO,SCH_TOTAL_GR_LIFT_QTY,SCH_TOTAL_NET_LIFT_QTY,SCH_TOTAL_FGR_LIFT_QTY,SCH_TOTAL_SGR_LIFT_QTY,SCH_TOTAL_FNET_LIFT_QTY,SCH_TOTAL_SNET_LIFT_QTY,SCH_TOTAL_INV_AMOUNT,SCH_TOTAL_FINV_AMOUNT,SCH_TOTAL_SINV_AMOUNT,SCH_DISC_RATE,SCH_DISC_PERCENT,SCH_DISC_AMOUNT,SCH_FDISC_PERCENT,SCH_SDISC_PERCENT,SCH_FDISC_AMOUNT,SCH_SDISC_AMOUNT,SCH_TOTAL_AMOUNT,SCH_ELIGIBILITY,SCH_CREATED_BY,SCH_CREATED_DATE,SCH_MODIFIED_BY,SCH_MODIFIED_DATE,SCH_APPROVED,SCH_APPROVED_DATE,SCH_CANCELLED,SCH_CANCELLED_DATE,SCH_REJECTED,SCH_REJECTED_DATE,SCH_CHANGED,SCH_CHANGED_DATE) "+
            "SELECT SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,'','','','','','','0000-00-00','','',SUM(SCD_GROSS_QTY),SUM(SCD_NET_QTY),0,0,0,0,SUM(SCD_NET_AMOUNT),0,0,0,0,0,0,0,0,0,0,'N',1,NOW(),0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',1,NOW() "+
            "FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_QUALITY_ELIGIBLE ='Y' AND SCD_SCHEME_ID="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE ";
            
            stmt.execute(schemeHeaderQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,DINESHMILLS.D_SAL_PARTY_MASTER SET SCH_PARTY_NAME=PARTY_NAME,SCH_CITY=CITY_ID,SCH_CHARGE_CODE=CHARGE_CODE WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            String fSchemeQry="UPDATE SALES.D_SAL_SCHEME_HEADER H, "+
            "(SELECT  SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SUM(SCD_GROSS_QTY) GQ,SUM(SCD_NET_QTY) NQ,SUM(SCD_NET_AMOUNT) NA "+
            "FROM SALES.D_SAL_SCHEME_DETAIL  WHERE SCD_INVOICE_DATE >= '"+fSchemeFromDate+"' AND SCD_INVOICE_DATE<='"+fSchemeToDate+"' AND SCD_SEASON_ID='"+seasonId+"' AND SCD_QUALITY_ELIGIBLE ='Y' AND SCD_SCHEME_ID="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE) D "+
            "SET SCH_TOTAL_FGR_LIFT_QTY=GQ,SCH_TOTAL_FNET_LIFT_QTY=NQ,SCH_TOTAL_FINV_AMOUNT=NA WHERE SCH_SCHEME_ID=SCD_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE";
            
            stmt.execute(fSchemeQry);
            
            String sSchemeQry="UPDATE SALES.D_SAL_SCHEME_HEADER H, "+
            "(SELECT  SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SUM(SCD_GROSS_QTY) GQ,SUM(SCD_NET_QTY) NQ,SUM(SCD_NET_AMOUNT) NA "+
            "FROM SALES.D_SAL_SCHEME_DETAIL  WHERE SCD_INVOICE_DATE >= '"+sSchemeFromDate+"' AND SCD_INVOICE_DATE<='"+sSchemeToDate+"' AND SCD_SEASON_ID='"+seasonId+"' AND SCD_QUALITY_ELIGIBLE ='Y' AND SCD_SCHEME_ID="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE) D "+
            "SET SCH_TOTAL_SGR_LIFT_QTY=GQ,SCH_TOTAL_SNET_LIFT_QTY=NQ,SCH_TOTAL_SINV_AMOUNT=NA WHERE SCH_SCHEME_ID=SCD_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE";
            
            stmt.execute(sSchemeQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_SLAB,SALES.D_SAL_SCHEME_HEADER SET SCH_FDISC_PERCENT=SLAB_OUTPUT,SCH_FDISC_AMOUNT=SCH_TOTAL_FINV_AMOUNT*SLAB_OUTPUT/100 WHERE SLAB_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SLAB_SEASON_ID=SCH_SEASON_ID AND SCH_SCHEME_ID=SLAB_SCHEME_ID AND SCH_TOTAL_GR_LIFT_QTY >=SLAB_FROM AND SCH_TOTAL_GR_LIFT_QTY<=SLAB_TO AND SLAB_PARTY_CODE=SCH_PARTY_CODE AND SR_NO=1");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_SLAB,SALES.D_SAL_SCHEME_HEADER SET SCH_SDISC_PERCENT=SLAB_OUTPUT,SCH_SDISC_AMOUNT=SCH_TOTAL_SINV_AMOUNT*SLAB_OUTPUT/100 WHERE SLAB_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SLAB_SEASON_ID=SCH_SEASON_ID AND SCH_SCHEME_ID=SLAB_SCHEME_ID AND SCH_TOTAL_GR_LIFT_QTY >=SLAB_FROM AND SCH_TOTAL_GR_LIFT_QTY<=SLAB_TO AND SLAB_PARTY_CODE=SCH_PARTY_CODE AND SR_NO=2");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_AMOUNT=SCH_FDISC_AMOUNT+SCH_SDISC_AMOUNT WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
     
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_AMOUNT=SCH_FDISC_AMOUNT+SCH_SDISC_AMOUNT WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
  
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_ELIGIBILITY=CASE WHEN SCH_DISC_AMOUNT !=0 THEN 'Y' ELSE 'N' END WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
           
          //  stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_ELIGIBILITY= 'Y' WHERE SCH_PARTY_CODE =300170 AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
   
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PERCENT=SCH_FDISC_PERCENT,SCD_DISC_AMOUNT=SCD_NET_AMOUNT*SCH_FDISC_PERCENT/100 WHERE SCD_SCHEME_ID=SCH_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SCD_INVOICE_DATE >= '"+fSchemeFromDate+"' AND SCD_INVOICE_DATE <= '"+fSchemeToDate+"' AND SCD_QUALITY_ELIGIBLE='Y'");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PERCENT=SCH_SDISC_PERCENT,SCD_DISC_AMOUNT=SCD_NET_AMOUNT*SCH_SDISC_PERCENT/100 WHERE SCD_SCHEME_ID=SCH_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SCD_INVOICE_DATE >= '"+sSchemeFromDate+"' AND SCD_INVOICE_DATE <= '"+sSchemeToDate+"' AND SCD_QUALITY_ELIGIBLE='Y'");
            
//            setData(schemeId, seasonId);
//            processCreditNoteInput(schemeId, seasonId);
//            
            printReport=true;
            return true;
            
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
        
    }
    
    private boolean printSQLSchemeDetailReport(int schemeId) {
        try{
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            
            objData.AddColumn("SEASON_ID");
            objData.AddColumn("SCHEME_NAME");
            objData.AddColumn("SCHEME_PERIOD");
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("STATION");
            objData.AddColumn("ELIGIBILE");
            objData.AddColumn("DISC_AMOUNT");
            objData.AddColumn("QUALITY_NO");
            objData.AddColumn("SHADE_NO");
            objData.AddColumn("PIECE_NO");
            objData.AddColumn("GROSS_QUANTITY");
            objData.AddColumn("NET_QUANTITY");
            objData.AddColumn("NET_AMOUNT");
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("BALE_NO");
            objData.AddColumn("AGENT_INVOICE_NO");
            
            String str="SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_ELIGIBILITY,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_GROSS_QTY,SCD_NET_QTY,SCD_NET_AMOUNT,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_BALE_NO,CONCAT(SCD_AGENT_LAST_INVOICE,'/',SCD_AGENT_SR_NO) SCD_AGENT_INV_NO FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCD_SEASON_ID=SCH_SEASON_ID AND SCD_PARTY_CODE=SCH_PARTY_CODE AND SCH_SCHEME_ID=SCD_SCHEME_ID AND SCD_QUALITY_ELIGIBLE='Y' "+
            "UNION ALL "+
            "SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_ELIGIBILITY,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT,SCD_QUALITY_ID,CONCAT(SCD_SHADE,' TOTAL') ,'',SUM(SCD_GROSS_QTY) SCD_GROSS_QTY,SUM(SCD_NET_QTY) SCD_NET_QTY,SUM(SCD_NET_AMOUNT)SCD_NET_AMOUNT,'','','','' FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCD_SEASON_ID=SCH_SEASON_ID AND SCD_PARTY_CODE=SCH_PARTY_CODE AND SCH_SCHEME_ID=SCD_SCHEME_ID AND SCD_QUALITY_ELIGIBLE='Y' "+
            "GROUP BY SCH_PARTY_CODE,SCD_QUALITY_ID,SCD_SHADE "+
            "UNION ALL "+
            "SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_ELIGIBILITY,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT,CONCAT(SCD_QUALITY_ID,' TOTAL') ,'','',SUM(SCD_GROSS_QTY) SCD_GROSS_QTY,SUM(SCD_NET_QTY) SCD_NET_QTY,SUM(SCD_NET_AMOUNT)SCD_NET_AMOUNT,'','','','' FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCD_SEASON_ID=SCH_SEASON_ID AND SCD_PARTY_CODE=SCH_PARTY_CODE AND SCH_SCHEME_ID=SCD_SCHEME_ID AND SCD_QUALITY_ELIGIBLE='Y' "+
            "GROUP BY SCH_PARTY_CODE,SCD_QUALITY_ID "+
            "UNION ALL "+
            "SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_ELIGIBILITY,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT,'total','','',SUM(SCD_GROSS_QTY) SCD_GROSS_QTY,SUM(SCD_NET_QTY) SCD_NET_QTY,SUM(SCD_NET_AMOUNT)SCD_NET_AMOUNT,'','','','' FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCD_SEASON_ID=SCH_SEASON_ID AND SCD_PARTY_CODE=SCH_PARTY_CODE AND SCH_SCHEME_ID=SCD_SCHEME_ID AND SCD_QUALITY_ELIGIBLE='Y' "+
            "GROUP BY SCH_PARTY_CODE "+
            "ORDER BY SCH_ELIGIBILITY DESC,SCH_PARTY_CODE,SCD_QUALITY_ID,SCD_SHADE LIMIT 10000000";
            
            ResultSet  rsTemp =data.getResult(str);
            while(!rsTemp.isAfterLast()){
                boolean addBlankRow=false;
                boolean addBeforeBlankRow=false;
                TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                
                objRow.setValue("SEASON_ID",rsTemp.getString("SCHEME_SEASON_ID"));
                objRow.setValue("SCHEME_NAME",rsTemp.getString("SCHEME_NAME"));
                objRow.setValue("SCHEME_PERIOD","("+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_START"))+"-"+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_END"))+")");
                objRow.setValue("PARTY_CODE", rsTemp.getString("SCH_PARTY_CODE"));
                objRow.setValue("PARTY_NAME", rsTemp.getString("SCH_PARTY_NAME"));
                objRow.setValue("STATION", rsTemp.getString("SCH_CITY"));
                objRow.setValue("ELIGIBILE", rsTemp.getString("SCH_ELIGIBILITY"));
                objRow.setValue("DISC_AMOUNT", rsTemp.getString("SCH_DISC_AMOUNT"));
                
                if(rsTemp.getString("SCD_SHADE").contains("T")){
                    objRow.setValue("QUALITY_NO", "");
                    objRow.setValue("SHADE_NO", "SHADE");
                    objRow.setValue("PIECE_NO", "TOTAL :-");
                    objRow.setValue("GROSS_QUANTITY", rsTemp.getString("SCD_GROSS_QTY"));
                    objRow.setValue("NET_QUANTITY", rsTemp.getString("SCD_NET_QTY"));
                    objRow.setValue("NET_AMOUNT", rsTemp.getString("SCD_NET_AMOUNT"));
                    objRow.setValue("INVOICE_NO", "");
                    objRow.setValue("INVOICE_DATE", "");
                    objRow.setValue("BALE_NO", "");
                    objRow.setValue("AGENT_INVOICE_NO", "");
                    
                    addBlankRow=true;
                    addBeforeBlankRow=true;
                    
                }else if(rsTemp.getString("SCD_QUALITY_ID").contains("T")){
                    objRow.setValue("QUALITY_NO", "");
                    objRow.setValue("SHADE_NO", "QUALITY");
                    objRow.setValue("PIECE_NO", "TOTAL :-");
                    objRow.setValue("GROSS_QUANTITY", rsTemp.getString("SCD_GROSS_QTY"));
                    objRow.setValue("NET_QUANTITY", rsTemp.getString("SCD_NET_QTY"));
                    objRow.setValue("NET_AMOUNT", rsTemp.getString("SCD_NET_AMOUNT"));
                    objRow.setValue("INVOICE_NO", "");
                    objRow.setValue("INVOICE_DATE", "");
                    objRow.setValue("BALE_NO", "");
                    objRow.setValue("AGENT_INVOICE_NO", "");
                    
                    addBlankRow=true;
                    
                }else if(rsTemp.getString("SCD_QUALITY_ID").contains("t")){
                    objRow.setValue("QUALITY_NO", "");
                    objRow.setValue("SHADE_NO", "PARTY");
                    objRow.setValue("PIECE_NO", "TOTAL :-");
                    objRow.setValue("GROSS_QUANTITY", rsTemp.getString("SCD_GROSS_QTY"));
                    objRow.setValue("NET_QUANTITY", rsTemp.getString("SCD_NET_QTY"));
                    objRow.setValue("NET_AMOUNT", rsTemp.getString("SCD_NET_AMOUNT"));
                    objRow.setValue("INVOICE_NO", "");
                    objRow.setValue("INVOICE_DATE", "");
                    objRow.setValue("BALE_NO", "");
                    objRow.setValue("AGENT_INVOICE_NO", "");
                }else{
                    objRow.setValue("QUALITY_NO", rsTemp.getString("SCD_QUALITY_ID"));
                    objRow.setValue("SHADE_NO", rsTemp.getString("SCD_SHADE"));
                    objRow.setValue("PIECE_NO", rsTemp.getString("SCD_PIECE_NO"));
                    objRow.setValue("GROSS_QUANTITY", rsTemp.getString("SCD_GROSS_QTY"));
                    objRow.setValue("NET_QUANTITY", rsTemp.getString("SCD_NET_QTY"));
                    objRow.setValue("NET_AMOUNT", rsTemp.getString("SCD_NET_AMOUNT"));
                    objRow.setValue("INVOICE_NO", rsTemp.getString("SCD_INVOICE_NO"));
                    objRow.setValue("INVOICE_DATE", EITLERPGLOBAL.formatDate(rsTemp.getString("SCD_INVOICE_DATE")));
                    objRow.setValue("BALE_NO", rsTemp.getString("SCD_BALE_NO"));
                    objRow.setValue("AGENT_INVOICE_NO", rsTemp.getString("SCD_AGENT_INV_NO"));
                }
                
                if(addBeforeBlankRow){
                    TReportWriter.SimpleDataProvider.TRow objBlankRow=objData.newRow();
                    objBlankRow.setValue("SEASON_ID",rsTemp.getString("SCHEME_SEASON_ID"));
                    objBlankRow.setValue("SCHEME_NAME",rsTemp.getString("SCHEME_NAME"));
                    objBlankRow.setValue("SCHEME_PERIOD","("+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_START"))+"-"+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_END"))+")");
                    objBlankRow.setValue("PARTY_CODE", rsTemp.getString("SCH_PARTY_CODE"));
                    objBlankRow.setValue("PARTY_NAME", rsTemp.getString("SCH_PARTY_NAME"));
                    objBlankRow.setValue("STATION", rsTemp.getString("SCH_CITY"));
                    objBlankRow.setValue("ELIGIBILE", rsTemp.getString("SCH_ELIGIBILITY"));
                    objBlankRow.setValue("DISC_AMOUNT", rsTemp.getString("SCH_DISC_AMOUNT"));
                    
                    objBlankRow.setValue("QUALITY_NO", "");
                    objBlankRow.setValue("SHADE_NO", "");
                    objBlankRow.setValue("PIECE_NO", "");
                    objBlankRow.setValue("GROSS_QUANTITY", "");
                    objBlankRow.setValue("NET_QUANTITY", "");
                    objBlankRow.setValue("NET_AMOUNT", "");
                    objBlankRow.setValue("INVOICE_NO", "");
                    objBlankRow.setValue("INVOICE_DATE", "");
                    objBlankRow.setValue("BALE_NO", "");
                    objBlankRow.setValue("AGENT_INVOICE_NO", "");
                    objData.AddRow(objBlankRow);
                }
                
                objData.AddRow(objRow);
                
                if(addBlankRow){
                    TReportWriter.SimpleDataProvider.TRow objBlankRow=objData.newRow();
                    
                    objBlankRow.setValue("SEASON_ID",rsTemp.getString("SCHEME_SEASON_ID"));
                    objBlankRow.setValue("SCHEME_NAME",rsTemp.getString("SCHEME_NAME"));
                    objBlankRow.setValue("SCHEME_PERIOD","("+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_START"))+"-"+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_END"))+")");
                    objBlankRow.setValue("PARTY_CODE", rsTemp.getString("SCH_PARTY_CODE"));
                    objBlankRow.setValue("PARTY_NAME", rsTemp.getString("SCH_PARTY_NAME"));
                    objBlankRow.setValue("STATION", rsTemp.getString("SCH_CITY"));
                    objBlankRow.setValue("ELIGIBILE", rsTemp.getString("SCH_ELIGIBILITY"));
                    objBlankRow.setValue("DISC_AMOUNT", rsTemp.getString("SCH_DISC_AMOUNT"));
                    
                    
                    objBlankRow.setValue("QUALITY_NO", "");
                    objBlankRow.setValue("SHADE_NO", "");
                    objBlankRow.setValue("PIECE_NO", "");
                    objBlankRow.setValue("GROSS_QUANTITY", "");
                    objBlankRow.setValue("NET_QUANTITY", "");
                    objBlankRow.setValue("NET_AMOUNT", "");
                    objBlankRow.setValue("INVOICE_NO", "");
                    objBlankRow.setValue("INVOICE_DATE", "");
                    objBlankRow.setValue("BALE_NO", "");
                    objBlankRow.setValue("AGENT_INVOICE_NO", "");
                    objData.AddRow(objBlankRow);
                }
                
                rsTemp.next();
            }
            
            HashMap parameter=new HashMap();
            parameter.put("RUN_BY", clsUser.getUserName(2,EITLERPGLOBAL.gNewUserID));
            parameter.put("RUN_TIME", data.getStringValueFromDB("SELECT CURTIME() FROM DUAL").substring(0,5));
            
            EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/rptSQLSchemeDetailReport.rpt",parameter,objData);
            rsTemp.close();
            
            return true;
        }catch(SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
    
    private boolean printSQLSchemeDetailWithCrNoteReport(int schemeId) {
        try{
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            
            objData.AddColumn("SEASON_ID");
            objData.AddColumn("SCHEME_NAME");
            objData.AddColumn("SCHEME_PERIOD");
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("STATION");
            objData.AddColumn("ELIGIBILE");
            objData.AddColumn("DISC_AMOUNT");
            objData.AddColumn("QUALITY_NO");
            objData.AddColumn("SHADE_NO");
            objData.AddColumn("PIECE_NO");
            objData.AddColumn("GROSS_QUANTITY");
            objData.AddColumn("NET_QUANTITY");
            objData.AddColumn("NET_AMOUNT");
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("BALE_NO");
            objData.AddColumn("AGENT_INVOICE_NO");
            objData.AddColumn("SCD_DISC_PERCENT");
            objData.AddColumn("SCD_DISC_AMOUNT");
            
            String str="SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_ELIGIBILITY,SCD_DISC_PERCENT,SCD_DISC_AMOUNT,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_GROSS_QTY,SCD_NET_QTY,SCD_NET_AMOUNT,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_BALE_NO,CONCAT(SCD_AGENT_LAST_INVOICE,'/',SCD_AGENT_SR_NO) SCD_AGENT_INV_NO FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCD_SEASON_ID=SCH_SEASON_ID AND SCD_PARTY_CODE=SCH_PARTY_CODE AND SCH_SCHEME_ID=SCD_SCHEME_ID AND SCD_QUALITY_ELIGIBLE='Y' "+
            "UNION ALL "+
            "SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_ELIGIBILITY,SCD_DISC_PERCENT,SCD_DISC_AMOUNT,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT,SCD_QUALITY_ID,CONCAT(SCD_SHADE,' TOTAL') ,'',SUM(SCD_GROSS_QTY) SCD_GROSS_QTY,SUM(SCD_NET_QTY) SCD_NET_QTY,SUM(SCD_NET_AMOUNT)SCD_NET_AMOUNT,'','','','' FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCD_SEASON_ID=SCH_SEASON_ID AND SCD_PARTY_CODE=SCH_PARTY_CODE AND SCH_SCHEME_ID=SCD_SCHEME_ID AND SCD_QUALITY_ELIGIBLE='Y' "+
            "GROUP BY SCH_PARTY_CODE,SCD_QUALITY_ID,SCD_SHADE "+
            "UNION ALL "+
            "SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_ELIGIBILITY,SCD_DISC_PERCENT,SCD_DISC_AMOUNT,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT,CONCAT(SCD_QUALITY_ID,' TOTAL') ,'','',SUM(SCD_GROSS_QTY) SCD_GROSS_QTY,SUM(SCD_NET_QTY) SCD_NET_QTY,SUM(SCD_NET_AMOUNT)SCD_NET_AMOUNT,'','','','' FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCD_SEASON_ID=SCH_SEASON_ID AND SCD_PARTY_CODE=SCH_PARTY_CODE AND SCH_SCHEME_ID=SCD_SCHEME_ID AND SCD_QUALITY_ELIGIBLE='Y' "+
            "GROUP BY SCH_PARTY_CODE,SCD_QUALITY_ID "+
            "UNION ALL "+
            "SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_ELIGIBILITY,SCD_DISC_PERCENT,SCD_DISC_AMOUNT,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT,'total','','',SUM(SCD_GROSS_QTY) SCD_GROSS_QTY,SUM(SCD_NET_QTY) SCD_NET_QTY,SUM(SCD_NET_AMOUNT)SCD_NET_AMOUNT,'','','','' FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCD_SEASON_ID=SCH_SEASON_ID AND SCD_PARTY_CODE=SCH_PARTY_CODE AND SCH_SCHEME_ID=SCD_SCHEME_ID AND SCD_QUALITY_ELIGIBLE='Y' "+
            "GROUP BY SCH_PARTY_CODE "+
            "ORDER BY SCH_ELIGIBILITY DESC,SCH_PARTY_CODE,SCD_QUALITY_ID,SCD_SHADE LIMIT 10000000";
            
            ResultSet  rsTemp =data.getResult(str);
            while(!rsTemp.isAfterLast()){
                boolean addBlankRow=false;
                boolean addBeforeBlankRow=false;
                TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                
                objRow.setValue("SEASON_ID",rsTemp.getString("SCHEME_SEASON_ID"));
                objRow.setValue("SCHEME_NAME",rsTemp.getString("SCHEME_NAME"));
                objRow.setValue("SCHEME_PERIOD","("+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_START"))+"-"+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_END"))+")");
                objRow.setValue("PARTY_CODE", rsTemp.getString("SCH_PARTY_CODE"));
                objRow.setValue("PARTY_NAME", rsTemp.getString("SCH_PARTY_NAME"));
                objRow.setValue("STATION", rsTemp.getString("SCH_CITY"));
                objRow.setValue("ELIGIBILE", rsTemp.getString("SCH_ELIGIBILITY"));
                objRow.setValue("DISC_AMOUNT", rsTemp.getString("SCH_DISC_AMOUNT"));
                
               if(rsTemp.getString("SCD_SHADE").contains("T")){
                    objRow.setValue("QUALITY_NO", "");
                    objRow.setValue("SHADE_NO", "SHADE");
                    objRow.setValue("PIECE_NO", "TOTAL :-");
                    objRow.setValue("GROSS_QUANTITY", rsTemp.getString("SCD_GROSS_QTY"));
                    objRow.setValue("NET_QUANTITY", rsTemp.getString("SCD_NET_QTY"));
                    objRow.setValue("NET_AMOUNT", rsTemp.getString("SCD_NET_AMOUNT"));
                    objRow.setValue("INVOICE_NO", "");
                    objRow.setValue("INVOICE_DATE", "");
                    objRow.setValue("BALE_NO", "");
                    objRow.setValue("AGENT_INVOICE_NO", "");
                    objRow.setValue("SCD_DISC_PERCENT", "");
                    objRow.setValue("SCD_DISC_AMOUNT", "");
                    
                    //addBlankRow=true;
                    //addBeforeBlankRow=true;
                    
                }else if(rsTemp.getString("SCD_QUALITY_ID").contains("T")){
                    objRow.setValue("QUALITY_NO", "");
                    objRow.setValue("SHADE_NO", "QUALITY");
                    objRow.setValue("PIECE_NO", "TOTAL :-");
                    objRow.setValue("GROSS_QUANTITY", rsTemp.getString("SCD_GROSS_QTY"));
                    objRow.setValue("NET_QUANTITY", rsTemp.getString("SCD_NET_QTY"));
                    objRow.setValue("NET_AMOUNT", rsTemp.getString("SCD_NET_AMOUNT"));
                    objRow.setValue("INVOICE_NO", "");
                    objRow.setValue("INVOICE_DATE", "");
                    objRow.setValue("BALE_NO", "");
                    objRow.setValue("AGENT_INVOICE_NO", "");
                    objRow.setValue("SCD_DISC_PERCENT", "");
                    objRow.setValue("SCD_DISC_AMOUNT", "");
                    
                    addBlankRow=true;
                    
                }else                                
                if(rsTemp.getString("SCD_QUALITY_ID").contains("t")){
                    objRow.setValue("QUALITY_NO", "");
                    objRow.setValue("SHADE_NO", "PARTY");
                    objRow.setValue("PIECE_NO", "TOTAL :-");
                    objRow.setValue("GROSS_QUANTITY", rsTemp.getString("SCD_GROSS_QTY"));
                    objRow.setValue("NET_QUANTITY", rsTemp.getString("SCD_NET_QTY"));
                    objRow.setValue("NET_AMOUNT", rsTemp.getString("SCD_NET_AMOUNT"));
                    objRow.setValue("INVOICE_NO", "");
                    objRow.setValue("INVOICE_DATE", "");
                    objRow.setValue("BALE_NO", "");
                    objRow.setValue("AGENT_INVOICE_NO", "");
                    objRow.setValue("SCD_DISC_PERCENT", "");
                    objRow.setValue("SCD_DISC_AMOUNT", "");                    
                }else{
                    objRow.setValue("QUALITY_NO", rsTemp.getString("SCD_QUALITY_ID"));
                    objRow.setValue("SHADE_NO", rsTemp.getString("SCD_SHADE"));
                    objRow.setValue("PIECE_NO", rsTemp.getString("SCD_PIECE_NO"));
                    objRow.setValue("GROSS_QUANTITY", rsTemp.getString("SCD_GROSS_QTY"));
                    objRow.setValue("NET_QUANTITY", rsTemp.getString("SCD_NET_QTY"));
                    objRow.setValue("NET_AMOUNT", rsTemp.getString("SCD_NET_AMOUNT"));
                    objRow.setValue("INVOICE_NO", rsTemp.getString("SCD_INVOICE_NO"));
                    objRow.setValue("INVOICE_DATE", EITLERPGLOBAL.formatDate(rsTemp.getString("SCD_INVOICE_DATE")));
                    objRow.setValue("BALE_NO", rsTemp.getString("SCD_BALE_NO"));
                    objRow.setValue("AGENT_INVOICE_NO", rsTemp.getString("SCD_AGENT_INV_NO"));
                    objRow.setValue("SCD_DISC_PERCENT", rsTemp.getString("SCD_DISC_PERCENT"));
                    objRow.setValue("SCD_DISC_AMOUNT", rsTemp.getString("SCD_DISC_AMOUNT"));
                }
                /*
                if(addBeforeBlankRow){
                    TReportWriter.SimpleDataProvider.TRow objBlankRow=objData.newRow();
                    objBlankRow.setValue("SEASON_ID",rsTemp.getString("SCHEME_SEASON_ID"));
                    objBlankRow.setValue("SCHEME_NAME",rsTemp.getString("SCHEME_NAME"));
                    objBlankRow.setValue("SCHEME_PERIOD","("+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_START"))+"-"+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_END"))+")");
                    objBlankRow.setValue("PARTY_CODE", rsTemp.getString("SCH_PARTY_CODE"));
                    objBlankRow.setValue("PARTY_NAME", rsTemp.getString("SCH_PARTY_NAME"));
                    objBlankRow.setValue("STATION", rsTemp.getString("SCH_CITY"));
                    objBlankRow.setValue("ELIGIBILE", rsTemp.getString("SCH_ELIGIBILITY"));
                    objBlankRow.setValue("DISC_AMOUNT", rsTemp.getString("SCH_DISC_AMOUNT"));
                    
                    objBlankRow.setValue("QUALITY_NO", "");
                    objBlankRow.setValue("SHADE_NO", "");
                    objBlankRow.setValue("PIECE_NO", "");
                    objBlankRow.setValue("GROSS_QUANTITY", "");
                    objBlankRow.setValue("NET_QUANTITY", "");
                    objBlankRow.setValue("NET_AMOUNT", "");
                    objBlankRow.setValue("INVOICE_NO", "");
                    objBlankRow.setValue("INVOICE_DATE", "");
                    objBlankRow.setValue("BALE_NO", "");
                    objBlankRow.setValue("AGENT_INVOICE_NO", "");
                    objBlankRow.setValue("SCD_DISC_PERCENT", "");
                    objBlankRow.setValue("SCD_DISC_AMOUNT", "");
                    objData.AddRow(objBlankRow);
                }
                */
                objData.AddRow(objRow);                
               /*
                if(addBlankRow){
                    TReportWriter.SimpleDataProvider.TRow objBlankRow=objData.newRow();                    
                    objBlankRow.setValue("SEASON_ID",rsTemp.getString("SCHEME_SEASON_ID"));
                    objBlankRow.setValue("SCHEME_NAME",rsTemp.getString("SCHEME_NAME"));
                    objBlankRow.setValue("SCHEME_PERIOD","("+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_START"))+"-"+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_END"))+")");
                    objBlankRow.setValue("PARTY_CODE", rsTemp.getString("SCH_PARTY_CODE"));
                    objBlankRow.setValue("PARTY_NAME", rsTemp.getString("SCH_PARTY_NAME"));
                    objBlankRow.setValue("STATION", rsTemp.getString("SCH_CITY"));
                    objBlankRow.setValue("ELIGIBILE", rsTemp.getString("SCH_ELIGIBILITY"));
                    objBlankRow.setValue("DISC_AMOUNT", rsTemp.getString("SCH_DISC_AMOUNT"));
                    objBlankRow.setValue("QUALITY_NO", "");
                    objBlankRow.setValue("SHADE_NO", "");
                    objBlankRow.setValue("PIECE_NO", "");
                    objBlankRow.setValue("GROSS_QUANTITY", "");
                    objBlankRow.setValue("NET_QUANTITY", "");
                    objBlankRow.setValue("NET_AMOUNT", "");
                    objBlankRow.setValue("INVOICE_NO", "");
                    objBlankRow.setValue("INVOICE_DATE", "");
                    objBlankRow.setValue("BALE_NO", "");
                    objBlankRow.setValue("AGENT_INVOICE_NO", "");
                    objBlankRow.setValue("SCD_DISC_PERCENT", "");
                    objBlankRow.setValue("SCD_DISC_AMOUNT", "");
                    objData.AddRow(objBlankRow);
                }
                */                
                rsTemp.next();
               
            }
            
            HashMap parameter=new HashMap();
            parameter.put("RUN_BY", clsUser.getUserName(2,EITLERPGLOBAL.gNewUserID));
            parameter.put("RUN_TIME", data.getStringValueFromDB("SELECT CURTIME() FROM DUAL").substring(0,8));
            
            EITLERPGLOBAL.PAGE_BREAK=true;
            if(EITLERPGLOBAL.getCombostrCode(cmbSchemeName).contains("SQL")){        
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/rptSQLSchemeDetailWithCrNoteReport.rpt",parameter,objData);
            }else{
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/rptSPLSchemeDetailWithCrNoteReport.rpt",parameter,objData);
            }
            rsTemp.close();
            
            return true;
        }catch(SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
    
    private boolean printSQLDetailReport(int schemeId, int reportId){
        try {
            URL reportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/rptSuitingsSalesSchemeReport.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&SCHEME_ID="+schemeId+"&REPORT_ID="+reportId);
            EITLERPGLOBAL.loginContext.showDocument(reportFile,"_blank");
            return true;
        }catch(Exception e) {
            JOptionPane.showMessageDialog(this,"File error "+e.getMessage(),"FILE ERROR",JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return false;
        }
    }
    
    private boolean processSPLScheme(int schemeId){
        try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            ResultSet rsScheme=stmt.executeQuery("SELECT SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+schemeId);
            rsScheme.first();
            String seasonId=rsScheme.getString("SCHEME_SEASON_ID");
           
          InvoiceTable(schemeId);            

            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeDetailQry="INSERT INTO SALES.D_SAL_SCHEME_DETAIL(SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_FLAG,SCD_UNIT_CODE,SCD_GROSS_QTY,SCD_GROSS_AMOUNT,SCD_NET_QTY,SCD_NET_AMOUNT,SCD_AGENT_LAST_INVOICE,SCD_AGENT_SR_NO,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_INV_RATE,SCD_PL_RATE,SCD_QUALITY_ELIGIBLE,SCD_DISC_PER_MTR_RATE,SCD_DISC_PERCENT,SCD_DISC_AMOUNT,SCD_GATE_PASS_NO,SCD_GATEPASS_DATE,SCD_BALE_NO) " +
            "SELECT SCHEME_ID,I.SEASON_ID,PARTY_CODE,QUALITY_NO,SHADE ,PIECE_NO,FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,NET_AMOUNT,AGENT_LAST_INVOICE,AGENT_SR_NO,INVOICE_NO,INVOICE_DATE,RATE,0,'',0,0,0,GATEPASS_NO,GATEPASS_DATE,BALE_NO FROM  "+
            "(SELECT QUALITY_ID,SEASON_ID FROM D_SAL_QUALITY_MASTER WHERE SEASON_ID='"+seasonId+"' AND CATEGORY_LIST='LISTA') Q "+
            "INNER JOIN "+
            "(SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO/10 QUALITY_NO,B.PATTERN_CODE AS SHADE,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO FROM SALES.TMP_SAL_INVOICE_HEADER A,SALES.TMP_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D, SALES.D_SAL_SCHEME_MASTER E WHERE A.INVOICE_TYPE =1 AND A.INVOICE_DATE=B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE >= DATE_FROM AND A.INVOICE_DATE <= DATE_TO AND A.WAREHOUSE_CODE =1 AND A.QUALITY_INDICATOR IN (0,3) AND  SCHEME_SEASON_ID = SEASON_ID AND SCHEME_ID ="+schemeId+" AND SEASON_ID='"+seasonId+"') I ON SUBSTRING(QUALITY_ID,2,5)=SUBSTRING(QUALITY_NO,2,5) AND Q.SEASON_ID=I.SEASON_ID ";
            
            stmt.execute(schemeDetailQry);
            
            //stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL,DINESHMILLS.D_SAL_PRICE_LIST_DETAIL SET SCD_PL_RATE=EX_MILL_RATE WHERE SUBSTRING(SCD_QUALITY_ID,2,5)=SUBSTRING(QUALITY_ID,2,5) AND SCD_SEASON_ID=SUBSTRING(PRICE_LIST_NO,3,5) AND SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID ="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL LEFT JOIN (SELECT SEASON_ID,DATE_FROM,DATE_TO FROM DINESHMILLS.D_SAL_SEASON_MASTER WHERE SEASON_ID ='"+seasonId+"') S ON SCD_SEASON_ID=SEASON_ID LEFT JOIN (SELECT SUBSTRING(PR.PRICE_LIST_NO,3,5) SEAS_ID,QUALITY_ID,PR.EX_MILL_RATE,PR.EFFECTIVE_DATE FROM DINESHMILLS.D_SAL_PRICE_LIST_DETAIL PD, DINESHMILLS.D_SAL_PRICE_LIST_RATE PR WHERE PD.PRICE_LIST_NO=PR.PRICE_LIST_NO AND PD.SR_NO=PRICE_LIST_SR_NO AND SUBSTRING(PR.PRICE_LIST_NO,3,3) ='"+seasonId+"' AND QUALITY_ID NOT LIKE '72%') PL ON SUBSTRING(SCD_QUALITY_ID,2,5)=SUBSTRING(QUALITY_ID,2,5) AND SEASON_ID=SEAS_ID AND EX_MILL_RATE=SCD_INV_RATE AND SCD_INVOICE_DATE>=EFFECTIVE_DATE SET SCD_PL_RATE=CASE WHEN SCD_INV_RATE=EX_MILL_RATE THEN EX_MILL_RATE ELSE 0 END WHERE SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId+" AND SCD_INVOICE_DATE>=DATE_FROM AND SCD_INVOICE_DATE<=DATE_TO");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_QUALITY_ELIGIBLE=CASE WHEN SCD_INV_RATE-SCD_PL_RATE=0 THEN 'Y' ELSE 'N' END WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeHeaderQry="INSERT INTO SALES.D_SAL_SCHEME_HEADER(SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_CHARGE_CODE,SCH_BOOK_CODE,SCH_MAIN_CODE,SCH_DRAFT_CR_NOTE_NO,SCH_DRAFT_CR_NOTE_DATE,SCH_REASON_CODE,SCH_LINK_NO,SCH_TOTAL_GR_LIFT_QTY,SCH_TOTAL_NET_LIFT_QTY,SCH_TOTAL_FGR_LIFT_QTY,SCH_TOTAL_SGR_LIFT_QTY,SCH_TOTAL_FNET_LIFT_QTY,SCH_TOTAL_SNET_LIFT_QTY,SCH_TOTAL_INV_AMOUNT,SCH_TOTAL_FINV_AMOUNT,SCH_TOTAL_SINV_AMOUNT,SCH_DISC_RATE,SCH_DISC_PERCENT,SCH_DISC_AMOUNT,SCH_FDISC_PERCENT,SCH_SDISC_PERCENT,SCH_FDISC_AMOUNT,SCH_SDISC_AMOUNT,SCH_TOTAL_AMOUNT,SCH_ELIGIBILITY,SCH_CREATED_BY,SCH_CREATED_DATE,SCH_MODIFIED_BY,SCH_MODIFIED_DATE,SCH_APPROVED,SCH_APPROVED_DATE,SCH_CANCELLED,SCH_CANCELLED_DATE,SCH_REJECTED,SCH_REJECTED_DATE,SCH_CHANGED,SCH_CHANGED_DATE) "+
            "SELECT SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,'','','','','','','0000-00-00','','',SUM(SCD_GROSS_QTY),SUM(SCD_NET_QTY),0,0,0,0,SUM(SCD_NET_AMOUNT),0,0,0,0,0,0,0,0,0,0,'N',1,NOW(),0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',1,NOW() "+
            "FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_QUALITY_ELIGIBLE ='Y' AND SCD_SCHEME_ID="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE ";
            
            stmt.execute(schemeHeaderQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,DINESHMILLS.D_SAL_PARTY_MASTER SET SCH_PARTY_NAME=PARTY_NAME,SCH_CITY=CITY_ID,SCH_CHARGE_CODE=CHARGE_CODE WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            String pwQry="UPDATE SALES.D_SAL_SCHEME_HEADER H, "+
            "(SELECT SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SUM(SCD_GROSS_QTY) GQ,SUM(SCD_NET_QTY) NQ,SUM(SCD_NET_AMOUNT) NA "+
            "FROM SALES.D_SAL_SCHEME_DETAIL WHERE SUBSTRING(SCD_QUALITY_ID,2,2) NOT IN ('18','28','22') AND SCD_SEASON_ID='"+seasonId+"' AND SCD_QUALITY_ELIGIBLE ='Y' AND SCD_SCHEME_ID="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE) D "+
            "SET SCH_TOTAL_FGR_LIFT_QTY=GQ,SCH_TOTAL_FNET_LIFT_QTY=NQ,SCH_TOTAL_FINV_AMOUNT=NA WHERE SCH_SCHEME_ID=SCD_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE";
            
            stmt.execute(pwQry);
            
            String pvQry="UPDATE SALES.D_SAL_SCHEME_HEADER H, "+
            "(SELECT SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SUM(SCD_GROSS_QTY) GQ,SUM(SCD_NET_QTY) NQ,SUM(SCD_NET_AMOUNT) NA "+
            "FROM SALES.D_SAL_SCHEME_DETAIL WHERE SUBSTRING(SCD_QUALITY_ID,2,2) IN ('18','28','22') AND SCD_SEASON_ID='"+seasonId+"' AND SCD_QUALITY_ELIGIBLE ='Y' AND SCD_SCHEME_ID="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE) D "+
            "SET SCH_TOTAL_SGR_LIFT_QTY=GQ,SCH_TOTAL_SNET_LIFT_QTY=NQ,SCH_TOTAL_SINV_AMOUNT=NA WHERE SCH_SCHEME_ID=SCD_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE";
            
            stmt.execute(pvQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_SLAB,SALES.D_SAL_SCHEME_HEADER SET SCH_FDISC_PERCENT=SLAB_OUTPUT,SCH_FDISC_AMOUNT=SCH_TOTAL_FINV_AMOUNT*SLAB_OUTPUT/100 WHERE SLAB_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SLAB_SEASON_ID=SCH_SEASON_ID AND SCH_SCHEME_ID=SLAB_SCHEME_ID AND SCH_TOTAL_GR_LIFT_QTY >=SLAB_FROM AND SCH_TOTAL_GR_LIFT_QTY<=SLAB_TO AND SR_NO=1");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_SLAB,SALES.D_SAL_SCHEME_HEADER SET SCH_SDISC_PERCENT=SLAB_OUTPUT,SCH_SDISC_AMOUNT=SCH_TOTAL_SINV_AMOUNT*SLAB_OUTPUT/100 WHERE SLAB_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SLAB_SEASON_ID=SCH_SEASON_ID AND SCH_SCHEME_ID=SLAB_SCHEME_ID AND SCH_TOTAL_GR_LIFT_QTY >=SLAB_FROM AND SCH_TOTAL_GR_LIFT_QTY<=SLAB_TO AND SR_NO=2");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_AMOUNT=SCH_FDISC_AMOUNT+SCH_SDISC_AMOUNT,SCH_ELIGIBILITY=CASE WHEN SCH_FDISC_AMOUNT+SCH_SDISC_AMOUNT !=0 THEN 'Y' ELSE 'N' END WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PERCENT=SCH_FDISC_PERCENT,SCD_DISC_AMOUNT=SCD_NET_AMOUNT*SCH_FDISC_PERCENT/100 WHERE SCD_SCHEME_ID=SCH_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SUBSTRING(SCD_QUALITY_ID,2,2) NOT IN ('18','28','22') AND SCD_QUALITY_ELIGIBLE='Y'");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PERCENT=SCH_SDISC_PERCENT,SCD_DISC_AMOUNT=SCD_NET_AMOUNT*SCH_SDISC_PERCENT/100 WHERE SCD_SCHEME_ID=SCH_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SUBSTRING(SCD_QUALITY_ID,2,2) IN ('18','28','22') AND SCD_QUALITY_ELIGIBLE='Y'");
            
//            //processSPLCreditNote(schemeId, seasonId);
//            setData(schemeId, seasonId);
//             processCreditNoteInput(schemeId, seasonId);
//            
            
            printReport=true;
            return true;
            
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
        
    }
    
    
    
private boolean processABDScheme(int schemeId){
        try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            ResultSet rsScheme=stmt.executeQuery("SELECT SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+schemeId);
            rsScheme.first();
            String seasonId=rsScheme.getString("SCHEME_SEASON_ID");
            
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeDetailQry="INSERT INTO SALES.D_SAL_SCHEME_DETAIL SELECT * FROM SALES.TMP_SAL_SCHEME_DETAIL" ;
            
            stmt.execute(schemeDetailQry);
            
            //String schemeHeaderQry="INSERT INTO SALES.D_SAL_SCHEME_HEADER SELECT * FROM SALES.TMP_SAL_SCHEME_HEADER" ;
            
            //stmt.execute(schemeHeaderQry);
            stmt.execute("INSERT INTO SALES.D_SAL_SCHEME_HEADER SELECT SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,'','','','','','','0000-00-00','','',SUM(SCD_GROSS_QTY),SUM(SCD_NET_QTY),0,0,0,0,SUM(SCD_NET_AMOUNT),0,0,0,0,SUM(SCD_DISC_AMOUNT),0,0,0,0,0,0,'Y','','',1,NOW(),0,NOW(),0,NOW(),   0,NOW(),0,NOW(),0,NOW() FROM  SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId+"  GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE");
            
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,DINESHMILLS.D_SAL_PARTY_MASTER SET SCH_PARTY_NAME=PARTY_NAME,SCH_CITY=CITY_ID,SCH_CHARGE_CODE=CHARGE_CODE WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            
            //processSPLCreditNote(schemeId, seasonId);
            //setData(schemeId, seasonId);
            //System.out.println("SCHEME = "+schemeId+" SEASON = "+seasonId);
             //processCreditNoteInput(schemeId, seasonId);
            
            
            printReport=true;
            return true;
            
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
        
    }    
    
    
    
    
    
    
    
    
    
    private boolean processASRScheme(int schemeId){
        try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            ResultSet rsScheme=stmt.executeQuery("SELECT SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+schemeId);
            rsScheme.first();
            String seasonId=rsScheme.getString("SCHEME_SEASON_ID");
            
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeDetailQry="INSERT INTO SALES.D_SAL_SCHEME_DETAIL(SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_FLAG,SCD_UNIT_CODE,SCD_GROSS_QTY,SCD_GROSS_AMOUNT,SCD_NET_QTY,SCD_NET_AMOUNT,SCD_AGENT_LAST_INVOICE,SCD_AGENT_SR_NO,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_INV_RATE,SCD_PL_RATE,SCD_QUALITY_ELIGIBLE,SCD_DISC_PER_MTR_RATE,SCD_DISC_PERCENT,SCD_DISC_AMOUNT,SCD_GATE_PASS_NO,SCD_GATEPASS_DATE,SCD_BALE_NO) " +
            "SELECT SCHEME_ID,SCHEME_SEASON_ID,A.PARTY_CODE,B.QUALITY_NO/10 QUALITY_NO,B.PATTERN_CODE AS SHADE,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,0,'',0,0,0,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO " +
            "FROM DINESHMILLS.D_SAL_INVOICE_HEADER A,DINESHMILLS.D_SAL_INVOICE_DETAIL B, SALES.D_SAL_SCHEME_MASTER E WHERE A.INVOICE_TYPE =1 AND A.WAREHOUSE_CODE =1 AND A.QUALITY_INDICATOR IN (0,3) AND A.PARTY_CODE IN(171165,175790,176007,176018,176019,176084,176830,176847,176878,230943,275507,275542,278877,278905,308803,308813,308817,308839,308842,308843,308847,308886,308891,308892,308895,308903,308913,308919,308943,308952,308955,308968,308980,311928,318880,318885,318890,318895,412615,509731,509966,518829,518890,578850) AND B.QUALITY_NO NOT LIKE '72%' AND A.INVOICE_DATE=B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE >= SCHEME_START  AND A.INVOICE_DATE <= SCHEME_END AND SCHEME_ID="+schemeId+" AND SCHEME_SEASON_ID='"+seasonId+"'";
            
            stmt.execute(schemeDetailQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL,D_SAL_PRICE_LIST_DETAIL,D_SAL_SEASON_MASTER SET SCD_PL_RATE=EX_MILL_RATE WHERE SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID ="+schemeId +" AND SUBSTRING(SCD_QUALITY_ID,2,5)=SUBSTRING(QUALITY_ID,2,5) AND SCD_INVOICE_DATE>=DATE_FROM AND SCD_INVOICE_DATE<=DATE_TO AND SEASON_ID=SUBSTRING(PRICE_LIST_NO,3,5)");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_QUALITY_ELIGIBLE=CASE WHEN SCD_INV_RATE-SCD_PL_RATE=0 THEN 'Y' ELSE 'N' END WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeHeaderQry="INSERT INTO SALES.D_SAL_SCHEME_HEADER(SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_CHARGE_CODE,SCH_BOOK_CODE,SCH_MAIN_CODE,SCH_DRAFT_CR_NOTE_NO,SCH_DRAFT_CR_NOTE_DATE,SCH_REASON_CODE,SCH_LINK_NO,SCH_TOTAL_GR_LIFT_QTY,SCH_TOTAL_NET_LIFT_QTY,SCH_TOTAL_INV_AMOUNT,SCH_DISC_RATE,SCH_DISC_PERCENT,SCH_DISC_AMOUNT,SCH_TOTAL_AMOUNT,SCH_ELIGIBILITY,SCH_CREATED_BY,SCH_CREATED_DATE,SCH_MODIFIED_BY,SCH_MODIFIED_DATE,SCH_APPROVED,SCH_APPROVED_DATE,SCH_CANCELLED,SCH_CANCELLED_DATE,SCH_REJECTED,SCH_REJECTED_DATE,SCH_CHANGED,SCH_CHANGED_DATE) "+
            "SELECT SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,'','','','','','','0000-00-00','','',SUM(SCD_GROSS_QTY),SUM(SCD_NET_QTY),SUM(SCD_NET_AMOUNT),0,0,0,0,'N',1,NOW(),0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',1,NOW() "+
            "FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID= '"+seasonId+"' AND SCD_QUALITY_ELIGIBLE ='Y' AND SCD_SCHEME_ID="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE ";
            
            stmt.execute(schemeHeaderQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,DINESHMILLS.D_SAL_PARTY_MASTER SET SCH_PARTY_NAME=PARTY_NAME,SCH_CITY=CITY_ID,SCH_CHARGE_CODE=CHARGE_CODE WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_SLAB,SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_PERCENT=SLAB_OUTPUT, SCH_DISC_AMOUNT=SCH_TOTAL_INV_AMOUNT*SLAB_OUTPUT/100 WHERE SLAB_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SLAB_SEASON_ID=SCH_SEASON_ID AND SCH_SCHEME_ID=SLAB_SCHEME_ID AND SCH_TOTAL_INV_AMOUNT>=SLAB_FROM AND SCH_TOTAL_INV_AMOUNT<=SLAB_TO AND SLAB_PARTY_CODE=SCH_PARTY_CODE");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_ELIGIBILITY =CASE WHEN SCH_DISC_AMOUNT!=0 THEN 'Y' ELSE 'N' END WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PERCENT=SCH_DISC_PERCENT,SCD_DISC_AMOUNT=SCD_NET_AMOUNT*SCH_DISC_PERCENT/100 WHERE SCD_SCHEME_ID=SCH_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE AND SCD_QUALITY_ELIGIBLE='Y' AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            //processRetailerCreditNote(schemeId, seasonId);
            
            printReport=true;
            return true;
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
    }
    
    private boolean printASRDetailReport(int schemeId) {
        try{
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            
            objData.AddColumn("SEASON_ID");
            objData.AddColumn("SCHEME_NAME");
            objData.AddColumn("SCHEME_PERIOD");
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("STATION");
            objData.AddColumn("ELIGIBILE");
            objData.AddColumn("DISC_AMOUNT");
            objData.AddColumn("QUALITY_NO");
            objData.AddColumn("SHADE_NO");
            objData.AddColumn("PIECE_NO");
            objData.AddColumn("RATE");
            objData.AddColumn("NET_QUANTITY");
            objData.AddColumn("NET_AMOUNT");
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("BALE_NO");
            objData.AddColumn("AGENT_INVOICE_NO");
            
            String str="SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_ELIGIBILITY,SCH_TOTAL_INV_AMOUNT,SCH_DISC_PERCENT,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_INV_RATE,SCD_NET_QTY,SCD_NET_AMOUNT,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_BALE_NO,CONCAT(SCD_AGENT_LAST_INVOICE,'/',SCD_AGENT_SR_NO) SCD_AGENT_INV_NO FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCD_SEASON_ID=SCH_SEASON_ID AND SCD_PARTY_CODE=SCH_PARTY_CODE AND SCH_SCHEME_ID=SCD_SCHEME_ID AND SCD_QUALITY_ELIGIBLE='Y' "+
            "UNION ALL "+
            "SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_ELIGIBILITY,SCH_TOTAL_INV_AMOUNT,SCH_DISC_PERCENT,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT,SCD_QUALITY_ID,CONCAT(SCD_SHADE,' TOTAL') ,'','',SUM(SCD_NET_QTY) SCD_NET_QTY,SUM(SCD_NET_AMOUNT)SCD_NET_AMOUNT,'','','','' FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCD_SEASON_ID=SCH_SEASON_ID AND SCD_PARTY_CODE=SCH_PARTY_CODE AND SCH_SCHEME_ID=SCD_SCHEME_ID AND SCD_QUALITY_ELIGIBLE='Y' "+
            "GROUP BY SCH_PARTY_CODE,SCD_QUALITY_ID,SCD_SHADE "+
            "UNION ALL "+
            "SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_ELIGIBILITY,SCH_TOTAL_INV_AMOUNT,SCH_DISC_PERCENT,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT,CONCAT(SCD_QUALITY_ID,' TOTAL') ,'','','',SUM(SCD_NET_QTY) SCD_NET_QTY,SUM(SCD_NET_AMOUNT)SCD_NET_AMOUNT,'','','','' FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCD_SEASON_ID=SCH_SEASON_ID AND SCD_PARTY_CODE=SCH_PARTY_CODE AND SCH_SCHEME_ID=SCD_SCHEME_ID AND SCD_QUALITY_ELIGIBLE='Y' "+
            "GROUP BY SCH_PARTY_CODE,SCD_QUALITY_ID "+
            "UNION ALL "+
            "SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_ELIGIBILITY,SCH_TOTAL_INV_AMOUNT,SCH_DISC_PERCENT,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT,'total','','','',SUM(SCD_NET_QTY) SCD_NET_QTY,SUM(SCD_NET_AMOUNT)SCD_NET_AMOUNT,'','','','' FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCD_SEASON_ID=SCH_SEASON_ID AND SCD_PARTY_CODE=SCH_PARTY_CODE AND SCH_SCHEME_ID=SCD_SCHEME_ID AND SCD_QUALITY_ELIGIBLE='Y' "+
            "GROUP BY SCH_PARTY_CODE "+
            "ORDER BY SCH_ELIGIBILITY DESC,SCH_PARTY_CODE,SCD_QUALITY_ID,SCD_SHADE LIMIT 10000000";
            
            ResultSet  rsTemp =data.getResult(str);
            while(!rsTemp.isAfterLast()){
                boolean addBlankRow=false;
                boolean addBeforeBlankRow=false;
                TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                
                objRow.setValue("SEASON_ID",rsTemp.getString("SCHEME_SEASON_ID"));
                objRow.setValue("SCHEME_NAME",rsTemp.getString("SCHEME_NAME"));
                objRow.setValue("SCHEME_PERIOD","("+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_START"))+"-"+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_END"))+")");
                objRow.setValue("PARTY_CODE", rsTemp.getString("SCH_PARTY_CODE"));
                objRow.setValue("PARTY_NAME", rsTemp.getString("SCH_PARTY_NAME"));
                objRow.setValue("STATION", rsTemp.getString("SCH_CITY"));
                objRow.setValue("ELIGIBILE", rsTemp.getString("SCH_ELIGIBILITY"));
                objRow.setValue("DISC_PERCENT", rsTemp.getString("SCH_DISC_PERCENT"));
                objRow.setValue("DISC_AMOUNT", rsTemp.getString("SCH_DISC_AMOUNT"));
                objRow.setValue("TOTAL_INV_AMOUNT", rsTemp.getString("SCH_TOTAL_INV_AMOUNT"));
                
                // setting target data
                ResultSet rsTmp=data.getResult("SELECT SLAB_FROM,SLAB_TO FROM SALES.D_SAL_SCHEME_SLAB WHERE SLAB_SCHEME_ID="+schemeId+" AND SR_NO=1 AND SLAB_PARTY_CODE='"+rsTemp.getString("SCH_PARTY_CODE")+"'");
                objRow.setValue("TARGET1", rsTmp.getString("SLAB_FROM"));
                objRow.setValue("TARGET2", rsTmp.getString("SLAB_TO"));
                rsTmp.close();
                
                if(rsTemp.getString("SCD_SHADE").contains("T")){
                    objRow.setValue("QUALITY_NO", "");
                    objRow.setValue("SHADE_NO", "SHADE");
                    objRow.setValue("PIECE_NO", "TOTAL :-");
                    objRow.setValue("RATE", rsTemp.getString("SCD_INV_RATE"));
                    objRow.setValue("NET_QUANTITY", rsTemp.getString("SCD_NET_QTY"));
                    objRow.setValue("NET_AMOUNT", rsTemp.getString("SCD_NET_AMOUNT"));
                    objRow.setValue("INVOICE_NO", "");
                    objRow.setValue("INVOICE_DATE", "");
                    objRow.setValue("BALE_NO", "");
                    objRow.setValue("AGENT_INVOICE_NO", "");
                    
                    addBlankRow=true;
                    addBeforeBlankRow=true;
                    
                }else if(rsTemp.getString("SCD_QUALITY_ID").contains("T")){
                    objRow.setValue("QUALITY_NO", "");
                    objRow.setValue("SHADE_NO", "QUALITY");
                    objRow.setValue("PIECE_NO", "TOTAL :-");
                    objRow.setValue("RATE", rsTemp.getString("SCD_INV_RATE"));
                    objRow.setValue("NET_QUANTITY", rsTemp.getString("SCD_NET_QTY"));
                    objRow.setValue("NET_AMOUNT", rsTemp.getString("SCD_NET_AMOUNT"));
                    objRow.setValue("INVOICE_NO", "");
                    objRow.setValue("INVOICE_DATE", "");
                    objRow.setValue("BALE_NO", "");
                    objRow.setValue("AGENT_INVOICE_NO", "");
                    
                    addBlankRow=true;
                    
                }else if(rsTemp.getString("SCD_QUALITY_ID").contains("t")){
                    objRow.setValue("QUALITY_NO", "");
                    objRow.setValue("SHADE_NO", "PARTY");
                    objRow.setValue("PIECE_NO", "TOTAL :-");
                    objRow.setValue("RATE", rsTemp.getString("SCD_INV_RATE"));
                    objRow.setValue("NET_QUANTITY", rsTemp.getString("SCD_NET_QTY"));
                    objRow.setValue("NET_AMOUNT", rsTemp.getString("SCD_NET_AMOUNT"));
                    objRow.setValue("INVOICE_NO", "");
                    objRow.setValue("INVOICE_DATE", "");
                    objRow.setValue("BALE_NO", "");
                    objRow.setValue("AGENT_INVOICE_NO", "");
                }else{
                    objRow.setValue("QUALITY_NO", rsTemp.getString("SCD_QUALITY_ID"));
                    objRow.setValue("SHADE_NO", rsTemp.getString("SCD_SHADE"));
                    objRow.setValue("PIECE_NO", rsTemp.getString("SCD_PIECE_NO"));
                    objRow.setValue("RATE", rsTemp.getString("SCD_INV_RATE"));
                    objRow.setValue("NET_QUANTITY", rsTemp.getString("SCD_NET_QTY"));
                    objRow.setValue("NET_AMOUNT", rsTemp.getString("SCD_NET_AMOUNT"));
                    objRow.setValue("INVOICE_NO", rsTemp.getString("SCD_INVOICE_NO"));
                    objRow.setValue("INVOICE_DATE", EITLERPGLOBAL.formatDate(rsTemp.getString("SCD_INVOICE_DATE")));
                    objRow.setValue("BALE_NO", rsTemp.getString("SCD_BALE_NO"));
                    objRow.setValue("AGENT_INVOICE_NO", rsTemp.getString("SCD_AGENT_INV_NO"));
                }
                
                if(addBeforeBlankRow){
                    TReportWriter.SimpleDataProvider.TRow objBlankRow=objData.newRow();
                    objBlankRow.setValue("SEASON_ID",rsTemp.getString("SCHEME_SEASON_ID"));
                    objBlankRow.setValue("SCHEME_NAME",rsTemp.getString("SCHEME_NAME"));
                    objBlankRow.setValue("SCHEME_PERIOD","("+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_START"))+"-"+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_END"))+")");
                    objBlankRow.setValue("PARTY_CODE", rsTemp.getString("SCH_PARTY_CODE"));
                    objBlankRow.setValue("PARTY_NAME", rsTemp.getString("SCH_PARTY_NAME"));
                    objBlankRow.setValue("STATION", rsTemp.getString("SCH_CITY"));
                    objBlankRow.setValue("ELIGIBILE", rsTemp.getString("SCH_ELIGIBILITY"));
                    objBlankRow.setValue("DISC_AMOUNT", rsTemp.getString("SCH_DISC_AMOUNT"));
                    
                    objBlankRow.setValue("QUALITY_NO", "");
                    objBlankRow.setValue("SHADE_NO", "");
                    objBlankRow.setValue("PIECE_NO", "");
                    objBlankRow.setValue("RATE", "");
                    objBlankRow.setValue("NET_QUANTITY", "");
                    objBlankRow.setValue("NET_AMOUNT", "");
                    objBlankRow.setValue("INVOICE_NO", "");
                    objBlankRow.setValue("INVOICE_DATE", "");
                    objBlankRow.setValue("BALE_NO", "");
                    objBlankRow.setValue("AGENT_INVOICE_NO", "");
                    objData.AddRow(objBlankRow);
                }
                
                objData.AddRow(objRow);
                
                if(addBlankRow){
                    TReportWriter.SimpleDataProvider.TRow objBlankRow=objData.newRow();
                    
                    objBlankRow.setValue("SEASON_ID",rsTemp.getString("SCHEME_SEASON_ID"));
                    objBlankRow.setValue("SCHEME_NAME",rsTemp.getString("SCHEME_NAME"));
                    objBlankRow.setValue("SCHEME_PERIOD","("+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_START"))+"-"+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_END"))+")");
                    objBlankRow.setValue("PARTY_CODE", rsTemp.getString("SCH_PARTY_CODE"));
                    objBlankRow.setValue("PARTY_NAME", rsTemp.getString("SCH_PARTY_NAME"));
                    objBlankRow.setValue("STATION", rsTemp.getString("SCH_CITY"));
                    objBlankRow.setValue("ELIGIBILE", rsTemp.getString("SCH_ELIGIBILITY"));
                    objBlankRow.setValue("DISC_AMOUNT", rsTemp.getString("SCH_DISC_AMOUNT"));
                    
                    
                    objBlankRow.setValue("QUALITY_NO", "");
                    objBlankRow.setValue("SHADE_NO", "");
                    objBlankRow.setValue("PIECE_NO", "");
                    objBlankRow.setValue("RATE", "");
                    objBlankRow.setValue("NET_QUANTITY", "");
                    objBlankRow.setValue("NET_AMOUNT", "");
                    objBlankRow.setValue("INVOICE_NO", "");
                    objBlankRow.setValue("INVOICE_DATE", "");
                    objBlankRow.setValue("BALE_NO", "");
                    objBlankRow.setValue("AGENT_INVOICE_NO", "");
                    objData.AddRow(objBlankRow);
                }
                
                rsTemp.next();
            }
            
            HashMap parameter=new HashMap();
            parameter.put("RUN_BY", clsUser.getUserName(2,EITLERPGLOBAL.gNewUserID));
            parameter.put("RUN_TIME", data.getStringValueFromDB("SELECT CURTIME() FROM DUAL").substring(0,5));
            
            EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/rptASRDetailReport.rpt",parameter,objData);
            rsTemp.close();
            
            return true;
        }catch(SQLException e) {
            e.printStackTrace();
            return false;
        }
    }    
    
    
    private boolean printASRSummaryReport(int schemeId) {
        try{
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            
            objData.AddColumn("SEASON_ID");
            objData.AddColumn("SCHEME_NAME");
            objData.AddColumn("SCHEME_PERIOD");
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("STATION");
            objData.AddColumn("RATE");
            objData.AddColumn("NET_QUANTITY");
            objData.AddColumn("NET_AMOUNT");
            objData.AddColumn("DISC_AMOUNT");
            
            String str="SELECT SCH_SCHEME_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_TOTAL_NET_LIFT_QTY,SCH_TOTAL_INV_AMOUNT,SCH_DISC_PERCENT,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT FROM SALES.D_SAL_SCHEME_HEADER,SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID ="+schemeId+" AND SCH_ELIGIBILITY='Y' AND SCHEME_ID=SCH_SCHEME_ID AND SCHEME_SEASON_ID=SCH_SEASON_ID ORDER BY SCH_PARTY_CODE";
            
            ResultSet  rsTemp =data.getResult(str);
            int counter=1;
            while(!rsTemp.isAfterLast()){
                TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                
                objRow.setValue("SR_NO", Integer.toString(counter++));
                objRow.setValue("SEASON_ID",rsTemp.getString("SCH_SEASON_ID"));
                objRow.setValue("SCHEME_NAME",rsTemp.getString("SCHEME_NAME"));
                objRow.setValue("SCHEME_PERIOD","("+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_START"))+"-"+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_END"))+")");
                objRow.setValue("PARTY_CODE", rsTemp.getString("SCH_PARTY_CODE"));
                objRow.setValue("PARTY_NAME", rsTemp.getString("SCH_PARTY_NAME"));
                objRow.setValue("STATION", rsTemp.getString("SCH_CITY"));
                objRow.setValue("DISC_PERCENT", rsTemp.getString("SCH_DISC_PERCENT"));
                objRow.setValue("NET_QUANTITY", rsTemp.getString("SCH_TOTAL_NET_LIFT_QTY"));
                objRow.setValue("NET_AMOUNT", rsTemp.getString("SCH_TOTAL_INV_AMOUNT"));
                objRow.setValue("DISC_AMOUNT", rsTemp.getString("SCH_DISC_AMOUNT"));
                
                // setting target data
                ResultSet rsTmp=data.getResult("SELECT SLAB_FROM,SLAB_TO FROM SALES.D_SAL_SCHEME_SLAB WHERE SLAB_SCHEME_ID="+schemeId+" AND SR_NO=1 AND SLAB_PARTY_CODE='"+rsTemp.getString("SCH_PARTY_CODE")+"'");
                objRow.setValue("TARGET1", rsTmp.getString("SLAB_FROM"));
                objRow.setValue("TARGET2", rsTmp.getString("SLAB_TO"));
                rsTmp.close();
                
                objData.AddRow(objRow);
                rsTemp.next();
            }
            
            HashMap parameter=new HashMap();
            parameter.put("RUN_BY", clsUser.getUserName(2,EITLERPGLOBAL.gNewUserID));
            parameter.put("RUN_TIME", data.getStringValueFromDB("SELECT CURTIME() FROM DUAL").substring(0,5));
            
            EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/rptASRSummaryReport.rpt",parameter,objData);
            rsTemp.close();
            
            return true;
        }catch(SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
    
    private boolean printASRCreditNoteInputReport(int schemeId){
        try{
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            
            objData.AddColumn("SEASON_ID");
            objData.AddColumn("SCHEME_NAME");
            objData.AddColumn("SCHEME_PERIOD");
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("STATION");
            objData.AddColumn("BOOK_CODE");
            objData.AddColumn("MAIN_CODE");
            objData.AddColumn("DRAFT_CREDIT_NOTE_NO");
            objData.AddColumn("DRAFT_CREDIT_NOTE_DATE");
            objData.AddColumn("REASON_CODE");
            objData.AddColumn("LINK_NO");
            objData.AddColumn("NET_AMOUNT");
            objData.AddColumn("GROSS_QUANTITY");
            
            String str ="SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_NAME,SCH_CITY,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_BOOK_CODE,SCH_MAIN_CODE,SCH_DRAFT_CR_NOTE_NO,SCH_DRAFT_CR_NOTE_DATE,SCH_REASON_CODE,SCH_LINK_NO,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT, SCH_TOTAL_INV_AMOUNT FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCH_ELIGIBILITY='Y' ORDER BY SCH_PARTY_CODE";
            ResultSet  rsTemp =data.getResult(str);
            if(rsTemp.getRow()>0){
                while(!rsTemp.isAfterLast()){
                    
                    TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                    
                    objRow.setValue("SEASON_ID",rsTemp.getString("SCHEME_SEASON_ID"));
                    objRow.setValue("SCHEME_NAME",rsTemp.getString("SCHEME_NAME"));
                    objRow.setValue("SCHEME_PERIOD",EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_START"))+" TO "+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_END")));
                    objRow.setValue("PARTY_CODE", rsTemp.getString("SCH_PARTY_CODE"));
                    objRow.setValue("PARTY_NAME", rsTemp.getString("SCH_PARTY_NAME"));
                    objRow.setValue("STATION", rsTemp.getString("SCH_CITY"));
                    objRow.setValue("BOOK_CODE", rsTemp.getString("SCH_BOOK_CODE"));
                    objRow.setValue("MAIN_CODE", rsTemp.getString("SCH_MAIN_CODE"));
                    objRow.setValue("DRAFT_CREDIT_NOTE_NO", rsTemp.getString("SCH_DRAFT_CR_NOTE_NO"));
                    objRow.setValue("DRAFT_CREDIT_NOTE_DATE", EITLERPGLOBAL.formatDate(rsTemp.getString("SCH_DRAFT_CR_NOTE_DATE")));
                    objRow.setValue("REASON_CODE", rsTemp.getString("SCH_REASON_CODE"));
                    objRow.setValue("LINK_NO", rsTemp.getString("SCH_LINK_NO"));
                    objRow.setValue("NET_AMOUNT", rsTemp.getString("SCH_DISC_AMOUNT"));
                    objRow.setValue("TOTAL_INV_AMOUNT", rsTemp.getString("SCH_TOTAL_INV_AMOUNT"));
                    
                    // setting target data
                    ResultSet rsTmp=data.getResult("SELECT SLAB_FROM,SLAB_TO FROM SALES.D_SAL_SCHEME_SLAB WHERE SLAB_SCHEME_ID="+schemeId+" AND SR_NO=1 AND SLAB_PARTY_CODE='"+rsTemp.getString("SCH_PARTY_CODE")+"'");
                    objRow.setValue("TARGET1", rsTmp.getString("SLAB_FROM"));
                    objRow.setValue("TARGET2", rsTmp.getString("SLAB_TO"));
                    rsTmp.close();
                    
                    objData.AddRow(objRow);
                    rsTemp.next();
                }
                
                EITLERPGLOBAL.PAGE_BREAK=true;
                new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/rptASRCreditNoteInput.rpt",new HashMap(),objData);
                rsTemp.close();
                
                return true;
            }else return false;
        }catch(SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
    
    private boolean processARCreditNoteInput(int schemeId, String seasonId){
        try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            
            String bookCode="TR-15";
            String mainCode="435187";
            String draftNo="ASR-13 - ";
            String draftDate="2014-02-28";
            String linkNo=" /"+Integer.toString(EITLERPGLOBAL.FinYearFrom)+"-"+Integer.toString(EITLERPGLOBAL.FinYearTo);
            int draftSrNo=1;
            int linkSrNo=7101;
            int reasonCode=36;
            int counter=0;
            
            ResultSet rsSchemeHeader=stmt.executeQuery("SELECT SCH_PARTY_CODE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SEASON_ID='"+seasonId+"' AND SCH_ELIGIBILITY='Y' ORDER BY SCH_PARTY_CODE");
            rsSchemeHeader.first();
            if(rsSchemeHeader.getRow()>0){
                while(!rsSchemeHeader.isAfterLast()){
                    stmt.executeUpdate("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_BOOK_CODE='"+bookCode+"',SCH_MAIN_CODE='"+mainCode+"',SCH_DRAFT_CR_NOTE_NO='"+draftNo+(draftSrNo+counter)+"',SCH_DRAFT_CR_NOTE_DATE='"+draftDate+"',SCH_REASON_CODE="+reasonCode+",SCH_LINK_NO='"+(linkSrNo+counter)+linkNo+"' WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SCH_PARTY_CODE='"+rsSchemeHeader.getString("SCH_PARTY_CODE")+"'");
                    rsSchemeHeader.next();
                    counter++;
                }
            }
            printReport=true;
            return true;
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
    }
    
    
     private boolean processBONANZAScheme(int schemeId){
        try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            ResultSet rsScheme=stmt.executeQuery("SELECT SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+schemeId);
            rsScheme.first();
            String seasonId=rsScheme.getString("SCHEME_SEASON_ID");
            
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeDetailQry="INSERT INTO SALES.D_SAL_SCHEME_DETAIL (SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_FLAG,SCD_UNIT_CODE,SCD_GROSS_QTY,SCD_GROSS_AMOUNT,SCD_NET_QTY,SCD_NET_AMOUNT,SCD_AGENT_LAST_INVOICE,SCD_AGENT_SR_NO,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_INV_RATE,SCD_PL_RATE,SCD_QUALITY_ELIGIBLE,SCD_DISC_PER_MTR_RATE,SCD_DISC_PERCENT,SCD_DISC_AMOUNT,SCD_GATE_PASS_NO,SCD_GATEPASS_DATE,SCD_BALE_NO) SELECT SCHEME_ID,I.SEASON_ID,PARTY_CODE,QUALITY_NO,SHADE ,PIECE_NO,FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,NET_AMOUNT,AGENT_LAST_INVOICE,AGENT_SR_NO,INVOICE_NO,INVOICE_DATE,RATE,0,'',0,0,0,GATEPASS_NO,GATEPASS_DATE,BALE_NO FROM  (SELECT QUALITY_ID,SEASON_ID FROM DINESHMILLS.D_SAL_QUALITY_MASTER WHERE SEASON_ID='"+seasonId+"'  AND SCHEME='BONANZA') Q " +
            "INNER JOIN (SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO/10 QUALITY_NO,B.PATTERN_CODE AS SHADE,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO FROM DINESHMILLS.D_SAL_INVOICE_HEADER A,DINESHMILLS.D_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D, SALES.D_SAL_SCHEME_MASTER E WHERE A.INVOICE_TYPE =1 AND A.INVOICE_DATE=B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 " +
            "AND A.APPROVED =1 AND A.INVOICE_DATE >= DATE_FROM AND A.INVOICE_DATE <= DATE_TO AND A.WAREHOUSE_CODE =1 AND A.QUALITY_INDICATOR IN (0,3) AND  SCHEME_SEASON_ID = SEASON_ID " +
            "AND SCHEME_ID ='"+schemeId+"' AND SEASON_ID='"+seasonId+"' AND A.PARTY_CODE IN (SELECT DISTINCT SLAB_PARTY_CODE FROM SALES.D_SAL_SCHEME_SLAB WHERE SLAB_SCHEME_ID ='"+schemeId+"' AND SLAB_SEASON_ID ='"+seasonId+"')  AND A.INVOICE_DATE >= SCHEME_START AND A.INVOICE_DATE <= SCHEME_END ) I ON SUBSTRING(QUALITY_ID,2,5)=SUBSTRING(QUALITY_NO,2,5) AND Q.SEASON_ID=I.SEASON_ID LIMIT 1000000";
         
            stmt.execute(schemeDetailQry);
            
            
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL,SALES.D_SAL_SCHEME_SLAB SET SCD_DISC_PERCENT = SLAB_OUTPUT,SCD_DISC_AMOUNT  = (SLAB_OUTPUT * SCD_NET_AMOUNT)/100 WHERE SCD_PARTY_CODE = SLAB_PARTY_CODE AND SCD_INVOICE_DATE >= SLAB_FROM_DATE AND  SCD_INVOICE_DATE <= SLAB_TO_DATE AND SCD_SCHEME_ID = SLAB_SCHEME_ID AND SLAB_SCHEME_ID = '"+schemeId+"'  AND SLAB_SR_NO IN (1,2) ");
            
                       
            
            
            stmt.execute(" UPDATE SALES.D_SAL_SCHEME_DETAIL,DINESHMILLS.D_SAL_PRICE_LIST_DETAIL SET SCD_PL_RATE=EX_MILL_RATE WHERE SUBSTRING(SCD_QUALITY_ID,2,5)=SUBSTRING(QUALITY_ID,2,5) AND SCD_SEASON_ID=SUBSTRING(PRICE_LIST_NO,3,5)  AND SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID ='"+schemeId+"'");
            
            
            //System.out.println("UPDATE SALES.D_SAL_SCHEME_DETAIL LEFT JOIN (SELECT SEASON_ID,DATE_FROM,DATE_TO FROM DINESHMILLS.D_SAL_SEASON_MASTER WHERE SEASON_ID ='"+seasonId+"') S ON SCD_SEASON_ID=SEASON_ID LEFT JOIN (SELECT SUBSTRING(PR.PRICE_LIST_NO,3,5) SEAS_ID,QUALITY_ID,PR.EX_MILL_RATE,PR.EFFECTIVE_DATE FROM DINESHMILLS.D_SAL_PRICE_LIST_DETAIL PD, DINESHMILLS.D_SAL_PRICE_LIST_RATE PR  WHERE PD.PRICE_LIST_NO=PR.PRICE_LIST_NO AND PD.SR_NO=PRICE_LIST_SR_NO AND SUBSTRING(PR.PRICE_LIST_NO,3,3) ='"+seasonId+"' AND QUALITY_ID NOT LIKE '72%') PL ON SUBSTRING(SCD_QUALITY_ID,2,5)=SUBSTRING(QUALITY_ID,2,5) AND SEASON_ID=SEAS_ID AND EX_MILL_RATE=SCD_INV_RATE AND SCD_INVOICE_DATE>=EFFECTIVE_DATE SET SCD_PL_RATE=CASE WHEN SCD_INV_RATE=EX_MILL_RATE THEN EX_MILL_RATE ELSE 0 END WHERE SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID=''"+schemeId+"'' AND SCD_INVOICE_DATE>=DATE_FROM AND SCD_INVOICE_DATE<=DATE_TO");
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL LEFT JOIN (SELECT SEASON_ID,DATE_FROM,DATE_TO FROM DINESHMILLS.D_SAL_SEASON_MASTER WHERE SEASON_ID ='"+seasonId+"') S ON SCD_SEASON_ID=SEASON_ID LEFT JOIN (SELECT SUBSTRING(PR.PRICE_LIST_NO,3,5) SEAS_ID,QUALITY_ID,PR.EX_MILL_RATE,PR.EFFECTIVE_DATE FROM DINESHMILLS.D_SAL_PRICE_LIST_DETAIL PD, DINESHMILLS.D_SAL_PRICE_LIST_RATE PR  WHERE PD.PRICE_LIST_NO=PR.PRICE_LIST_NO AND PD.SR_NO=PRICE_LIST_SR_NO AND SUBSTRING(PR.PRICE_LIST_NO,3,3) ='"+seasonId+"' AND QUALITY_ID NOT LIKE '72%') PL ON SUBSTRING(SCD_QUALITY_ID,2,5)=SUBSTRING(QUALITY_ID,2,5) AND SEASON_ID=SEAS_ID AND EX_MILL_RATE=SCD_INV_RATE AND SCD_INVOICE_DATE>=EFFECTIVE_DATE SET SCD_PL_RATE=CASE WHEN SCD_INV_RATE=EX_MILL_RATE THEN EX_MILL_RATE ELSE 0 END WHERE SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID='"+schemeId+"' AND SCD_INVOICE_DATE>=DATE_FROM AND SCD_INVOICE_DATE<=DATE_TO");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_QUALITY_ELIGIBLE=CASE WHEN SCD_INV_RATE-SCD_PL_RATE=0 THEN 'Y' ELSE 'N' END WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID='"+schemeId+"'");
            
            System.out.println("INSERT INTO SALES.D_SAL_SCHEME_HEADER SELECT SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,'','','','','','','0000-00-00','','',SUM(SCD_GROSS_QTY),SUM(SCD_NET_QTY),0,0,0,0,ROUND(SUM(SCD_NET_AMOUNT),2),ROUND(SUM(COALESCE(CASE WHEN SLAB_SR_NO IN (1,2) THEN SCD_NET_AMOUNT END)),2),ROUND(SUM(COALESCE(CASE WHEN SLAB_SR_NO IN (3) THEN SCD_NET_AMOUNT END)),2),0,0,0,ROUND(AVG(COALESCE(CASE WHEN SLAB_SR_NO IN (3) THEN SLAB_FROM END)),0),0,0,ROUND(SUM(COALESCE(CASE WHEN SLAB_SR_NO IN (1,2) THEN SCD_DISC_AMOUNT END)),2),ROUND(SUM(COALESCE(CASE WHEN SLAB_SR_NO IN (3) THEN SCD_DISC_AMOUNT END)),2),0,'N',1,NOW(),0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',1,NOW() FROM SALES.D_SAL_SCHEME_DETAIL,SALES.D_SAL_SCHEME_SLAB WHERE SCD_PARTY_CODE = SLAB_PARTY_CODE AND SCD_INVOICE_DATE >= SLAB_FROM_DATE AND  SCD_INVOICE_DATE <= SLAB_TO_DATE AND SCD_SCHEME_ID = SLAB_SCHEME_ID AND SLAB_SCHEME_ID = '"+schemeId+"' AND SCD_QUALITY_ELIGIBLE ='Y' GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE");
            stmt.execute("INSERT INTO SALES.D_SAL_SCHEME_HEADER SELECT SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,'','','','','','','0000-00-00','','',SUM(SCD_GROSS_QTY),SUM(SCD_NET_QTY),0,0,0,0,ROUND(SUM(SCD_NET_AMOUNT),2),ROUND(SUM(COALESCE(CASE WHEN SLAB_SR_NO IN (1,2) THEN SCD_NET_AMOUNT END)),2),ROUND(SUM(COALESCE(CASE WHEN SLAB_SR_NO IN (3) THEN SCD_NET_AMOUNT END)),2),0,0,0,ROUND(AVG(COALESCE(CASE WHEN SLAB_SR_NO IN (3) THEN SLAB_FROM END)),0),0,0,ROUND(SUM(COALESCE(CASE WHEN SLAB_SR_NO IN (1,2) THEN SCD_DISC_AMOUNT END)),2),ROUND(SUM(COALESCE(CASE WHEN SLAB_SR_NO IN (3) THEN SCD_DISC_AMOUNT END)),2),0,'N',1,NOW(),0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00','','',1,NOW() FROM SALES.D_SAL_SCHEME_DETAIL,SALES.D_SAL_SCHEME_SLAB WHERE SCD_PARTY_CODE = SLAB_PARTY_CODE AND SCD_INVOICE_DATE >= SLAB_FROM_DATE AND  SCD_INVOICE_DATE <= SLAB_TO_DATE AND SCD_SCHEME_ID = SLAB_SCHEME_ID AND SLAB_SCHEME_ID = '"+schemeId+"' AND SCD_QUALITY_ELIGIBLE ='Y' GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,DINESHMILLS.D_SAL_PARTY_MASTER SET SCH_PARTY_NAME=PARTY_NAME,SCH_CITY=CITY_ID,SCH_CHARGE_CODE=CHARGE_CODE ,SCH_TOTAL_FINV_AMOUNT = COALESCE(SCH_TOTAL_FINV_AMOUNT ,0),SCH_TOTAL_SINV_AMOUNT = COALESCE(SCH_TOTAL_SINV_AMOUNT ,0),SCH_FDISC_AMOUNT = COALESCE(SCH_FDISC_AMOUNT ,0),SCH_SDISC_AMOUNT = COALESCE(SCH_SDISC_AMOUNT ,0) WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID='"+schemeId+"'");
            
            stmt.execute("UPDATE  SALES.D_SAL_SCHEME_HEADER SET SCH_ELIGIBILITY  ='Y'  WHERE SCH_TARGET_AMOUNT <= SCH_TOTAL_FINV_AMOUNT AND SCH_SCHEME_ID = '"+schemeId+"'");
         
            
            
            stmt.execute("UPDATE  SALES.D_SAL_SCHEME_HEADER,SALES.D_SAL_SCHEME_DETAIL,SALES.D_SAL_SCHEME_SLAB   SET  SCD_DISC_PERCENT = SLAB_OUTPUT,SCD_DISC_AMOUNT  = (SLAB_OUTPUT * SCD_NET_AMOUNT)/100 WHERE SCH_SCHEME_ID = SCD_SCHEME_ID AND SLAB_SCHEME_ID = SCD_SCHEME_ID AND SCH_PARTY_CODE = SCD_PARTY_CODE AND SCD_SCHEME_ID = '"+schemeId+"' AND SLAB_PARTY_CODE = SCH_PARTY_CODE AND SCH_ELIGIBILITY ='Y' AND SLAB_SR_NO =3 AND SCD_INVOICE_DATE >= SLAB_FROM_DATE AND  SCD_INVOICE_DATE <= SLAB_TO_DATE");
           
            stmt.execute("UPDATE  SALES.D_SAL_SCHEME_HEADER,(SELECT SCH_SCHEME_ID SCH,SCH_PARTY_CODE PC,SUM(SCD_DISC_AMOUNT)  SD FROM  SALES.D_SAL_SCHEME_HEADER,SALES.D_SAL_SCHEME_DETAIL,SALES.D_SAL_SCHEME_SLAB WHERE SCH_SCHEME_ID = SCD_SCHEME_ID AND SLAB_SCHEME_ID = SCD_SCHEME_ID AND SCH_PARTY_CODE = SCD_PARTY_CODE AND SCD_SCHEME_ID = '"+schemeId+"' AND SLAB_PARTY_CODE = SCH_PARTY_CODE AND SCH_ELIGIBILITY ='Y' AND SLAB_SR_NO =3 AND SCD_INVOICE_DATE >= SLAB_FROM_DATE AND  SCD_INVOICE_DATE <= SLAB_TO_DATE GROUP BY SCH_PARTY_CODE) AS A SET SCH_SDISC_AMOUNT = SD WHERE SCH = SCH_SCHEME_ID AND PC = SCH_PARTY_CODE");
            
            stmt.execute("UPDATE  SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_AMOUNT  = SCH_FDISC_AMOUNT + SCH_SDISC_AMOUNT WHERE SCH_SCHEME_ID = '"+schemeId+"'");
           
             processBonanzaCreditNoteInput(schemeId, seasonId);
            //processKhakiCreditNote(schemeId, seasonId);
            
            printReport=true;
            return true;
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
    }
   
       private boolean printALLSummaryReport(int schemeId) {
        try{
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            
            objData.AddColumn("SEASON_ID");
            objData.AddColumn("SCHEME_NAME");
            objData.AddColumn("SCHEME_PERIOD");
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("STATION");
            objData.AddColumn("GROSS_QUANTITY");
            objData.AddColumn("NET_QUANTITY");
            objData.AddColumn("NET_AMOUNT");
            objData.AddColumn("DISC_AMOUNT");
            
            String str="SELECT SCH_SCHEME_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_TOTAL_GR_LIFT_QTY,SCH_TOTAL_NET_LIFT_QTY,SCH_TOTAL_INV_AMOUNT,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT FROM SALES.D_SAL_SCHEME_HEADER,SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID ="+schemeId+" AND SCHEME_ID=SCH_SCHEME_ID AND SCHEME_SEASON_ID=SCH_SEASON_ID ORDER BY SCH_PARTY_CODE";
            
            ResultSet  rsTemp =data.getResult(str);
            int counter=1;
            while(!rsTemp.isAfterLast()){
                TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                
                objRow.setValue("SR_NO", Integer.toString(counter++));
                objRow.setValue("SEASON_ID",rsTemp.getString("SCH_SEASON_ID"));
                objRow.setValue("SCHEME_NAME",rsTemp.getString("SCHEME_NAME"));
                objRow.setValue("SCHEME_PERIOD","("+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_START"))+"-"+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_END"))+")");
                objRow.setValue("PARTY_CODE", rsTemp.getString("SCH_PARTY_CODE"));
                objRow.setValue("PARTY_NAME", rsTemp.getString("SCH_PARTY_NAME"));
                objRow.setValue("STATION", rsTemp.getString("SCH_CITY"));
                objRow.setValue("GROSS_QUANTITY", rsTemp.getString("SCH_TOTAL_GR_LIFT_QTY"));
                objRow.setValue("NET_QUANTITY", rsTemp.getString("SCH_TOTAL_NET_LIFT_QTY"));
                objRow.setValue("NET_AMOUNT", rsTemp.getString("SCH_TOTAL_INV_AMOUNT"));
                objRow.setValue("DISC_AMOUNT", rsTemp.getString("SCH_DISC_AMOUNT"));
                
                objData.AddRow(objRow);
                rsTemp.next();
              }
            
            HashMap parameter=new HashMap();
            parameter.put("RUN_BY", clsUser.getUserName(2,EITLERPGLOBAL.gNewUserID));
            parameter.put("RUN_TIME", data.getStringValueFromDB("SELECT CURTIME() FROM DUAL").substring(1,6));
            
            EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/" +
            "" +
            "rptSummaryReport.rpt",parameter,objData);
            rsTemp.close();
            
            return true;
        }catch(SQLException e) {
            e.printStackTrace();
            return false;
        }
        
    }
       
       
       
       
         private boolean processDHANVARSHAScheme(int schemeId){
        try{
            String fSchemeFromDate="2016-06-22";
            String fSchemeToDate="2016-08-31";
            String sSchemeFromDate="2016-09-01";
            String sSchemeToDate="2016-12-31";
            
            
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            ResultSet rsScheme=stmt.executeQuery("SELECT SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+schemeId);
            rsScheme.first();
            String seasonId=rsScheme.getString("SCHEME_SEASON_ID");
            
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeDetailQry="INSERT INTO SALES.D_SAL_SCHEME_DETAIL(SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_FLAG,SCD_UNIT_CODE,SCD_GROSS_QTY,SCD_GROSS_AMOUNT,SCD_NET_QTY,SCD_NET_AMOUNT,SCD_AGENT_LAST_INVOICE,SCD_AGENT_SR_NO,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_INV_RATE,SCD_PL_RATE,SCD_QUALITY_ELIGIBLE,SCD_DISC_PER_MTR_RATE,SCD_DISC_PERCENT,SCD_DISC_AMOUNT,SCD_GATE_PASS_NO,SCD_GATEPASS_DATE,SCD_BALE_NO) " +
            "SELECT SCHEME_ID,I.SEASON_ID,PARTY_CODE,QUALITY_NO,SHADE ,PIECE_NO,FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,NET_AMOUNT,AGENT_LAST_INVOICE,AGENT_SR_NO,INVOICE_NO,INVOICE_DATE,RATE,0,'',0,0,0,GATEPASS_NO,GATEPASS_DATE,BALE_NO FROM  "+
            "(SELECT QUALITY_ID,SEASON_ID FROM D_SAL_QUALITY_MASTER WHERE SEASON_ID='"+seasonId+"' AND CATEGORY_LIST NOT IN ('EXPORT')) Q "+
            "INNER JOIN "+
            "(SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO/10 QUALITY_NO,B.PATTERN_CODE AS SHADE,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO FROM DINESHMILLS.D_SAL_INVOICE_HEADER A,DINESHMILLS.D_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D, SALES.D_SAL_SCHEME_MASTER E, D_SAL_PARTY_MASTER P WHERE A.INVOICE_TYPE =1 AND A.PARTY_CODE=P.PARTY_CODE AND A.PARTY_CODE IN (SELECT SLAB_PARTY_CODE FROM SALES.D_SAL_SCHEME_SLAB WHERE SLAB_SCHEME_ID ="+schemeId+" AND SLAB_SEASON_ID='"+seasonId+"' ) AND A.WAREHOUSE_CODE =1 AND A.QUALITY_INDICATOR IN (0,3) AND A.INVOICE_DATE=B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE >= DATE_FROM  AND A.INVOICE_DATE <= DATE_TO AND SCHEME_SEASON_ID = SEASON_ID AND SCHEME_ID ="+schemeId+" AND SEASON_ID='"+seasonId+"') I ON SUBSTRING(QUALITY_ID,2,5)=SUBSTRING(QUALITY_NO,2,5) AND Q.SEASON_ID=I.SEASON_ID ";
            
               stmt.execute(schemeDetailQry);
               
            
        //    stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_PARTY_CODE =159991 WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_PARTY_CODE = '739901' AND SCD_SCHEME_ID="+schemeId);
           
           
            
      //      stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_PARTY_CODE =300170 AND SCD_SCHEME_ID = 43 AND SCD_INVOICE_DATE >='2016-05-20'");
            
            
        //    stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_PARTY_CODE =300170 AND SCD_SCHEME_ID = 20 AND SCD_INVOICE_DATE ='2015-02-27' AND SCD_INVOICE_NO >=7"+schemeId+"9");
            
        //   stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_PARTY_CODE =300170 AND SCD_SCHEME_ID = 43 AND SCD_INVOICE_DATE ='2016-05-19' AND SCD_INVOICE_NO =602  AND SCD_PIECE_NO IN ('13798/04','28117W03')");
            
            
         //   stmt.execute("INSERT INTO SALES.D_SAL_SCHEME_DETAIL SELECT  43,'S16',300170,519395,17,'13798/04','','01',1.05,509.25,1.05,509.25,'RB',198,000602,'2016-05-19',485.00,485.00,'Y',0.00,0,0,000689,'2016-05-19',000838");
            
        
            
            
            //stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL,DINESHMILLS.D_SAL_PRICE_LIST_DETAIL SET SCD_PL_RATE=EX_MILL_RATE WHERE SUBSTRING(SCD_QUALITY_ID,2,5)=SUBSTRING(QUALITY_ID,2,5) AND SCD_SEASON_ID=SUBSTRING(PRICE_LIST_NO,3,5) AND SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID ="+schemeId);
            
             stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL LEFT JOIN (SELECT SEASON_ID,DATE_FROM,DATE_TO FROM DINESHMILLS.D_SAL_SEASON_MASTER WHERE SEASON_ID ='"+seasonId+"') S ON SCD_SEASON_ID=SEASON_ID LEFT JOIN (SELECT SUBSTRING(PR.PRICE_LIST_NO,3,5) SEAS_ID,QUALITY_ID,PR.EX_MILL_RATE,PR.EFFECTIVE_DATE FROM DINESHMILLS.D_SAL_PRICE_LIST_DETAIL PD, DINESHMILLS.D_SAL_PRICE_LIST_RATE PR WHERE PD.PRICE_LIST_NO=PR.PRICE_LIST_NO AND PD.SR_NO=PRICE_LIST_SR_NO AND SUBSTRING(PR.PRICE_LIST_NO,3,3) ='"+seasonId+"' AND QUALITY_ID NOT LIKE '72%') PL ON SUBSTRING(SCD_QUALITY_ID,2,5)=SUBSTRING(QUALITY_ID,2,5) AND SEASON_ID=SEAS_ID AND EX_MILL_RATE=SCD_INV_RATE AND SCD_INVOICE_DATE>=EFFECTIVE_DATE SET SCD_PL_RATE=CASE WHEN SCD_INV_RATE=EX_MILL_RATE THEN EX_MILL_RATE ELSE 0 END WHERE SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId+" AND SCD_INVOICE_DATE>=DATE_FROM AND SCD_INVOICE_DATE<=DATE_TO");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_QUALITY_ELIGIBLE=CASE WHEN SCD_INV_RATE-SCD_PL_RATE=0 THEN 'Y' ELSE 'N' END WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
                        
            
            String schemeHeaderQry="INSERT INTO SALES.D_SAL_SCHEME_HEADER(SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_CHARGE_CODE,SCH_BOOK_CODE,SCH_MAIN_CODE,SCH_DRAFT_CR_NOTE_NO,SCH_DRAFT_CR_NOTE_DATE,SCH_REASON_CODE,SCH_LINK_NO,SCH_TOTAL_GR_LIFT_QTY,SCH_TOTAL_NET_LIFT_QTY,SCH_TOTAL_FGR_LIFT_QTY,SCH_TOTAL_SGR_LIFT_QTY,SCH_TOTAL_FNET_LIFT_QTY,SCH_TOTAL_SNET_LIFT_QTY,SCH_TOTAL_INV_AMOUNT,SCH_TOTAL_FINV_AMOUNT,SCH_TOTAL_SINV_AMOUNT,SCH_DISC_RATE,SCH_DISC_PERCENT,SCH_DISC_AMOUNT,SCH_FDISC_PERCENT,SCH_SDISC_PERCENT,SCH_FDISC_AMOUNT,SCH_SDISC_AMOUNT,SCH_TOTAL_AMOUNT,SCH_ELIGIBILITY,SCH_CREATED_BY,SCH_CREATED_DATE,SCH_MODIFIED_BY,SCH_MODIFIED_DATE,SCH_APPROVED,SCH_APPROVED_DATE,SCH_CANCELLED,SCH_CANCELLED_DATE,SCH_REJECTED,SCH_REJECTED_DATE,SCH_CHANGED,SCH_CHANGED_DATE) "+
            "SELECT SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,'','','','','','','0000-00-00','','',SUM(SCD_GROSS_QTY),SUM(SCD_NET_QTY),0,0,0,0,SUM(SCD_NET_AMOUNT),0,0,0,0,0,0,0,0,0,0,'N',1,NOW(),0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',1,NOW() "+
            "FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_QUALITY_ELIGIBLE ='Y' AND SCD_SCHEME_ID="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE ";
            
            stmt.execute(schemeHeaderQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,DINESHMILLS.D_SAL_PARTY_MASTER SET SCH_PARTY_NAME=PARTY_NAME,SCH_CITY=CITY_ID,SCH_CHARGE_CODE=CHARGE_CODE WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            String fSchemeQry="UPDATE SALES.D_SAL_SCHEME_HEADER H, "+
            "(SELECT  SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SUM(SCD_GROSS_QTY) GQ,SUM(SCD_NET_QTY) NQ,SUM(SCD_NET_AMOUNT) NA "+
            "FROM SALES.D_SAL_SCHEME_DETAIL  WHERE SCD_INVOICE_DATE >= '"+fSchemeFromDate+"' AND SCD_INVOICE_DATE<='"+fSchemeToDate+"' AND SCD_SEASON_ID='"+seasonId+"' AND SCD_QUALITY_ELIGIBLE ='Y' AND SCD_SCHEME_ID="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE) D "+
            "SET SCH_TOTAL_FGR_LIFT_QTY=GQ,SCH_TOTAL_FNET_LIFT_QTY=NQ,SCH_TOTAL_FINV_AMOUNT=NA WHERE SCH_SCHEME_ID=SCD_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE";
            
            stmt.execute(fSchemeQry);
            
            String sSchemeQry="UPDATE SALES.D_SAL_SCHEME_HEADER H, "+
            "(SELECT  SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SUM(SCD_GROSS_QTY) GQ,SUM(SCD_NET_QTY) NQ,SUM(SCD_NET_AMOUNT) NA "+
            "FROM SALES.D_SAL_SCHEME_DETAIL  WHERE SCD_INVOICE_DATE >= '"+sSchemeFromDate+"' AND SCD_INVOICE_DATE<='"+sSchemeToDate+"' AND SCD_SEASON_ID='"+seasonId+"' AND SCD_QUALITY_ELIGIBLE ='Y' AND SCD_SCHEME_ID="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE) D "+
            "SET SCH_TOTAL_SGR_LIFT_QTY=GQ,SCH_TOTAL_SNET_LIFT_QTY=NQ,SCH_TOTAL_SINV_AMOUNT=NA WHERE SCH_SCHEME_ID=SCD_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE";
            
            stmt.execute(sSchemeQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_SLAB,SALES.D_SAL_SCHEME_HEADER SET SCH_FDISC_PERCENT=SLAB_OUTPUT,SCH_FDISC_AMOUNT=SCH_TOTAL_FINV_AMOUNT*SLAB_OUTPUT/100 WHERE SLAB_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SLAB_SEASON_ID=SCH_SEASON_ID AND SCH_SCHEME_ID=SLAB_SCHEME_ID AND SCH_TOTAL_GR_LIFT_QTY >=SLAB_FROM AND SCH_TOTAL_GR_LIFT_QTY<=SLAB_TO AND SLAB_PARTY_CODE=SCH_PARTY_CODE AND SR_NO=1");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_SLAB,SALES.D_SAL_SCHEME_HEADER SET SCH_SDISC_PERCENT=SLAB_OUTPUT,SCH_SDISC_AMOUNT=SCH_TOTAL_SINV_AMOUNT*SLAB_OUTPUT/100 WHERE SLAB_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SLAB_SEASON_ID=SCH_SEASON_ID AND SCH_SCHEME_ID=SLAB_SCHEME_ID AND SCH_TOTAL_GR_LIFT_QTY >=SLAB_FROM AND SCH_TOTAL_GR_LIFT_QTY<=SLAB_TO AND SLAB_PARTY_CODE=SCH_PARTY_CODE AND SR_NO=2");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_SLAB,SALES.D_SAL_SCHEME_HEADER SET SCH_TARGET_AMOUNT=SLAB_FROM WHERE SLAB_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SLAB_SEASON_ID=SCH_SEASON_ID AND SCH_SCHEME_ID=SLAB_SCHEME_ID AND SLAB_PARTY_CODE=SCH_PARTY_CODE AND SLAB_SR_NO=2 AND SR_NO=1");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_SLAB,SALES.D_SAL_SCHEME_HEADER SET SCH_TARGET_AMOUNT=SLAB_FROM WHERE SLAB_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SLAB_SEASON_ID=SCH_SEASON_ID AND SCH_SCHEME_ID=SLAB_SCHEME_ID AND SLAB_PARTY_CODE=SCH_PARTY_CODE AND SLAB_SR_NO=2 AND SR_NO=2");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_AMOUNT=SCH_FDISC_AMOUNT+SCH_SDISC_AMOUNT WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
     
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_AMOUNT=SCH_FDISC_AMOUNT+SCH_SDISC_AMOUNT WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
  
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_ELIGIBILITY=CASE WHEN SCH_DISC_AMOUNT !=0 THEN 'Y' ELSE 'N' END WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
           
          //  stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_ELIGIBILITY= 'Y' WHERE SCH_PARTY_CODE =300170 AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
   
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PERCENT=SCH_FDISC_PERCENT,SCD_DISC_AMOUNT=SCD_NET_AMOUNT*SCH_FDISC_PERCENT/100 WHERE SCD_SCHEME_ID=SCH_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SCD_INVOICE_DATE >= '"+fSchemeFromDate+"' AND SCD_INVOICE_DATE <= '"+fSchemeToDate+"' AND SCD_QUALITY_ELIGIBLE='Y'");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PERCENT=SCH_SDISC_PERCENT,SCD_DISC_AMOUNT=SCD_NET_AMOUNT*SCH_SDISC_PERCENT/100 WHERE SCD_SCHEME_ID=SCH_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SCD_INVOICE_DATE >= '"+sSchemeFromDate+"' AND SCD_INVOICE_DATE <= '"+sSchemeToDate+"' AND SCD_QUALITY_ELIGIBLE='Y'");
            
//            setData(schemeId, seasonId);
//            processCreditNoteInput(schemeId, seasonId);
//            
            printReport=true;
            return true;
            
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
        
    }
         
         private boolean processCreditNoteInputPara(int schemeId, String seasonId){
        
        try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            
            String bookCode=txtBookCode.getText();
            String mainCode=txtMainCode.getText();
            String draftNo=txtDraftNo.getText();
            String draftDate=txtDraftDate.getText();
            int draftSrNo=Integer.parseInt(txtDraftSrNo.getText());
            int linkSrNo=Integer.parseInt(txtLinkSrNo.getText());
            int reasonCode=Integer.parseInt(txtReasonCode.getText());
            String linkNo=" /"+Integer.toString(EITLERPGLOBAL.FinYearFrom)+"-"+Integer.toString(EITLERPGLOBAL.FinYearTo);
         
            int counter=0;
            
            ResultSet rsSchemeHeader=stmt.executeQuery("SELECT SCH_PARTY_CODE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SEASON_ID='"+seasonId+"' AND SCH_ELIGIBILITY='Y' ORDER BY SCH_PARTY_CODE");
          //  ResultSet rsSchemeHeader=stmt.executeQuery("SELECT SCH_PARTY_CODE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SEASON_ID='"+seasonId+"' ORDER BY SCH_PARTY_CODE");
            rsSchemeHeader.first();
            if(rsSchemeHeader.getRow()>0){
                while(!rsSchemeHeader.isAfterLast()){
                    stmt.executeUpdate("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_LEGACY_NO='"+(draftSrNo+counter+100000)+"' WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SCH_PARTY_CODE='"+rsSchemeHeader.getString("SCH_PARTY_CODE")+"'");
                    stmt.executeUpdate("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_LEGACY_NO=SUBSTRING(SCH_LEGACY_NO,2,5) WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SCH_PARTY_CODE='"+rsSchemeHeader.getString("SCH_PARTY_CODE")+"'");
                    stmt.executeUpdate("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_VOUCHER_NO=CONCAT('CN1815',SCH_LEGACY_NO),SCH_BOOK_CODE='"+bookCode+"',SCH_MAIN_CODE='"+mainCode+"',SCH_DRAFT_CR_NOTE_NO='"+draftNo+(draftSrNo+counter)+"',SCH_DRAFT_CR_NOTE_DATE='"+draftDate+"',SCH_REASON_CODE="+reasonCode+",SCH_LINK_NO='"+(linkSrNo+counter)+linkNo+"' WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SCH_PARTY_CODE='"+rsSchemeHeader.getString("SCH_PARTY_CODE")+"'"); 
                    //stmt.executeUpdate("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_LEGACY_NO=(SUBSTRING(SCH_LEGACY_NO,2,5)*1) WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SCH_PARTY_CODE='"+rsSchemeHeader.getString("SCH_PARTY_CODE")+"'");
                    rsSchemeHeader.next();
                    counter++;
                }
            }
            
            printReport=true;
            return true;
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
    }
         
         private void setData(int schemeId, String seasonId){
             String schemeName=EITLERPGLOBAL.getCombostrCode(cmbSchemeName);
             //String schemeName="ADVANCE BOOKING DISCOUNT (ABD) WINTER  2015";
             //ALLRETAILER'S SCHEME WINTER 2015
             //SPL REBATE SCHEME (LIST A) WINTER 2015
             //SPECIAL QUALITY LIST (SQL) WINTER 2015
             if(schemeName.contains("Select")){
                 txtBookCode.setText("");
                 txtMainCode.setText("");
                 txtDraftNo.setText("");
                 txtDraftDate.setText("");
                 txtLinkSrNo.setText("");
                 txtDraftSrNo.setText("");
                 txtReasonCode.setText("");
                 
             }else {
                 
                 String draftNo="";
                 int linkSrNo=0;
                 
                 String bookCode="TR-15";
                 txtBookCode.setText(bookCode);
                 
                 String mainCode="435187";
                 txtMainCode.setText(mainCode);
                 
                 String draftDate="2018-10-01";
                 txtDraftDate.setText(draftDate);
                 
                 //             String linkNo=" /"+Integer.toString(EITLERPGLOBAL.FinYearFrom)+"-"+Integer.toString(EITLERPGLOBAL.FinYearTo);
                 //             txtLinkNo.setText(linkNo);
                 
                 int reasonCode=36;
                 txtReasonCode.setText(String.valueOf(reasonCode));
                 
                 if(schemeName.contains("ALLRETAILER'S")){
                     draftNo="RET."+seasonId+" - ";
                     linkSrNo=7653;
                 }
                 if(schemeName.contains("JSBK")){
                     draftNo="RET."+seasonId+" - ";
                     linkSrNo=7651;
                 }
                 if(schemeName.contains("NORTH")){
                     draftNo="RET."+seasonId+" - ";
                     linkSrNo=8501;
                 }
                 //  String draftNo="SP.RET."+seasonId+" - ";
                 if(schemeName.contains("SQL")){
                     draftNo="SSQL."+seasonId+" - ";
                     linkSrNo=7051;
                 }
                 if(schemeName.contains("SPL")){
                     draftNo="SPL."+seasonId+" - ";
                     linkSrNo=7251;
                 }
                 
                 //   String draftNo="BONZ. "+seasonId+" - ";
                 if(schemeName.contains("ABD")){
                     draftNo="ABD."+seasonId+" - ";
                     linkSrNo=7001;
                 }
                 
                 txtDraftNo.setText(draftNo);
                 txtLinkSrNo.setText(String.valueOf(linkSrNo));
                 
                 String draftSrNo=data.getStringValueFromDB("SELECT SUBSTRING(MAX(VOUCHER_NO),7,5)+100001 FROM FINANCE.D_FIN_VOUCHER_HEADER WHERE BOOK_CODE =15 AND SUBSTRING(VOUCHER_NO,1,6) = 'CN1815'");
                 txtDraftSrNo.setText(draftSrNo.substring(2));
             }
         }
         
         private void enabled(){
             jLabel1.setVisible(true);
             jLabel2.setVisible(true);
             jLabel3.setVisible(true);
             jLabel4.setVisible(true);
             jLabel5.setVisible(true);
             jLabel6.setVisible(true);
             jLabel7.setVisible(true);
             //jLabel8.setVisible(true);
             txtBookCode.setVisible(true);
             txtMainCode.setVisible(true);
             txtDraftNo.setVisible(true);
             txtDraftDate.setVisible(true);
             txtLinkSrNo.setVisible(true);
             txtDraftSrNo.setVisible(true);
             txtReasonCode.setVisible(true);
             btnData.setVisible(true);
         } 
         
         private void disabled(){
             jLabel1.setVisible(false);
             jLabel2.setVisible(false);
             jLabel3.setVisible(false);
             jLabel4.setVisible(false);
             jLabel5.setVisible(false);
             jLabel6.setVisible(false);
             jLabel7.setVisible(false);
            // jLabel8.setVisible(false);
             txtBookCode.setVisible(false);
             txtMainCode.setVisible(false);
             txtDraftNo.setVisible(false);
             txtDraftDate.setVisible(false);
             txtLinkSrNo.setVisible(false);
             txtDraftSrNo.setVisible(false);
             txtReasonCode.setVisible(false);
             btnData.setVisible(false);
         } 
         
         private void setField() {
             int schemeId=EITLERPGLOBAL.getComboCode(cmbSchemeName);
             
             try{
                 Connection conn=data.getConn();
                 Statement stmt=conn.createStatement();
                 ResultSet rsScheme=stmt.executeQuery("SELECT SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+schemeId);
                 rsScheme.first();
                 String seasonId=rsScheme.getString("SCHEME_SEASON_ID");
                 
                 setData(schemeId, seasonId);
                 
             }catch(Exception e){}
         }
             
 
}