/*
 * frmSuitingsComboPackets.java
 *
 * Created on March 1, 2013, 2:16 PM
 */

package EITLERP.Suitings;

import java.util.ArrayList;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.io.File;
import java.io.IOException;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableModel;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

import jxl.Cell;
import jxl.CellType;
import jxl.Sheet;
import jxl.Workbook;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.CellView;
import jxl.write.Label;
import jxl.read.biff.BiffException;

import EITLERP.data;
import EITLERP.EITLTableModel;
import EITLERP.AppletFrame;
/**
 * @author  Vivek Kumar
 */
/*<APPLET CODE="frmSuitingsComboPackets.class" width=985 height=685></APPLET> */

public class frmSuitingsComboPackets extends javax.swing.JApplet {
    
    Connection  connection;
    Statement statement;
    ResultSet resultSet;
    String query, brand;
    Integer qualityNo, shadeNo, noOfPieces, noOfPackets;
    
    /** Creates new form frmSuitingsComboPackets */
    public void init() {
        System.gc();
        setSize(982,690);
        initComponents();
        setLocation(0, 0);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLabelTitle = new javax.swing.JLabel();
        jScrollPane = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jLabelStatus = new javax.swing.JLabel();
        jPanel = new javax.swing.JPanel();
        jButtonShowComboData = new javax.swing.JButton();
        jButtonShowComboPacketsData = new javax.swing.JButton();
        jButtonUploadFile = new javax.swing.JButton();
        jButtonMakeComboPackets = new javax.swing.JButton();
        jButtonDeleteComboData = new javax.swing.JButton();
        jButtonExportComboToExcel = new javax.swing.JButton();
        jButtonMakeComboPacketsAlternateSelection = new javax.swing.JButton();
        jButtonExportComboPacketsToExcel = new javax.swing.JButton();
        jButtonDeleteComboPackets = new javax.swing.JButton();
        jButtonMakeComboPacketsSingleSelection = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableComboPackets = new javax.swing.JTable();
        jButtonShowComboPackets = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldNoOfPackets = new javax.swing.JTextField();
        jTextFieldNoOfDoublePackets = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        setName("");
        jLabelTitle.setBackground(new java.awt.Color(0, 102, 153));
        jLabelTitle.setForeground(java.awt.Color.white);
        jLabelTitle.setText(" SUITINGS COMBO PACKETS\t");
        jLabelTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabelTitle.setOpaque(true);
        getContentPane().add(jLabelTitle);
        jLabelTitle.setBounds(0, 0, 970, 30);

        jScrollPane.setPreferredSize(new java.awt.Dimension(460, 403));
        jScrollPane.setEnabled(false);
        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane.setViewportView(jTable);

        getContentPane().add(jScrollPane);
        jScrollPane.setBounds(10, 70, 950, 210);

        jLabelStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabelStatus.setForeground(new java.awt.Color(51, 51, 255));
        jLabelStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jLabelStatus);
        jLabelStatus.setBounds(3, 640, 964, 20);

        jPanel.setBackground(new java.awt.Color(153, 153, 153));
        jPanel.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jPanel);
        jPanel.setBounds(0, 280, 970, 8);

        jButtonShowComboData.setText("Show Combo Data");
        jButtonShowComboData.setToolTipText("Show Combo Data In Table");
        jButtonShowComboData.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButtonShowComboData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonShowComboDataActionPerformed(evt);
            }
        });

        getContentPane().add(jButtonShowComboData);
        jButtonShowComboData.setBounds(140, 40, 132, 25);

        jButtonShowComboPacketsData.setText("Show Combo Packets Data");
        jButtonShowComboPacketsData.setToolTipText("Show Combo Packet Data In Table");
        jButtonShowComboPacketsData.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonShowComboPacketsData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonShowComboPacketsDataActionPerformed(evt);
            }
        });

        getContentPane().add(jButtonShowComboPacketsData);
        jButtonShowComboPacketsData.setBounds(290, 40, 177, 25);

        jButtonUploadFile.setText("Upload Excel File");
        jButtonUploadFile.setToolTipText("Upload Excel File To Make COMBO PACKETS");
        jButtonUploadFile.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButtonUploadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUploadFileActionPerformed(evt);
            }
        });

        getContentPane().add(jButtonUploadFile);
        jButtonUploadFile.setBounds(10, 40, 121, 25);

        jButtonMakeComboPackets.setText("Make Combo Packets");
        jButtonMakeComboPackets.setToolTipText("Make COMBO PACKETS selecting 2 from maximum no of pieces");
        jButtonMakeComboPackets.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonMakeComboPackets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMakeComboPacketsActionPerformed(evt);
            }
        });

        getContentPane().add(jButtonMakeComboPackets);
        jButtonMakeComboPackets.setBounds(180, 290, 143, 25);

        jButtonDeleteComboData.setText("Delete Combo Data");
        jButtonDeleteComboData.setToolTipText("Delete Combo Data in Table ");
        jButtonDeleteComboData.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButtonDeleteComboData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteComboDataActionPerformed(evt);
            }
        });

        getContentPane().add(jButtonDeleteComboData);
        jButtonDeleteComboData.setBounds(620, 40, 138, 25);

        jButtonExportComboToExcel.setText("Export To Excel");
        jButtonExportComboToExcel.setToolTipText("Export Data in Below Table To  Excel File");
        jButtonExportComboToExcel.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButtonExportComboToExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportComboToExcelActionPerformed(evt);
            }
        });

        getContentPane().add(jButtonExportComboToExcel);
        jButtonExportComboToExcel.setBounds(490, 40, 111, 25);

        jButtonMakeComboPacketsAlternateSelection.setText("Combo Alternate Selection");
        jButtonMakeComboPacketsAlternateSelection.setToolTipText("Make Combo Packets Alternate Selection");
        jButtonMakeComboPacketsAlternateSelection.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonMakeComboPacketsAlternateSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMakeComboPacketsAlternateSelectionActionPerformed(evt);
            }
        });

        getContentPane().add(jButtonMakeComboPacketsAlternateSelection);
        jButtonMakeComboPacketsAlternateSelection.setBounds(340, 290, 176, 25);

        jButtonExportComboPacketsToExcel.setText("Export To Excel");
        jButtonExportComboPacketsToExcel.setToolTipText("Export Combo Packets in Excel File");
        jButtonExportComboPacketsToExcel.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonExportComboPacketsToExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportComboPacketsToExcelActionPerformed(evt);
            }
        });

        getContentPane().add(jButtonExportComboPacketsToExcel);
        jButtonExportComboPacketsToExcel.setBounds(855, 290, 105, 25);

        jButtonDeleteComboPackets.setText("Delete Combo Packets Data");
        jButtonDeleteComboPackets.setToolTipText("Delete Combo Packets in Table");
        jButtonDeleteComboPackets.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonDeleteComboPackets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteComboPacketsActionPerformed(evt);
            }
        });

        getContentPane().add(jButtonDeleteComboPackets);
        jButtonDeleteComboPackets.setBounds(776, 40, 183, 25);

        jButtonMakeComboPacketsSingleSelection.setText("Combo Single Selection");
        jButtonMakeComboPacketsSingleSelection.setToolTipText("Make Combo Packets Single Selection");
        jButtonMakeComboPacketsSingleSelection.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonMakeComboPacketsSingleSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMakeComboPacketsSingleSelectionActionPerformed(evt);
            }
        });

        getContentPane().add(jButtonMakeComboPacketsSingleSelection);
        jButtonMakeComboPacketsSingleSelection.setBounds(530, 290, 157, 25);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(460, 403));
        jScrollPane1.setEnabled(false);
        jTableComboPackets.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableComboPackets.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(jTableComboPackets);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 350, 950, 290);

        jButtonShowComboPackets.setText("Show Combo Packets");
        jButtonShowComboPackets.setToolTipText("Show Combo Packet Complete Data In Table");
        jButtonShowComboPackets.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonShowComboPackets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonShowComboPacketsActionPerformed(evt);
            }
        });

        getContentPane().add(jButtonShowComboPackets);
        jButtonShowComboPackets.setBounds(700, 290, 144, 25);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 20));
        jLabel1.setText("Packets ");
        jLabel1.setToolTipText("No of Packets in each Bail");
        jLabel1.setAlignmentY(0.0F);
        jLabel1.setIconTextGap(0);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 290, 86, 25);

        jTextFieldNoOfPackets.setFont(new java.awt.Font("Dialog", 1, 18));
        jTextFieldNoOfPackets.setToolTipText("Enter No. of Packets in each Bail");
        jTextFieldNoOfPackets.setPreferredSize(new java.awt.Dimension(0, 24));
        getContentPane().add(jTextFieldNoOfPackets);
        jTextFieldNoOfPackets.setBounds(90, 292, 80, 24);

        jTextFieldNoOfDoublePackets.setFont(new java.awt.Font("Dialog", 1, 18));
        jTextFieldNoOfDoublePackets.setToolTipText("Enter No. of Bails for Double Pieces in each Bail");
        jTextFieldNoOfDoublePackets.setPreferredSize(new java.awt.Dimension(0, 24));
        getContentPane().add(jTextFieldNoOfDoublePackets);
        jTextFieldNoOfDoublePackets.setBounds(90, 320, 80, 24);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 20));
        jLabel2.setText("Double");
        jLabel2.setToolTipText("No. of Bails for Double Pieces");
        jLabel2.setAlignmentY(0.0F);
        jLabel2.setIconTextGap(0);
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 320, 74, 25);

    }//GEN-END:initComponents
    
    private void jButtonShowComboPacketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonShowComboPacketsActionPerformed
        makeComboPacketCompletDataTable();
    }//GEN-LAST:event_jButtonShowComboPacketsActionPerformed
    
    /**
     * Delete Combo Packet Data in database
     */
    private void jButtonDeleteComboPacketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteComboPacketsActionPerformed
        int dialogResult = JOptionPane.showConfirmDialog(this, "Are You Sure Want to Delete Combo Packet Data?","Warning",JOptionPane.YES_NO_OPTION);
        if(dialogResult == JOptionPane.YES_OPTION){
            try{
                connection = data.getConn();
                statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                query = "DELETE FROM `PRODUCTION`.`SUITINGS_COMBO_PACKETS`";
                statement.executeUpdate(query);
                jLabelStatus.setText(" All Combo Packets Deleted");
                statement.close();
                connection.close();
                
                makeComboPacketDataTable();
                makeComboPacketCompletDataTable();
            }catch(Exception e) {
                e.printStackTrace();
                statement = null;
                connection = null;
            }
        }
    }//GEN-LAST:event_jButtonDeleteComboPacketsActionPerformed
    
    /**
     * Export Combo Packet Data to Excel
     */
    private void jButtonExportComboPacketsToExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportComboPacketsToExcelActionPerformed
        File file;
        JFileChooser jFileChooser = new JFileChooser();
        jFileChooser.setDialogTitle("Enter Excel File Name");
        jFileChooser.setFileSelectionMode(JFileChooser.APPROVE_OPTION);
        int returnVal = jFileChooser.showSaveDialog(frmSuitingsComboPackets.this);
        if ( returnVal == JFileChooser.APPROVE_OPTION) {
            file = jFileChooser.getSelectedFile();
            exportJTableToExcel(jTableComboPackets,new File(file+".xls"));
            jLabelStatus.setText(" Excel File Saved at : "+ file+".xls");
        }
    }//GEN-LAST:event_jButtonExportComboPacketsToExcelActionPerformed
    
    /**
     * Creates COMBO PACKETS from combo data selecting 1 pieces from all quality and shade
     */
    private void jButtonMakeComboPacketsSingleSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMakeComboPacketsSingleSelectionActionPerformed
        int qualityNo, shadeNo, noOfPieces, madeNoOfBills=0, requiredNoOfPackets=0, requiredNoOfPacket=0, requiredNoOfBills=0, totalPieces=0;
        try{
            requiredNoOfPacket = Integer.parseInt(jTextFieldNoOfPackets.getText());
        }catch(NumberFormatException nfe){
            nfe.printStackTrace();
            JOptionPane.showMessageDialog(frmSuitingsComboPackets.this, "Enter No Of Packets for each Bail ?","Error",JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(requiredNoOfPacket <=0){
            JOptionPane.showMessageDialog(frmSuitingsComboPackets.this, "Enter No Of Packets for each Bail ?","Error",JOptionPane.ERROR_MESSAGE);
            return;
        }
        requiredNoOfPackets = requiredNoOfPacket;
        
        try{
            connection = data.getConn();
            statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            
            query = "select sum(NO_OF_PIECES) AS TOTAL_PIECES FROM `PRODUCTION`.`SUITINGS_COMBO_DATA`";
            resultSet = statement.executeQuery(query);
            while(resultSet.next()){
                totalPieces = resultSet.getInt("TOTAL_PIECES");
            }
            if(totalPieces <= 0){
                JOptionPane.showMessageDialog(frmSuitingsComboPackets.this, "Zero No. of Pieces in Combo Table to make Bails ?","Error Check Combo Table",JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if(totalPieces!=0){
                if(totalPieces<requiredNoOfPacket*100){
                    if(totalPieces%requiredNoOfPacket == 0){
                        requiredNoOfBills = totalPieces/requiredNoOfPacket;
                    }else requiredNoOfBills = (totalPieces/requiredNoOfPacket)+1;
                }else requiredNoOfBills=100;
                
                jLabelStatus.setText("Total No of PIECES is : "+totalPieces +".   "+requiredNoOfBills+ " Bails Can Made");
                
                while(requiredNoOfBills!=0){
                    madeNoOfBills++;
                    while(requiredNoOfPackets<=requiredNoOfPacket){
                        query = "SELECT * FROM `PRODUCTION`.`SUITINGS_COMBO_DATA` ORDER BY NO_OF_PIECES DESC";
                        resultSet = statement.executeQuery(query);
                        while(resultSet.next()){
                            brand = resultSet.getString("BRAND");
                            qualityNo = resultSet.getInt("QUALITY_NO");
                            shadeNo  = resultSet.getInt("SHADE_NO");
                            noOfPieces = resultSet.getInt("NO_OF_PIECES");
                            if(noOfPieces>=1){
                                for(int i=1;i<=requiredNoOfPackets; i++){
                                    noOfPieces--;
                                    requiredNoOfPackets--;
                                    totalPieces--;
                                    query = "UPDATE `PRODUCTION`.`SUITINGS_COMBO_DATA` SET NO_OF_PIECES="+ noOfPieces +" WHERE QUALITY_NO = "+ qualityNo +" AND SHADE_NO = "+ shadeNo;
                                    statement.executeUpdate(query);
                                    query = "INSERT INTO `PRODUCTION`.`SUITINGS_COMBO_PACKETS` VALUES('"+ brand + "',"+qualityNo + ","+ shadeNo + ",1," +madeNoOfBills+")";
                                    statement.executeUpdate(query);
                                    break;
                                }
                            }
                            if(requiredNoOfPackets ==0 || totalPieces ==0)
                                break;
                        }
                        if(requiredNoOfPackets ==0 || totalPieces ==0){
                            requiredNoOfPackets = requiredNoOfPacket;
                            break;
                        }
                    }
                    if(totalPieces ==0)
                        break;
                    requiredNoOfBills--;
                }
            }
            statement.close();
            connection.close();
            
            makeComboPacketDataTable();
            makeComboPacketCompletDataTable();
        }
        catch(Exception e) {
            e.printStackTrace();
            statement = null;
            connection = null;
        }
    }//GEN-LAST:event_jButtonMakeComboPacketsSingleSelectionActionPerformed
    
    /**
     * Delete Combo Data in database
     */
    private void jButtonDeleteComboDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteComboDataActionPerformed
        int dialogResult = JOptionPane.showConfirmDialog(this, "Are You Sure Want to Delete Combo Data?","Warning",JOptionPane.YES_NO_OPTION);
        if(dialogResult == JOptionPane.YES_OPTION){
            try{
                connection = data.getConn();
                statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                query = "DELETE FROM `PRODUCTION`.`SUITINGS_COMBO_DATA`";
                statement.executeUpdate(query);
                jLabelStatus.setText(" All Combo Data Deleted");
                statement.close();
                connection.close();
                
                makeComboDataTable();
            }catch(Exception e) {
                e.printStackTrace();
                statement = null;
                connection = null;
            }
        }
    }//GEN-LAST:event_jButtonDeleteComboDataActionPerformed
    
    /**
     * Export Combo Data in database to Excel File
     */
    private void jButtonExportComboToExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportComboToExcelActionPerformed
        File file;
        JFileChooser jFileChooser = new JFileChooser();
        jFileChooser.setDialogTitle("Enter Excel File Name");
        jFileChooser.setFileSelectionMode(JFileChooser.APPROVE_OPTION);
        int returnVal = jFileChooser.showSaveDialog(frmSuitingsComboPackets.this);
        if ( returnVal == JFileChooser.APPROVE_OPTION) {
            file = jFileChooser.getSelectedFile();
            exportJTableToExcel(jTable,new File(file+".xls"));
            jLabelStatus.setText(" Excel File Saved at : "+ file+".xls");
        }
    }//GEN-LAST:event_jButtonExportComboToExcelActionPerformed
    
    /**
     * Creates COMBO PACKETS from combo data selecting 2 pieces and 1 pieces alternate
     * from more than 100 no of pieces and 1 from less than 100 no of pieces
     */
    private void jButtonMakeComboPacketsAlternateSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMakeComboPacketsAlternateSelectionActionPerformed
        int qualityNo, shadeNo, noOfPieces, madeNoOfBills=0, requiredNoOfPackets=0, requiredNoOfPacket=0,
        requiredNoOfBills=0, morePieces= 0, totalPieces = 0, moreNoOfPiecesCount = 0;
        try{
            requiredNoOfPacket = Integer.parseInt(jTextFieldNoOfPackets.getText());
        }catch(NumberFormatException nfe){
            nfe.printStackTrace();
            JOptionPane.showMessageDialog(frmSuitingsComboPackets.this, "Enter No Of Packets for each Bail ?","Error",JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(requiredNoOfPacket <=0){
            JOptionPane.showMessageDialog(frmSuitingsComboPackets.this, "Enter No Of Packets for each Bail ?","Error",JOptionPane.ERROR_MESSAGE);
            return;
        }
        requiredNoOfPackets = requiredNoOfPacket;
        
        try{
            connection = data.getConn();
            statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            
            query = "select count(*) AS MORE_PIECES FROM `PRODUCTION`.`SUITINGS_COMBO_DATA` where NO_OF_PIECES>=100";
            resultSet = statement.executeQuery(query);
            while(resultSet.next()){
                morePieces = resultSet.getInt("MORE_PIECES");
                moreNoOfPiecesCount = morePieces;
            }
            query = "select sum(NO_OF_PIECES) AS TOTAL_PIECES FROM `PRODUCTION`.`SUITINGS_COMBO_DATA`ORDER BY NO_OF_PIECES DESC";
            resultSet = statement.executeQuery(query);
            while(resultSet.next()){
                totalPieces = resultSet.getInt("TOTAL_PIECES");
            }
            if(totalPieces <= 0){
                JOptionPane.showMessageDialog(frmSuitingsComboPackets.this, "Zero No. of Pieces in Combo Table to make Bails ?","Error Check Combo Table",JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if(totalPieces!=0){
                if(totalPieces<requiredNoOfPacket*100){
                    if(totalPieces%requiredNoOfPacket == 0){
                        requiredNoOfBills = totalPieces/requiredNoOfPacket;
                    }else requiredNoOfBills = (totalPieces/requiredNoOfPacket)+1;
                }else requiredNoOfBills=100;
                
                jLabelStatus.setText("Total No of PIECES is : "+totalPieces +".   "+requiredNoOfBills+ " Bails Can Made");
                
                while(requiredNoOfBills!=0){
                    madeNoOfBills++;
                    while(requiredNoOfPackets<=requiredNoOfPacket){
                        query = "select * FROM `PRODUCTION`.`SUITINGS_COMBO_DATA`";
                        resultSet = statement.executeQuery(query);
                        while(resultSet.next()){
                            brand = resultSet.getString("BRAND");
                            qualityNo = resultSet.getInt("QUALITY_NO");
                            shadeNo  = resultSet.getInt("SHADE_NO");
                            noOfPieces = resultSet.getInt("NO_OF_PIECES");if(morePieces > 0) moreNoOfPiecesCount--;
                            if(noOfPieces>=1){
                                for(int i=1;i<=requiredNoOfPackets; i++){
                                    noOfPieces--;
                                    requiredNoOfPackets--;
                                    totalPieces--;
                                    query = "INSERT INTO `PRODUCTION`.`SUITINGS_COMBO_PACKETS` VALUES('"+ brand + "',"+qualityNo + ","+ shadeNo + ",1," +madeNoOfBills+")";
                                    statement.executeUpdate(query);
                                    
                                    query = "UPDATE `PRODUCTION`.`SUITINGS_COMBO_DATA` SET NO_OF_PIECES="+ noOfPieces +" WHERE QUALITY_NO = "+ qualityNo +" AND SHADE_NO = "+ shadeNo;
                                    statement.executeUpdate(query);
                                    
                                    if(noOfPieces>=1 && moreNoOfPiecesCount >= 0 && i==1 && madeNoOfBills%2!=0 ){
                                    }else {
                                        break;
                                    }
                                }
                            }else moreNoOfPiecesCount=-1;
                            if(requiredNoOfPackets ==0  || totalPieces ==0)
                                break;
                        }
                        moreNoOfPiecesCount = morePieces;
                        if(requiredNoOfPackets ==0 || totalPieces ==0){
                            requiredNoOfPackets = requiredNoOfPacket;
                            break;
                        }
                    }
                    if(totalPieces ==0)
                        break;
                    requiredNoOfBills--;
                }
            }
            statement.close();
            connection.close();
            
            makeComboPacketDataTable();
            makeComboPacketCompletDataTable();
        }
        catch(Exception e) {
            e.printStackTrace();
            statement = null;
            connection = null;
        }
    }//GEN-LAST:event_jButtonMakeComboPacketsAlternateSelectionActionPerformed
    
    /**
     * Creates COMBO PACKETS from combo data selecting 2 pieces from more than 100
     * no of pieces and 1 from less than 100 no of pieces
     */
    private void jButtonMakeComboPacketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMakeComboPacketsActionPerformed
        int qualityNo, shadeNo, noOfPieces, madeNoOfBills=0, requiredNoOfPackets=0, requiredNoOfPacket=0,
        requiredNoOfBills=0, morePieces= 0, totalPieces = 0, moreNoOfPiecesCount = 0, doubleCounter=0;
        try{
            requiredNoOfPacket = Integer.parseInt(jTextFieldNoOfPackets.getText());
            doubleCounter = Integer.parseInt(jTextFieldNoOfDoublePackets.getText());
        }catch(NumberFormatException nfe){
            nfe.printStackTrace();
            JOptionPane.showMessageDialog(frmSuitingsComboPackets.this, "Enter No Of Packets for each Bail/No of Bails for double shade?","Error",JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(requiredNoOfPacket <=0){
            JOptionPane.showMessageDialog(frmSuitingsComboPackets.this, "Enter No Of Packets for each Bail/ No of Bails for double shade?","Error",JOptionPane.ERROR_MESSAGE);
            return;
        }
        requiredNoOfPackets = requiredNoOfPacket;
        try{
            connection = data.getConn();
            statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            
            query = "select count(*) AS MORE_PIECES FROM `PRODUCTION`.`SUITINGS_COMBO_DATA` where NO_OF_PIECES>=100";
            resultSet = statement.executeQuery(query);
            while(resultSet.next()){
                morePieces = resultSet.getInt("MORE_PIECES");
                moreNoOfPiecesCount = morePieces;
            }
            query = "select sum(NO_OF_PIECES) AS TOTAL_PIECES FROM `PRODUCTION`.`SUITINGS_COMBO_DATA`";
            resultSet = statement.executeQuery(query);
            while(resultSet.next()){
                totalPieces = resultSet.getInt("TOTAL_PIECES");
            }
            
            if(totalPieces <= 0){
                JOptionPane.showMessageDialog(frmSuitingsComboPackets.this, "Zero No. of Pieces in Combo Table to make Bails ?","Error Check Combo Table",JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if(totalPieces!=0){
                if(totalPieces < requiredNoOfPacket*100){
                    if(totalPieces%requiredNoOfPacket == 0){
                        requiredNoOfBills = totalPieces/requiredNoOfPacket;
                    }else requiredNoOfBills = (totalPieces/requiredNoOfPacket)+1;
                }else requiredNoOfBills=100;
                
                jLabelStatus.setText("Total No of PIECES is : "+totalPieces +".   "+requiredNoOfBills+ " Bails Can Made");
                
                while(requiredNoOfBills!=0){
                    madeNoOfBills++;
                    while(requiredNoOfPackets<=requiredNoOfPacket){
                        query = "select * FROM `PRODUCTION`.`SUITINGS_COMBO_DATA` order by NO_OF_PIECES DESC";
                        resultSet = statement.executeQuery(query);
                        while(resultSet.next()){
                            brand = resultSet.getString("BRAND");
                            qualityNo = resultSet.getInt("QUALITY_NO");
                            shadeNo  = resultSet.getInt("SHADE_NO");
                            noOfPieces = resultSet.getInt("NO_OF_PIECES");
                            if(morePieces > 0) moreNoOfPiecesCount--;
                            if(noOfPieces>=1){
                                for(int i=1;i<=requiredNoOfPackets; i++){
                                    noOfPieces--;
                                    requiredNoOfPackets--;
                                    totalPieces--;
                                    query = "INSERT INTO `PRODUCTION`.`SUITINGS_COMBO_PACKETS` VALUES('"+ brand + "',"+qualityNo + ","+ shadeNo + ",1," +madeNoOfBills+")";
                                    statement.executeUpdate(query);
                                    
                                    if(noOfPieces>=1 && moreNoOfPiecesCount >= 0 && i==1 && doubleCounter>0){
                                        doubleCounter--;
                                    }else {
                                        query = "UPDATE `PRODUCTION`.`SUITINGS_COMBO_DATA` SET NO_OF_PIECES="+ noOfPieces +" WHERE QUALITY_NO = "+ qualityNo +" AND SHADE_NO = "+ shadeNo;
                                        statement.executeUpdate(query);
                                        break;
                                    }
                                }
                            }else moreNoOfPiecesCount=-1;
                            if(requiredNoOfPackets ==0 || totalPieces ==0)
                                break;
                        }
                        moreNoOfPiecesCount = morePieces;
                        if(requiredNoOfPackets ==0 || totalPieces ==0){
                            requiredNoOfPackets = requiredNoOfPacket;
                            break;
                        }
                    }
                    if(totalPieces ==0)
                        break;
                    requiredNoOfBills--;
                }
            }
            statement.close();
            connection.close();
            
            makeComboPacketDataTable();
            makeComboPacketCompletDataTable();
        }
        catch(Exception e) {
            e.printStackTrace();
            statement = null;
            connection = null;
        }
    }//GEN-LAST:event_jButtonMakeComboPacketsActionPerformed
    
    /**
     * Reads Excel(.xls) file from user,Uploads into database and shows to jtable
     */
    private void jButtonUploadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUploadFileActionPerformed
        String filePath = "";
        int totalPieces = 0;
        File file;
        ArrayList list;
        JFileChooser jFileChooser = new JFileChooser();
        jFileChooser.setDialogTitle("Select Excel File");
        jFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jFileChooser.addChoosableFileFilter(new FileFilter() {
            public String getDescription() {
                return "Microsoft Excel 2003 File (*.xls)";
            }
            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    return f.getName().toLowerCase().endsWith(".xls");
                }
            }
        });
        
        int returnVal = jFileChooser.showOpenDialog(frmSuitingsComboPackets.this);
        if ( returnVal == JFileChooser.APPROVE_OPTION && jFileChooser.getSelectedFile().toString().toLowerCase().endsWith(".xls")) {
            file = jFileChooser.getSelectedFile();
            filePath = file.toString();
            jLabelStatus.setText(" UPLOADING DATA From : "+filePath);
            try {
                connection = data.getConn();
                statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                
                Workbook w = Workbook.getWorkbook(file);
                Sheet sheet = w.getSheet(0);
                list = new ArrayList();
                for (int i = 0; i < sheet.getRows(); i++) {
                    for (int j = 0; j < sheet.getColumns(); j++) {
                        Cell cell = sheet.getCell(j, i);
                        CellType type = cell.getType();
                        if (i==0 && j==0) {
                            break;
                        }else  {
                            list.add(j, cell.getContents());
                        }
                    }
                    if (list.size() !=0) {
                        query = "insert into `PRODUCTION`.`SUITINGS_COMBO_DATA` values('"+ list.get(0) + "',"+list.get(1) + ","+ list.get(2) + "," +list.get(3)+")";
                        statement.executeUpdate(query);
                        list.clear();
                    }
                }
                query = "select sum(NO_OF_PIECES) AS TOTAL_PIECES FROM `PRODUCTION`.`SUITINGS_COMBO_DATA`";
                resultSet = statement.executeQuery(query);
                while(resultSet.next()){
                    totalPieces = resultSet.getInt("TOTAL_PIECES");
                }
                jLabelStatus.setText("Total No. of PIECES is : "+totalPieces);
                
                query = "ALTER TABLE `PRODUCTION`.`SUITINGS_COMBO_DATA` ORDER BY NO_OF_PIECES DESC";
                statement.executeUpdate(query);
                makeComboDataTable(); //show combo data in table
                statement.close();
                connection.close();
            }catch (Exception e) {
                e.printStackTrace();
                statement = null;
                connection = null;
            }
        }else jLabelStatus.setText(" Selct an Excel File to Upload");
    }//GEN-LAST:event_jButtonUploadFileActionPerformed
    
    private void jButtonShowComboPacketsDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonShowComboPacketsDataActionPerformed
        makeComboPacketDataTable();
        makeComboPacketCompletDataTable();
    }//GEN-LAST:event_jButtonShowComboPacketsDataActionPerformed
    
    private void jButtonShowComboDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonShowComboDataActionPerformed
        try{
            makeComboDataTable();
        }
        catch(Exception e) {
            e.printStackTrace();
            statement = null;
            connection = null;
        }
    }//GEN-LAST:event_jButtonShowComboDataActionPerformed
    
    public static void main(String[] argv) {
        AppletFrame.startApplet("EITLERP.SUITINGS.frmSuitingsComboPackets", "Suitings Combo Packets");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDeleteComboData;
    private javax.swing.JButton jButtonDeleteComboPackets;
    private javax.swing.JButton jButtonExportComboPacketsToExcel;
    private javax.swing.JButton jButtonExportComboToExcel;
    private javax.swing.JButton jButtonMakeComboPackets;
    private javax.swing.JButton jButtonMakeComboPacketsAlternateSelection;
    private javax.swing.JButton jButtonMakeComboPacketsSingleSelection;
    private javax.swing.JButton jButtonShowComboData;
    private javax.swing.JButton jButtonShowComboPackets;
    private javax.swing.JButton jButtonShowComboPacketsData;
    private javax.swing.JButton jButtonUploadFile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JPanel jPanel;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable;
    private javax.swing.JTable jTableComboPackets;
    private javax.swing.JTextField jTextFieldNoOfDoublePackets;
    private javax.swing.JTextField jTextFieldNoOfPackets;
    // End of variables declaration//GEN-END:variables
    
    /**
     * shows combo data in table
     */
    private void makeComboDataTable()
    throws InstantiationException,ClassNotFoundException,IllegalAccessException,SQLException {
        int serialNoCount= 1;
        EITLTableModel DataModel = new EITLTableModel();
        DataModel.addColumn("Sr.");
        DataModel.addColumn("BRAND");
        DataModel.addColumn("QUALITY NO");
        DataModel.addColumn("SHADE NO");
        DataModel.addColumn("PIECES");
        
        connection = data.getConn();
        statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
        query = "select * FROM `PRODUCTION`.`SUITINGS_COMBO_DATA`";
        resultSet = statement.executeQuery(query);
        while(resultSet.next()){
            brand = resultSet.getString("BRAND");
            qualityNo = new Integer(resultSet.getInt("QUALITY_NO"));
            shadeNo  = new Integer(resultSet.getInt("SHADE_NO"));
            noOfPieces = new Integer(resultSet.getInt("NO_OF_PIECES"));
            DataModel.addRow(new Object[] {new Integer(serialNoCount),brand, qualityNo, shadeNo, noOfPieces});
            serialNoCount++;
        }
        statement.close();
        connection.close();
        
        jTable.setModel(DataModel);
    }
    
    /**
     * shows combo packet data in table
     */
    private void makeComboPacketDataTable(){
        int serialNoCount= 1;
        
        EITLTableModel DataModel = new EITLTableModel();
        DataModel.addColumn("Sr.");
        DataModel.addColumn("BRAND");
        DataModel.addColumn("QUALITY NO");
        DataModel.addColumn("SHADE NO");
        DataModel.addColumn("PIECES");
        DataModel.addColumn("PACKET NO");
        
        try{
            connection = data.getConn();
            statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            query = "select * FROM `PRODUCTION`.`SUITINGS_COMBO_PACKETS`";
            resultSet = statement.executeQuery(query);
            while(resultSet.next()){
                brand = resultSet.getString("BRAND");
                qualityNo = new Integer(resultSet.getInt("QUALITY_NO"));
                shadeNo  = new Integer(resultSet.getInt("SHADE_NO"));
                noOfPieces = new Integer(resultSet.getInt("NO_OF_PIECES"));
                noOfPackets = new Integer(resultSet.getInt("NO_OF_PACKETS"));
                DataModel.addRow(new Object[] {new Integer(serialNoCount),brand, qualityNo, shadeNo, noOfPieces, noOfPackets});
                serialNoCount++;
            }
            statement.close();
            connection.close();
        }
        catch(Exception e) {
            e.printStackTrace();
            statement = null;
            connection = null;
        }
        jTable.setModel(DataModel);
    }
    
    /**
     * shows combo packet complete data in table
     */
    private void makeComboPacketCompletDataTable(){
        int serialNoCount= 1;
        String query, brand;
        Integer qualityNo, shadeNo, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50,
        a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92, a93, a94, a95, a96, a97, a98, a99, a100, total;
        
        EITLTableModel DataModel = new EITLTableModel();
        DataModel.addColumn("Sr.");
        DataModel.addColumn("BRAND");
        DataModel.addColumn("QUALITY NO");
        DataModel.addColumn("SHADE NO");
        DataModel.addColumn("A1");
        DataModel.addColumn("A2");
        DataModel.addColumn("A3");
        DataModel.addColumn("A4");
        DataModel.addColumn("A5");
        DataModel.addColumn("A6");
        DataModel.addColumn("A7");
        DataModel.addColumn("A8");
        DataModel.addColumn("A9");
        DataModel.addColumn("A10");
        DataModel.addColumn("A11");
        DataModel.addColumn("A12");
        DataModel.addColumn("A13");
        DataModel.addColumn("A14");
        DataModel.addColumn("A15");
        DataModel.addColumn("A16");
        DataModel.addColumn("A17");
        DataModel.addColumn("A18");
        DataModel.addColumn("A19");
        DataModel.addColumn("A20");
        DataModel.addColumn("A21");
        DataModel.addColumn("A22");
        DataModel.addColumn("A23");
        DataModel.addColumn("A24");
        DataModel.addColumn("A25");
        DataModel.addColumn("A26");
        DataModel.addColumn("A27");
        DataModel.addColumn("A28");
        DataModel.addColumn("A29");
        DataModel.addColumn("A30");
        DataModel.addColumn("A31");
        DataModel.addColumn("A32");
        DataModel.addColumn("A33");
        DataModel.addColumn("A34");
        DataModel.addColumn("A35");
        DataModel.addColumn("A36");
        DataModel.addColumn("A37");
        DataModel.addColumn("A38");
        DataModel.addColumn("A39");
        DataModel.addColumn("A40");
        DataModel.addColumn("A41");
        DataModel.addColumn("A42");
        DataModel.addColumn("A43");
        DataModel.addColumn("A44");
        DataModel.addColumn("A45");
        DataModel.addColumn("A46");
        DataModel.addColumn("A47");
        DataModel.addColumn("A48");
        DataModel.addColumn("A49");
        DataModel.addColumn("A50");
        DataModel.addColumn("A51");
        DataModel.addColumn("A52");
        DataModel.addColumn("A53");
        DataModel.addColumn("A54");
        DataModel.addColumn("A55");
        DataModel.addColumn("A56");
        DataModel.addColumn("A57");
        DataModel.addColumn("A58");
        DataModel.addColumn("A59");
        DataModel.addColumn("A60");
        DataModel.addColumn("A61");
        DataModel.addColumn("A62");
        DataModel.addColumn("A63");
        DataModel.addColumn("A64");
        DataModel.addColumn("A65");
        DataModel.addColumn("A66");
        DataModel.addColumn("A67");
        DataModel.addColumn("A68");
        DataModel.addColumn("A69");
        DataModel.addColumn("A70");
        DataModel.addColumn("A71");
        DataModel.addColumn("A72");
        DataModel.addColumn("A73");
        DataModel.addColumn("A74");
        DataModel.addColumn("A75");
        DataModel.addColumn("A76");
        DataModel.addColumn("A77");
        DataModel.addColumn("A78");
        DataModel.addColumn("A79");
        DataModel.addColumn("A80");
        DataModel.addColumn("A81");
        DataModel.addColumn("A82");
        DataModel.addColumn("A83");
        DataModel.addColumn("A84");
        DataModel.addColumn("A85");
        DataModel.addColumn("A86");
        DataModel.addColumn("A87");
        DataModel.addColumn("A88");
        DataModel.addColumn("A89");
        DataModel.addColumn("A90");
        DataModel.addColumn("A91");
        DataModel.addColumn("A92");
        DataModel.addColumn("A93");
        DataModel.addColumn("A94");
        DataModel.addColumn("A95");
        DataModel.addColumn("A96");
        DataModel.addColumn("A97");
        DataModel.addColumn("A98");
        DataModel.addColumn("A99");
        DataModel.addColumn("A100");
        DataModel.addColumn("Total");
        
        try{
            connection = data.getConn();
            statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            
            query = "SELECT * FROM(SELECT BRAND,QUALITY_NO,SHADE_NO, COUNT(CASE WHEN NO_OF_PACKETS = 1 THEN NO_OF_PIECES END)  AS A1 , COUNT(CASE WHEN NO_OF_PACKETS = 2 THEN NO_OF_PIECES END)  AS A2 ,COUNT(CASE WHEN NO_OF_PACKETS = 3 THEN NO_OF_PIECES END)  AS A3 ,COUNT(CASE WHEN NO_OF_PACKETS = 4 THEN NO_OF_PIECES END)  AS A4 , " +
            "COUNT(CASE WHEN NO_OF_PACKETS = 5 THEN NO_OF_PIECES END)  AS A5 , COUNT(CASE WHEN NO_OF_PACKETS = 6 THEN NO_OF_PIECES END)  AS A6 ,COUNT(CASE WHEN NO_OF_PACKETS = 7 THEN NO_OF_PIECES END)  AS A7 ,COUNT(CASE WHEN NO_OF_PACKETS = 8 THEN NO_OF_PIECES END)  AS A8 ,COUNT(CASE WHEN NO_OF_PACKETS = 9 THEN NO_OF_PIECES END)  AS A9 ," +
            "COUNT(CASE WHEN NO_OF_PACKETS = 10 THEN NO_OF_PIECES END)  AS A10 , COUNT(CASE WHEN NO_OF_PACKETS = 11 THEN NO_OF_PIECES END)  AS A11 , COUNT(CASE WHEN NO_OF_PACKETS = 12 THEN NO_OF_PIECES END)  AS A12 , COUNT(CASE WHEN NO_OF_PACKETS = 13 THEN NO_OF_PIECES END)  AS A13 , COUNT(CASE WHEN NO_OF_PACKETS = 14 THEN NO_OF_PIECES END)  AS A14 ," +
            "COUNT(CASE WHEN NO_OF_PACKETS = 15 THEN NO_OF_PIECES END)  AS A15 , COUNT(CASE WHEN NO_OF_PACKETS = 16 THEN NO_OF_PIECES END)  AS A16 , COUNT(CASE WHEN NO_OF_PACKETS = 17 THEN NO_OF_PIECES END)  AS A17 , COUNT(CASE WHEN NO_OF_PACKETS = 18 THEN NO_OF_PIECES END)  AS A18 , COUNT(CASE WHEN NO_OF_PACKETS = 19 THEN NO_OF_PIECES END)  AS A19 ," +
            "COUNT(CASE WHEN NO_OF_PACKETS = 20 THEN NO_OF_PIECES END)  AS A20 , COUNT(CASE WHEN NO_OF_PACKETS = 21 THEN NO_OF_PIECES END)  AS A21 , COUNT(CASE WHEN NO_OF_PACKETS = 22 THEN NO_OF_PIECES END)  AS A22 , COUNT(CASE WHEN NO_OF_PACKETS = 23 THEN NO_OF_PIECES END)  AS A23 , COUNT(CASE WHEN NO_OF_PACKETS = 24 THEN NO_OF_PIECES END)  AS A24 ," +
            "COUNT(CASE WHEN NO_OF_PACKETS = 25 THEN NO_OF_PIECES END)  AS A25 , COUNT(CASE WHEN NO_OF_PACKETS = 26 THEN NO_OF_PIECES END)  AS A26 , COUNT(CASE WHEN NO_OF_PACKETS = 27 THEN NO_OF_PIECES END)  AS A27 , COUNT(CASE WHEN NO_OF_PACKETS = 28 THEN NO_OF_PIECES END)  AS A28 , COUNT(CASE WHEN NO_OF_PACKETS = 29 THEN NO_OF_PIECES END)  AS A29 ," +
            "COUNT(CASE WHEN NO_OF_PACKETS = 30 THEN NO_OF_PIECES END)  AS A30 , COUNT(CASE WHEN NO_OF_PACKETS = 31 THEN NO_OF_PIECES END)  AS A31 , COUNT(CASE WHEN NO_OF_PACKETS = 32 THEN NO_OF_PIECES END)  AS A32 , COUNT(CASE WHEN NO_OF_PACKETS = 33 THEN NO_OF_PIECES END)  AS A33 , COUNT(CASE WHEN NO_OF_PACKETS = 34 THEN NO_OF_PIECES END)  AS A34 ," +
            "COUNT(CASE WHEN NO_OF_PACKETS = 35 THEN NO_OF_PIECES END)  AS A35 , COUNT(CASE WHEN NO_OF_PACKETS = 36 THEN NO_OF_PIECES END)  AS A36 , COUNT(CASE WHEN NO_OF_PACKETS = 37 THEN NO_OF_PIECES END)  AS A37 , COUNT(CASE WHEN NO_OF_PACKETS = 38 THEN NO_OF_PIECES END)  AS A38 , COUNT(CASE WHEN NO_OF_PACKETS = 39 THEN NO_OF_PIECES END)  AS A39 ," +
            "COUNT(CASE WHEN NO_OF_PACKETS = 40 THEN NO_OF_PIECES END)  AS A40 , COUNT(CASE WHEN NO_OF_PACKETS = 41 THEN NO_OF_PIECES END)  AS A41 , COUNT(CASE WHEN NO_OF_PACKETS = 42 THEN NO_OF_PIECES END)  AS A42 , COUNT(CASE WHEN NO_OF_PACKETS = 43 THEN NO_OF_PIECES END)  AS A43 , COUNT(CASE WHEN NO_OF_PACKETS = 44 THEN NO_OF_PIECES END)  AS A44 ," +
            "COUNT(CASE WHEN NO_OF_PACKETS = 45 THEN NO_OF_PIECES END)  AS A45 , COUNT(CASE WHEN NO_OF_PACKETS = 46 THEN NO_OF_PIECES END)  AS A46 , COUNT(CASE WHEN NO_OF_PACKETS = 47 THEN NO_OF_PIECES END)  AS A47 , COUNT(CASE WHEN NO_OF_PACKETS = 48 THEN NO_OF_PIECES END)  AS A48 , COUNT(CASE WHEN NO_OF_PACKETS = 49 THEN NO_OF_PIECES END)  AS A49 ," +
            "COUNT(CASE WHEN NO_OF_PACKETS = 50 THEN NO_OF_PIECES END)  AS A50 , COUNT(CASE WHEN NO_OF_PACKETS = 51 THEN NO_OF_PIECES END)  AS A51 , COUNT(CASE WHEN NO_OF_PACKETS = 52 THEN NO_OF_PIECES END)  AS A52 , COUNT(CASE WHEN NO_OF_PACKETS = 53 THEN NO_OF_PIECES END)  AS A53 , COUNT(CASE WHEN NO_OF_PACKETS = 54 THEN NO_OF_PIECES END)  AS A54 ," +
            "COUNT(CASE WHEN NO_OF_PACKETS = 55 THEN NO_OF_PIECES END)  AS A55 , COUNT(CASE WHEN NO_OF_PACKETS = 56 THEN NO_OF_PIECES END)  AS A56 , COUNT(CASE WHEN NO_OF_PACKETS = 57 THEN NO_OF_PIECES END)  AS A57 , COUNT(CASE WHEN NO_OF_PACKETS = 58 THEN NO_OF_PIECES END)  AS A58 , COUNT(CASE WHEN NO_OF_PACKETS = 59 THEN NO_OF_PIECES END)  AS A59 ," +
            "COUNT(CASE WHEN NO_OF_PACKETS = 60 THEN NO_OF_PIECES END)  AS A60 , COUNT(CASE WHEN NO_OF_PACKETS = 61 THEN NO_OF_PIECES END)  AS A61 , COUNT(CASE WHEN NO_OF_PACKETS = 62 THEN NO_OF_PIECES END)  AS A62 , COUNT(CASE WHEN NO_OF_PACKETS = 63 THEN NO_OF_PIECES END)  AS A63 , COUNT(CASE WHEN NO_OF_PACKETS = 64 THEN NO_OF_PIECES END)  AS A64 ," +
            "COUNT(CASE WHEN NO_OF_PACKETS = 65 THEN NO_OF_PIECES END)  AS A65 , COUNT(CASE WHEN NO_OF_PACKETS = 66 THEN NO_OF_PIECES END)  AS A66 , COUNT(CASE WHEN NO_OF_PACKETS = 67 THEN NO_OF_PIECES END)  AS A67 , COUNT(CASE WHEN NO_OF_PACKETS = 68 THEN NO_OF_PIECES END)  AS A68 , COUNT(CASE WHEN NO_OF_PACKETS = 69 THEN NO_OF_PIECES END)  AS A69 ," +
            "COUNT(CASE WHEN NO_OF_PACKETS = 70 THEN NO_OF_PIECES END)  AS A70 , COUNT(CASE WHEN NO_OF_PACKETS = 71 THEN NO_OF_PIECES END)  AS A71 , COUNT(CASE WHEN NO_OF_PACKETS = 72 THEN NO_OF_PIECES END)  AS A72 , COUNT(CASE WHEN NO_OF_PACKETS = 73 THEN NO_OF_PIECES END)  AS A73 , COUNT(CASE WHEN NO_OF_PACKETS = 74 THEN NO_OF_PIECES END)  AS A74 ," +
            "COUNT(CASE WHEN NO_OF_PACKETS = 75 THEN NO_OF_PIECES END)  AS A75 , COUNT(CASE WHEN NO_OF_PACKETS = 76 THEN NO_OF_PIECES END)  AS A76 , COUNT(CASE WHEN NO_OF_PACKETS = 77 THEN NO_OF_PIECES END)  AS A77 , COUNT(CASE WHEN NO_OF_PACKETS = 78 THEN NO_OF_PIECES END)  AS A78 , COUNT(CASE WHEN NO_OF_PACKETS = 79 THEN NO_OF_PIECES END)  AS A79 ," +
            "COUNT(CASE WHEN NO_OF_PACKETS = 80 THEN NO_OF_PIECES END)  AS A80 , COUNT(CASE WHEN NO_OF_PACKETS = 81 THEN NO_OF_PIECES END)  AS A81 , COUNT(CASE WHEN NO_OF_PACKETS = 82 THEN NO_OF_PIECES END)  AS A82 , COUNT(CASE WHEN NO_OF_PACKETS = 83 THEN NO_OF_PIECES END)  AS A83 , COUNT(CASE WHEN NO_OF_PACKETS = 84 THEN NO_OF_PIECES END)  AS A84 ," +
            "COUNT(CASE WHEN NO_OF_PACKETS = 85 THEN NO_OF_PIECES END)  AS A85 , COUNT(CASE WHEN NO_OF_PACKETS = 86 THEN NO_OF_PIECES END)  AS A86 , COUNT(CASE WHEN NO_OF_PACKETS = 87 THEN NO_OF_PIECES END)  AS A87 , COUNT(CASE WHEN NO_OF_PACKETS = 88 THEN NO_OF_PIECES END)  AS A88 , COUNT(CASE WHEN NO_OF_PACKETS = 89 THEN NO_OF_PIECES END)  AS A89 ," +
            "COUNT(CASE WHEN NO_OF_PACKETS = 90 THEN NO_OF_PIECES END)  AS A90 , COUNT(CASE WHEN NO_OF_PACKETS = 91 THEN NO_OF_PIECES END)  AS A91 , COUNT(CASE WHEN NO_OF_PACKETS = 92 THEN NO_OF_PIECES END)  AS A92 , COUNT(CASE WHEN NO_OF_PACKETS = 93 THEN NO_OF_PIECES END)  AS A93 , COUNT(CASE WHEN NO_OF_PACKETS = 94 THEN NO_OF_PIECES END)  AS A94 ," +
            "COUNT(CASE WHEN NO_OF_PACKETS = 95 THEN NO_OF_PIECES END)  AS A95 , COUNT(CASE WHEN NO_OF_PACKETS = 96 THEN NO_OF_PIECES END)  AS A96 , COUNT(CASE WHEN NO_OF_PACKETS = 97 THEN NO_OF_PIECES END)  AS A97 , COUNT(CASE WHEN NO_OF_PACKETS = 98 THEN NO_OF_PIECES END)  AS A98 , COUNT(CASE WHEN NO_OF_PACKETS = 99 THEN NO_OF_PIECES END)  AS A99 ," +
            "COUNT(CASE WHEN NO_OF_PACKETS = 100 THEN NO_OF_PIECES END)  AS A100 , SUM(NO_OF_PIECES) AS TOTAL FROM `PRODUCTION`.`SUITINGS_COMBO_PACKETS` GROUP BY QUALITY_NO,SHADE_NO) AS A ORDER BY TOTAL DESC,QUALITY_NO,SHADE_NO";
            
            resultSet = statement.executeQuery(query);
            while(resultSet.next()){
                brand = resultSet.getString("BRAND");
                qualityNo = new Integer(resultSet.getInt("QUALITY_NO"));
                shadeNo  = new Integer(resultSet.getInt("SHADE_NO"));
                a1 = new Integer(resultSet.getInt("A1"));
                a2 = new Integer(resultSet.getInt("A2"));
                a3 = new Integer(resultSet.getInt("A3"));
                a4 = new Integer(resultSet.getInt("A4"));
                a5 = new Integer(resultSet.getInt("A5"));
                a6 = new Integer(resultSet.getInt("A6"));
                a7 = new Integer(resultSet.getInt("A7"));
                a8 = new Integer(resultSet.getInt("A8"));
                a9 = new Integer(resultSet.getInt("A9"));
                a10 = new Integer(resultSet.getInt("A10"));
                a11 = new Integer(resultSet.getInt("A11"));
                a12 = new Integer(resultSet.getInt("A12"));
                a13 = new Integer(resultSet.getInt("A13"));
                a14 = new Integer(resultSet.getInt("A14"));
                a15 = new Integer(resultSet.getInt("A15"));
                a16 = new Integer(resultSet.getInt("A16"));
                a17 = new Integer(resultSet.getInt("A17"));
                a18 = new Integer(resultSet.getInt("A18"));
                a19 = new Integer(resultSet.getInt("A19"));
                a20 = new Integer(resultSet.getInt("A20"));
                a21 = new Integer(resultSet.getInt("A21"));
                a22 = new Integer(resultSet.getInt("A22"));
                a23 = new Integer(resultSet.getInt("A23"));
                a24 = new Integer(resultSet.getInt("A24"));
                a25 = new Integer(resultSet.getInt("A25"));
                a26 = new Integer(resultSet.getInt("A26"));
                a27 = new Integer(resultSet.getInt("A27"));
                a28 = new Integer(resultSet.getInt("A28"));
                a29 = new Integer(resultSet.getInt("A29"));
                a30 = new Integer(resultSet.getInt("A30"));
                a31 = new Integer(resultSet.getInt("A31"));
                a32 = new Integer(resultSet.getInt("A32"));
                a33 = new Integer(resultSet.getInt("A33"));
                a34 = new Integer(resultSet.getInt("A34"));
                a35 = new Integer(resultSet.getInt("A35"));
                a36 = new Integer(resultSet.getInt("A36"));
                a37 = new Integer(resultSet.getInt("A37"));
                a38 = new Integer(resultSet.getInt("A38"));
                a39 = new Integer(resultSet.getInt("A39"));
                a40 = new Integer(resultSet.getInt("A40"));
                a41 = new Integer(resultSet.getInt("A41"));
                a42 = new Integer(resultSet.getInt("A42"));
                a43 = new Integer(resultSet.getInt("A43"));
                a44 = new Integer(resultSet.getInt("A44"));
                a45 = new Integer(resultSet.getInt("A45"));
                a46 = new Integer(resultSet.getInt("A46"));
                a47 = new Integer(resultSet.getInt("A47"));
                a48 = new Integer(resultSet.getInt("A48"));
                a49 = new Integer(resultSet.getInt("A49"));
                a50 = new Integer(resultSet.getInt("A50"));
                a51 = new Integer(resultSet.getInt("A51"));
                a52 = new Integer(resultSet.getInt("A52"));
                a53 = new Integer(resultSet.getInt("A53"));
                a54 = new Integer(resultSet.getInt("A54"));
                a55 = new Integer(resultSet.getInt("A55"));
                a56 = new Integer(resultSet.getInt("A56"));
                a57 = new Integer(resultSet.getInt("A57"));
                a58 = new Integer(resultSet.getInt("A58"));
                a59 = new Integer(resultSet.getInt("A59"));
                a60 = new Integer(resultSet.getInt("A60"));
                a61 = new Integer(resultSet.getInt("A61"));
                a62 = new Integer(resultSet.getInt("A62"));
                a63 = new Integer(resultSet.getInt("A63"));
                a64 = new Integer(resultSet.getInt("A64"));
                a65 = new Integer(resultSet.getInt("A65"));
                a66 = new Integer(resultSet.getInt("A66"));
                a67 = new Integer(resultSet.getInt("A67"));
                a68 = new Integer(resultSet.getInt("A68"));
                a69 = new Integer(resultSet.getInt("A69"));
                a70 = new Integer(resultSet.getInt("A70"));
                a71 = new Integer(resultSet.getInt("A71"));
                a72 = new Integer(resultSet.getInt("A72"));
                a73 = new Integer(resultSet.getInt("A73"));
                a74 = new Integer(resultSet.getInt("A74"));
                a75 = new Integer(resultSet.getInt("A75"));
                a76 = new Integer(resultSet.getInt("A76"));
                a77 = new Integer(resultSet.getInt("A77"));
                a78 = new Integer(resultSet.getInt("A78"));
                a79 = new Integer(resultSet.getInt("A79"));
                a80 = new Integer(resultSet.getInt("A80"));
                a81 = new Integer(resultSet.getInt("A81"));
                a82 = new Integer(resultSet.getInt("A82"));
                a83 = new Integer(resultSet.getInt("A83"));
                a84 = new Integer(resultSet.getInt("A84"));
                a85 = new Integer(resultSet.getInt("A85"));
                a86 = new Integer(resultSet.getInt("A86"));
                a87 = new Integer(resultSet.getInt("A87"));
                a88 = new Integer(resultSet.getInt("A88"));
                a89 = new Integer(resultSet.getInt("A89"));
                a90 = new Integer(resultSet.getInt("A80"));
                a91 = new Integer(resultSet.getInt("A91"));
                a92 = new Integer(resultSet.getInt("A92"));
                a93 = new Integer(resultSet.getInt("A93"));
                a94 = new Integer(resultSet.getInt("A94"));
                a95 = new Integer(resultSet.getInt("A95"));
                a96 = new Integer(resultSet.getInt("A96"));
                a97 = new Integer(resultSet.getInt("A97"));
                a98 = new Integer(resultSet.getInt("A98"));
                a99 = new Integer(resultSet.getInt("A99"));
                a100 = new Integer(resultSet.getInt("A100"));
                total = new Integer(resultSet.getInt("TOTAL"));
                
                DataModel.addRow(new Object[] {new Integer(serialNoCount),brand, qualityNo, shadeNo, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50,
                a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92, a93, a94, a95, a96, a97, a98, a99, a100, total});
                serialNoCount++;
            }
            statement.close();
            connection.close();
        }
        catch(Exception e) {
            e.printStackTrace();
            statement = null;
            connection = null;
        }
        jTableComboPackets.setModel(DataModel);
    }
    
    /**
     * Creates excel file from JTable Data
     */
    private void exportJTableToExcel(JTable table, File file) {
        try {
            WritableWorkbook workbook = Workbook.createWorkbook(file);
            WritableSheet sheet = workbook.createSheet("COMBO DATA", 0);
            //sheet.setProtected(true);
            TableModel model = table.getModel();
            
            for (int i = 0; i < model.getColumnCount(); i++) {
                Label column = new Label(i, 0, model.getColumnName(i));
                sheet.addCell(column);
            }
            int j = 0;
            for (int i = 0; i < model.getRowCount(); i++) {
                for (j = 0; j < model.getColumnCount(); j++) {
                    Label row = new Label(j, i + 1,
                    model.getValueAt(i, j).toString());
                    sheet.addCell(row);
                }
            }
            workbook.write();
            workbook.close();
        }
        catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
}
