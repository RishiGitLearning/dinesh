/*
 * frmKhakiReport.java
 *
 * Created on December 20, 2013, 12:14 PM
 */

package EITLERP.Suitings;

import java.util.HashMap;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.net.URL;
import javax.swing.JOptionPane;

import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.data;
import EITLERP.ComboData;
/**
 *
 * @author  Vivek Kumar
 */
public class frmSalesSchemeReport extends javax.swing.JApplet {
    
    EITLComboModel schemeNameModel;
    EITLTableModel DataModel;
    
    private boolean printReport=false;
    
    /** Initializes the applet frmKhakiReport */
    public void init() {
        initComponents();
        setSize(520, 350);
        generateSchemeNameCombo();
        formatGrid();
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPopupMenu = new javax.swing.JPopupMenu();
        jMenuItemEligibility = new javax.swing.JMenuItem();
        jMenuItemDetailSummary = new javax.swing.JMenuItem();
        jMenuItemCreditNoteInput = new javax.swing.JMenuItem();
        cmbSchemeName = new javax.swing.JComboBox();
        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        lblStatus = new javax.swing.JLabel();
        cmdReport = new javax.swing.JButton();

        jMenuItemEligibility.setText("Eligiblity Report");
        jMenuItemEligibility.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEligibilityActionPerformed(evt);
            }
        });

        jPopupMenu.add(jMenuItemEligibility);

        jMenuItemDetailSummary.setText("Detail Summary");
        jMenuItemDetailSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDetailSummaryActionPerformed(evt);
            }
        });

        jPopupMenu.add(jMenuItemDetailSummary);

        jMenuItemCreditNoteInput.setText("Credit Note Input");
        jMenuItemCreditNoteInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCreditNoteInputActionPerformed(evt);
            }
        });

        jPopupMenu.add(jMenuItemCreditNoteInput);

        getContentPane().setLayout(null);

        cmbSchemeName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSchemeNameActionPerformed(evt);
            }
        });

        getContentPane().add(cmbSchemeName);
        cmbSchemeName.setBounds(10, 40, 450, 24);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText("SUITINGS SALES SCHEME REPORT");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 2, 500, 25);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 70, 450, 90);

        lblStatus.setFont(new java.awt.Font("Dialog", 1, 14));
        lblStatus.setForeground(new java.awt.Color(0, 51, 255));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(10, 270, 450, 20);

        cmdReport.setText("View Report");
        cmdReport.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdReport.setEnabled(false);
        cmdReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdReportActionPerformed(evt);
            }
        });

        getContentPane().add(cmdReport);
        cmdReport.setBounds(10, 170, 140, 25);

    }//GEN-END:initComponents
    
    private void jMenuItemCreditNoteInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCreditNoteInputActionPerformed
        if(printReport) new Thread(){
            public void run(){
                if(!printCreditNoteInputReport(EITLERPGLOBAL.getComboCode(cmbSchemeName)))
                    JOptionPane.showMessageDialog(frmSalesSchemeReport.this,"Report Not Generated.", "ERROR",JOptionPane.ERROR_MESSAGE);
            }
        }.start();
    }//GEN-LAST:event_jMenuItemCreditNoteInputActionPerformed
    
    private void jMenuItemDetailSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDetailSummaryActionPerformed
        if(printReport) new Thread(){
            public void run(){
                if(!printDetailSummaryReport(EITLERPGLOBAL.getComboCode(cmbSchemeName)))
                    JOptionPane.showMessageDialog(frmSalesSchemeReport.this,"Report Not Generated.", "ERROR",JOptionPane.ERROR_MESSAGE);
            }
        }.start();
    }//GEN-LAST:event_jMenuItemDetailSummaryActionPerformed
    
    private void jMenuItemEligibilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEligibilityActionPerformed
        if(printReport)new Thread(){
            public void run(){
                String schemeName=schemeNameModel.getText(EITLERPGLOBAL.getComboCode(cmbSchemeName));
                
                if(schemeName.contains("KHAKI")){
                    printEligiblityCheckReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),1);
                }else if(schemeName.contains("RETAILER")){
                    printEligiblityCheckReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),2);
                }else if(schemeName.contains("BONANZA")){
                    printEligiblityCheckReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),3);
                }else if(schemeName.contains("SPL")){
                    printEligiblityCheckReport(EITLERPGLOBAL.getComboCode(cmbSchemeName),3);
                }
            }
        }.start();
    }//GEN-LAST:event_jMenuItemEligibilityActionPerformed
    
    private void cmdReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdReportActionPerformed
        jPopupMenu.show(cmdReport, 0, 25);
    }//GEN-LAST:event_cmdReportActionPerformed
    
    private void cmbSchemeNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSchemeNameActionPerformed
        if(EITLERPGLOBAL.getComboCode(cmbSchemeName)!=0){
            formatGrid();
            try{
                ResultSet rs=data.getResult("SELECT * FROM SALES.D_SAL_SCHEME_SLAB WHERE SLAB_SCHEME_ID="+EITLERPGLOBAL.getComboCode(cmbSchemeName) +" ORDER BY SLAB_SR_NO");
                while(!rs.isAfterLast()){
                    Object[] rowData=new Object[6];
                    rowData[0]=rs.getString("SLAB_SR_NO");
                    rowData[1]=rs.getString("SLAB_UOM");
                    rowData[2]=rs.getString("SLAB_FROM");
                    rowData[3]=rs.getString("SLAB_TO");
                    rowData[4]=rs.getString("SLAB_OUTPUT");
                    rowData[5]=rs.getString("SLAB_OUTPUT_UNIT");
                    DataModel.addRow(rowData);
                    rs.next();
                }
                rs.close();
                
                if(data.getBoolValueFromDB("SELECT SCHEME_CLOSED FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+EITLERPGLOBAL.getComboCode(cmbSchemeName))){
                    printReport=true;
                    cmdReport.setEnabled(true);
                    cmbSchemeName.setEnabled(true);
                }else {
                    lblStatus.setText("Processing ...");
                    cmbSchemeName.setEnabled(false);
                    cmdReport.setEnabled(false);
                    
                    new Thread(){
                        public void run(){
                            if(processScheme(EITLERPGLOBAL.getComboCode(cmbSchemeName))){
                                cmdReport.setEnabled(true);
                                cmbSchemeName.setEnabled(true);
                                lblStatus.setText("Finished ...");
                            }
                        }
                    }.start();
                }
                
            }catch(SQLException sqe){sqe.printStackTrace();}
        }
    }//GEN-LAST:event_cmbSchemeNameActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbSchemeName;
    private javax.swing.JButton cmdReport;
    private javax.swing.JMenuItem jMenuItemCreditNoteInput;
    private javax.swing.JMenuItem jMenuItemDetailSummary;
    private javax.swing.JMenuItem jMenuItemEligibility;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
    
    private boolean processScheme(int schemeId){
        String schemeName=schemeNameModel.getText(EITLERPGLOBAL.getComboCode(cmbSchemeName));
        
        if(schemeName.contains("KHAKI")){
            return processKhakiScheme(schemeId);
        }else if(schemeName.contains("RETAILER")){
            return processRetailerScheme(schemeId);
        }else if(schemeName.contains("BONANZA")){
            return processBonanzaScheme(schemeId);
        }else if(schemeName.contains("SPL")){
            return processSPLScheme(schemeId);
        }else{
            return false;
        }
    }
    
    private boolean printDetailSummaryReport(int schemeId) {
        String schemeName=schemeNameModel.getText(EITLERPGLOBAL.getComboCode(cmbSchemeName));
        
        if(schemeName.contains("KHAKI")){
            return printKhakiDetailSummaryReport(schemeId);
        }else if(schemeName.contains("RETAILER")){
            return printRetailerDetailSummaryReport(schemeId);
        }else if(schemeName.contains("BONANZA")){
            return printBonanzaDetailSummaryReport(schemeId);
        }else if(schemeName.contains("SPL")){
            return printBonanzaDetailSummaryReport(schemeId);
        }else{
            return false;
        }
    }
    
    private boolean processKhakiScheme(int schemeId){
        try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            ResultSet rsScheme=stmt.executeQuery("SELECT SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+schemeId);
            rsScheme.first();
            String seasonId=rsScheme.getString("SCHEME_SEASON_ID");
            
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeDetailQry="INSERT INTO SALES.D_SAL_SCHEME_DETAIL(SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_FLAG,SCD_UNIT_CODE,SCD_GROSS_QTY,SCD_GROSS_AMOUNT,SCD_NET_QTY,SCD_NET_AMOUNT,SCD_AGENT_LAST_INVOICE,SCD_AGENT_SR_NO,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_INV_RATE,SCD_PL_RATE,SCD_QUALITY_ELIGIBLE,SCD_DISC_PER_MTR_RATE,SCD_DISC_PERCENT,SCD_DISC_AMOUNT,SCD_GATE_PASS_NO,SCD_GATEPASS_DATE,SCD_BALE_NO) " +
            "SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO,B.PATTERN_CODE AS SHADE ,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,0,'',0,0,0,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO " +
            "FROM DINESHMILLS.D_SAL_INVOICE_HEADER A,DINESHMILLS.D_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D,SALES.D_SAL_SCHEME_MASTER E " +
            "WHERE A.INVOICE_TYPE =1 AND A.INVOICE_DATE = B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE >= DATE_FROM  AND A.INVOICE_DATE <= DATE_TO AND SCHEME_SEASON_ID = SEASON_ID AND SCHEME_ID ="+schemeId+" AND SEASON_ID ='"+seasonId+"' AND B.QUALITY_NO/10 IN (SCHEME_QUALITY_ID) ORDER BY A.PARTY_CODE,B.QUALITY_NO,B.PATTERN_CODE,INVOICE_NO,INVOICE_DATE LIMIT 1000000";
            
            stmt.execute(schemeDetailQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL,DINESHMILLS.D_SAL_PRICE_LIST_DETAIL SET SCD_PL_RATE=EX_MILL_RATE WHERE SCD_QUALITY_ID/10=QUALITY_ID AND SCD_SEASON_ID=SUBSTRING(PRICE_LIST_NO,3,5) AND SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID ="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_QUALITY_ELIGIBLE = CASE WHEN SCD_INV_RATE - SCD_PL_RATE =0 THEN 'Y' ELSE 'N' END WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeHeaderQry="INSERT INTO SALES.D_SAL_SCHEME_HEADER(SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_CHARGE_CODE,SCH_BOOK_CODE,SCH_MAIN_CODE,SCH_DRAFT_CR_NOTE_NO,SCH_DRAFT_CR_NOTE_DATE,SCH_REASON_CODE,SCH_LINK_NO,SCH_TOTAL_GR_LIFT_QTY,SCH_TOTAL_NET_LIFT_QTY,SCH_TOTAL_INV_AMOUNT,SCH_DISC_RATE,SCH_DISC_PERCENT,SCH_DISC_AMOUNT,SCH_TOTAL_AMOUNT,SCH_ELIGIBILITY,SCH_CREATED_BY,SCH_CREATED_DATE,SCH_MODIFIED_BY,SCH_MODIFIED_DATE,SCH_APPROVED,SCH_APPROVED_DATE,SCH_CANCELLED,SCH_CANCELLED_DATE,SCH_REJECTED,SCH_REJECTED_DATE,SCH_CHANGED,SCH_CHANGED_DATE) "+
            "SELECT SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,'','','','','','','0000-00-00','','',SUM(SCD_GROSS_QTY),SUM(SCD_NET_QTY),0,0,0,0,0,'N',1,NOW(),0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',1,NOW() "+
            "FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID= '"+seasonId+"' AND SCD_QUALITY_ELIGIBLE ='Y'  AND SCD_SCHEME_ID ="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE ";
            
            stmt.execute(schemeHeaderQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,DINESHMILLS.D_SAL_PARTY_MASTER SET SCH_PARTY_NAME=PARTY_NAME,SCH_CITY=CITY_ID,SCH_CHARGE_CODE=CHARGE_CODE WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_SLAB,SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_RATE=SLAB_OUTPUT WHERE SLAB_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SLAB_SEASON_ID = SCH_SEASON_ID AND SCH_SCHEME_ID =SLAB_SCHEME_ID AND SCH_TOTAL_GR_LIFT_QTY >=SLAB_FROM AND SCH_TOTAL_GR_LIFT_QTY<=SLAB_TO");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_ELIGIBILITY =CASE WHEN SCH_DISC_RATE!=0  THEN 'Y' ELSE 'N' END  WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_AMOUNT=SCH_DISC_RATE*SCH_TOTAL_NET_LIFT_QTY WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PER_MTR_RATE=SCH_DISC_RATE, SCD_DISC_AMOUNT=SCD_NET_QTY*SCH_DISC_RATE WHERE SCD_SCHEME_ID=SCH_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE AND SCD_QUALITY_ELIGIBLE='Y' AND SCH_SEASON_ID ='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            processKhakiCreditNote(schemeId, seasonId);
            
            printReport=true;
            return true;
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
    }
    
    private boolean printCreditNoteInputReport(int schemeId){
        try{
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            
            objData.AddColumn("SEASON_ID");
            objData.AddColumn("SCHEME_NAME");
            objData.AddColumn("SCHEME_PERIOD");
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("STATION");
            objData.AddColumn("BOOK_CODE");
            objData.AddColumn("MAIN_CODE");
            objData.AddColumn("DRAFT_CREDIT_NOTE_NO");
            objData.AddColumn("DRAFT_CREDIT_NOTE_DATE");
            objData.AddColumn("REASON_CODE");
            objData.AddColumn("LINK_NO");
            objData.AddColumn("NET_AMOUNT");
            objData.AddColumn("GROSS_QUANTITY");
            
            String str ="SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_NAME,SCH_CITY,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_BOOK_CODE,SCH_MAIN_CODE,SCH_DRAFT_CR_NOTE_NO,SCH_DRAFT_CR_NOTE_DATE,SCH_REASON_CODE,SCH_LINK_NO,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT, SCH_TOTAL_GR_LIFT_QTY FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCH_ELIGIBILITY='Y' ORDER BY SCH_PARTY_CODE";
            ResultSet  rsTemp =data.getResult(str);
            if(rsTemp.getRow()>0){
                while(!rsTemp.isAfterLast()){
                    
                    TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                    
                    objRow.setValue("SEASON_ID",rsTemp.getString("SCHEME_SEASON_ID"));
                    objRow.setValue("SCHEME_NAME",rsTemp.getString("SCHEME_NAME"));
                    objRow.setValue("SCHEME_PERIOD","("+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_START"))+" TO "+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_END"))+")");
                    objRow.setValue("PARTY_CODE", rsTemp.getString("SCH_PARTY_CODE"));
                    objRow.setValue("PARTY_NAME", rsTemp.getString("SCH_PARTY_NAME"));
                    objRow.setValue("STATION", rsTemp.getString("SCH_CITY"));
                    objRow.setValue("BOOK_CODE", rsTemp.getString("SCH_BOOK_CODE"));
                    objRow.setValue("MAIN_CODE", rsTemp.getString("SCH_MAIN_CODE"));
                    objRow.setValue("DRAFT_CREDIT_NOTE_NO", rsTemp.getString("SCH_DRAFT_CR_NOTE_NO"));
                    objRow.setValue("DRAFT_CREDIT_NOTE_DATE", EITLERPGLOBAL.formatDate(rsTemp.getString("SCH_DRAFT_CR_NOTE_DATE")));
                    objRow.setValue("REASON_CODE", rsTemp.getString("SCH_REASON_CODE"));
                    objRow.setValue("LINK_NO", rsTemp.getString("SCH_LINK_NO"));
                    objRow.setValue("NET_AMOUNT", rsTemp.getString("SCH_DISC_AMOUNT"));
                    objRow.setValue("GROSS_QUANTITY", rsTemp.getString("SCH_TOTAL_GR_LIFT_QTY"));
                    
                    objData.AddRow(objRow);
                    rsTemp.next();
                }
                
                EITLERPGLOBAL.PAGE_BREAK=true;
                new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/rptKhakiDiscountCreditNoteInput.rpt",new HashMap(),objData);
                rsTemp.close();
                
                return true;
            }else return false;
        }catch(SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
    
    private void printEligiblityCheckReport(int schemeId, int reportId){
        try {
            URL reportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/rptSuitingsSalesSchemeReport.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&SCHEME_ID="+schemeId+"&REPORT_ID="+reportId);
            EITLERPGLOBAL.loginContext.showDocument(reportFile,"_blank");
            
            if(schemeId==4 || schemeId==6) printBonanzaDetailSummaryReport(schemeId,4);
            
        }catch(Exception e) {
            JOptionPane.showMessageDialog(this,"File error "+e.getMessage(),"FILE ERROR",JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    
    private boolean printKhakiDetailSummaryReport(int schemeId) {
        try{
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            
            objData.AddColumn("SEASON_ID");
            objData.AddColumn("SCHEME_NAME");
            objData.AddColumn("SCHEME_PERIOD");
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("STATION");
            objData.AddColumn("ELIGIBILE");
            objData.AddColumn("DISC_RATE");
            objData.AddColumn("DISC_AMOUNT");
            objData.AddColumn("QUALITY_NO");
            objData.AddColumn("SHADE_NO");
            objData.AddColumn("PIECE_NO");
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("RATE");
            objData.AddColumn("GROSS_QUANTITY");
            objData.AddColumn("NET_QUANTITY");
            objData.AddColumn("FLAG");
            
            String str ="SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_NAME,SCH_CITY,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_ELIGIBILITY,SCH_DISC_RATE,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_FLAG,SCD_GROSS_QTY,SCD_NET_QTY,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_INV_RATE FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCD_SEASON_ID=SCH_SEASON_ID AND SCD_PARTY_CODE=SCH_PARTY_CODE AND SCH_SCHEME_ID=SCD_SCHEME_ID AND SCD_QUALITY_ELIGIBLE='Y' ORDER BY SCH_ELIGIBILITY DESC,SCH_PARTY_CODE";
            ResultSet  rsTemp =data.getResult(str);
            while(!rsTemp.isAfterLast()){
                TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                
                objRow.setValue("SEASON_ID",rsTemp.getString("SCHEME_SEASON_ID"));
                objRow.setValue("SCHEME_NAME",rsTemp.getString("SCHEME_NAME"));
                objRow.setValue("SCHEME_PERIOD","("+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_START"))+"-"+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_END"))+")");
                objRow.setValue("PARTY_CODE", rsTemp.getString("SCH_PARTY_CODE"));
                objRow.setValue("PARTY_NAME", rsTemp.getString("SCH_PARTY_NAME"));
                objRow.setValue("STATION", rsTemp.getString("SCH_CITY"));
                objRow.setValue("ELIGIBILE", rsTemp.getString("SCH_ELIGIBILITY"));
                objRow.setValue("DISC_RATE", rsTemp.getString("SCH_DISC_RATE"));
                objRow.setValue("DISC_AMOUNT", rsTemp.getString("SCH_DISC_AMOUNT"));
                objRow.setValue("QUALITY_NO", rsTemp.getString("SCD_QUALITY_ID"));
                objRow.setValue("SHADE_NO", rsTemp.getString("SCD_SHADE"));
                objRow.setValue("PIECE_NO", rsTemp.getString("SCD_PIECE_NO"));
                objRow.setValue("INVOICE_NO", rsTemp.getString("SCD_INVOICE_NO"));
                objRow.setValue("INVOICE_DATE", EITLERPGLOBAL.formatDate(rsTemp.getString("SCD_INVOICE_DATE")));
                objRow.setValue("RATE", rsTemp.getString("SCD_INV_RATE"));
                objRow.setValue("GROSS_QUANTITY", rsTemp.getString("SCD_GROSS_QTY"));
                objRow.setValue("NET_QUANTITY", rsTemp.getString("SCD_NET_QTY"));
                objRow.setValue("FLAG", rsTemp.getString("SCD_FLAG"));
                
                objData.AddRow(objRow);
                rsTemp.next();
            }
            
            EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/rptKhakiDiscountReport.rpt",new HashMap(),objData);
            rsTemp.close();
            
            return true;
        }catch(SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
    
    private void generateSchemeNameCombo(){
        schemeNameModel=new EITLComboModel();
        schemeNameModel.removeAllElements();
        cmbSchemeName.setModel(schemeNameModel);
        try{
            ComboData combodata=new ComboData();
            combodata.Code=0;
            combodata.Text="Select Scheme Name";
            
            schemeNameModel.addElement(combodata);
            ResultSet rs=data.getResult("SELECT SCHEME_ID,SCHEME_NAME,SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER ORDER BY SCHEME_ID");
            while(!rs.isAfterLast()){
                combodata=new ComboData();
                combodata.Code=rs.getLong("SCHEME_ID");
                combodata.strCode=rs.getString("SCHEME_NAME");
                combodata.Text=rs.getString("SCHEME_NAME")+"-"+rs.getString("SCHEME_SEASON_ID");
                
                schemeNameModel.addElement(combodata);
                rs.next();
            }
        }catch(SQLException e){e.printStackTrace();}
    }
    
    private void formatGrid(){
        DataModel=new EITLTableModel();
        table.removeAll();
        table.setModel(DataModel);
        
        DataModel.addColumn("Sr.");
        DataModel.addColumn("Unit");
        DataModel.addColumn("From");
        DataModel.addColumn("To");
        DataModel.addColumn("Discount");
        DataModel.addColumn("Disc. Unit");
    }
    
    private boolean processRetailerScheme(int schemeId){
        try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            ResultSet rsScheme=stmt.executeQuery("SELECT SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+schemeId);
            rsScheme.first();
            String seasonId=rsScheme.getString("SCHEME_SEASON_ID");
            
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeDetailQry="INSERT INTO SALES.D_SAL_SCHEME_DETAIL(SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_FLAG,SCD_UNIT_CODE,SCD_GROSS_QTY,SCD_GROSS_AMOUNT,SCD_NET_QTY,SCD_NET_AMOUNT,SCD_AGENT_LAST_INVOICE,SCD_AGENT_SR_NO,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_INV_RATE,SCD_PL_RATE,SCD_QUALITY_ELIGIBLE,SCD_DISC_PER_MTR_RATE,SCD_DISC_PERCENT,SCD_DISC_AMOUNT,SCD_GATE_PASS_NO,SCD_GATEPASS_DATE,SCD_BALE_NO) " +
            "SELECT SCHEME_ID,I.SEASON_ID,PARTY_CODE,QUALITY_NO,SHADE ,PIECE_NO,FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,NET_AMOUNT,AGENT_LAST_INVOICE,AGENT_SR_NO,INVOICE_NO,INVOICE_DATE,RATE,0,'',0,0,0,GATEPASS_NO,GATEPASS_DATE,BALE_NO FROM  "+
            "(SELECT QUALITY_ID,SEASON_ID FROM D_SAL_QUALITY_MASTER WHERE SEASON_ID='"+seasonId+"' AND CATEGORY_LIST='REGULAR') Q "+
            "INNER JOIN "+
            "(SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO/10 QUALITY_NO,B.PATTERN_CODE AS SHADE,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO FROM DINESHMILLS.D_SAL_INVOICE_HEADER A,DINESHMILLS.D_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D, SALES.D_SAL_SCHEME_MASTER E, D_SAL_PARTY_MASTER P WHERE A.INVOICE_TYPE =1 AND A.PARTY_CODE=P.PARTY_CODE AND PARTY_TYPE=2 AND A.INVOICE_DATE=B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE>=DATE_FROM AND A.INVOICE_DATE<=DATE_TO AND SCHEME_SEASON_ID=SEASON_ID AND SCHEME_ID="+schemeId+" AND SEASON_ID='"+seasonId+"') I ON SUBSTRING(QUALITY_ID,2,5)=SUBSTRING(QUALITY_NO,2,5) AND Q.SEASON_ID=I.SEASON_ID ";
            
            stmt.execute(schemeDetailQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL,DINESHMILLS.D_SAL_PRICE_LIST_DETAIL SET SCD_PL_RATE=EX_MILL_RATE WHERE SUBSTRING(SCD_QUALITY_ID,2,5)=SUBSTRING(QUALITY_ID,2,5) AND SCD_SEASON_ID=SUBSTRING(PRICE_LIST_NO,3,5) AND SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID ="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_QUALITY_ELIGIBLE=CASE WHEN SCD_INV_RATE-SCD_PL_RATE=0 THEN 'Y' ELSE 'N' END WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeHeaderQry="INSERT INTO SALES.D_SAL_SCHEME_HEADER(SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_CHARGE_CODE,SCH_BOOK_CODE,SCH_MAIN_CODE,SCH_DRAFT_CR_NOTE_NO,SCH_DRAFT_CR_NOTE_DATE,SCH_REASON_CODE,SCH_LINK_NO,SCH_TOTAL_GR_LIFT_QTY,SCH_TOTAL_NET_LIFT_QTY,SCH_TOTAL_INV_AMOUNT,SCH_DISC_RATE,SCH_DISC_PERCENT,SCH_DISC_AMOUNT,SCH_TOTAL_AMOUNT,SCH_ELIGIBILITY,SCH_CREATED_BY,SCH_CREATED_DATE,SCH_MODIFIED_BY,SCH_MODIFIED_DATE,SCH_APPROVED,SCH_APPROVED_DATE,SCH_CANCELLED,SCH_CANCELLED_DATE,SCH_REJECTED,SCH_REJECTED_DATE,SCH_CHANGED,SCH_CHANGED_DATE) "+
            "SELECT SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,'','','','','','','0000-00-00','','',SUM(SCD_GROSS_QTY),SUM(SCD_NET_QTY),SUM(SCD_NET_AMOUNT),0,0,0,0,'N',1,NOW(),0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',1,NOW() "+
            "FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID= '"+seasonId+"' AND SCD_QUALITY_ELIGIBLE ='Y' AND SCD_SCHEME_ID="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE ";
            
            stmt.execute(schemeHeaderQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,DINESHMILLS.D_SAL_PARTY_MASTER SET SCH_PARTY_NAME=PARTY_NAME,SCH_CITY=CITY_ID,SCH_CHARGE_CODE=CHARGE_CODE WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_SLAB,SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_PERCENT=SLAB_OUTPUT WHERE SLAB_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SLAB_SEASON_ID=SCH_SEASON_ID AND SCH_SCHEME_ID=SLAB_SCHEME_ID AND SCH_TOTAL_GR_LIFT_QTY >=SLAB_FROM AND SCH_TOTAL_GR_LIFT_QTY<=SLAB_TO");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_ELIGIBILITY =CASE WHEN SCH_DISC_PERCENT!=0 THEN 'Y' ELSE 'N' END WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_AMOUNT=SCH_DISC_PERCENT*SCH_TOTAL_INV_AMOUNT/100 WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PERCENT=SCH_DISC_PERCENT,SCD_DISC_AMOUNT=SCD_NET_AMOUNT*SCH_DISC_PERCENT/100 WHERE SCD_SCHEME_ID=SCH_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE AND SCD_QUALITY_ELIGIBLE='Y' AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            processRetailerCreditNote(schemeId, seasonId);
            
            printReport=true;
            return true;
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
    }
    
    private boolean printRetailerDetailSummaryReport(int schemeId) {
        try{
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            
            objData.AddColumn("SEASON_ID");
            objData.AddColumn("SCHEME_NAME");
            objData.AddColumn("SCHEME_PERIOD");
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("STATION");
            objData.AddColumn("ELIGIBILE");
            objData.AddColumn("DISC_PERCENT");
            objData.AddColumn("DISC_AMOUNT");
            objData.AddColumn("QUALITY_NO");
            objData.AddColumn("SHADE_NO");
            objData.AddColumn("PIECE_NO");
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("RATE");
            objData.AddColumn("GROSS_QUANTITY");
            objData.AddColumn("NET_QUANTITY");
            objData.AddColumn("FLAG");
            
            String str ="SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_NAME,SCH_CITY,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_ELIGIBILITY,SCH_DISC_PERCENT,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_FLAG,SCD_GROSS_QTY,SCD_NET_QTY,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_INV_RATE FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCD_SEASON_ID=SCH_SEASON_ID AND SCD_PARTY_CODE=SCH_PARTY_CODE AND SCH_SCHEME_ID=SCD_SCHEME_ID AND SCD_QUALITY_ELIGIBLE='Y' ORDER BY SCH_ELIGIBILITY DESC,SCH_PARTY_CODE";
            ResultSet  rsTemp =data.getResult(str);
            while(!rsTemp.isAfterLast()){
                TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                
                objRow.setValue("SEASON_ID",rsTemp.getString("SCHEME_SEASON_ID"));
                objRow.setValue("SCHEME_NAME",rsTemp.getString("SCHEME_NAME"));
                objRow.setValue("SCHEME_PERIOD","("+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_START"))+"-"+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_END"))+")");
                objRow.setValue("PARTY_CODE", rsTemp.getString("SCH_PARTY_CODE"));
                objRow.setValue("PARTY_NAME", rsTemp.getString("SCH_PARTY_NAME"));
                objRow.setValue("STATION", rsTemp.getString("SCH_CITY"));
                objRow.setValue("ELIGIBILE", rsTemp.getString("SCH_ELIGIBILITY"));
                objRow.setValue("DISC_PERCENT", rsTemp.getString("SCH_DISC_PERCENT"));
                objRow.setValue("DISC_AMOUNT", rsTemp.getString("SCH_DISC_AMOUNT"));
                objRow.setValue("QUALITY_NO", rsTemp.getString("SCD_QUALITY_ID"));
                objRow.setValue("SHADE_NO", rsTemp.getString("SCD_SHADE"));
                objRow.setValue("PIECE_NO", rsTemp.getString("SCD_PIECE_NO"));
                objRow.setValue("INVOICE_NO", rsTemp.getString("SCD_INVOICE_NO"));
                objRow.setValue("INVOICE_DATE", EITLERPGLOBAL.formatDate(rsTemp.getString("SCD_INVOICE_DATE")));
                objRow.setValue("RATE", rsTemp.getString("SCD_INV_RATE"));
                objRow.setValue("GROSS_QUANTITY", rsTemp.getString("SCD_GROSS_QTY"));
                objRow.setValue("NET_QUANTITY", rsTemp.getString("SCD_NET_QTY"));
                objRow.setValue("FLAG", rsTemp.getString("SCD_FLAG"));
                
                objData.AddRow(objRow);
                rsTemp.next();
            }
            
            EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/rptRetailerSchemeDetailReport.rpt",new HashMap(),objData);
            rsTemp.close();
            
            return true;
        }catch(SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
    
    private boolean processKhakiCreditNote(int schemeId, String seasonId){
        try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            
            String bookCode="TR-15";
            String mainCode="435187";
            String draftNo="KHAKI"+seasonId+" - ";
            String draftDate="2013-12-31";
            String linkNo=" /"+Integer.toString(EITLERPGLOBAL.FinYearFrom)+"-"+Integer.toString(EITLERPGLOBAL.FinYearTo);
            int draftSrNo=1;
            int linkSrNo=7501;
            int reasonCode=36;
            int counter=0;
            
            ResultSet rsSchemeHeader=stmt.executeQuery("SELECT SCH_PARTY_CODE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SEASON_ID='"+seasonId+"' AND SCH_ELIGIBILITY='Y' ORDER BY SCH_PARTY_CODE");
            rsSchemeHeader.first();
            if(rsSchemeHeader.getRow()>0){
                while(!rsSchemeHeader.isAfterLast()){
                    stmt.executeUpdate("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_BOOK_CODE='"+bookCode+"',SCH_MAIN_CODE='"+mainCode+"',SCH_DRAFT_CR_NOTE_NO='"+draftNo+(draftSrNo+counter)+"',SCH_DRAFT_CR_NOTE_DATE='"+draftDate+"',SCH_REASON_CODE="+reasonCode+",SCH_LINK_NO='"+(linkSrNo+counter)+linkNo+"' WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SCH_PARTY_CODE='"+rsSchemeHeader.getString("SCH_PARTY_CODE")+"'");
                    rsSchemeHeader.next();
                    counter++;
                }
            }
            
            printReport=true;
            return true;
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
    }
    
    private boolean processRetailerCreditNote(int schemeId, String seasonId){
        try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            
            String bookCode="TR-15";
            String mainCode="435187";
            String draftNo="RETAIL"+seasonId+" - ";
            String draftDate="2013-12-31";
            String linkNo=" /"+Integer.toString(EITLERPGLOBAL.FinYearFrom)+"-"+Integer.toString(EITLERPGLOBAL.FinYearTo);
            int draftSrNo=1;
            int linkSrNo=7501;
            int reasonCode=36;
            int counter=0;
            
            ResultSet rsSchemeHeader=stmt.executeQuery("SELECT SCH_PARTY_CODE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SEASON_ID='"+seasonId+"' AND SCH_ELIGIBILITY='Y' ORDER BY SCH_PARTY_CODE");
            rsSchemeHeader.first();
            if(rsSchemeHeader.getRow()>0){
                while(!rsSchemeHeader.isAfterLast()){
                    stmt.executeUpdate("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_BOOK_CODE='"+bookCode+"',SCH_MAIN_CODE='"+mainCode+"',SCH_DRAFT_CR_NOTE_NO='"+draftNo+(draftSrNo+counter)+"',SCH_DRAFT_CR_NOTE_DATE='"+draftDate+"',SCH_REASON_CODE="+reasonCode+",SCH_LINK_NO='"+(linkSrNo+counter)+linkNo+"' WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SCH_PARTY_CODE='"+rsSchemeHeader.getString("SCH_PARTY_CODE")+"'");
                    rsSchemeHeader.next();
                    counter++;
                }
            }
            
            printReport=true;
            return true;
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
    }
    
    private boolean processBonanzaScheme(int schemeId){
        try{
            String fSchemeFromDate="2013-12-16";
            String fSchemeToDate="2014-03-31";
            String sSchemeFromDate="2014-04-01";
            String sSchemeToDate="2014-06-22";
            
            
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            ResultSet rsScheme=stmt.executeQuery("SELECT SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+schemeId);
            rsScheme.first();
            String seasonId=rsScheme.getString("SCHEME_SEASON_ID");
            
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeDetailQry="INSERT INTO SALES.D_SAL_SCHEME_DETAIL(SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_FLAG,SCD_UNIT_CODE,SCD_GROSS_QTY,SCD_GROSS_AMOUNT,SCD_NET_QTY,SCD_NET_AMOUNT,SCD_AGENT_LAST_INVOICE,SCD_AGENT_SR_NO,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_INV_RATE,SCD_PL_RATE,SCD_QUALITY_ELIGIBLE,SCD_DISC_PER_MTR_RATE,SCD_DISC_PERCENT,SCD_DISC_AMOUNT,SCD_GATE_PASS_NO,SCD_GATEPASS_DATE,SCD_BALE_NO) " +
            "SELECT SCHEME_ID,I.SEASON_ID,PARTY_CODE,QUALITY_NO,SHADE ,PIECE_NO,FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,NET_AMOUNT,AGENT_LAST_INVOICE,AGENT_SR_NO,INVOICE_NO,INVOICE_DATE,RATE,0,'',0,0,0,GATEPASS_NO,GATEPASS_DATE,BALE_NO FROM  "+
            "(SELECT QUALITY_ID,SEASON_ID FROM D_SAL_QUALITY_MASTER WHERE SEASON_ID='"+seasonId+"' AND CATEGORY_LIST='S-QL') Q "+
            "INNER JOIN "+
            "(SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO/10 QUALITY_NO,B.PATTERN_CODE AS SHADE,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO FROM DINESHMILLS.D_SAL_INVOICE_HEADER A,DINESHMILLS.D_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D, SALES.D_SAL_SCHEME_MASTER E, D_SAL_PARTY_MASTER P WHERE A.INVOICE_TYPE =1 AND A.PARTY_CODE=P.PARTY_CODE AND PARTY_TYPE=3 AND PARTY_ACTIVE='Y' AND A.INVOICE_DATE=B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE >= DATE_FROM  AND A.INVOICE_DATE <= DATE_TO AND SCHEME_SEASON_ID = SEASON_ID AND SCHEME_ID ="+schemeId+" AND SEASON_ID='"+seasonId+"') I ON SUBSTRING(QUALITY_ID,2,5)=SUBSTRING(QUALITY_NO,2,5) AND Q.SEASON_ID=I.SEASON_ID ";
            
            stmt.execute(schemeDetailQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL,DINESHMILLS.D_SAL_PRICE_LIST_DETAIL SET SCD_PL_RATE=EX_MILL_RATE WHERE SUBSTRING(SCD_QUALITY_ID,2,5)=SUBSTRING(QUALITY_ID,2,5) AND SCD_SEASON_ID=SUBSTRING(PRICE_LIST_NO,3,5) AND SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID ="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_QUALITY_ELIGIBLE=CASE WHEN SCD_INV_RATE-SCD_PL_RATE=0 THEN 'Y' ELSE 'N' END WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeHeaderQry="INSERT INTO SALES.D_SAL_SCHEME_HEADER(SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_CHARGE_CODE,SCH_BOOK_CODE,SCH_MAIN_CODE,SCH_DRAFT_CR_NOTE_NO,SCH_DRAFT_CR_NOTE_DATE,SCH_REASON_CODE,SCH_LINK_NO,SCH_TOTAL_GR_LIFT_QTY,SCH_TOTAL_NET_LIFT_QTY,SCH_TOTAL_FGR_LIFT_QTY,SCH_TOTAL_SGR_LIFT_QTY,SCH_TOTAL_FNET_LIFT_QTY,SCH_TOTAL_SNET_LIFT_QTY,SCH_TOTAL_INV_AMOUNT,SCH_TOTAL_FINV_AMOUNT,SCH_TOTAL_SINV_AMOUNT,SCH_DISC_RATE,SCH_DISC_PERCENT,SCH_DISC_AMOUNT,SCH_FDISC_PERCENT,SCH_SDISC_PERCENT,SCH_FDISC_AMOUNT,SCH_SDISC_AMOUNT,SCH_TOTAL_AMOUNT,SCH_ELIGIBILITY,SCH_CREATED_BY,SCH_CREATED_DATE,SCH_MODIFIED_BY,SCH_MODIFIED_DATE,SCH_APPROVED,SCH_APPROVED_DATE,SCH_CANCELLED,SCH_CANCELLED_DATE,SCH_REJECTED,SCH_REJECTED_DATE,SCH_CHANGED,SCH_CHANGED_DATE) "+
            "SELECT SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,'','','','','','','0000-00-00','','',SUM(SCD_GROSS_QTY),SUM(SCD_NET_QTY),0,0,0,0,SUM(SCD_NET_AMOUNT),0,0,0,0,0,0,0,0,0,0,'N',1,NOW(),0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',1,NOW() "+
            "FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_QUALITY_ELIGIBLE ='Y' AND SCD_SCHEME_ID="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE ";
            
            stmt.execute(schemeHeaderQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,DINESHMILLS.D_SAL_PARTY_MASTER SET SCH_PARTY_NAME=PARTY_NAME,SCH_CITY=CITY_ID,SCH_CHARGE_CODE=CHARGE_CODE WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            String fSchemeQry="UPDATE SALES.D_SAL_SCHEME_HEADER H, "+
            "(SELECT  SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SUM(SCD_GROSS_QTY) GQ,SUM(SCD_NET_QTY) NQ,SUM(SCD_NET_AMOUNT) NA "+
            "FROM SALES.D_SAL_SCHEME_DETAIL  WHERE SCD_INVOICE_DATE >= '"+fSchemeFromDate+"' AND SCD_INVOICE_DATE<='"+fSchemeToDate+"' AND SCD_SEASON_ID='"+seasonId+"' AND SCD_QUALITY_ELIGIBLE ='Y' AND SCD_SCHEME_ID="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE) D "+
            "SET SCH_TOTAL_FGR_LIFT_QTY=GQ,SCH_TOTAL_FNET_LIFT_QTY=NQ,SCH_TOTAL_FINV_AMOUNT=NA WHERE SCH_SCHEME_ID=SCD_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE";
            
            stmt.execute(fSchemeQry);
            
            String sSchemeQry="UPDATE SALES.D_SAL_SCHEME_HEADER H, "+
            "(SELECT  SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SUM(SCD_GROSS_QTY) GQ,SUM(SCD_NET_QTY) NQ,SUM(SCD_NET_AMOUNT) NA "+
            "FROM SALES.D_SAL_SCHEME_DETAIL  WHERE SCD_INVOICE_DATE >= '"+sSchemeFromDate+"' AND SCD_INVOICE_DATE<='"+sSchemeToDate+"' AND SCD_SEASON_ID='"+seasonId+"' AND SCD_QUALITY_ELIGIBLE ='Y' AND SCD_SCHEME_ID="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE) D "+
            "SET SCH_TOTAL_SGR_LIFT_QTY=GQ,SCH_TOTAL_SNET_LIFT_QTY=NQ,SCH_TOTAL_SINV_AMOUNT=NA WHERE SCH_SCHEME_ID=SCD_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE";
            
            stmt.execute(sSchemeQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_SLAB,SALES.D_SAL_SCHEME_HEADER SET SCH_FDISC_PERCENT=SLAB_OUTPUT,SCH_FDISC_AMOUNT=SCH_TOTAL_FINV_AMOUNT*SLAB_OUTPUT/100 WHERE SLAB_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SLAB_SEASON_ID=SCH_SEASON_ID AND SCH_SCHEME_ID=SLAB_SCHEME_ID AND SCH_TOTAL_FGR_LIFT_QTY >=SLAB_FROM AND SCH_TOTAL_FGR_LIFT_QTY<=SLAB_TO AND SLAB_PARTY_CODE=SCH_PARTY_CODE AND SR_NO=1");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_SLAB,SALES.D_SAL_SCHEME_HEADER SET SCH_SDISC_PERCENT=SLAB_OUTPUT,SCH_SDISC_AMOUNT=SCH_TOTAL_SINV_AMOUNT*SLAB_OUTPUT/100 WHERE SLAB_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SLAB_SEASON_ID=SCH_SEASON_ID AND SCH_SCHEME_ID=SLAB_SCHEME_ID AND SCH_TOTAL_SGR_LIFT_QTY >=SLAB_FROM AND SCH_TOTAL_SGR_LIFT_QTY<=SLAB_TO AND SLAB_PARTY_CODE=SCH_PARTY_CODE AND SR_NO=2");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_AMOUNT=SCH_FDISC_AMOUNT+SCH_SDISC_AMOUNT WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_ELIGIBILITY=CASE WHEN SCH_DISC_AMOUNT !=0 THEN 'Y' ELSE 'N' END WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PERCENT=SCH_FDISC_PERCENT,SCD_DISC_AMOUNT=SCD_NET_AMOUNT*SCH_FDISC_PERCENT/100 WHERE SCD_SCHEME_ID=SCH_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SCD_INVOICE_DATE >= '"+fSchemeFromDate+"' AND SCD_INVOICE_DATE <= '"+fSchemeToDate+"' AND SCD_QUALITY_ELIGIBLE='Y'");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PERCENT=SCH_SDISC_PERCENT,SCD_DISC_AMOUNT=SCD_NET_AMOUNT*SCH_SDISC_PERCENT/100 WHERE SCD_SCHEME_ID=SCH_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SCD_INVOICE_DATE >= '"+sSchemeFromDate+"' AND SCD_INVOICE_DATE <= '"+sSchemeToDate+"' AND SCD_QUALITY_ELIGIBLE='Y'");
            
            //processBonanzaCreditNote(schemeId, seasonId);
            
            printReport=true;
            return true;
            
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
    }
    
    private boolean printBonanzaDetailSummaryReport(int schemeId) {
        try{
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            
            objData.AddColumn("SEASON_ID");
            objData.AddColumn("SCHEME_NAME");
            objData.AddColumn("SCHEME_PERIOD");
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("STATION");
            objData.AddColumn("ELIGIBILE");
            objData.AddColumn("DISC_AMOUNT");
            objData.AddColumn("QUALITY_NO");
            objData.AddColumn("SHADE_NO");
            objData.AddColumn("PIECE_NO");
            objData.AddColumn("GROSS_QUANTITY");
            objData.AddColumn("NET_QUANTITY");
            objData.AddColumn("NET_AMOUNT");
            objData.AddColumn("INVOICE_NO");
            objData.AddColumn("INVOICE_DATE");
            objData.AddColumn("BALE_NO");
            objData.AddColumn("AGENT_INVOICE_NO");
            
            String str="SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_ELIGIBILITY,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_GROSS_QTY,SCD_NET_QTY,SCD_NET_AMOUNT,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_BALE_NO,CONCAT(SCD_AGENT_LAST_INVOICE,'/',SCD_AGENT_SR_NO) SCD_AGENT_INV_NO FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCD_SEASON_ID=SCH_SEASON_ID AND SCD_PARTY_CODE=SCH_PARTY_CODE AND SCH_SCHEME_ID=SCD_SCHEME_ID AND SCD_QUALITY_ELIGIBLE='Y' "+
            "UNION ALL "+
            "SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_ELIGIBILITY,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT,SCD_QUALITY_ID,CONCAT(SCD_SHADE,' TOTAL') ,'',SUM(SCD_GROSS_QTY) SCD_GROSS_QTY,SUM(SCD_NET_QTY) SCD_NET_QTY,SUM(SCD_NET_AMOUNT)SCD_NET_AMOUNT,'','','','' FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCD_SEASON_ID=SCH_SEASON_ID AND SCD_PARTY_CODE=SCH_PARTY_CODE AND SCH_SCHEME_ID=SCD_SCHEME_ID AND SCD_QUALITY_ELIGIBLE='Y' "+
            "GROUP BY SCH_PARTY_CODE,SCD_QUALITY_ID,SCD_SHADE "+
            "UNION ALL "+
            "SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_ELIGIBILITY,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT,CONCAT(SCD_QUALITY_ID,' TOTAL') ,'','',SUM(SCD_GROSS_QTY) SCD_GROSS_QTY,SUM(SCD_NET_QTY) SCD_NET_QTY,SUM(SCD_NET_AMOUNT)SCD_NET_AMOUNT,'','','','' FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCD_SEASON_ID=SCH_SEASON_ID AND SCD_PARTY_CODE=SCH_PARTY_CODE AND SCH_SCHEME_ID=SCD_SCHEME_ID AND SCD_QUALITY_ELIGIBLE='Y' "+
            "GROUP BY SCH_PARTY_CODE,SCD_QUALITY_ID "+
            "UNION ALL "+
            "SELECT SCHEME_SEASON_ID,SCHEME_NAME,SCHEME_START,SCHEME_END,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_ELIGIBILITY,ROUND(SCH_DISC_AMOUNT) SCH_DISC_AMOUNT,'total','','',SUM(SCD_GROSS_QTY) SCD_GROSS_QTY,SUM(SCD_NET_QTY) SCD_NET_QTY,SUM(SCD_NET_AMOUNT)SCD_NET_AMOUNT,'','','','' FROM SALES.D_SAL_SCHEME_HEADER, SALES.D_SAL_SCHEME_DETAIL, SALES.D_SAL_SCHEME_MASTER WHERE SCH_SCHEME_ID="+schemeId+" AND SCH_SCHEME_ID =SCHEME_ID AND SCD_SEASON_ID=SCH_SEASON_ID AND SCD_PARTY_CODE=SCH_PARTY_CODE AND SCH_SCHEME_ID=SCD_SCHEME_ID AND SCD_QUALITY_ELIGIBLE='Y' "+
            "GROUP BY SCH_PARTY_CODE "+
            "ORDER BY SCH_ELIGIBILITY DESC,SCH_PARTY_CODE,SCD_QUALITY_ID,SCD_SHADE LIMIT 10000000";
            
            ResultSet  rsTemp =data.getResult(str);
            while(!rsTemp.isAfterLast()){
                boolean addBlankRow=false;
                boolean addBeforeBlankRow=false;
                TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
                
                objRow.setValue("SEASON_ID",rsTemp.getString("SCHEME_SEASON_ID"));
                objRow.setValue("SCHEME_NAME",rsTemp.getString("SCHEME_NAME"));
                objRow.setValue("SCHEME_PERIOD","("+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_START"))+"-"+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_END"))+")");
                objRow.setValue("PARTY_CODE", rsTemp.getString("SCH_PARTY_CODE"));
                objRow.setValue("PARTY_NAME", rsTemp.getString("SCH_PARTY_NAME"));
                objRow.setValue("STATION", rsTemp.getString("SCH_CITY"));
                objRow.setValue("ELIGIBILE", rsTemp.getString("SCH_ELIGIBILITY"));
                objRow.setValue("DISC_AMOUNT", rsTemp.getString("SCH_DISC_AMOUNT"));
                
                if(rsTemp.getString("SCD_SHADE").contains("T")){
                    objRow.setValue("QUALITY_NO", "");
                    objRow.setValue("SHADE_NO", "SHADE");
                    objRow.setValue("PIECE_NO", "TOTAL :-");
                    objRow.setValue("GROSS_QUANTITY", rsTemp.getString("SCD_GROSS_QTY"));
                    objRow.setValue("NET_QUANTITY", rsTemp.getString("SCD_NET_QTY"));
                    objRow.setValue("NET_AMOUNT", rsTemp.getString("SCD_NET_AMOUNT"));
                    objRow.setValue("INVOICE_NO", "");
                    objRow.setValue("INVOICE_DATE", "");
                    objRow.setValue("BALE_NO", "");
                    objRow.setValue("AGENT_INVOICE_NO", "");
                    
                    addBlankRow=true;
                    addBeforeBlankRow=true;
                    
                }else if(rsTemp.getString("SCD_QUALITY_ID").contains("T")){
                    objRow.setValue("QUALITY_NO", "");
                    objRow.setValue("SHADE_NO", "QUALITY");
                    objRow.setValue("PIECE_NO", "TOTAL :-");
                    objRow.setValue("GROSS_QUANTITY", rsTemp.getString("SCD_GROSS_QTY"));
                    objRow.setValue("NET_QUANTITY", rsTemp.getString("SCD_NET_QTY"));
                    objRow.setValue("NET_AMOUNT", rsTemp.getString("SCD_NET_AMOUNT"));
                    objRow.setValue("INVOICE_NO", "");
                    objRow.setValue("INVOICE_DATE", "");
                    objRow.setValue("BALE_NO", "");
                    objRow.setValue("AGENT_INVOICE_NO", "");
                    
                    addBlankRow=true;
                    
                }else if(rsTemp.getString("SCD_QUALITY_ID").contains("t")){
                    objRow.setValue("QUALITY_NO", "");
                    objRow.setValue("SHADE_NO", "PARTY");
                    objRow.setValue("PIECE_NO", "TOTAL :-");
                    objRow.setValue("GROSS_QUANTITY", rsTemp.getString("SCD_GROSS_QTY"));
                    objRow.setValue("NET_QUANTITY", rsTemp.getString("SCD_NET_QTY"));
                    objRow.setValue("NET_AMOUNT", rsTemp.getString("SCD_NET_AMOUNT"));
                    objRow.setValue("INVOICE_NO", "");
                    objRow.setValue("INVOICE_DATE", "");
                    objRow.setValue("BALE_NO", "");
                    objRow.setValue("AGENT_INVOICE_NO", "");
                }else{
                    objRow.setValue("QUALITY_NO", rsTemp.getString("SCD_QUALITY_ID"));
                    objRow.setValue("SHADE_NO", rsTemp.getString("SCD_SHADE"));
                    objRow.setValue("PIECE_NO", rsTemp.getString("SCD_PIECE_NO"));
                    objRow.setValue("GROSS_QUANTITY", rsTemp.getString("SCD_GROSS_QTY"));
                    objRow.setValue("NET_QUANTITY", rsTemp.getString("SCD_NET_QTY"));
                    objRow.setValue("NET_AMOUNT", rsTemp.getString("SCD_NET_AMOUNT"));
                    objRow.setValue("INVOICE_NO", rsTemp.getString("SCD_INVOICE_NO"));
                    objRow.setValue("INVOICE_DATE", EITLERPGLOBAL.formatDate(rsTemp.getString("SCD_INVOICE_DATE")));
                    objRow.setValue("BALE_NO", rsTemp.getString("SCD_BALE_NO"));
                    objRow.setValue("AGENT_INVOICE_NO", rsTemp.getString("SCD_AGENT_INV_NO"));
                }
                
                if(addBeforeBlankRow){
                    TReportWriter.SimpleDataProvider.TRow objBlankRow=objData.newRow();
                    objBlankRow.setValue("SEASON_ID",rsTemp.getString("SCHEME_SEASON_ID"));
                    objBlankRow.setValue("SCHEME_NAME",rsTemp.getString("SCHEME_NAME"));
                    objBlankRow.setValue("SCHEME_PERIOD","("+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_START"))+"-"+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_END"))+")");
                    objBlankRow.setValue("PARTY_CODE", rsTemp.getString("SCH_PARTY_CODE"));
                    objBlankRow.setValue("PARTY_NAME", rsTemp.getString("SCH_PARTY_NAME"));
                    objBlankRow.setValue("STATION", rsTemp.getString("SCH_CITY"));
                    objBlankRow.setValue("ELIGIBILE", rsTemp.getString("SCH_ELIGIBILITY"));
                    objBlankRow.setValue("DISC_AMOUNT", rsTemp.getString("SCH_DISC_AMOUNT"));
                    
                    objBlankRow.setValue("QUALITY_NO", "");
                    objBlankRow.setValue("SHADE_NO", "");
                    objBlankRow.setValue("PIECE_NO", "");
                    objBlankRow.setValue("GROSS_QUANTITY", "");
                    objBlankRow.setValue("NET_QUANTITY", "");
                    objBlankRow.setValue("NET_AMOUNT", "");
                    objBlankRow.setValue("INVOICE_NO", "");
                    objBlankRow.setValue("INVOICE_DATE", "");
                    objBlankRow.setValue("BALE_NO", "");
                    objBlankRow.setValue("AGENT_INVOICE_NO", "");
                    objData.AddRow(objBlankRow);
                }
                
                objData.AddRow(objRow);
                
                if(addBlankRow){
                    TReportWriter.SimpleDataProvider.TRow objBlankRow=objData.newRow();
                    
                    objBlankRow.setValue("SEASON_ID",rsTemp.getString("SCHEME_SEASON_ID"));
                    objBlankRow.setValue("SCHEME_NAME",rsTemp.getString("SCHEME_NAME"));
                    objBlankRow.setValue("SCHEME_PERIOD","("+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_START"))+"-"+EITLERPGLOBAL.formatDate(rsTemp.getString("SCHEME_END"))+")");
                    objBlankRow.setValue("PARTY_CODE", rsTemp.getString("SCH_PARTY_CODE"));
                    objBlankRow.setValue("PARTY_NAME", rsTemp.getString("SCH_PARTY_NAME"));
                    objBlankRow.setValue("STATION", rsTemp.getString("SCH_CITY"));
                    objBlankRow.setValue("ELIGIBILE", rsTemp.getString("SCH_ELIGIBILITY"));
                    objBlankRow.setValue("DISC_AMOUNT", rsTemp.getString("SCH_DISC_AMOUNT"));
                    
                    
                    objBlankRow.setValue("QUALITY_NO", "");
                    objBlankRow.setValue("SHADE_NO", "");
                    objBlankRow.setValue("PIECE_NO", "");
                    objBlankRow.setValue("GROSS_QUANTITY", "");
                    objBlankRow.setValue("NET_QUANTITY", "");
                    objBlankRow.setValue("NET_AMOUNT", "");
                    objBlankRow.setValue("INVOICE_NO", "");
                    objBlankRow.setValue("INVOICE_DATE", "");
                    objBlankRow.setValue("BALE_NO", "");
                    objBlankRow.setValue("AGENT_INVOICE_NO", "");
                    objData.AddRow(objBlankRow);
                }
                
                rsTemp.next();
            }
            
            EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/rptBonanzaSchemeDetailReport.rpt",new HashMap(),objData);
            rsTemp.close();
            
            return true;
        }catch(SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
    
    private boolean printBonanzaDetailSummaryReport(int schemeId, int reportId){
        try {
            URL reportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/rptSuitingsSalesSchemeReport.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&SCHEME_ID="+schemeId+"&REPORT_ID="+reportId);
            EITLERPGLOBAL.loginContext.showDocument(reportFile,"_blank");
            return true;
        }catch(Exception e) {
            JOptionPane.showMessageDialog(this,"File error "+e.getMessage(),"FILE ERROR",JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return false;
        }
    }
    
    private boolean processSPLScheme(int schemeId){
        try{
            Connection conn=data.getConn();
            Statement stmt=conn.createStatement();
            ResultSet rsScheme=stmt.executeQuery("SELECT SCHEME_SEASON_ID FROM SALES.D_SAL_SCHEME_MASTER WHERE SCHEME_ID="+schemeId);
            rsScheme.first();
            String seasonId=rsScheme.getString("SCHEME_SEASON_ID");
            
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_HEADER WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            stmt.execute("DELETE FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeDetailQry="INSERT INTO SALES.D_SAL_SCHEME_DETAIL(SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SCD_QUALITY_ID,SCD_SHADE,SCD_PIECE_NO,SCD_FLAG,SCD_UNIT_CODE,SCD_GROSS_QTY,SCD_GROSS_AMOUNT,SCD_NET_QTY,SCD_NET_AMOUNT,SCD_AGENT_LAST_INVOICE,SCD_AGENT_SR_NO,SCD_INVOICE_NO,SCD_INVOICE_DATE,SCD_INV_RATE,SCD_PL_RATE,SCD_QUALITY_ELIGIBLE,SCD_DISC_PER_MTR_RATE,SCD_DISC_PERCENT,SCD_DISC_AMOUNT,SCD_GATE_PASS_NO,SCD_GATEPASS_DATE,SCD_BALE_NO) " +
            "SELECT SCHEME_ID,I.SEASON_ID,PARTY_CODE,QUALITY_NO,SHADE ,PIECE_NO,FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,NET_AMOUNT,AGENT_LAST_INVOICE,AGENT_SR_NO,INVOICE_NO,INVOICE_DATE,RATE,0,'',0,0,0,GATEPASS_NO,GATEPASS_DATE,BALE_NO FROM  "+
            "(SELECT QUALITY_ID,SEASON_ID FROM D_SAL_QUALITY_MASTER WHERE SEASON_ID='"+seasonId+"' AND CATEGORY_LIST='A LIST') Q "+
            "INNER JOIN "+
            "(SELECT SCHEME_ID,SEASON_ID,A.PARTY_CODE,B.QUALITY_NO/10 QUALITY_NO,B.PATTERN_CODE AS SHADE,B.PIECE_NO,B.FLAG_DEF_CODE,UNIT_CODE,GROSS_QTY,GROSS_AMOUNT,NET_QTY,B.NET_AMOUNT,AGENT_LAST_INVOICE,A.AGENT_SR_NO,A.INVOICE_NO,A.INVOICE_DATE,B.RATE,A.GATEPASS_NO,A.GATEPASS_DATE,A.BALE_NO FROM DINESHMILLS.D_SAL_INVOICE_HEADER A,DINESHMILLS.D_SAL_INVOICE_DETAIL B,DINESHMILLS.D_SAL_SEASON_MASTER D, SALES.D_SAL_SCHEME_MASTER E WHERE A.INVOICE_TYPE =1 AND A.INVOICE_DATE=B.INVOICE_DATE AND A.INVOICE_NO = B.INVOICE_NO AND A.CANCELLED =0 AND A.APPROVED =1 AND A.INVOICE_DATE >= DATE_FROM AND A.INVOICE_DATE <= DATE_TO AND SCHEME_SEASON_ID = SEASON_ID AND SCHEME_ID ="+schemeId+" AND SEASON_ID='"+seasonId+"') I ON SUBSTRING(QUALITY_ID,2,5)=SUBSTRING(QUALITY_NO,2,5) AND Q.SEASON_ID=I.SEASON_ID ";
            
            stmt.execute(schemeDetailQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL,DINESHMILLS.D_SAL_PRICE_LIST_DETAIL SET SCD_PL_RATE=EX_MILL_RATE WHERE SUBSTRING(SCD_QUALITY_ID,2,5)=SUBSTRING(QUALITY_ID,2,5) AND SCD_SEASON_ID=SUBSTRING(PRICE_LIST_NO,3,5) AND SCD_SEASON_ID ='"+seasonId+"' AND SCD_SCHEME_ID ="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_DETAIL SET SCD_QUALITY_ELIGIBLE=CASE WHEN SCD_INV_RATE-SCD_PL_RATE=0 THEN 'Y' ELSE 'N' END WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_SCHEME_ID="+schemeId);
            
            String schemeHeaderQry="INSERT INTO SALES.D_SAL_SCHEME_HEADER(SCH_SCHEME_ID,SCH_SEASON_ID,SCH_PARTY_CODE,SCH_PARTY_NAME,SCH_CITY,SCH_CHARGE_CODE,SCH_BOOK_CODE,SCH_MAIN_CODE,SCH_DRAFT_CR_NOTE_NO,SCH_DRAFT_CR_NOTE_DATE,SCH_REASON_CODE,SCH_LINK_NO,SCH_TOTAL_GR_LIFT_QTY,SCH_TOTAL_NET_LIFT_QTY,SCH_TOTAL_FGR_LIFT_QTY,SCH_TOTAL_SGR_LIFT_QTY,SCH_TOTAL_FNET_LIFT_QTY,SCH_TOTAL_SNET_LIFT_QTY,SCH_TOTAL_INV_AMOUNT,SCH_TOTAL_FINV_AMOUNT,SCH_TOTAL_SINV_AMOUNT,SCH_DISC_RATE,SCH_DISC_PERCENT,SCH_DISC_AMOUNT,SCH_FDISC_PERCENT,SCH_SDISC_PERCENT,SCH_FDISC_AMOUNT,SCH_SDISC_AMOUNT,SCH_TOTAL_AMOUNT,SCH_ELIGIBILITY,SCH_CREATED_BY,SCH_CREATED_DATE,SCH_MODIFIED_BY,SCH_MODIFIED_DATE,SCH_APPROVED,SCH_APPROVED_DATE,SCH_CANCELLED,SCH_CANCELLED_DATE,SCH_REJECTED,SCH_REJECTED_DATE,SCH_CHANGED,SCH_CHANGED_DATE) "+
            "SELECT SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,'','','','','','','0000-00-00','','',SUM(SCD_GROSS_QTY),SUM(SCD_NET_QTY),0,0,0,0,SUM(SCD_NET_AMOUNT),0,0,0,0,0,0,0,0,0,0,'N',1,NOW(),0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',0,'0000-00-00 00:00:00',1,NOW() "+
            "FROM SALES.D_SAL_SCHEME_DETAIL WHERE SCD_SEASON_ID='"+seasonId+"' AND SCD_QUALITY_ELIGIBLE ='Y' AND SCD_SCHEME_ID="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE ";
            
            stmt.execute(schemeHeaderQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,DINESHMILLS.D_SAL_PARTY_MASTER SET SCH_PARTY_NAME=PARTY_NAME,SCH_CITY=CITY_ID,SCH_CHARGE_CODE=CHARGE_CODE WHERE SCH_PARTY_CODE=PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            String pwQry="UPDATE SALES.D_SAL_SCHEME_HEADER H, "+
            "(SELECT SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SUM(SCD_GROSS_QTY) GQ,SUM(SCD_NET_QTY) NQ,SUM(SCD_NET_AMOUNT) NA "+
            "FROM SALES.D_SAL_SCHEME_DETAIL WHERE SUBSTRING(SCD_QUALITY_ID,2,2)!='18' AND SCD_SEASON_ID='"+seasonId+"' AND SCD_QUALITY_ELIGIBLE ='Y' AND SCD_SCHEME_ID="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE) D "+
            "SET SCH_TOTAL_FGR_LIFT_QTY=GQ,SCH_TOTAL_FNET_LIFT_QTY=NQ,SCH_TOTAL_FINV_AMOUNT=NA WHERE SCH_SCHEME_ID=SCD_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE";
            
            stmt.execute(pwQry);
            
            String pvQry="UPDATE SALES.D_SAL_SCHEME_HEADER H, "+
            "(SELECT SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE,SUM(SCD_GROSS_QTY) GQ,SUM(SCD_NET_QTY) NQ,SUM(SCD_NET_AMOUNT) NA "+
            "FROM SALES.D_SAL_SCHEME_DETAIL WHERE SUBSTRING(SCD_QUALITY_ID,2,2)='18' AND SCD_SEASON_ID='"+seasonId+"' AND SCD_QUALITY_ELIGIBLE ='Y' AND SCD_SCHEME_ID="+schemeId+" GROUP BY SCD_SCHEME_ID,SCD_SEASON_ID,SCD_PARTY_CODE) D "+
            "SET SCH_TOTAL_SGR_LIFT_QTY=GQ,SCH_TOTAL_SNET_LIFT_QTY=NQ,SCH_TOTAL_SINV_AMOUNT=NA WHERE SCH_SCHEME_ID=SCD_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE";
            
            stmt.execute(pvQry);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_SLAB,SALES.D_SAL_SCHEME_HEADER SET SCH_FDISC_PERCENT=SLAB_OUTPUT,SCH_FDISC_AMOUNT=SCH_TOTAL_FINV_AMOUNT*SLAB_OUTPUT/100 WHERE SLAB_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SLAB_SEASON_ID=SCH_SEASON_ID AND SCH_SCHEME_ID=SLAB_SCHEME_ID AND SCH_TOTAL_GR_LIFT_QTY >=SLAB_FROM AND SCH_TOTAL_GR_LIFT_QTY<=SLAB_TO AND SR_NO=1");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_SLAB,SALES.D_SAL_SCHEME_HEADER SET SCH_SDISC_PERCENT=SLAB_OUTPUT,SCH_SDISC_AMOUNT=SCH_TOTAL_SINV_AMOUNT*SLAB_OUTPUT/100 WHERE SLAB_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SLAB_SEASON_ID=SCH_SEASON_ID AND SCH_SCHEME_ID=SLAB_SCHEME_ID AND SCH_TOTAL_GR_LIFT_QTY >=SLAB_FROM AND SCH_TOTAL_GR_LIFT_QTY<=SLAB_TO AND SR_NO=2");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER SET SCH_DISC_AMOUNT=SCH_FDISC_AMOUNT+SCH_SDISC_AMOUNT,SCH_ELIGIBILITY=CASE WHEN (SCH_FDISC_AMOUNT+SCH_SDISC_AMOUNT) !=0 THEN 'Y' ELSE 'N' END WHERE SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId);
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PERCENT=SCH_FDISC_PERCENT,SCD_DISC_AMOUNT=SCD_NET_AMOUNT*SCH_FDISC_PERCENT/100 WHERE SCD_SCHEME_ID=SCH_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SUBSTRING(SCD_QUALITY_ID,2,2)!='18' AND SCD_QUALITY_ELIGIBLE='Y'");
            
            stmt.execute("UPDATE SALES.D_SAL_SCHEME_HEADER,SALES.D_SAL_SCHEME_DETAIL SET SCD_DISC_PERCENT=SCH_SDISC_PERCENT,SCD_DISC_AMOUNT=SCD_NET_AMOUNT*SCH_SDISC_PERCENT/100 WHERE SCD_SCHEME_ID=SCH_SCHEME_ID AND SCH_SEASON_ID=SCD_SEASON_ID AND SCH_PARTY_CODE=SCD_PARTY_CODE AND SCH_SEASON_ID='"+seasonId+"' AND SCH_SCHEME_ID="+schemeId+" AND SUBSTRING(SCD_QUALITY_ID,2,2)='18' AND SCD_QUALITY_ELIGIBLE='Y'");
            
            //processSPLCreditNote(schemeId, seasonId);
            
            printReport=true;
            return true;
            
        }catch(SQLException sqe){
            sqe.printStackTrace();
            return false;
        }
    }
    
}