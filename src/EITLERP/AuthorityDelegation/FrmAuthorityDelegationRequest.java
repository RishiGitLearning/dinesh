/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.AuthorityDelegation;


import SDMLATTPAY.leave.*;
import EITLERP.*;
import EITLERP.FeltSales.common.MailNotification;
import EITLERP.Finance.UtilFunctions;
import java.awt.Color;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;

//import java.awt.Color;
import javax.swing.*;
//import java.text.DateFormat;
//import java.text.SimpleDateFormat;
//import java.util.HashMap;

/**
 *
 * @author root
 *
 */
public class FrmAuthorityDelegationRequest extends javax.swing.JApplet {

    private int EditMode = 0;
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbModuleModel;
    private EITLTableModel tblDetailDataModel;
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelBalance;
    private EITLTableModel DataModelLeaves;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
    //private EITLTableCellRenderer CellAlign = new EITLTableCellRenderer();
    //private EITLTableCellRenderer CellAlign1 = new EITLTableCellRenderer();
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;
    private int ModuleId = 206;
    private String DOC_NO = "";
    private clsAuthorityDelegationRequest authdelreq;
    private EITLComboModel cmbSendToModel;

    private int mlstrc;
    private String menusele = "";
    String category="";

    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
    DateFormat dateForDB = new SimpleDateFormat("yyyy-MM-dd");

    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    public frmPendingApprovals frmPA;
    
    

    @Override
    public void init() {

        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        initComponents();
        docdate1.setVisible(false);
        GenerateCombos();

        GenerateFromCombo();
        //GenerateHierarchyCombo();

        SetMenuForRights();
        try {
            DefaultSettings();
        } catch (SQLException ex) {

        }        
        FormatGridApprovalStatus(); 
        FormatGridUpdateHistory();

        authdelreq = new clsAuthorityDelegationRequest(); 
        boolean load = authdelreq.LoadData(EITLERPGLOBAL.gCompanyID);
        if (load) {
            DisplayData();
            MoveLast();
        } else {
            JOptionPane.showMessageDialog(this, "Error occured while Loading Data. Error is " + authdelreq.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        SetFields(false);
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        SetupApproval(); 
        
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }
        btnAdd.setVisible(false);
        btnRemove.setVisible(false); 

    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    public void DefaultSettings() throws SQLException {

        //String data = toString();
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        clearFields();
        lblTitle.setBackground(new Color(0, 102, 153));
        lblTitle.setForeground(Color.WHITE);

    }

    private void clearFields() {

        lbldoc.setText("");
        docdate.setText("");
        lbldept.setText("");
        txtempcd.setText("");
        lblEmpname.setText("");                
        //lblDesn.setText("");                
        
        

        FormatGrid();        
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        FormatGridHS();
        //cmbmnth.setSelectedItem(data.getStringValueFromDB("SELECT MONTH(CURDATE()) FROM DUAL"));

    }

    private void DisplayData() {

        //=========== Color Indication ===============//
        try {

            if ("1".equals(authdelreq.getAttribute("APPROVED").getString())) {
                lblTitle.setBackground(Color.BLUE);
                lblTitle.setForeground(Color.WHITE);
            }

            if ("0".equals(authdelreq.getAttribute("APPROVED").getString())) {
                lblTitle.setBackground(Color.GRAY);
                lblTitle.setForeground(Color.BLACK);
            }

            if ("1".equals(authdelreq.getAttribute("CANCELED").getString())) {
                lblTitle.setBackground(Color.RED);
                lblTitle.setForeground(Color.BLACK);
            }
        } catch (Exception c) {

            c.printStackTrace();
        }

        //============================================//
        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleId)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        clearFields();
        try {
            DOC_NO = authdelreq.getAttribute("AUTH_DEL_REQ_NO").getString();
            lblTitle.setText("AUTHORITY DELEGATION REQUEST FORM  - " + DOC_NO);
            lbldoc.setText(DOC_NO);
            docdate.setText(EITLERPGLOBAL.formatDate(authdelreq.getAttribute("AUTH_DEL_REQ_DATE").getString()));            
            txtempcd.setText(authdelreq.getAttribute("AUTH_USER_ID").getString());
            String userName=data.getStringValueFromDB("SELECT USER_NAME FROM DINESHMILLS.D_COM_USER_MASTER WHERE USER_ID="+authdelreq.getAttribute("AUTH_USER_ID").getString()+"");
            lblEmpname.setText(userName);
            
           String userDept=data.getStringValueFromDB("SELECT DEPT_DESC FROM DINESHMILLS.D_COM_DEPT_MASTER WHERE DEPT_ID="+EITLERPGLOBAL.gUserDeptID+"");           
           lbldept.setText(userDept);
            

            System.out.println((int) authdelreq.getAttribute("HIERARCHY_ID").getVal());
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) authdelreq.getAttribute("HIERARCHY_ID").getVal());
            
            FormatGrid();
            //Now Generate Table
            for (int i = 1; i <= authdelreq.hmcolAuthDelReqDetails.size(); i++) {
                clsAuthorityDelegationRequestDetails objauthdelreq = (clsAuthorityDelegationRequestDetails) authdelreq.hmcolAuthDelReqDetails.get(Integer.toString(i));

                Object[] rowData = new Object[15];
                if(objauthdelreq.getAttribute("AUTH_ACTIVE_MODULE_ID").getInt()==1){
                    rowData[0] = true;
                }else{
                    rowData[0] = false;
                }
                
            //rowData[1]=Integer.toString((int)ObjItem.getAttribute("SR_NO").getVal());
            rowData[1] = objauthdelreq.getAttribute("AUTH_MODULE_ID").getInt();
            rowData[2] = (String) objauthdelreq.getAttribute("AUTH_MODULE_DESC").getObj();
            rowData[3] = String.valueOf(objauthdelreq.getAttribute("AUTH_NOMINEE1_ID").getInt());
            rowData[4] = (String) objauthdelreq.getAttribute("AUTH_NOMINEE1").getObj();
            rowData[5] = String.valueOf(objauthdelreq.getAttribute("AUTH_NOMINEE2_ID").getInt());
            rowData[6] = (String) objauthdelreq.getAttribute("AUTH_NOMINEE2").getObj();
            rowData[7] = String.valueOf(objauthdelreq.getAttribute("AUTH_NOMINEE3_ID").getInt());
            rowData[8] = (String) objauthdelreq.getAttribute("AUTH_NOMINEE3").getObj();
            rowData[9] = (String) objauthdelreq.getAttribute("AUTH_PRIORITY").getObj();            
            if(objauthdelreq.getAttribute("AUTH_FROM_DATE").getString().equals("0000-00-00")){
                rowData[10] = "";
            }else
            {
                rowData[10] = EITLERPGLOBAL.formatDate((String) objauthdelreq.getAttribute("AUTH_FROM_DATE").getObj());
            }
            if(objauthdelreq.getAttribute("AUTH_TO_DATE").getString().equals("0000-00-00")){
                rowData[11] = "";
            }else
            {
                rowData[11] = EITLERPGLOBAL.formatDate((String) objauthdelreq.getAttribute("AUTH_FROM_DATE").getObj());
            }
                

                tblDetailDataModel.addRow(rowData);
            }

                        
         updateTotalDays();   
        } catch (Exception e) {
            e.printStackTrace();
        }
      
        
        
        try {
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List = new HashMap();
            String DocNo = authdelreq.getAttribute("AUTH_DEL_REQ_NO").getString();
            List = EITLERP.ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, ModuleId, DocNo);
            for (int i = 1; i <= List.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
                Object[] rowData = new Object[7];
                //JOptionPane.showMessageDialog(null, "USER ID : "+ObjFlow.getAttribute("USER_ID").getVal());
                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
                rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

                DataModelApprovalStatus.addRow(rowData);
            }

            //Showing Audit Trial History
            FormatGridHS();
            //HashMap History = authdelreq.getHistoryList(EITLERPGLOBAL.gCompanyID + "", DocNo);
            HashMap History = clsAuthorityDelegationRequest.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
            for (int i = 1; i <= History.size(); i++) {
                clsAuthorityDelegationRequest ObjHistory = (clsAuthorityDelegationRequest) History.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
                //rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (long) ObjHistory.getAttribute("UPDATED_BY").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (long) ObjHistory.getAttribute("MODIFIED_BY").getVal());
                rowData[2] = ObjHistory.getAttribute("ENTRY_DATE").getString();

                String ApprovalStatus = "";

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }
                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }
                rowData[3] = ApprovalStatus;
                rowData[4] = ObjHistory.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjHistory.getAttribute("FROM_IP").getString();
                DataModelUpdateHistory.addRow(rowData);
            }
            //============================================================//
            //setSTATUS();
        } catch (Exception e) {
            e.printStackTrace();
        }
     
    }
        
    
    private void FormatGridA() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableApprovalStatus.setAutoResizeMode(TableApprovalStatus.AUTO_RESIZE_OFF);

    }

    private void SetMenuForRights() {
        // --- Add Rights --
        //if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10006, 100061)) { //7008,70081
            if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID,1354 , 13541)) { //7008,70081
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 1354, 13542)) { //7008,70082
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 1354, 13543)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 1354, 13544)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            //cmdPreview.setEnabled(false);
            //cmdPrint.setEnabled(false);
        }
    }

    private void SetupApproval() {
        /*// --- Hierarchy Change Rights Check --------
         if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,75)) {
         cmbHierarchy.setEnabled(true);
         }else {
         cmbHierarchy.setEnabled(false);
         }*/

        // select hold for default approval
        OpgHold.setSelected(true);

        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            //lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {

            int FromUserID = EITLERP.ApprovalFlow.getFromID(EITLERPGLOBAL.gCompanyID, ModuleId, authdelreq.getAttribute("DOC_NO").getString());
            //lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = EITLERP.ApprovalFlow.getFromRemarks(EITLERPGLOBAL.gCompanyID, ModuleId, FromUserID, authdelreq.getAttribute("DOC_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }
        /*
        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        */
        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (EITLERP.ApprovalFlow.IsCreator(ModuleId, authdelreq.getAttribute("DOC_NO").getString() + "")) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void FormatGridHS() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("From IP");

        TableUpdateHistory.setAutoResizeMode(TableUpdateHistory.AUTO_RESIZE_OFF);
    }

    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List = new HashMap();
        String strCondition = "";

        //----- Generate cmbType ------- //
        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);

        if (EditMode == EITLERPGLOBAL.EDIT) {
            List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (EITLERPGLOBAL.gNewUserID == EITLERP.ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "")) {
                List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + (ModuleId));
            } else {
                List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
            }
        }

        for (int i = 1; i <= List.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = EITLERP.ApprovalFlow.getRemainingUsers(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "");
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableColumnModel tcm = TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(90);
        tcm.getColumn(5).setPreferredWidth(90);
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");

        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(2).setPreferredWidth(50);
        tcm.getColumn(3).setPreferredWidth(20);
    }

    private void GenerateGrid() {
        HashMap List = new HashMap();

        //List = authdelreq.getList(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID);
        List = authdelreq.getwithoutDelegationList(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID);
        //List=ObjAuthority.getList();

        FormatGrid();

        for (int i = 1; i <= List.size(); i++) {
            Object[] rowData = new Object[12];
            //clsDelegationAuthority ObjItem = (clsDelegationAuthority) List.get(Integer.toString(i));
            clsAuthorityDelegationRequestDetails ObjItem = (clsAuthorityDelegationRequestDetails) List.get(Integer.toString(i));
            
            rowData[0] = new Boolean(false);
            //rowData[1]=Integer.toString((int)ObjItem.getAttribute("SR_NO").getVal());
            rowData[1] = ObjItem.getAttribute("AUTH_MODULE_ID").getInt();
            rowData[2] = (String) ObjItem.getAttribute("AUTH_MODULE_DESC").getObj();
            rowData[3] = String.valueOf(ObjItem.getAttribute("AUTH_NOMINEE1_ID").getInt());
            rowData[4] = (String) ObjItem.getAttribute("AUTH_NOMINEE1").getObj();
            rowData[5] = String.valueOf(ObjItem.getAttribute("AUTH_NOMINEE2_ID").getInt());
            rowData[6] = (String) ObjItem.getAttribute("AUTH_NOMINEE2").getObj();
            rowData[7] = String.valueOf(ObjItem.getAttribute("AUTH_NOMINEE3_ID").getInt());
            rowData[8] = (String) ObjItem.getAttribute("AUTH_NOMINEE3").getObj();
            rowData[9] = (String) ObjItem.getAttribute("AUTH_PRIORITY").getObj();            
            if(ObjItem.getAttribute("AUTH_FROM_DATE").getString().equals("0000-00-00")){
                rowData[10] = "";
            }else
            {
                rowData[10] = EITLERPGLOBAL.formatDate((String) ObjItem.getAttribute("AUTH_FROM_DATE").getObj());
            }
            //rowData[10] = (String) ObjItem.getAttribute("AUTH_FROM_DATE").getObj();
            //rowData[11] = (String) ObjItem.getAttribute("AUTH_TO_DATE").getObj();
            if( ObjItem.getAttribute("AUTH_TO_DATE").getString().equals("0000-00-00")){
                rowData[11] = "";
            }else
            {
                rowData[11] = EITLERPGLOBAL.formatDate((String) ObjItem.getAttribute("AUTH_TO_DATE").getObj());
            }
            /*rowData[3]=EITLERPGLOBAL.formatDate((String)ObjItem.getAttribute("FROM_DATE").getObj());
             rowData[4]=EITLERPGLOBAL.formatDate((String)ObjItem.getAttribute("TO_DATE").getObj());
             rowData[5]=clsModules.getModuleName(EITLERPGLOBAL.gCompanyID,(int)ObjItem.getAttribute("MODULE_ID").getVal());
             rowData[6]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjItem.getAttribute("AUTHORITY_USER_ID").getVal());
             rowData[7]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,(int)ObjItem.getAttribute("DEPT_ID").getVal());
             */
            tblDetailDataModel.addRow(rowData);
        }

    }

    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        Tab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        lblStatus1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtempcd = new javax.swing.JTextField();
        cmdNextToTab2 = new javax.swing.JButton();
        docdate = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        lbldoc = new javax.swing.JLabel();
        lbldept = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDetail = new javax.swing.JTable();
        btnRemove = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        lblEmpname = new javax.swing.JLabel();
        docdate1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        StatusPanel = new javax.swing.JPanel();
        jLabel60 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        Tab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        Tab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabMouseClicked(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        lblStatus1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus1.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(lblStatus1);
        lblStatus1.setBounds(10, 410, 970, 30);

        jLabel1.setText("User No");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(20, 40, 100, 30);

        txtempcd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtempcdFocusLost(evt);
            }
        });
        txtempcd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtempcdKeyPressed(evt);
            }
        });
        jPanel1.add(txtempcd);
        txtempcd.setBounds(130, 40, 90, 30);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        jPanel1.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(860, 370, 110, 30);

        docdate.setText("DD/MM/YYYY");
        jPanel1.add(docdate);
        docdate.setBounds(370, 10, 110, 20);

        jLabel11.setText("Request No");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(10, 10, 110, 20);

        lbldoc.setText("DocNo");
        jPanel1.add(lbldoc);
        lbldoc.setBounds(130, 10, 100, 20);

        lbldept.setText("Department");
        jPanel1.add(lbldept);
        lbldept.setBounds(630, 40, 170, 30);

        jLabel4.setText("Department");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(520, 40, 90, 30);

        jLabel10.setText("Date");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(270, 10, 90, 20);

        tblDetail.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        tblDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblDetail.getTableHeader().setReorderingAllowed(false);
        tblDetail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblDetailKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblDetail);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 120, 970, 240);

        btnRemove.setText("Remove");
        btnRemove.setMargin(new java.awt.Insets(1, 1, 1, 1));
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        jPanel1.add(btnRemove);
        btnRemove.setBounds(60, 100, 63, 10);

        btnAdd.setText("Add");
        btnAdd.setMargin(new java.awt.Insets(1, 1, 1, 1));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        jPanel1.add(btnAdd);
        btnAdd.setBounds(10, 100, 35, 10);

        lblEmpname.setText("Name");
        jPanel1.add(lblEmpname);
        lblEmpname.setBounds(230, 40, 260, 30);

        docdate1.setText("DD/MM/YYYY");
        jPanel1.add(docdate1);
        docdate1.setBounds(370, 10, 110, 20);

        jPanel5.setBackground(new java.awt.Color(153, 153, 153));
        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(jPanel5);
        jPanel5.setBounds(0, 80, 980, 10);

        Tab.addTab("Detail", jPanel1);

        jPanel2.setLayout(null);

        Tab2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(10, 23, 66, 15);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(90, 20, 180, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(10, 62, 56, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(90, 60, 180, 19);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(10, 95, 62, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(90, 95, 530, 19);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 130, 81, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup5.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpgApproveActionPerformed(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        buttonGroup5.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup5.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup5.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(90, 130, 180, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(10, 253, 60, 15);

        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(90, 250, 180, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(10, 292, 60, 15);

        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 290, 570, 19);

        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(450, 340, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(630, 95, 33, 21);

        cmdNextToTab3.setMnemonic('N');
        cmdNextToTab3.setText("Next >>");
        cmdNextToTab3.setToolTipText("Next Tab");
        cmdNextToTab3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab3ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab3);
        cmdNextToTab3.setBounds(560, 340, 102, 25);

        jPanel2.add(Tab2);
        Tab2.setBounds(10, 0, 760, 410);

        Tab.addTab("Approval", jPanel2);

        jPanel3.setLayout(null);

        StatusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        StatusPanel.setLayout(null);

        jLabel60.setText("Document Approval Status");
        StatusPanel.add(jLabel60);
        jLabel60.setBounds(12, 10, 242, 15);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableApprovalStatus);

        StatusPanel.add(jScrollPane2);
        jScrollPane2.setBounds(0, 40, 694, 120);

        jLabel19.setText("Document Update History");
        StatusPanel.add(jLabel19);
        jLabel19.setBounds(10, 170, 182, 15);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(TableUpdateHistory);

        StatusPanel.add(jScrollPane6);
        jScrollPane6.setBounds(10, 190, 540, 130);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdViewHistory);
        cmdViewHistory.setBounds(570, 170, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdNormalView);
        cmdNormalView.setBounds(570, 200, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(570, 230, 132, 24);

        txtAuditRemarks.setEnabled(false);
        StatusPanel.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(570, 260, 129, 19);

        jButton5.setText("<<Previous");
        jButton5.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton5);
        jButton5.setBounds(570, 290, 130, 30);

        jPanel3.add(StatusPanel);
        StatusPanel.setBounds(10, 0, 790, 380);

        Tab.addTab("Status", jPanel3);

        getContentPane().add(Tab);
        Tab.setBounds(0, 80, 1010, 480);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 1020, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("AUTHORITY DELEGATION REQUEST FORM");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 1020, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged

        //SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "On State Change SelHierarchyId : "+SelHierarchyID);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
                OpgFinal.setEnabled(true);
            }
        } else {
            OpgApprove.setEnabled(false);
            OpgApprove.setSelected(false);
        }

        if (clsHierarchy.IsCreator((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgApprove.setEnabled(true);
            OpgReject.setEnabled(false);
            OpgReject.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus1.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "SelHierarchyId : "+SelHierarchyID);
        DOC_NO = lbldoc.getText();
        cmbSendTo.setEnabled(true);
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (EITLERP.ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "")) {
                cmbSendTo.setEnabled(true);
                txtToRemarks.setEnabled(true);
                txtFromRemarks.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }
        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }

        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(true);
        OpgHold.setSelected(false);
        //txtToRemarks.setEnabled(false);
        if (!OpgApprove.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);

        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {

                if (OpgApprove.isSelected()) {
                    IncludeUser = EITLERP.ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    //JOptionPane.showMessageDialog(null, "Module Id :"+ModuleId+", DOC No : "+sorder_no+", User Id : "+ObjUser.getAttribute("USER_ID").getInt()+", New user Id "+SDMLERPGLOBAL.gNewUserID);
                    IncludeUser = EITLERP.ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                    // JOptionPane.showMessageDialog(null, "IncludeUser = "+IncludeUser);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = EITLERP.ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO + "");
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }
    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged

    }//GEN-LAST:event_OpgApproveItemStateChanged

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        lblStatus1.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged

    }//GEN-LAST:event_OpgFinalItemStateChanged

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained

    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked


    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged

    }//GEN-LAST:event_OpgHoldItemStateChanged

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained

    }//GEN-LAST:event_OpgHoldFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained

    }//GEN-LAST:event_cmbSendToFocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained

    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed

    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmdNextToTab3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab3ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab3ActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained

    }//GEN-LAST:event_Tab2FocusGained

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        String DocNo = txtempcd.getText();
        //authdelreq.ShowHistory(DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        //authdelreq.HistoryView = false;
        //authdelreq.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            txtAuditRemarks.setText((String) TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4));
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText = txtAuditRemarks;
            bigEdit.ShowEdit();
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void TabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabMouseClicked

    }//GEN-LAST:event_TabMouseClicked

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();

    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        // REPORT QUERY : SELECT A.DOC_NO,A.PIECE_NO,A.DL_REMARK,B.PR_MACHINE_NO,B.PR_POSITION_NO,B.PR_LENGTH,B.PR_WIDTH,B.PR_GSM,B.PR_GROUP,B.PR_STYLE,B.PR_SQMTR,B.PR_STYLE,B.PR_SYN_PER,B.PR_PIECE_REMARK,B.PR_PIECE_STAGE,B.PR_PRODUCT_CODE,B.PR_PARTY_CODE,B.PR_PO_NO,B.PR_PO_DATE,B.PR_REFERENCE_DATE,B.PR_ORDER_REMARK,B.PR_ORDER_DATE FROM  PRODUCTION.FELT_SALES_DIVERSION_LIST_APPROVAL A, PRODUCTION.FELT_SALES_PIECE_REGISTER B;
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void txtempcdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtempcdFocusLost
        // TODO add your handling code here:
        //lblEmpname.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'"));
        //lbldept.setText(data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'"));
        
        /*if(txtempcd.getText().trim().length()==9){
            txtempcd.setText(txtempcd.getText().trim().toUpperCase());             
        }else{
            JOptionPane.showMessageDialog(null, "Employee Code must be BRDXXXXXX format.");
            txtempcd.requestFocus();
        }*/
        /*
        if (!txtempcd.getText().trim().equals("") && data.IsRecordExist("SELECT * FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtempcd.getText().trim() + "' AND APPROVED=1 AND CANCELED=0")) {
            txtempcd.setText(txtempcd.getText().trim().toUpperCase());
            lblEmpname.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + txtempcd.getText() + "'"));
category=data.getStringValueFromDB("SELECT EMP_MAIN_CATEGORY FROM SDMLATTPAY.EMP_CATEGORY WHERE PAY_EMP_NO='"+txtempcd.getText().trim()+"'");
            System.out.println(category);
        } else {
            if (!txtempcd.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Employee No doesn't exist/under approval.");
            }
            txtempcd.setText("");
            lblEmpname.setText("");
        }
        */
        
    }//GEN-LAST:event_txtempcdFocusLost

    private void txtempcdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtempcdKeyPressed
        // TODO add your handling code here:
        //System.out.println(docdate.getText().substring(6));
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();
            aList.SQL = "SELECT PAY_EMP_NO AS EMP_CODE,EMP_NO,EMP_NAME AS NAME FROM SDMLATTPAY.ATTPAY_EMPMST ";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 1;

            if (aList.ShowLOV()) {
                txtempcd.setText(aList.ReturnVal);
                //lblEmpname.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'"));
                //lbldept.setText(data.getStringValueFromDB("SELECT EMP_DEPARTMENT FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'"));                
            //String shiftId=data.getStringValueFromDB("SELECT EMP_SHIFT_ID FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'");
            //String mainCategory=data.getStringValueFromDB("SELECT EMP_MAIN_CATEGORY FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'");            
            //lblDesn.setText(data.getStringValueFromDB("SELECT EMP_DESIGNATION FROM SDMLATTPAY.ATTPAY_EMPMST WHERE EMP_NO='" + txtempcd.getText() + "'"));                
            lblEmpname.setText(data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+aList.ReturnVal+"'"));
            lbldept.setText(data.getStringValueFromDB("SELECT DEPARTMENT FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+aList.ReturnVal+"'"));
            //lblDesn.setText(data.getStringValueFromDB("SELECT DESIGNATION FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+aList.ReturnVal+"'"));

            category=data.getStringValueFromDB("SELECT EMP_MAIN_CATEGORY FROM SDMLATTPAY.EMP_CATEGORY WHERE PAY_EMP_NO='"+aList.ReturnVal+"'");
                System.out.println(category);
            
            
            
            //System.out.println(txtempcd.getText().substring(3));
            }
        }
    }//GEN-LAST:event_txtempcdKeyPressed

    private void OpgApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpgApproveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgApproveActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
     if(!txtempcd.getText().equals("")){
        Object[] rowData = new Object[9];
//        rowData[0] = Integer.toString(tblDetail.getRowCount() + 1);
//        for(int i=1;i<=tblDetail.getColumnCount();i++){
//            rowData[i] = "";
//        }
        rowData[0] = Integer.toString(tblDetail.getRowCount() + 1);
        rowData[1] = "";
        rowData[2] = "";
        rowData[3] = "";
        rowData[4] = "";
        rowData[5] = "";
        rowData[6] = "";
        
        
        tblDetailDataModel.addRow(rowData);
        
        tblDetail.changeSelection(tblDetail.getRowCount() - 1, 1, false, false);
        tblDetail.requestFocus();
        UpdateSrNo();
}else{
    JOptionPane.showMessageDialog(this, "Select Employee code first", "ERROR", JOptionPane.ERROR_MESSAGE);
}
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
if (tblDetail.getRowCount() > 0) {
            tblDetailDataModel.removeRow(tblDetail.getSelectedRow());
            UpdateSrNo();
        }
    }//GEN-LAST:event_btnRemoveActionPerformed
    
    
    
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void tblDetailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblDetailKeyPressed
        try {
            if (evt.getKeyCode() == 112) //F1 Key pressed
            {
                if (tblDetail.getSelectedColumn() == 4 || tblDetail.getSelectedColumn() == 6 || tblDetail.getSelectedColumn() == 8) {
                    LOV aList = new LOV();

                    aList.SQL = "SELECT USER_ID,USER_NAME FROM DINESHMILLS.D_COM_USER_MASTER WHERE USER_ID>0 AND LOCKED=0 AND LEFT_DATE='0000-00-00'";
                    aList.ReturnCol = 1;
                    aList.SecondCol = 2;
                    aList.ShowReturnCol = true;
                    aList.DefaultSearchOn = 2;

                    if (aList.ShowLOV()) {
                        if (tblDetail.getCellEditor() != null) {
                            tblDetail.getCellEditor().stopCellEditing();
                        }
                        tblDetail.setValueAt(aList.ReturnVal, tblDetail.getSelectedRow(), tblDetail.getSelectedColumn() - 1);
                        tblDetail.setValueAt(aList.SecondVal, tblDetail.getSelectedRow(), tblDetail.getSelectedColumn());
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_tblDetailKeyPressed
    
        private void MoveFirst() {
        authdelreq.MoveFirst();
        DisplayData();
    }
    
private void UpdateSrNo() {
        int SrCol = tblDetailDataModel.getColFromVariable("SR_NO");
        for (int i = 0; i < tblDetail.getRowCount(); i++) {
            tblDetail.setValueAt(Integer.toString(i + 1), i, SrCol);
        }
    }

    private void MovePrevious() {
        authdelreq.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        authdelreq.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        authdelreq.MoveLast();
        DisplayData();
    }

    private void Find() {
     Loader ObjLoader=new Loader(this,"EITLERP.AuthorityDelegation",true);
        FrmLeaveApplicationFind ObjLeaveApplicationFind= (FrmLeaveApplicationFind)ObjLoader.getObj();
        
        if(ObjLeaveApplicationFind.Cancelled==false) {
            if(!authdelreq.Filter(ObjLeaveApplicationFind.stringFindQuery)) {
                JOptionPane.showMessageDialog(FrmAuthorityDelegationRequest.this," No records found.","Find Leave Application Details",JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    public void FindWaiting() {
        authdelreq.Filter(" DOC_NO IN (SELECT DISTINCT SDMLATTPAY.ATT_LEAVE_ENTRY.AUTH_DEL_REQ_NO FROM SDMLATTPAY.ATT_LEAVE_ENTRY, SDMLATTPAY.D_COM_DOC_DATA WHERE SDMLATTPAY.ATT_LEAVE_ENTRY.AUTH_DEL_REQ_NO=SDMLATTPAY.D_COM_DOC_DATA.DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=" + ModuleId + " AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }

    private void Add() {

        EditMode = EITLERPGLOBAL.ADD;

        SetFields(true);
        DisableToolbar();

        SetupApproval();
        clearFields();
        EITLERP.FeltSales.common.SelectFirstFree aList = new EITLERP.FeltSales.common.SelectFirstFree();
        aList.ModuleID = ModuleId;
        aList.FirstFreeNo = 243;
        FFNo = aList.FirstFreeNo;
        lbldoc.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        lblTitle.setText("AUTHORITY DELEGATION REQUEST FORM - " + lbldoc.getText());
        docdate.setText(EITLERPGLOBAL.getCurrentDate());
        docdate1.setText(EITLERPGLOBAL.getCurrentDateTimeDB());
        
        //OpgFinal.setSelected(true);
        OpgHold.setSelected(true);
        
        txtempcd.setText(Integer.toString(EITLERPGLOBAL.gUserID));
        String userName=data.getStringValueFromDB("SELECT USER_NAME FROM DINESHMILLS.D_COM_USER_MASTER WHERE USER_ID="+EITLERPGLOBAL.gUserID+"");
        String userDept=data.getStringValueFromDB("SELECT DEPT_DESC FROM DINESHMILLS.D_COM_DEPT_MASTER WHERE DEPT_ID="+EITLERPGLOBAL.gUserDeptID+"");
        lblEmpname.setText(userName);
        lbldept.setText(userDept);
        GenerateGrid();
    }
    

    private void FormatGrid() {
        tblDetailDataModel = new EITLTableModel();

        tblDetail.removeAll();

        tblDetail.setModel(tblDetailDataModel);
        //TableColumnModel ColModel = tblDetail.getColumnModel();
        tblDetail.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        tblDetailDataModel.addColumn("*");
        tblDetailDataModel.addColumn(""); // Read Only - Hidden
        tblDetailDataModel.addColumn("Module");
        tblDetailDataModel.addColumn(""); // Read Only - Hidden
        tblDetailDataModel.addColumn("Nominee1");
        tblDetailDataModel.addColumn(""); // Read Only - Hidden
        tblDetailDataModel.addColumn("Nominee2");
        tblDetailDataModel.addColumn(""); // Read Only - Hidden
        tblDetailDataModel.addColumn("Nominee3");
        tblDetailDataModel.addColumn("Priority");
        tblDetailDataModel.addColumn("From Date");
        tblDetailDataModel.addColumn("To Date");

        tblDetailDataModel.TableReadOnly(true);
        tblDetailDataModel.SetReadOnly(2);

        //Hide Unit Code column
        tblDetail.getColumnModel().getColumn(0).setMinWidth(20);
        tblDetail.getColumnModel().getColumn(0).setMaxWidth(30);        
        tblDetail.getColumnModel().getColumn(1).setMinWidth(0);
        tblDetail.getColumnModel().getColumn(1).setMaxWidth(0);
        tblDetail.getColumnModel().getColumn(1).setWidth(0);
        tblDetail.getColumnModel().getColumn(2).setMinWidth(220);
        tblDetail.getColumnModel().getColumn(2).setMaxWidth(230);        
        
        tblDetail.getColumnModel().getColumn(3).setMinWidth(0);
        tblDetail.getColumnModel().getColumn(3).setMaxWidth(0);
        tblDetail.getColumnModel().getColumn(3).setWidth(0);
        tblDetail.getColumnModel().getColumn(5).setMinWidth(0);
        tblDetail.getColumnModel().getColumn(5).setMaxWidth(0);
        tblDetail.getColumnModel().getColumn(5).setWidth(0);
        tblDetail.getColumnModel().getColumn(7).setMinWidth(0);
        tblDetail.getColumnModel().getColumn(7).setMaxWidth(0);
        tblDetail.getColumnModel().getColumn(7).setWidth(0);

        //DataModel.SetNumeric(1,true);
        //DataModel.TableReadOnly(true);
        Renderer.setCustomComponent(0, "CheckBox");
        tblDetail.getColumnModel().getColumn(0).setCellRenderer(Renderer);
        tblDetail.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));

        //TableColumn tc = Table.getColumnModel().getColumn(0);
        //tc.setCellEditor(Table.getDefaultEditor(Boolean.class));
        //tc.setCellRenderer(Table.getDefaultRenderer(Boolean.class));
        //tc.setHeaderRenderer(new CheckBoxHeader(new MyItemListener()));
        
        JComboBox cmbPriority = new JComboBox();

        EITLComboModel cmbDayTypeModel = new EITLComboModel();
        cmbPriority.removeAllItems();
        cmbPriority.setModel(cmbDayTypeModel);

        ComboData aData = new ComboData();
        aData.strCode = "LOW";
        aData.Text = "LOW";
        cmbDayTypeModel.addElement(aData);

        aData = new ComboData();
        aData.strCode = "MEDIUM";
        aData.Text = "MEDIUM";
        cmbDayTypeModel.addElement(aData);

        aData = new ComboData();
        aData.strCode = "HIGH";
        aData.Text = "HIGH";
        cmbDayTypeModel.addElement(aData);
            //Renderer.setCustomComponent(tblDetailDataModel.getColFromVariable("LVT_LEAVE_TYPE"), "ComboBox");
        //Renderer.setCustomComponent(tblDetailDataModel.getColFromVariable("LVT_LEAVE_TYPE"), cmbLeavaType);

        tblDetail.getColumnModel().getColumn(9).setCellEditor(new DefaultCellEditor(cmbPriority));

    }

    
    private void Save() {
        
        
        if(tblDetail.getRowCount()<=0) {
            JOptionPane.showMessageDialog(null,"Please enter at least one Detail");
            return ;
        }
        
        
        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String nominee1 = "", nominee2 = "", nominee3 = "";    
        for (int i = 0; i <= tblDetail.getRowCount() - 1; i++) {
            nominee1 = ((String) tblDetail.getValueAt(i, 4)).trim();
            nominee2 = ((String) tblDetail.getValueAt(i, 6)).trim();
            nominee3 = ((String) tblDetail.getValueAt(i, 8)).trim();

            if (nominee1.equals("") && (!nominee2.equals("") || !nominee3.equals(""))) {
                JOptionPane.showMessageDialog(null, "Please fill nominne 1 before nominee 2 or nominee 3!!");
                return;
            }
            if (nominee2.equals("") && !nominee3.equals("")) {
                JOptionPane.showMessageDialog(null, "Please fill nominne 2 before nominee3!!");
                return;
            }
        }
        
        
        SetData();
        //authdelreq.LoadData();
        if (EditMode == EITLERPGLOBAL.ADD) {
            if (authdelreq.Insert()) {
                clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, true);                
                authdelreq.LoadData(EITLERPGLOBAL.gCompanyID);
                MoveLast();
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving. Error is " + authdelreq.LastError, " SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (authdelreq.Update()) {                
                if(OpgFinal.isSelected()){
                    
                }
                MoveLast();
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving editing. Error is " + authdelreq.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
//        try {
//            if (PENDING_DOCUMENT) {
//                frmPA.RefreshView();
//                PENDING_DOCUMENT = false;
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
        try {
            frmPA.RefreshView();
        } catch (Exception e) {
        }

    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }

    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void Edit() {

        String DocumentNo = (String) authdelreq.getAttribute("AUTH_DEL_REQ_NO").getString();

        if (authdelreq.IsEditable(EITLERPGLOBAL.gCompanyID, DocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateCombos();
            //GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            // SetupApproval();
            //ReasonResetReadonly();
            //cmbOrderReason.setEnabled(false);
            if (EITLERP.ApprovalFlow.IsCreator(ModuleId, DocumentNo)) {
                SetFields(true);
            } else {
                EnableApproval();
            }
            //OpgFinal.setSelected(true);
            OpgHold.setSelected(true);
        } else {
            JOptionPane.showMessageDialog(null, "You cannot edit this record. \n It is either approved/rejected or waiting approval for other user");
        }

    }

// find rate update by doc no
    public void Find(String docNo) {
        //authdelreq.Filter(" DOC_NO='" + docNo + "'");
authdelreq.Filter(" AUTH_DEL_REQ_NO='" + docNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    public void FindEx(int pCompanyID, String docno) {
        //authdelreq.Filter(" DOC_NO='" + docno + "'");
authdelreq.Filter(" AUTH_DEL_REQ_NO='" + docno + "'");
        authdelreq.MoveFirst();
        DisplayData();
    }

    private void Delete() {

    }

    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = EITLERP.ApprovalFlow.getRemainingUsers(EITLERPGLOBAL.gCompanyID, ModuleId, txtempcd.getText());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

    }

    private void SetFields(boolean pStat) {

        txtempcd.setEnabled(pStat);
        lblEmpname.setEnabled(pStat);        
        //lblDesn.setEnabled(pStat);
        lbldept.setEnabled(pStat);                
        
        //btnAdd.setEnabled(pStat); 
        //btnRemove.setEnabled(pStat); 
        
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
    
        btnAdd.setEnabled(pStat);
        btnRemove.setEnabled(pStat);

        SetupApproval();
    }

    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);

    }

    private void SetData() {

        if (EditMode == EITLERPGLOBAL.ADD) {
            EITLERP.FeltSales.common.SelectFirstFree aList = new EITLERP.FeltSales.common.SelectFirstFree();
            aList.ModuleID = ModuleId;
            aList.FirstFreeNo = 243;
            FFNo = aList.FirstFreeNo;
            //lbldoc.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
            authdelreq.setAttribute("AUTH_DEL_REQ_NO", clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        } else {
            DOC_NO = lbldoc.getText();
            authdelreq.setAttribute("AUTH_DEL_REQ_NO", DOC_NO);
        }
        
               
        authdelreq.setAttribute("AUTH_DEL_REQ_DATE", docdate.getText());        
        
        authdelreq.setAttribute("AUTH_USER_ID", txtempcd.getText().toUpperCase());
        
        authdelreq.setAttribute("MODULE_ID", ModuleId);
        authdelreq.setAttribute("USER_ID", EITLERPGLOBAL.gNewUserID);
        authdelreq.setAttribute("COMPANY_ID", EITLERPGLOBAL.gCompanyID);
        
        authdelreq.setAttribute("REJECTED_REMARKS", txtToRemarks.getText());
        authdelreq.setAttribute("REMARKS", "");
        authdelreq.setAttribute("APPROVAL_STATUS", "");
        authdelreq.setAttribute("APPROVER_REMARKS", txtFromRemarks.getText());
        authdelreq.setAttribute("ENTRY_DATE", EITLERPGLOBAL.getCurrentDateDB());

        //----- Update Approval Specific Fields -----------//
        authdelreq.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        authdelreq.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        authdelreq.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        authdelreq.setAttribute("FROM_REMARKS", txtToRemarks.getText());

        if (OpgApprove.isSelected()) {
            authdelreq.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            authdelreq.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            authdelreq.setAttribute("APPROVAL_STATUS", "R");
            authdelreq.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            authdelreq.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            authdelreq.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            authdelreq.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        } else {
            authdelreq.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            authdelreq.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
            authdelreq.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);
            authdelreq.setAttribute("UPDATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }
        
        int i = 0;
        String nominee1 = "", nominee2 = "", nominee3 = "", priority = "" ,fromDate="", toDate="" ,moduleDesc="";
        int nominee1ID = 0, nominee2ID = 0, nominee3ID = 0, moduleID = 0, active=0;
        
        
        authdelreq.hmcolAuthDelReqDetails.clear();
        //Check the entered details in Table.
        for (i = 0; i <= tblDetail.getRowCount() - 1; i++) {            
            clsAuthorityDelegationRequestDetails colauthdelreqdetails = new clsAuthorityDelegationRequestDetails();
            
            if (tblDetail.getValueAt(i, 0).toString().equals("true")) {
                active=1;
            }else{
                active=0;
            }
            moduleID = Integer.parseInt(tblDetail.getValueAt(i, 1).toString());
            moduleDesc=((String) tblDetail.getValueAt(i, 2)).trim();
            
            nominee1ID = Integer.valueOf(((String) tblDetail.getValueAt(i, 3)).trim());
            nominee2ID = Integer.parseInt(((String) tblDetail.getValueAt(i, 5)).trim());
            nominee3ID = Integer.parseInt(((String) tblDetail.getValueAt(i, 7)).trim());

            nominee1 = ((String) tblDetail.getValueAt(i, 4)).trim();
            nominee2 = ((String) tblDetail.getValueAt(i, 6)).trim();
            nominee3 = ((String) tblDetail.getValueAt(i, 8)).trim();

            priority = ((String) tblDetail.getValueAt(i, 9)).trim().toUpperCase();
            fromDate = ((String) tblDetail.getValueAt(i, 10)).trim();
            toDate = ((String) tblDetail.getValueAt(i, 11)).trim();            
            
            
            if (priority.equals("")) {
                priority = "LOW";
            }
            if(nominee1.trim().equals("")){
                nominee1ID=0;
            }
            if(nominee2.trim().equals("")){
                nominee2ID=0;
            }
            if(nominee3.trim().equals("")){
                nominee3ID=0;
            }

            System.out.println(priority);
            colauthdelreqdetails.setAttribute("AUTH_ACTIVE_MODULE_ID", active);            
            colauthdelreqdetails.setAttribute("AUTH_MODULE_ID", moduleID);
            colauthdelreqdetails.setAttribute("AUTH_MODULE_DESC", moduleDesc);
            colauthdelreqdetails.setAttribute("AUTH_NOMINEE1_ID", nominee1ID);
            colauthdelreqdetails.setAttribute("AUTH_NOMINEE1", nominee1);
            colauthdelreqdetails.setAttribute("AUTH_NOMINEE2_ID", nominee2ID);
            colauthdelreqdetails.setAttribute("AUTH_NOMINEE2", nominee2);
            colauthdelreqdetails.setAttribute("AUTH_NOMINEE3_ID", nominee3ID);
            colauthdelreqdetails.setAttribute("AUTH_NOMINEE3", nominee3);
            colauthdelreqdetails.setAttribute("AUTH_PRIORITY", priority);
            colauthdelreqdetails.setAttribute("AUTH_FROM_DATE", fromDate);
            colauthdelreqdetails.setAttribute("AUTH_TO_DATE", toDate);

            authdelreq.hmcolAuthDelReqDetails.put(Integer.toString(authdelreq.hmcolAuthDelReqDetails.size() + 1), colauthdelreqdetails);

        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnRemove;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdNextToTab3;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel docdate;
    private javax.swing.JLabel docdate1;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblEmpname;
    private javax.swing.JLabel lblStatus1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lbldept;
    private javax.swing.JLabel lbldoc;
    private javax.swing.JTable tblDetail;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtempcd;
    // End of variables declaration//GEN-END:variables

 public static int daysBetween(Calendar day1, Calendar day2){
    Calendar dayOne = (Calendar) day1.clone(),
            dayTwo = (Calendar) day2.clone();

    if (dayOne.get(Calendar.YEAR) == dayTwo.get(Calendar.YEAR)) {
        return Math.abs(dayOne.get(Calendar.DAY_OF_YEAR) - dayTwo.get(Calendar.DAY_OF_YEAR));
    } else {
        if (dayTwo.get(Calendar.YEAR) > dayOne.get(Calendar.YEAR)) {
            //swap them
            Calendar temp = dayOne;
            dayOne = dayTwo;
            dayTwo = temp;
        }
        int extraDays = 0;

        int dayOneOriginalYearDays = dayOne.get(Calendar.DAY_OF_YEAR);

        while (dayOne.get(Calendar.YEAR) > dayTwo.get(Calendar.YEAR)) {
            dayOne.add(Calendar.YEAR, -1);
            // getActualMaximum() important for leap years
            extraDays += dayOne.getActualMaximum(Calendar.DAY_OF_YEAR);
        }

        return extraDays - dayTwo.get(Calendar.DAY_OF_YEAR) + dayOneOriginalYearDays ;
    }
}
 
 private void updateTotalDays() {       
        //===================== Update Total days ========================//
        try {            
            double totaldays=0;            
            for(int i=0;i<tblDetail.getRowCount();i++) {
                //totaldays=totaldays+Double.parseDouble(tblDetail.getModel().getValueAt(i,tblDetailDataModel.getColID(5)).toString()); 
                totaldays=totaldays+Double.parseDouble(tblDetail.getValueAt(i,5).toString()); 
            }            
            
            
        }
        catch(Exception v) {
            v.printStackTrace();
        }
        //==================================================================//        
    }
 
 private double accumulatedDays(String leavetype) {       
        //===================== Update Total days ========================//
     double totaldays=0;            
        try {            
            System.out.println(tblDetail.getRowCount()-1);
            for(int i=0;i<tblDetail.getRowCount()-1;i++) {
                //totaldays=totaldays+Double.parseDouble(tblDetail.getModel().getValueAt(i,tblDetailDataModel.getColID(5)).toString()); 
                if(leavetype.equals(tblDetail.getModel().getValueAt(i,1).toString())){
                totaldays=totaldays+Double.parseDouble(tblDetail.getModel().getValueAt(i,5).toString()); 
                }
            }            
            
            
        }
        catch(Exception v) {
            v.printStackTrace();
        }
        //==================================================================//        
        return totaldays;
    }
 
    
}

