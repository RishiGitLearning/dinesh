/*
 * 
 * Created on December 20, 2013, 12:14 PM
 */

package EITLERP.Sales.ReportsUI;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import javax.swing.JOptionPane;
import java.sql.*;
import EITLERP.*;
import EITLERP.Finance.UtilFunctions;

/**
 *
 * @author  Ashutosh Pathak
 */
public class frmRptStgReport extends javax.swing.JApplet {
    
    private EITLComboModel cmbInvoiceTypeModel;
    
    /** Initializes the applet frmABDReport */
    public void init() {
        initComponents();        
        setSize(420, 200);
  
        
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        lblTitle = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        txtFromDate = new javax.swing.JTextField();
        txtToDate = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtagentcode = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText("Suitings Sales Report");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 0, 500, 25);

        lblStatus.setFont(new java.awt.Font("Dialog", 1, 14));
        lblStatus.setForeground(new java.awt.Color(0, 51, 255));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(20, 390, 450, 20);

        getContentPane().add(jLabel1);
        jLabel1.setBounds(270, 130, 0, 0);

        jButton2.setText("AgentWise PartyWise InvoiceWise Sales Detail");
        jButton2.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        getContentPane().add(jButton2);
        jButton2.setBounds(30, 120, 340, 25);

        getContentPane().add(txtFromDate);
        txtFromDate.setBounds(120, 40, 80, 19);

        getContentPane().add(txtToDate);
        txtToDate.setBounds(120, 60, 80, 19);

        jLabel3.setText("From Date");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(40, 40, 70, 20);

        jLabel4.setText("To Date");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(40, 60, 80, 20);

        getContentPane().add(txtagentcode);
        txtagentcode.setBounds(310, 50, 80, 19);

        jLabel6.setText("Agent Code");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(230, 50, 80, 20);

    }//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       
          if ( !Validate()) {
            return;
        } else {
            GenerateAgentPartyInvoiceReport();
        }
        
        
        /*
        String FromDate=EITLERPGLOBAL.formatDateDB(RptFromDate.getText());
        String ToDate=EITLERPGLOBAL.formatDateDB(RptToDate.getText());    
        //String InvoiceType=cmbInvoiceType.getSelectedItem().toString()+" Sales";
        String InvoiceType=cmbInvoiceType.getSelectedItem().toString();
        String Type=Integer.toString(cmbInvoiceType.getSelectedIndex());
        System.out.println(InvoiceType);
        System.out.println(Type);
        if(cmbInvoiceType.getSelectedIndex()==0){
            JOptionPane.showMessageDialog(null,"Please Select any type");
            cmbInvoiceType.requestFocus();
        }else if(cmbInvoiceType.getSelectedIndex()==2){
            JOptionPane.showMessageDialog(null,"Please Select Suitings/Filter Fab. type");
            cmbInvoiceType.requestFocus();
        }
        else{
            GenerateAgentPartyInvoiceReport();
        }
        */
    }//GEN-LAST:event_jButton2ActionPerformed
                        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtToDate;
    private javax.swing.JTextField txtagentcode;
    // End of variables declaration//GEN-END:variables
    
   
    
        private boolean Validate() {
        //Form level validations
        if(txtFromDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter from date");
            return false;
        } else if(!EITLERPGLOBAL.isDate(txtFromDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid From Date in DD/MM/YYYY format.");
            return false;
        }
        
        if(txtToDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter To date");
            return false;
        } else if(!EITLERPGLOBAL.isDate(txtToDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid To Date in DD/MM/YYYY format.");
            return false;
        }
        
           if(txtagentcode.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter To Agent Code");
            return false;
        }
        
           return true;
    }
    
    
    private void GenerateAgentPartyInvoiceReport(){
        try{
           String FromDate=EITLERPGLOBAL.formatDateDB(txtFromDate.getText());
           String ToDate=EITLERPGLOBAL.formatDateDB(txtToDate.getText());    
           String agentcode = txtagentcode.getText();    
     
            String Condition="";
            int l=0;
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            objData.AddColumn("SR_NO");
            objData.AddColumn("AGENT_CODE");
            objData.AddColumn("PARTY_CODE");
            objData.AddColumn("PARTY_NAME");
            objData.AddColumn("STATION_CODE");
            objData.AddColumn("PAYMENT_TERM_CODE");
            objData.AddColumn("INVOICE_NO");
             objData.AddColumn("INVOICE_DATE");
             objData.AddColumn("TOTAL_GROSS_QTY");
             objData.AddColumn("THAN");
             objData.AddColumn("BALE_NO");
             objData.AddColumn("PACKING_DATE");
             objData.AddColumn("TOTAL_NET_AMOUNT");
             objData.AddColumn("NET_AMOUNT");
             objData.AddColumn("LR_NO");
             objData.AddColumn("TRANSPORTER_NAME");
             objData.AddColumn("AGENT_LAST_INVOICE");
             objData.AddColumn("AGENT_SR_NO");
             objData.AddColumn("QLT_IND");
             objData.AddColumn("AREA_ID");
             objData.AddColumn("AREA_NAME");
            
            //objData.AddColumn("INV_AMT");
            
            
           // String str="SELECT SUBSTRING(PARTY_CODE,1,2) AS AGENT_CODE,COUNT(INVOICE_NO) AS NO_OF_INV,SUM(TOTAL_NET_QTY) AS NET_QTY,SUM(TOTAL_GROSS_QTY) AS GROSS_QTY,SUM(TOTAL_NET_AMOUNT) AS INV_AMT,SUM(COLUMN_20_AMT),SUM(COLUMN_10_AMT),SUM(COLUMN_9_AMT),SUM(COLUMN_1_AMT) AS EXCISE_HLC_AMT  FROM D_SAL_INVOICE_HEADER WHERE INVOICE_DATE>='"+FromDate+"' AND INVOICE_DATE<='"+ToDate+"' AND INVOICE_TYPE='"+Type+"' AND APPROVED=1 AND CANCELLED=0 GROUP BY SUBSTRING(PARTY_CODE,1,2)";
                        
            String str="SELECT AREA_ID,AREA_NAME,SUBSTRING(PARTY_CODE,1,2) AS AGENT_CODE,PARTY_CODE,PARTY_NAME,STATION_CODE,PAYMENT_TERM,PAYMENT_TERM_CODE,INVOICE_NO,INVOICE_DATE,DUE_DATE,THAN, AGENT_LAST_INVOICE,AGENT_SR_NO,BALE_NO,PACKING_DATE,TOTAL_KG,TOTAL_GROSS_QTY,TOTAL_NET_QTY, TOTAL_GROSS_AMOUNT,TOTAL_NET_AMOUNT,NET_AMOUNT,QLT_IND, QUALITY_INDICATOR,TRANSPORTER_CODE,SUBSTRING(TRANSPORTER_NAME,1,19) AS TRANSPORTER_NAME,LR_NO FROM (SELECT A.PARTY_CODE,B.PARTY_NAME,STATION_CODE,PAYMENT_TERM,PAYMENT_TERM_CODE,INVOICE_NO,INVOICE_DATE,DUE_DATE,QUALITY_NO+0 AS THAN , AGENT_LAST_INVOICE,AGENT_SR_NO,BALE_NO,PACKING_DATE,TOTAL_KG,TOTAL_GROSS_QTY,TOTAL_NET_QTY, TOTAL_GROSS_AMOUNT,TOTAL_NET_AMOUNT,NET_AMOUNT, CASE WHEN A.WAREHOUSE_CODE =0   AND QUALITY_INDICATOR =0 THEN 'COMBO PACK  '  WHEN A.WAREHOUSE_CODE =1   AND QUALITY_INDICATOR IN (0,3) THEN 'REG./FRESH '  WHEN A.WAREHOUSE_CODE =1   AND QUALITY_INDICATOR =2 THEN  'MONOPOLY'  WHEN A.WAREHOUSE_CODE =1   AND QUALITY_INDICATOR =4 THEN  'STOCKLOT'  WHEN A.WAREHOUSE_CODE =4 THEN 'BLANKET '   WHEN A.WAREHOUSE_CODE =9 THEN 'TL'  END AS QLT_IND, QUALITY_INDICATOR,TRANSPORTER_CODE,LR_NO,C.AREA_ID,C.AREA_NAME FROM DINESHMILLS.D_SAL_INVOICE_HEADER A,DINESHMILLS.D_SAL_PARTY_MASTER B, DINESHMILLS.D_SAL_AREA_MASTER C  WHERE INVOICE_TYPE =1 AND A.APPROVED =1 AND A.CANCELLED =0 AND A.PARTY_CODE = B.PARTY_CODE AND A.INVOICE_DATE >= '"+FromDate+"' AND A.INVOICE_DATE <= '"+ToDate+"' AND SUBSTRING(A.PARTY_CODE,1,2) ='"+agentcode+"' AND SUBSTRING(A.PARTY_CODE,1,2) =C.AGENT_PREFIX ) AS INV LEFT JOIN  (SELECT * FROM DINESHMILLS.D_SAL_TRANSPORTER_MASTER ) AS TM ON INV.TRANSPORTER_CODE = TM.TRANSPORTER_ID ORDER BY PARTY_CODE,INVOICE_DATE,INVOICE_NO";
            ResultSet  rsTemp =data.getResult(str);
            if(rsTemp.getRow()>0) {
            while(!rsTemp.isAfterLast()){
                l++;
                TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();                
                objRow.setValue("SR_NO",Integer.toString(l));
                objRow.setValue("AGENT_CODE",UtilFunctions.getString(rsTemp,"AGENT_CODE",""));                
                objRow.setValue("AGENT_NAME",UtilFunctions.getString(rsTemp,"AGENT_NAME",""));
                objRow.setValue("PARTY_CODE",UtilFunctions.getString(rsTemp,"PARTY_CODE",""));
                objRow.setValue("PARTY_NAME",UtilFunctions.getString(rsTemp,"PARTY_NAME",""));
                objRow.setValue("STATION_CODE",UtilFunctions.getString(rsTemp,"STATION_CODE",""));
                objRow.setValue("PAYMENT_TERM_CODE",UtilFunctions.getString(rsTemp,"PAYMENT_TERM_CODE",""));
                objRow.setValue("INVOICE_NO",UtilFunctions.getString(rsTemp,"INVOICE_NO",""));
                objRow.setValue("INVOICE_DATE",UtilFunctions.getString(rsTemp,"INVOICE_DATE",""));
                objRow.setValue("TOTAL_GROSS_QTY",UtilFunctions.getString(rsTemp,"TOTAL_GROSS_QTY",""));
                objRow.setValue("THAN",UtilFunctions.getString(rsTemp,"THAN",""));
                objRow.setValue("BALE_NO",UtilFunctions.getString(rsTemp,"BALE_NO",""));
                objRow.setValue("PACKING_DATE",UtilFunctions.getString(rsTemp,"PACKING_DATE",""));
                objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTemp,"TOTAL_NET_AMOUNT",""));
                objRow.setValue("NET_AMOUNT",UtilFunctions.getString(rsTemp,"NET_AMOUNT",""));
                objRow.setValue("LR_NO",UtilFunctions.getString(rsTemp,"LR_NO",""));
                objRow.setValue("TRANSPORTER_NAME",UtilFunctions.getString(rsTemp,"TRANSPORTER_NAME",""));
                objRow.setValue("AGENT_LAST_INVOICE",UtilFunctions.getString(rsTemp,"AGENT_LAST_INVOICE",""));
                objRow.setValue("AGENT_SR_NO",UtilFunctions.getString(rsTemp,"AGENT_SR_NO",""));
                objRow.setValue("QLT_IND",UtilFunctions.getString(rsTemp,"QLT_IND",""));
                objRow.setValue("AREA_ID",UtilFunctions.getString(rsTemp,"AREA_ID",""));
                objRow.setValue("AREA_NAME",UtilFunctions.getString(rsTemp,"AREA_NAME",""));
                
                
                
                
                
                objData.AddRow(objRow);                
                rsTemp.next();
            }
            }
            HashMap parameter=new HashMap();
            parameter.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            parameter.put("FROM_DATE",EITLERPGLOBAL.formatDate(FromDate));
            parameter.put("TO_DATE",EITLERPGLOBAL.formatDate(ToDate));
         //   parameter.put("INV_TYPE",InvoiceType);
            //parameter.put("BOOK_NAME",clsBook.getBookName(EITLERPGLOBAL.gCompanyID,BookCode));
            //parameter.put("TOTAL_INVOICE_NO",Integer.toString(l));
            
            //parameter.put("NAME","ORDER");
            //parameter.put("LAST_DATE","15/02/2014"
            
           // EITLERPGLOBAL.PAGE_BREAK=true;
            new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/sales/stg/agentinvoicewise.rpt",parameter,objData);
            rsTemp.close();            
           
        }catch(SQLException e) {
            e.printStackTrace();
            
        }
    }
    
    
        
    
    
}
