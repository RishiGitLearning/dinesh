/*
 * frmLCPartyMasterUpdated.java
 *
 * Created on March 12, 2013, 3:10 PM
 */

package EITLERP.Sales;

/**
 *
 * @author  Ashutosh
 */

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import javax.swing.event.TableModelListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.Action;
import javax.swing.AbstractAction;
import javax.swing.text.JTextComponent;

import java.awt.event.ActionEvent;
import java.awt.Color;


import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.awt.Cursor;
import java.util.HashMap;
import EITLERP.*;
import java.net.URL;
import java.sql.*;
import EITLERP.Production.ReportUI.JTextFieldHint;

import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.Loader;
import EITLERP.AppletFrame;
import EITLERP.frmPendingApprovals;


public class frmLCPartyMasterUpdated extends javax.swing.JApplet {
    Connection  connection;
    Statement statement;
    ResultSet resultSet;
    
    private int EditMode=0;
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromID=0;
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private int FFNo=0;    
    
    
    public boolean PENDING_DOCUMENT=false; //for refresh pending document module
    private boolean DoNotEvaluate=false;
    
    //private clsFeltOrderUpd ObjFeltOrderUpd;
    private clsLCPartyUpd ObjLCPartyUpd;    
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    private EITLComboModel cmbAmendReasonModel;
    
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel;
    private EITLTableModel DataModelAdd;
    private EITLTableModel DataModelActive;
    private EITLTableModel DataModelInActive;
    
    public frmPendingApprovals frmPA;
    
    /** Creates new form frmLCPartyMasterUpdated */
    public void init() {
        System.gc();
        setSize(830,590);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        DataModel=new EITLTableModel();
        ObjLCPartyUpd=new clsLCPartyUpd();
        
        SetMenuForRights();
        GenerateHierarchyCombo();
        GenerateSendToCombo();        
        FormatGrid();
        FormatGridAdd(); 
        
        if(ObjLCPartyUpd.LoadData()) {
            DisplayData();
        }else{
            JOptionPane.showMessageDialog(frmLCPartyMasterUpdated.this,"Error occured while Loading Data. Error is "+ObjLCPartyUpd.LastError,"DATA LOADING ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /** This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPopupMenu = new javax.swing.JPopupMenu();
        jMenuItemAdd = new javax.swing.JMenuItem();
        jMenuItemBlock = new javax.swing.JMenuItem();
        jMenuItemUnblock = new javax.swing.JMenuItem();
        buttonGroup2 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtLCOpenerCode = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        cmdNextToTab1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtLCID = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        Table1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        OpgAdd = new javax.swing.JRadioButton();
        OpgBlock = new javax.swing.JRadioButton();
        OpgUnblock = new javax.swing.JRadioButton();
        lblType = new javax.swing.JLabel();
        txtReason = new javax.swing.JTextField();
        lblReason = new javax.swing.JLabel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdBackToTab1 = new javax.swing.JButton();
        cmdBackToNormal = new javax.swing.JButton();
        cmdViewRevisions = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        TableInActive = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableActive = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        lblStatus = new javax.swing.JLabel();

        jMenuItemAdd.setText("ADD");
        jMenuItemAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAddActionPerformed(evt);
            }
        });

        jPopupMenu.add(jMenuItemAdd);

        jMenuItemBlock.setText("BLOCK");
        jMenuItemBlock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBlockActionPerformed(evt);
            }
        });

        jPopupMenu.add(jMenuItemBlock);

        jMenuItemUnblock.setText("UNBLOCK");
        jMenuItemUnblock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemUnblockActionPerformed(evt);
            }
        });

        jPopupMenu.add(jMenuItemUnblock);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 830, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText("LC Party Master - ");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 830, 25);

        Tab1.setLayout(null);

        Tab1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });

        jLabel3.setText("LC Opener");
        Tab1.add(jLabel3);
        jLabel3.setBounds(20, 10, 70, 20);

        txtLCOpenerCode = new JTextFieldHint(new JTextField(),"Search by F1");
        txtLCOpenerCode.setFont(new java.awt.Font("Dialog", 1, 14));
        txtLCOpenerCode.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtLCOpenerCode.setEnabled(false);
        txtLCOpenerCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtLCOpenerCodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLCOpenerCodeFocusLost(evt);
            }
        });
        txtLCOpenerCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtLCOpenerCodeKeyPressed(evt);
            }
        });

        Tab1.add(txtLCOpenerCode);
        txtLCOpenerCode.setBounds(100, 10, 102, 21);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(Table);

        Tab1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 360, 760, 50);

        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add");
        cmdAdd.setToolTipText("Add Row");
        cmdAdd.setNextFocusableComponent(cmdRemove);
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });

        Tab1.add(cmdAdd);
        cmdAdd.setBounds(470, 90, 90, 25);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setToolTipText("Remove Selected Row");
        cmdRemove.setNextFocusableComponent(cmdNextToTab1);
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });

        Tab1.add(cmdRemove);
        cmdRemove.setBounds(570, 90, 90, 25);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel3);
        jPanel3.setBounds(10, 70, 770, 10);

        cmdNextToTab1.setMnemonic('N');
        cmdNextToTab1.setText("Next >>");
        cmdNextToTab1.setToolTipText("Next Tab");
        cmdNextToTab1.setNextFocusableComponent(cmdRemove);
        cmdNextToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab1ActionPerformed(evt);
            }
        });

        Tab1.add(cmdNextToTab1);
        cmdNextToTab1.setBounds(670, 90, 90, 25);

        jLabel5.setText("ID");
        Tab1.add(jLabel5);
        jLabel5.setBounds(240, 10, 30, 20);

        txtLCID.setFont(new java.awt.Font("Dialog", 1, 14));
        txtLCID.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtLCID.setEnabled(false);
        Tab1.add(txtLCID);
        txtLCID.setBounds(280, 10, 100, 21);

        lblRevNo.setFont(new java.awt.Font("Dialog", 1, 14));
        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(210, 10, 20, 18);

        Table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Table1KeyReleased(evt);
            }
        });

        jScrollPane4.setViewportView(Table1);

        Tab1.add(jScrollPane4);
        jScrollPane4.setBounds(10, 130, 760, 170);

        jPanel2.setLayout(null);

        OpgAdd.setText("Add");
        buttonGroup2.add(OpgAdd);
        OpgAdd.setEnabled(false);
        OpgAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgAddMouseClicked(evt);
            }
        });

        jPanel2.add(OpgAdd);
        OpgAdd.setBounds(260, 10, 20, 23);

        OpgBlock.setText("Block");
        buttonGroup2.add(OpgBlock);
        OpgBlock.setEnabled(false);
        OpgBlock.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgBlockMouseClicked(evt);
            }
        });

        jPanel2.add(OpgBlock);
        OpgBlock.setBounds(290, 10, 20, 23);

        OpgUnblock.setText("Unblock");
        buttonGroup2.add(OpgUnblock);
        OpgUnblock.setEnabled(false);
        OpgUnblock.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgUnblockMouseClicked(evt);
            }
        });

        jPanel2.add(OpgUnblock);
        OpgUnblock.setBounds(320, 10, 20, 23);

        Tab1.add(jPanel2);
        jPanel2.setBounds(600, 10, 170, 20);

        Tab1.add(lblType);
        lblType.setBounds(100, 40, 100, 20);

        txtReason.setEnabled(false);
        Tab1.add(txtReason);
        txtReason.setBounds(80, 320, 620, 20);

        lblReason.setText("Reason");
        Tab1.add(lblReason);
        lblReason.setBounds(10, 320, 60, 20);

        Tab.addTab("Party Details", Tab1);

        Tab2.setLayout(null);

        Tab2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(7, 23, 62, 15);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });

        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 20, 184, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(7, 62, 33, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setFont(new java.awt.Font("Dialog", 1, 14));
        txtFrom.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 60, 184, 21);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(7, 97, 61, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 95, 630, 19);

        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(7, 130, 73, 15);

        jPanel6.setLayout(null);

        jPanel6.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        buttonGroup1.add(OpgApprove);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.setEnabled(false);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 150, 23);

        OpgFinal.setText("Final Approve");
        buttonGroup1.add(OpgFinal);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.setEnabled(false);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 120, 20);

        OpgReject.setText("Reject");
        buttonGroup1.add(OpgReject);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.setEnabled(false);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 70, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        buttonGroup1.add(OpgHold);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.setEnabled(false);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });

        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 130, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(86, 130, 184, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(7, 249, 50, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });

        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(86, 245, 184, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(7, 288, 60, 15);

        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });

        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(86, 286, 630, 19);

        cmdBackToTab0.setMnemonic('B');
        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.setToolTipText("Previous Tab");
        cmdBackToTab0.setNextFocusableComponent(cmdRemove);
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });

        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(500, 350, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });

        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(728, 94, 43, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.setNextFocusableComponent(cmdRemove);
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });

        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(620, 350, 102, 25);

        Tab.addTab("Approval", Tab2);

        jPanel1.setLayout(null);

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(8, 5, 170, 15);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableApprovalStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableApprovalStatus);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 24, 760, 150);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 191, 163, 15);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableUpdateHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(TableUpdateHistory);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(10, 210, 640, 180);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.setNextFocusableComponent(cmdRemove);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });

        jPanel1.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(662, 390, 110, 25);

        cmdBackToNormal.setText("Back To Normal");
        cmdBackToNormal.setMargin(new java.awt.Insets(2, 3, 2, 3));
        cmdBackToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToNormalActionPerformed(evt);
            }
        });

        jPanel1.add(cmdBackToNormal);
        cmdBackToNormal.setBounds(662, 240, 110, 25);

        cmdViewRevisions.setText("View Revisions");
        cmdViewRevisions.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdViewRevisions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewRevisionsActionPerformed(evt);
            }
        });

        jPanel1.add(cmdViewRevisions);
        cmdViewRevisions.setBounds(662, 210, 110, 25);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(662, 270, 110, 25);

        Tab.addTab("Status", jPanel1);

        jPanel4.setLayout(null);

        jScrollPane5.setPreferredSize(new java.awt.Dimension(100, 100));
        TableInActive.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(TableInActive);

        jPanel4.add(jScrollPane5);
        jScrollPane5.setBounds(430, 50, 340, 350);

        jScrollPane6.setPreferredSize(new java.awt.Dimension(100, 100));
        TableActive.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(TableActive);

        jPanel4.add(jScrollPane6);
        jScrollPane6.setBounds(20, 50, 360, 350);

        jLabel1.setText("Active Parties");
        jPanel4.add(jLabel1);
        jLabel1.setBounds(140, 20, 90, 15);

        jLabel2.setText("Inactive Parties");
        jPanel4.add(jLabel2);
        jLabel2.setBounds(530, 20, 100, 15);

        jPanel5.setBackground(new java.awt.Color(153, 153, 153));
        jPanel5.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel4.add(jPanel5);
        jPanel5.setBounds(400, 7, 7, 410);

        Tab.addTab("Active/Inactive List", jPanel4);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 790, 450);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(10, 530, 780, 22);

    }//GEN-END:initComponents

    private void Table1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table1KeyReleased
        String tablepartycode=(String)Table1.getValueAt(Table1.getSelectedRow(), 1);
        if(tablepartycode.equals("")){
            //Table1.isCellSelected(Table1.getSelectedRow(),1);            
            //Table1.requestFocus();
            Table1.changeSelection(Table1.getRowCount()-1, 1, false,false);
            Table1.requestFocus();
            JOptionPane.showMessageDialog(frmLCPartyMasterUpdated.this,"Party code can not be blank","ERROR",JOptionPane.ERROR_MESSAGE);          
            return;            
        }
        else{ 
            if(lblType.getText().trim().equals("ADD")){
            String partycode=data.getStringValueFromDB("SELECT PARTY_CODE FROM D_SAL_POLICY_LC_MASTER WHERE LC_OPENER_CODE='"+txtLCOpenerCode.getText().trim()+"' AND PARTY_CODE='"+tablepartycode+"'");
            if(partycode.equals(tablepartycode)){
                Table1.setValueAt("", Table1.getSelectedRow(), 1);
               //Table1.isCellSelected(Table1.getSelectedRow(),1);            
               //Table1.requestFocus();                
                Table1.changeSelection(Table1.getRowCount()-1, 1, false,false);
                Table1.requestFocus();
                JOptionPane.showMessageDialog(frmLCPartyMasterUpdated.this,"Party is already exist for this LC opener code","ERROR",JOptionPane.ERROR_MESSAGE);          
                return;
            }else{                
                String salesparty=data.getStringValueFromDB("SELECT PARTY_CODE FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='"+tablepartycode+"'");
                //ResultSet rsTmp=data.getResult("SELECT PARTY_CODE FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='"+tablepartycode+"'");
                //rsTmp.first();            
                //if(rsTmp.getRow()==0) {
                if(salesparty.equals("")){
                Table1.setValueAt("", Table1.getSelectedRow(), 1);               
                Table1.changeSelection(Table1.getRowCount()-1, 1, false,false);
                Table1.requestFocus();
                JOptionPane.showMessageDialog(frmLCPartyMasterUpdated.this,"Party is does not exist in sales party master","ERROR",JOptionPane.ERROR_MESSAGE);          
                return;
                }else{
                Table1.setValueAt(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID,tablepartycode),Table1.getSelectedRow(),2);
                Table1.setValueAt(clsSales_Party.getChargeCode(EITLERPGLOBAL.gCompanyID,tablepartycode),Table1.getSelectedRow(),3);                                
                Table1.setValueAt(clsSales_Party.getCity(EITLERPGLOBAL.gCompanyID,tablepartycode),Table1.getSelectedRow(),4);  
                }
            }
            }
            else{
                
                Table1.setValueAt(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID,tablepartycode),Table1.getSelectedRow(),2);
                Table1.setValueAt(clsSales_Party.getChargeCode(EITLERPGLOBAL.gCompanyID,tablepartycode),Table1.getSelectedRow(),3);
                Table1.setValueAt(clsSales_Party.getCity(EITLERPGLOBAL.gCompanyID,tablepartycode),Table1.getSelectedRow(),4); 
                //int stateid=Integer.parseInt(data.getStringValueFromDB("SELECT STATE_ID FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='"+tablepartycode));
                //String stateid=data.getStringValueFromDB("SELECT STATE_ID FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='"+tablepartycode+"'");                
                //Table1.setValueAt(clsSales_Party.getStateName(Integer.parseInt(stateid)),Table1.getSelectedRow(),4);                    
                               
            }
        }
    }//GEN-LAST:event_Table1KeyReleased

    private void Table1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table1KeyPressed
        //lblStatus.setText("Wait");
        if(evt.getKeyCode()==112) //F1 Key pressed
        {      
            if(Table1.getSelectedColumn()==1) {
                if(lblType.getText().trim().equals("BLOCK")){
                LOV aList=new LOV();                                
                //String strSQL = "SELECT PARTY_CODE,PARTY_NAME FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE NOT IN (SELECT PARTY_CODE FROM D_SAL_POLICY_LC_MASTER WHERE LC_OPENER_CODE='"+txtLCOpenerCode.getText().trim()+"') AND CANCELLED=0 ORDER BY PARTY_CODE";
                String strSQL = "SELECT PARTY_CODE FROM D_SAL_POLICY_LC_MASTER WHERE LC_OPENER_CODE='"+txtLCOpenerCode.getText().trim()+"' AND PARTY_STATUS='ACTIVE' ORDER BY PARTY_CODE";                
                aList.SQL=strSQL;
                aList.ReturnCol=1;
                aList.ShowReturnCol=true;
                //aList.DefaultSearchOn=2;
                aList.DefaultSearchOn=1;
                if(aList.ShowLOV()) {                    
                    if(Table1.getCellEditor()!=null) {
                        Table1.getCellEditor().stopCellEditing();
                    }                     
                    Table1.setValueAt(aList.ReturnVal, Table1.getSelectedRow(),1);                    
                }
                }
                
                if(lblType.getText().trim().equals("UNBLOCK")){
                LOV aList=new LOV();                                                
                String strSQL = "SELECT PARTY_CODE FROM D_SAL_POLICY_LC_MASTER WHERE LC_OPENER_CODE='"+txtLCOpenerCode.getText().trim()+"' AND PARTY_STATUS='INACTIVE' ORDER BY PARTY_CODE";                
                aList.SQL=strSQL;
                aList.ReturnCol=1;
                aList.ShowReturnCol=true;
                //aList.DefaultSearchOn=2;
                aList.DefaultSearchOn=1;
                if(aList.ShowLOV()) {                    
                    if(Table1.getCellEditor()!=null) {
                        Table1.getCellEditor().stopCellEditing();
                    }                     
                    Table1.setValueAt(aList.ReturnVal, Table1.getSelectedRow(),1);                    
                }
                }
            }            
        }
    }//GEN-LAST:event_Table1KeyPressed

    private void jMenuItemUnblockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemUnblockActionPerformed
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=171;
        
        if(aList.ShowList()){
        EditMode=EITLERPGLOBAL.ADD;        
        SetFields(true);
        DisableToolbar();
        ClearFields();
        SelPrefix=aList.Prefix; //Selected Prefix;
        SelSuffix=aList.Suffix;
        FFNo=aList.FirstFreeNo;
        
        SetupApproval();
            //Display newly generated document no.
            txtLCID.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 171, FFNo,  false));
            lblType.setText("UNBLOCK");
            lblTitle.setText("LC Party Master - "+txtLCID.getText());
            //lblTitle.setBackground(Color.BLUE);
            lblTitle.setBackground(Color.GRAY);                        
            txtLCOpenerCode.requestFocus();
        
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
    }//GEN-LAST:event_jMenuItemUnblockActionPerformed

    private void txtLCOpenerCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLCOpenerCodeKeyPressed
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            LOV aList=new LOV();
            
            //aList.SQL="SELECT PARTY_CODE,NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER ORDER BY NAME";
            aList.SQL="SELECT LCO_OPENER_CODE,LCO_OPENER_NAME FROM DINESHMILLS.D_SAL_LC_OPENER_MASTER ORDER BY LCO_OPENER_NAME";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            //aList.DefaultSearchOn=2;
            aList.DefaultSearchOn=1;
            
            if(aList.ShowLOV()) {
                txtLCOpenerCode.setText(aList.ReturnVal);
                //txtpartyname.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID,aList.ReturnVal));
        }
        }
    }//GEN-LAST:event_txtLCOpenerCodeKeyPressed

    private void OpgUnblockMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgUnblockMouseClicked
       /* OpgAdd.setSelected(false);
        OpgBlock.setSelected(false);
        OpgUnblock.setSelected(true);
        
        if(OpgUnblock.isSelected()){
          cmdAdd.setEnabled(true);
          cmdRemove.setEnabled(true);  
        }
        */
    }//GEN-LAST:event_OpgUnblockMouseClicked

    private void OpgBlockMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgBlockMouseClicked
       /* OpgAdd.setSelected(false);
        OpgBlock.setSelected(true);
        OpgUnblock.setSelected(false);
        
        if(OpgBlock.isSelected()){
          cmdAdd.setEnabled(true);
          cmdRemove.setEnabled(true);  
        }
        */
    }//GEN-LAST:event_OpgBlockMouseClicked

    private void OpgAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgAddMouseClicked
        /*OpgAdd.setSelected(true);
        OpgBlock.setSelected(false);
        OpgUnblock.setSelected(false);
        
        if(OpgAdd.isSelected()){
          cmdAdd.setEnabled(true);
          cmdRemove.setEnabled(true);  
        }
        */
    }//GEN-LAST:event_OpgAddMouseClicked

    private void txtLCOpenerCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLCOpenerCodeFocusLost
        if(!txtLCOpenerCode.getText().equals("")){
            generateTable();
            generateTableActiveInActive();
            lblStatus.setText("");
        }
    }//GEN-LAST:event_txtLCOpenerCodeFocusLost

    private void jMenuItemBlockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBlockActionPerformed
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=171;
        
        if(aList.ShowList()){
        EditMode=EITLERPGLOBAL.ADD;        
        
        DisableToolbar();
        ClearFields();
        SelPrefix=aList.Prefix; //Selected Prefix;
        SelSuffix=aList.Suffix;
        FFNo=aList.FirstFreeNo;
        
        SetupApproval();
            //Display newly generated document no.
            txtLCID.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 171, FFNo,  false));
            lblType.setText("BLOCK");
            lblTitle.setText("LC Party Master - "+txtLCID.getText());
            //lblTitle.setBackground(Color.BLUE);
            lblTitle.setBackground(Color.GRAY);                        
            txtLCOpenerCode.requestFocus(); 
            SetFields(true);
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
        
    }//GEN-LAST:event_jMenuItemBlockActionPerformed

    private void jMenuItemAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddActionPerformed
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=171;
        
        if(aList.ShowList()){
        EditMode=EITLERPGLOBAL.ADD;        
        SetFields(true);
        DisableToolbar();
        ClearFields();
        SelPrefix=aList.Prefix; //Selected Prefix;
        SelSuffix=aList.Suffix;
        FFNo=aList.FirstFreeNo;
        
        SetupApproval();
            //Display newly generated document no.
            txtLCID.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 171, FFNo,  false));
            lblType.setText("ADD");
            lblTitle.setText("LC Party Master - "+txtLCID.getText());
            //lblTitle.setBackground(Color.BLUE);
            lblTitle.setBackground(Color.GRAY);                        
            txtLCOpenerCode.requestFocus();
        
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
        
        //SetupApproval();
        //lblTitle.setBackground(Color.GRAY);                        
        /*
        try {
            AppletFrame aFrame=new AppletFrame("Felt Warping Report");
            aFrame.startAppletEx("EITLERP.Production.FeltWarping.frmFeltWarping","Felt Warping Report");
            frmFeltWarping ObjFeltWarping=(frmFeltWarping) aFrame.ObjApplet;
            ObjFeltWarping.Find((String)Table.getValueAt(Table.getSelectedRow(), 1), "");
        }catch(Exception e){e.printStackTrace();}
         */
    }//GEN-LAST:event_jMenuItemAddActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
     //   new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptFeltWeaving.rpt",new HashMap(),ObjLCPartyUpd.getReportData(EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText().trim())));
      //  EITLERPGLOBAL.PAGE_BREAK=true;
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        /*try {
            URL reportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptFeltWeaving.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&PROD_DATE="+EITLERPGLOBAL.formatDateDB(txtAmendDate.getText()));
            EITLERPGLOBAL.loginContext.showDocument(reportFile,"_blank");
        }catch(Exception e) {
            JOptionPane.showMessageDialog(frmLCPartyMasterUpdated.this,"File error "+e.getMessage(),"FILE ERROR",JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
         */
    }//GEN-LAST:event_cmdPreviewActionPerformed
        
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if(TableUpdateHistory.getRowCount()>0&&TableUpdateHistory.getSelectedRow()>=0) {
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(),4).toString());
            bigEdit.ShowEdit();
        }else
            JOptionPane.showMessageDialog(frmLCPartyMasterUpdated.this,"Select a row from Document Update History");
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdBackToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToNormalActionPerformed
        ObjLCPartyUpd.HistoryView = false;
        ObjLCPartyUpd.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdBackToNormalActionPerformed
    
    private void cmdViewRevisionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewRevisionsActionPerformed
        String DocNo=txtLCID.getText();
        ObjLCPartyUpd.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewRevisionsActionPerformed
    
    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed
    
    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained
    
    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed
    
    private void cmdNextToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab1ActionPerformed
    
    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        //txtAmendDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained
    
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained
    
    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained
    
    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained
    
    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained
    
    private void txtLCOpenerCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLCOpenerCodeFocusGained
        ShowMessage("Enter LC Opener Code");
    }//GEN-LAST:event_txtLCOpenerCodeFocusGained
    
    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);        
        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        //SetupApproval();
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if(ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID,171,txtLCID.getText())) {
                cmbSendTo.setEnabled(true);
            }
            else {
                cmbSendTo.setEnabled(false);
            }
        }
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjLCPartyUpd.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if(JOptionPane.showConfirmDialog(frmLCPartyMasterUpdated.this,"Are you sure want to delete this record ?","DELETE RECORD",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        if(Table1.getRowCount()>0) {
            DataModelAdd.removeRow(Table1.getSelectedRow());
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        Object[] rowData=new Object[32];
        rowData[0]=Integer.toString(Table1.getRowCount()+1);
        rowData[1]="";
        rowData[2]="";
        rowData[3]="";
        rowData[4]="";
        rowData[5]="";
        rowData[6]="";
        rowData[7]="";
       
             
        DataModelAdd.addRow(rowData);
        Table1.changeSelection(Table1.getRowCount()-1, 1, false,false);
        Table1.requestFocus();
    }//GEN-LAST:event_cmdAddActionPerformed
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgAdd;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgBlock;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JRadioButton OpgUnblock;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable Table1;
    private javax.swing.JTable TableActive;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableInActive;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToNormal;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab1;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewRevisions;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuItem jMenuItemAdd;
    private javax.swing.JMenuItem jMenuItemBlock;
    private javax.swing.JMenuItem jMenuItemUnblock;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblReason;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblType;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtLCID;
    private javax.swing.JTextField txtLCOpenerCode;
    private javax.swing.JTextField txtReason;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
    
    //Puts toolbar in enable mode
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);        
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    //Puts toolbar in disable mode
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);        
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    private void SetFields(boolean pStat) {
        txtLCOpenerCode.setEnabled(pStat);
    //    txtLCID.setEnabled(pStat);
   //     txtFormNo.setEnabled(pStat);
        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        /*OpgAdd.setEnabled(pStat);
        OpgBlock.setEnabled(pStat);
        OpgUnblock.setEnabled(pStat);
         */      
        txtReason.setEnabled(pStat);                  
        cmbSendTo.setEnabled(pStat);        
        txtToRemarks.setEnabled(pStat);        
        SetupApproval();
    }
    
    private void ClearFields() {
        //txtAmendDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtLCOpenerCode.setText("");
        txtReason.setText("");
        txtLCID.setText("");
        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        FormatGridAdd();
        FormatGrid();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
    }
    
    //Display data on the Screen
    private void DisplayData() {
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,171)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        //=========== Title Bar Color Indication ===============//
        try {
            if(EditMode==0) {
                if(ObjLCPartyUpd.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }else lblTitle.setBackground(Color.GRAY);
                
                if(ObjLCPartyUpd.getAttribute("CANCELLED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
            //============================================//
            
            String AmendDate = ObjLCPartyUpd.getAttribute("LC_OPENER").getString();
            String AmendID= ObjLCPartyUpd.getAttribute("LC_ID").getString();
            String Type=ObjLCPartyUpd.getAttribute("TYPE").getString();
            String Reason=ObjLCPartyUpd.getAttribute("LC_REASON").getString();
            lblTitle.setText(" LC Party Master- "+ AmendID);
            lblRevNo.setText(Integer.toString((int)ObjLCPartyUpd.getAttribute("REVISION_NO").getVal()));
            DoNotEvaluate=true;
            
            FormatGridAdd();
            txtLCOpenerCode.setText(AmendDate);
            txtLCID.setText(AmendID);
            lblType.setText(Type);
            txtReason.setText(Reason);
            
            //Now Generate Table
            for(int i=1;i<=ObjLCPartyUpd.hmLCPartyDetails.size();i++) {
                //clsFeltOrderUpdDetails ObjLCPartyUpdDetails=(clsFeltOrderUpdDetails)ObjLCPartyUpd.hmFeltOrderUpdDetails.get(Integer.toString(i));
                clsLCPartyDetails ObjLCPartyDetails= (clsLCPartyDetails) ObjLCPartyUpd.hmLCPartyDetails.get(Integer.toString(i));
                
                Object[] rowData=new Object[6];
                rowData[0]=Integer.toString(i);
                rowData[1]=ObjLCPartyDetails.getAttribute("LC_PARTY").getString();
                rowData[2]=ObjLCPartyDetails.getAttribute("LC_PARTY_NAME").getString();
                rowData[3]=ObjLCPartyDetails.getAttribute("LC_CHARGE_CODE").getString();
                rowData[4]=ObjLCPartyDetails.getAttribute("LC_PARTY_STATE").getString();
                

                DataModelAdd.addRow(rowData);
            }
            
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap hmList=new HashMap();            
            hmList=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID,171, AmendID);
            for(int i=1;i<=hmList.size();i++) {
                //clsDocFlow is collection class used for holding approval flow data
                clsDocFlow ObjFlow=(clsDocFlow)hmList.get(Integer.toString(i));
                Object[] rowData=new Object[7];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,clsUser.getDeptID(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3]=ObjFlow.getAttribute("STATUS").getString();
                rowData[4]=EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString());
                rowData[5]=EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString());
                rowData[6]=ObjFlow.getAttribute("REMARKS").getString();
                
                DataModelApprovalStatus.addRow(rowData);
            }
            //============================================================//
            
            // Generating Grid for Showing Production Details Update History
            
            FormatGridUpdateHistory();
            HashMap hmApprovalHistory=clsLCPartyUpd.getHistoryList(EITLERPGLOBAL.gCompanyID, txtLCID.getText());
            for(int i=1;i<=hmApprovalHistory.size();i++) {
                clsLCPartyUpd ObjLCPartyUpd=(clsLCPartyUpd)hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData=new Object[5];
                
                rowData[0]=Integer.toString((int)ObjLCPartyUpd.getAttribute("REVISION_NO").getVal());
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjLCPartyUpd.getAttribute("UPDATED_BY").getVal());
                rowData[2]=EITLERPGLOBAL.formatDate(ObjLCPartyUpd.getAttribute("ENTRY_DATE").getString());
                
                String ApprovalStatus="";
                
                if((ObjLCPartyUpd.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus="Hold";
                }
                
                if((ObjLCPartyUpd.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus="Approved";
                }
                
                if((ObjLCPartyUpd.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus="Final Approved";
                }
                
                if((ObjLCPartyUpd.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus="Waiting";
                }
                
                if((ObjLCPartyUpd.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus="Rejected";
                }
                
                if((ObjLCPartyUpd.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus="Pending";
                }
                
                if((ObjLCPartyUpd.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus="Skiped";
                }
                
                rowData[3]=ApprovalStatus;
                rowData[4]=ObjLCPartyUpd.getAttribute("APPROVER_REMARKS").getString();
                
                DataModelUpdateHistory.addRow(rowData);
            }            
            generateTable();
            generateTableActiveInActive();
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
        DoNotEvaluate=false;
    }
    
    private void FormatGrid() {
        try {
            cmdAdd.requestFocus();
            
            DataModel=new EITLTableModel();
            Table.removeAll();
            
            Table.setModel(DataModel);
            TableColumnModel ColModel=Table.getColumnModel();
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //Add Columns to it
            DataModel.addColumn("Sr. No.");            
            DataModel.addColumn("Name");
            DataModel.addColumn("Address");
            DataModel.addColumn("Bank ID");
            DataModel.addColumn("Bank Name");
            DataModel.addColumn("Bank Address");            
            DataModel.addColumn("Bank City");
            DataModel.addColumn("Expiry Date");
            
            
            
           DataModel.SetReadOnly(0);
           DataModel.SetReadOnly(1);
           DataModel.SetReadOnly(2);           
           DataModel.SetReadOnly(3);
           DataModel.SetReadOnly(4);
           DataModel.SetReadOnly(5);
           DataModel.SetReadOnly(6);
           DataModel.SetReadOnly(7);
            
            if(EditMode!=0){
                //------- Install Table List Selection Listener ------//
                Table.getColumnModel().getSelectionModel().addListSelectionListener(
                new ListSelectionListener() {
                    public void valueChanged(ListSelectionEvent e) {
                        int column=Table.getSelectedColumn();
                        String strVar=DataModel.getVariable(column);
                        //=============== Cell Editing Routine =======================//
                        Table.editCellAt(Table.getSelectedRow(),column);
                        if(Table.getEditorComponent() instanceof JTextComponent) {
                            ((JTextComponent)Table.getEditorComponent()).selectAll();
                        }
                        //============= Cell Editing Routine Ended =================//
                    }
                });
                
                //----- Install Table Model Event Listener For Displaying Party code and Group -------//
                Table.getModel().addTableModelListener(new TableModelListener() {
                    public void tableChanged(TableModelEvent e) {
                        if (e.getType() == TableModelEvent.UPDATE) {
                            int row = Table.getSelectedRow();
                            int column = e.getColumn();
                            
                            //=========== Cell Update Prevention Check ===========//
                            String curValue=((String)Table.getValueAt(row, column)).trim();
                            if(curValue.equals("")) {
                                return;
                            }
                            //====================================================//
                            if(DoNotEvaluate) {
                                return;
                            }
                            
                            if(column==1){
                                String pieceNo=((String)Table.getValueAt(row,1)).trim();
                              //  String partycd=((String)ObjLCPartyUpd.getPartyCode(pieceNo)).trim();

                                Table.setValueAt(ObjLCPartyUpd.getPartyCode(pieceNo), row, 2);
                                Table.setValueAt(ObjLCPartyUpd.getOrderDate(pieceNo), row, 3);
                                Table.setValueAt(ObjLCPartyUpd.getProductCode(pieceNo), row, 4);
                                Table.setValueAt(ObjLCPartyUpd.getGroupCD(pieceNo), row, 5);
                                Table.setValueAt(ObjLCPartyUpd.getStyle(pieceNo), row, 6);
                                Table.setValueAt(ObjLCPartyUpd.getLength(pieceNo), row, 7);
                                Table.setValueAt(ObjLCPartyUpd.getWidth(pieceNo), row, 8);
                               Table.setValueAt(ObjLCPartyUpd.getGSM(pieceNo), row, 9);
                               Table.setValueAt(ObjLCPartyUpd.getWeight(pieceNo), row, 10);
                               Table.setValueAt(ObjLCPartyUpd.getReqDate(pieceNo), row, 11);
                               Table.setValueAt(ObjLCPartyUpd.getCommDate(pieceNo), row, 12);
                               Table.setValueAt(ObjLCPartyUpd.getAgreedDate(pieceNo), row, 13);
                               Table.setValueAt(ObjLCPartyUpd.getRevReqDate(pieceNo), row, 14);
                               Table.setValueAt(ObjLCPartyUpd.getRevCommDate(pieceNo), row, 15);
                               Table.setValueAt(ObjLCPartyUpd.getRevAgreedDate(pieceNo), row, 16);
                               Table.setValueAt(ObjLCPartyUpd.getRevReqReason(pieceNo), row, 17);
                               Table.setValueAt(ObjLCPartyUpd.getRevCommReason(pieceNo), row, 18);
                               Table.setValueAt(ObjLCPartyUpd.getMachineNo(pieceNo), row, 19);
                               Table.setValueAt(ObjLCPartyUpd.getPositionNo(pieceNo), row, 20);
                               Table.setValueAt(ObjLCPartyUpd.getRefNo(pieceNo), row, 21);
                               Table.setValueAt(ObjLCPartyUpd.getConfNo(pieceNo), row, 22);
                               Table.setValueAt(ObjLCPartyUpd.getPONo(pieceNo), row, 23);
                               Table.setValueAt(ObjLCPartyUpd.getPODate(pieceNo), row, 24);
                               Table.setValueAt(ObjLCPartyUpd.getPORemarks(pieceNo), row, 25);
                               Table.setValueAt(ObjLCPartyUpd.getWvgDate(pieceNo), row, 26);
                               Table.setValueAt(ObjLCPartyUpd.getMndDate(pieceNo), row, 27);
                               Table.setValueAt(ObjLCPartyUpd.getNdlDate(pieceNo), row, 28);


                            }
                        
                        }
                    }
                });
                
                
            }
        }catch(Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : "+e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void FormatGridAdd() {
        try {
            cmdAdd.requestFocus();            
            DataModelAdd=new EITLTableModel();
            Table1.removeAll();
            
            Table1.setModel(DataModelAdd);
            TableColumnModel ColModel=Table1.getColumnModel();
            Table1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //Add Columns to it
            DataModelAdd.addColumn("Sr. No.");            
            DataModelAdd.addColumn("Party Code");
            DataModelAdd.addColumn("Party Name");
            DataModelAdd.addColumn("Charge Code");
            DataModelAdd.addColumn("City");
            //DataModelAdd.addColumn("Reason");            
            //DataModelAdd.addColumn("6");
            
           DataModelAdd.SetReadOnly(0);
           DataModelAdd.SetReadOnly(2);
           DataModelAdd.SetReadOnly(3);
           DataModelAdd.SetReadOnly(4);
            
           
        }catch(Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : "+e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
     private void FormatGridActiveInActive() {
        try {
            
            DataModelActive=new EITLTableModel();
            DataModelInActive=new EITLTableModel();
            
            TableActive.removeAll();            
            TableInActive.removeAll();
            
            TableActive.setModel(DataModelActive);
            TableInActive.setModel(DataModelInActive);
            
            TableColumnModel ColModelActive=TableActive.getColumnModel();
            TableColumnModel ColModelInActive=TableInActive.getColumnModel();
            
            TableActive.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            TableInActive.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //TableActive.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
            //TableInActive.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //Add Columns to it
            DataModelActive.addColumn("Sr.No");            
            DataModelActive.addColumn("Party Code");
            DataModelActive.addColumn("Party Name");            
            DataModelActive.addColumn("Exp Date");
            DataModelInActive.addColumn("Sr.No");            
            DataModelInActive.addColumn("Party Code");
            DataModelInActive.addColumn("Party Name");            
            DataModelInActive.addColumn("Exp Date");
            
           //DataModelActive.SetReadOnly(0);
           DataModelActive.TableReadOnly(true);           
           DataModelInActive.TableReadOnly(true);           
           //DataModelInActive.SetReadOnly(1);
           
           TableActive.getColumnModel().getColumn(0).setMaxWidth(40); 
           TableInActive.getColumnModel().getColumn(0).setMaxWidth(40); 
            //TableActive.getColumnModel().getColumn(0).setCellRenderer(Renderer);
            //TableActive.getColumnModel().getColumn(16).setPreferredWidth(100); 
           
        }catch(Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : "+e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList=new HashMap();
        
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        hmHierarchyList=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=171 ");
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            hmHierarchyList=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=171 ");
        }
        for(int i=1;i<=hmHierarchyList.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }
    
    //Generates Send To Combo Box
    private void GenerateSendToCombo() {
        HashMap hmSendToList=new HashMap();
        try{
            cmbSendToModel=new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if(EditMode==EITLERPGLOBAL.ADD) {
                hmSendToList=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=hmSendToList.size();i++) {
                    clsUser ObjUser=(clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            }else {
                hmSendToList= ApprovalFlow.getRemainingUsers(EITLERPGLOBAL.gCompanyID,171,ObjLCPartyUpd.getAttribute("LC_ID").getString());
                for(int i=1;i<=hmSendToList.size();i++) {
                    clsUser ObjUser=(clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }
                  
    }
    
    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList=new HashMap();
        
        cmbSendToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        hmRejectedSendToList=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=hmRejectedSendToList.size();i++) {
            clsUser ObjUser=(clsUser) hmRejectedSendToList.get(Integer.toString(i));
            
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=ObjUser.getAttribute("USER_NAME").getString();
            
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                if(OpgApprove.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID,171, txtLCID.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID,171, txtLCID.getText(), (int)ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            }
            else {
                if(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
            
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID,171,txtLCID.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
    }
    
    //Generates User Name Combo Box
    
    private void SetupApproval() {
        // --- Hierarchy Change Rights Check --------
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,1171)) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, clsLCPartyUpd.ModuleID ,ObjLCPartyUpd.getAttribute("LC_ID").getString());
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,clsLCPartyUpd.ModuleID ,FromUserID,ObjLCPartyUpd.getAttribute("LC_ID").getString());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //GenerateFromCombo();
        GenerateSendToCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        
        //In Edit Mode Hierarchy Should be disabled
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
        
        
        ///////////////////////////////////////////////////////
        /*// --- Hierarchy Change Rights Check --------
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,75)) {
            cmbHierarchy.setEnabled(true);
        }else {
            cmbHierarchy.setEnabled(false);
        }*/
        
        /*
        // select hold for default approval
        OpgHold.setSelected(true);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        }else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromUserId=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }else {
            int FromUserID=clsFeltProductionApprovalFlow.getFromID(720,ObjLCPartyUpd.getAttribute("FLT_AMEND_ID").getString());
            lnFromUserId=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=clsFeltProductionApprovalFlow.getFromRemarks(720,FromUserID,ObjLCPartyUpd.getAttribute("FLT_AMEND_ID").getString());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();
         */
        /*
        if(clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        */
        //In Edit Mode Hierarchy and Reject Should be disabled
        /*
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if(clsFeltProductionApprovalFlow.IsCreator(720, txtLCID.getText()) ){
                OpgReject.setEnabled(false);
            }
        }
        
        if(EditMode==0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
        */
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,11711)) {
            cmdNew.setEnabled(true);
        }else {
            cmdNew.setEnabled(false);
        }
        
        
        // --- Edit Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,11712)) {
            cmdEdit.setEnabled(true);
        }else {
            cmdEdit.setEnabled(false);
        }
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,11713)) {
            cmdDelete.setEnabled(true);
        }else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,11714)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
        
    }
    
    private void Add() {        
       
        //jPopupMenu.show(this,cmdNew.getX() ,  35);
        jPopupMenu.show(cmdNew, 0, 25);
        
    }
    
    private void Edit() {
        String partyDocumentNo=(String)ObjLCPartyUpd.getAttribute("LC_ID").getObj();
        if(ObjLCPartyUpd.IsEditable(EITLERPGLOBAL.gCompanyID,partyDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode=EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            
            if(ApprovalFlow.IsCreator(171,partyDocumentNo)) {
                SetFields(true);
                txtLCOpenerCode.setEnabled(false);
    //            txtFormNo.setEnabled(false);
            }
            else {                
                EnableApproval();
            }
        }
        else {
            JOptionPane.showMessageDialog(frmLCPartyMasterUpdated.this,"You cannot edit this record. It is either approved/rejected or waiting approval for other user","EDITING ERROR",JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    private void Delete() {
        if(ObjLCPartyUpd.CanDelete(txtLCID.getText(), EITLERPGLOBAL.gNewUserID)) {
            DisplayData();
        }
        else {
            JOptionPane.showMessageDialog(frmLCPartyMasterUpdated.this,ObjLCPartyUpd.LastError,"DELETION ERROR",JOptionPane.ERROR_MESSAGE);
        }        
    }    
    
    
    private void Save(){
        /*SetData();
        System.out.println("1");
        ObjLCPartyUpd.Insert();
        System.out.println("1");
        */
        //set data for insert/update
        
        if(txtReason.getText().equals("") && lblType.getText().equals("BLOCK")) {
            JOptionPane.showMessageDialog(null,"Please enter Reason for Block/Unblock");
            return;
        }
        
        if(txtReason.getText().equals("") && lblType.getText().equals("UNBLOCK")) {
            JOptionPane.showMessageDialog(null,"Please enter Reason for Block/Unblock");
            return;
        }
        
        
        
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjLCPartyUpd.Insert()) {
                DisplayData();
            }else {
                JOptionPane.showMessageDialog(this,"Error occured while saving. Error is "+ObjLCPartyUpd.LastError,"SAVING ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjLCPartyUpd.Update()) {
                DisplayData();
            }else {
                JOptionPane.showMessageDialog(this,"Error occured while saving editing. Error is "+ObjLCPartyUpd.LastError,"SAVING ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        
        
    }
    
    //Sets data to the Details Class Object
    private void SetData() {
       
        ObjLCPartyUpd.setAttribute("PREFIX",SelPrefix);
        ObjLCPartyUpd.setAttribute("SUFFIX",SelSuffix);
        ObjLCPartyUpd.setAttribute("FFNO",FFNo);
        ObjLCPartyUpd.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        ObjLCPartyUpd.setAttribute("LC_OPENER",txtLCOpenerCode.getText());
        ObjLCPartyUpd.setAttribute("LC_ID",txtLCID.getText());
        ObjLCPartyUpd.setAttribute("TYPE",lblType.getText());
        ObjLCPartyUpd.setAttribute("LC_REASON",txtReason.getText());
        
        //-------- Update Approval Specific Fields -----------//
        ObjLCPartyUpd.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjLCPartyUpd.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        ObjLCPartyUpd.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjLCPartyUpd.setAttribute("FROM_REMARKS",txtToRemarks.getText().trim());
    //    ObjLCPartyUpd.setAttribute("UPDATED_BY",EITLERPGLOBAL.getComboCode(cmbUserName));
        ObjLCPartyUpd.setAttribute("UPDATED_BY",EITLERPGLOBAL.gNewUserID);
        if(OpgApprove.isSelected()) {
            ObjLCPartyUpd.setAttribute("APPROVAL_STATUS","A");
        }        
        if(OpgFinal.isSelected()) {
            ObjLCPartyUpd.setAttribute("APPROVAL_STATUS","F");
        }        
        if(OpgReject.isSelected()) {
            ObjLCPartyUpd.setAttribute("APPROVAL_STATUS","R");
            ObjLCPartyUpd.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        }        
        if(OpgHold.isSelected()) {
            ObjLCPartyUpd.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjLCPartyUpd.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
        }else {
            ObjLCPartyUpd.setAttribute("CREATED_BY", (int)ObjLCPartyUpd.getAttribute("CREATED_BY").getVal());
            ObjLCPartyUpd.setAttribute("CREATED_DATE", ObjLCPartyUpd.getAttribute("CREATED_DATE").getString());
            ObjLCPartyUpd.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
        }        
        
        ObjLCPartyUpd.hmLCPartyDetails.clear();
        for(int i=0;i<Table1.getRowCount();i++) {
            clsLCPartyDetails ObjLCPartyDetails=new clsLCPartyDetails();
            //System.out.println
            
            ObjLCPartyDetails.setAttribute("LC_PARTY", (String)Table1.getValueAt(i, 1));
            ObjLCPartyDetails.setAttribute("LC_PARTY_NAME", (String)Table1.getValueAt(i, 2));
            ObjLCPartyDetails.setAttribute("LC_CHARGE_CODE",(String)Table1.getValueAt(i, 3));
            ObjLCPartyDetails.setAttribute("LC_PARTY_STATE",(String)Table1.getValueAt(i, 4));
            //ObjLCPartyDetails.setAttribute("LC_REASON",(String)Table1.getValueAt(i, 5));
            
            ObjLCPartyUpd.hmLCPartyDetails.put(Integer.toString(ObjLCPartyUpd.hmLCPartyDetails.size()+1), ObjLCPartyDetails);
            //ObjFeltLRUpdation.hmFeltLRUpdationDetails.put(Integer.toString(ObjFeltLRUpdation.hmFeltLRUpdationDetails.size()+1), ObjFeltLRUpdationDetails);
        }
    }
    
    private void Cancel() {
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }
    
    private void Find() {
        /*Loader ObjLoader=new Loader(this,"EITLERP.Production.Felt_Order_Updation.frmFindFeltOrderUpd",true);
        frmFindFeltOrderUpd ObjFindFeltOrderUpd = (frmFindFeltOrderUpd)ObjLoader.getObj();
        
        if(ObjFindFeltOrderUpd.Cancelled==false) {
            if(!ObjLCPartyUpd.Filter(ObjFindFeltOrderUpd.stringFindQuery)) {
                JOptionPane.showMessageDialog(frmLCPartyMasterUpdated.this," No records found.","Find Felt Weaving Details",JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
         */
        Loader ObjLoader=new Loader(this,"EITLERP.Sales.frmLCPartyFind",true);
        frmLCPartyFind ObjReturn= (frmLCPartyFind) ObjLoader.getObj();
        if(ObjReturn.Cancelled==false) {
            if(!ObjLCPartyUpd.Filter(ObjReturn.strQuery)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveLast();
        }
    }
    
    // find details by production date
    public void Find(String prodDate) {
        ObjLCPartyUpd.Filter("AND PROD_DATE='"+prodDate+"'");
        SetMenuForRights();
        DisplayData();
    }
    
    // find details by piece no.
    /*
    public void Find(String pieceNo, String prodDate) {
        ObjLCPartyUpd.Filter("AND PROD_PIECE_NO+0='"+pieceNo+"'");
        SetMenuForRights();
        DisplayData();
    }
     */
    
     
    public void FindEx(int pCompanyID,String pDocNo) {
        ObjLCPartyUpd.Filter(" WHERE LC_ID='"+pDocNo+"'");
        ObjLCPartyUpd.MoveFirst();
        DisplayData();
    }
    
    // find all pending document
    public void FindWaiting() {
        //ObjLCPartyUpd.Filter(" AND PROD_DOC_NO IN (SELECT DISTINCT DOC_NO FROM FELT_PROD_DATA, PRODUCTION.FELT_PROD_DOC_DATA WHERE PROD_DOC_NO=DOC_NO AND USER_ID="+EITLERPGLOBAL.gNewUserID+" AND STATUS='W' AND MODULE_ID=171 AND CANCELLED=0) ");
        ObjLCPartyUpd.Filter(" WHERE LC_ID IN (SELECT D_SAL_LC_PARTY_UPD.LC_ID FROM D_SAL_LC_PARTY_UPD,D_COM_DOC_DATA WHERE D_SAL_LC_PARTY_UPD.LC_ID=D_COM_DOC_DATA.DOC_NO AND D_COM_DOC_DATA.USER_ID="+EITLERPGLOBAL.gNewUserID+" AND D_COM_DOC_DATA.STATUS='W' AND MODULE_ID="+clsLCPartyUpd.ModuleID+")");
        //ObjMR.Filter(" WHERE REQ_NO IN (SELECT D_INV_ISSUE_REQ_HEADER.REQ_NO FROM D_INV_ISSUE_REQ_HEADER,D_COM_DOC_DATA WHERE D_INV_ISSUE_REQ_HEADER.REQ_NO=D_COM_DOC_DATA.DOC_NO AND D_INV_ISSUE_REQ_HEADER.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID AND D_INV_ISSUE_REQ_HEADER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_COM_DOC_DATA.USER_ID="+EITLERPGLOBAL.gNewUserID+" AND D_COM_DOC_DATA.STATUS='W' AND MODULE_ID="+clsIssueRequisition.ModuleID+")",EITLERPGLOBAL.gCompanyID);
        SetMenuForRights();
        DisplayData();
    }
    
    
    private void MoveFirst() {
        ObjLCPartyUpd.MoveFirst();
        DisplayData();
    }
    
    private void MovePrevious() {
        ObjLCPartyUpd.MovePrevious();
        DisplayData();
    }
    
    private void MoveNext() {
        ObjLCPartyUpd.MoveNext();
        DisplayData();
    }
    
    private void MoveLast() {
        ObjLCPartyUpd.MoveLast();
        DisplayData();
    }
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(" "+pMessage);
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
            if(Tab1.getComponent(i).getName()!=null) {
                
                FieldName=Tab1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    Tab1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//
        
        //=============== Setting Table Fields ==================//
        DataModel.ClearAllReadOnly();
        Table.setEnabled(false);
    }
    
    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus=new EITLTableModel();
        
        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);
        
        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);
        
        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");
    }
    
    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory=new EITLTableModel();
        
        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);
        
        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);
        
        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
    }
        
    
        private void generateTable(){        
        FormatGrid();
        try{
            ResultSet rs=data.getResult("SELECT * FROM DINESHMILLS.D_SAL_LC_OPENER_MASTER WHERE LCO_OPENER_CODE='"+txtLCOpenerCode.getText().trim()+"'");
            rs.first();
            if(rs.getRow()>0) {
                int cnt1=0;
                while(!rs.isAfterLast()){
                    cnt1++;
                    Object[] rowData=new Object[10];
                    rowData[0]=Integer.toString(cnt1);
                    rowData[1]=rs.getString("LCO_OPENER_NAME");                    
                    rowData[2]=rs.getString("LCO_ADDRESS1");
                    rowData[3]=rs.getString("LCO_BANK_ID");    
                    rowData[4]=rs.getString("LCO_BANK_NAME");                    
                    rowData[5]=rs.getString("LCO_BANK_ADDRESS");
                    rowData[6]=rs.getString("LCO_BANK_CITY");    
                    rowData[7]=EITLERPGLOBAL.formatDate(rs.getString("LCO_EXPIRY_DATE"));
                    
                    DataModel.addRow(rowData);
                    rs.next();
                }
            }
            rs.close();
        }
        catch(SQLException e) {
            e.printStackTrace();
        }
        }
        
        private void generateTableActiveInActive(){        
        FormatGridActiveInActive();
        try{
            //ResultSet rs=data.getResult("SELECT * FROM DINESHMILLS.D_SAL_POLICY_LC_MASTER WHERE LC_OPENER_CODE='"+txtLCOpenerCode.getText().trim()+"' AND PARTY_STATUS='ACTIVE'");
            ResultSet rs=data.getResult("SELECT * FROM DINESHMILLS.D_SAL_POLICY_LC_MASTER WHERE LC_OPENER_CODE='"+txtLCOpenerCode.getText().trim()+"' ORDER BY PARTY_CODE");
            rs.first();
            if(rs.getRow()>0) {
                int cntActive=0;
                int cntInActive=0;
                while(!rs.isAfterLast()){                    
                    Object[] rowData=new Object[5];                    
                    if(rs.getString("PARTY_STATUS").equals("ACTIVE")){
                    cntActive++;    
                    rowData[0]=Integer.toString(cntActive);
                    rowData[1]=rs.getString("PARTY_CODE");                                            
                    rowData[2]=rs.getString("LC_PARTY_NAME");                                            
                    rowData[3]=EITLERPGLOBAL.formatDate(rs.getString("EXP_DATE"));                                            
                    DataModelActive.addRow(rowData);
                    rs.next();
                    }else{
                    cntInActive++;    
                    rowData[0]=Integer.toString(cntInActive);
                    rowData[1]=rs.getString("PARTY_CODE");                                        
                    rowData[2]=rs.getString("LC_PARTY_NAME");                                            
                    rowData[3]=EITLERPGLOBAL.formatDate(rs.getString("EXP_DATE"));                                            
                    DataModelInActive.addRow(rowData);
                    rs.next();
                    }
                }
            }
            rs.close();
        }
        catch(SQLException e) {
            e.printStackTrace();
        }
        }
        
        
        
        
        
}
