/*
 * frmIndentsInfo.java
 *
 * Created on July 13, 2005, 10:47 AM
 */
package EITLERP.Sales.DebitMemoReceiptMapping;

import EITLERP.*;
import EITLERP.Finance.FinanceGlobal;
import EITLERP.Finance.clsPartyMaster;
import EITLERP.Stores.*;
import EITLERP.Purchase.*;
import EITLERP.Sales.clsExcelExporter;
import TReportWriter.SimpleDataProvider.TRow;
import TReportWriter.SimpleDataProvider.TTable;
import TReportWriter.TReportEngine;
import TReportWriter.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.util.*;
import java.sql.*;
import java.net.*;
import java.text.DecimalFormat;
import java.util.concurrent.locks.Condition;
import java.util.Map;
import java.util.HashMap;

/**
 *
 * @author root
 */
public class frmDebitMemoInfo extends javax.swing.JApplet {

    private EITLTableModel DataModelI = new EITLTableModel();
    private EITLTableModel DataModelSumm = new EITLTableModel();

    private EITLComboModel cmbOrderModel = new EITLComboModel();
    private EITLComboModel cmbOrderSummModel = new EITLComboModel();

    private TReportEngine objEngine = new TReportEngine();
    boolean cnd = false;
    public clsExcelExporter export = new clsExcelExporter();

    /**
     * Initializes the applet frmIndentsInfo
     */
    public void init() {
        setSize(1000, 650);
        initComponents();
        GenerateCombo();
        FormatGridI();
        FormatGridSumm();

        //EITLERPGLOBAL.setComboIndex(cmbBuyer,EITLERPGLOBAL.gUserID);
        txtRIA.setVisible(false);
        txtTotalIntAmt.setText("");
        txtTotalIntAmtSumm.setText("");
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ExporttoExcelFileChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        cmdShowI = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableI = new javax.swing.JTable();
        cmdOpenI = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cmbOrder = new javax.swing.JComboBox();
        txtRIA = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        txtTotalIntAmt = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableSumm = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        txtTotalIntAmtSumm = new javax.swing.JTextField();
        cmdShowSumm = new javax.swing.JButton();
        cmbOrderSumm = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txtpartycode = new javax.swing.JTextField();
        txtpartyname = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        txtFromDate = new javax.swing.JTextField();
        txtToDate = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtInvoiceFromDate = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtInvoiceToDate = new javax.swing.JTextField();
        txtMainAccountCode = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtAgentCode = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        cmbtype = new javax.swing.JComboBox<String>();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(0, 102, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setMinimumSize(new java.awt.Dimension(1000, 29));
        jPanel1.setLayout(null);

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Debit Memo Information System");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(2, 4, 410, 20);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(2, 2, 990, 29);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Party Code");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 110, 120, 20);

        jTabbedPane1.setAutoscrolls(true);
        jTabbedPane1.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(null);

        cmdShowI.setText("Show List");
        cmdShowI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowIActionPerformed(evt);
            }
        });
        jPanel2.add(cmdShowI);
        cmdShowI.setBounds(810, 10, 118, 28);

        TableI.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableI.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        TableI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableIMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TableI);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(9, 48, 920, 320);

        cmdOpenI.setText("Auto DM Print");
        cmdOpenI.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdOpenI.setMaximumSize(new java.awt.Dimension(108, 33));
        cmdOpenI.setMinimumSize(new java.awt.Dimension(108, 33));
        cmdOpenI.setPreferredSize(new java.awt.Dimension(108, 33));
        cmdOpenI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOpenIActionPerformed(evt);
            }
        });
        jPanel2.add(cmdOpenI);
        cmdOpenI.setBounds(30, 390, 162, 30);

        jLabel3.setText("Sort by");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(480, 10, 60, 20);

        cmbOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOrderActionPerformed(evt);
            }
        });
        jPanel2.add(cmbOrder);
        cmbOrder.setBounds(550, 10, 250, 28);
        jPanel2.add(txtRIA);
        txtRIA.setBounds(10, 420, 130, 28);

        jButton2.setText("Export to Excel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2);
        jButton2.setBounds(430, 390, 160, 28);

        jButton3.setText("Manual DM Print");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3);
        jButton3.setBounds(210, 390, 160, 30);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Total DM Interest Amt :");
        jPanel2.add(jLabel11);
        jLabel11.setBounds(600, 390, 190, 20);

        txtTotalIntAmt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel2.add(txtTotalIntAmt);
        txtTotalIntAmt.setBounds(790, 390, 130, 30);

        jTabbedPane1.addTab("Information", jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(null);

        TableSumm.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableSumm.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        TableSumm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableSummMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TableSumm);

        jPanel3.add(jScrollPane2);
        jScrollPane2.setBounds(9, 48, 920, 320);

        jButton4.setText("Export to Excel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton4);
        jButton4.setBounds(430, 390, 160, 28);

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("Total DM Interest Amt :");
        jPanel3.add(jLabel15);
        jLabel15.setBounds(600, 390, 190, 20);

        txtTotalIntAmtSumm.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel3.add(txtTotalIntAmtSumm);
        txtTotalIntAmtSumm.setBounds(790, 390, 130, 30);

        cmdShowSumm.setText("Show List");
        cmdShowSumm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowSummActionPerformed(evt);
            }
        });
        jPanel3.add(cmdShowSumm);
        cmdShowSumm.setBounds(810, 10, 118, 28);

        cmbOrderSumm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOrderSummActionPerformed(evt);
            }
        });
        jPanel3.add(cmbOrderSumm);
        cmbOrderSumm.setBounds(550, 10, 250, 28);

        jLabel14.setText("Sort by");
        jPanel3.add(jLabel14);
        jLabel14.setBounds(480, 10, 60, 20);

        jLabel16.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        jLabel16.setForeground(java.awt.Color.red);
        jLabel16.setText("Note : Type is always taken as \"WITHOUT DEBITNOTE\"");
        jPanel3.add(jLabel16);
        jLabel16.setBounds(10, 10, 450, 20);

        jTabbedPane1.addTab("DM Summary w/o DN", jPanel3);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(6, 149, 960, 500);
        jTabbedPane1.getAccessibleContext().setAccessibleName("Pending Order Form");

        txtpartycode = new JTextFieldHint(new JTextField(),"Search By F1");
        txtpartycode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtpartycodeFocusLost(evt);
            }
        });
        txtpartycode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtpartycodeKeyPressed(evt);
            }
        });
        getContentPane().add(txtpartycode);
        txtpartycode.setBounds(140, 110, 100, 28);

        txtpartyname.setBackground(new java.awt.Color(204, 204, 204));
        txtpartyname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtpartynameActionPerformed(evt);
            }
        });
        getContentPane().add(txtpartyname);
        txtpartyname.setBounds(250, 110, 430, 28);

        jButton1.setText("Reset");
        jButton1.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(870, 50, 70, 30);

        txtFromDate = new JTextFieldHint(new JTextField(),"DD/MM/YYYY");
        getContentPane().add(txtFromDate);
        txtFromDate.setBounds(140, 50, 100, 20);

        txtToDate = new JTextFieldHint(new JTextField(),"DD/MM/YYYY");
        getContentPane().add(txtToDate);
        txtToDate.setBounds(280, 50, 100, 20);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Date");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(50, 50, 80, 20);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("To");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(250, 50, 20, 20);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Invoice Date");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(420, 50, 100, 20);

        txtInvoiceFromDate = new JTextFieldHint(new JTextField(),"DD/MM/YYYY");
        getContentPane().add(txtInvoiceFromDate);
        txtInvoiceFromDate.setBounds(530, 50, 100, 20);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Agent Code");
        jLabel7.setToolTipText("");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(540, 80, 90, 20);

        txtInvoiceToDate = new JTextFieldHint(new JTextField(),"DD/MM/YYYY");
        getContentPane().add(txtInvoiceToDate);
        txtInvoiceToDate.setBounds(670, 50, 100, 20);
        getContentPane().add(txtMainAccountCode);
        txtMainAccountCode.setBounds(140, 80, 100, 20);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Main A/C Code");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(10, 80, 120, 20);
        getContentPane().add(txtAgentCode);
        txtAgentCode.setBounds(630, 80, 50, 20);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("To");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(640, 50, 20, 20);

        cmbtype.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "WITHOUT DEBITNOTE", "WITH DEBITNOTE", "ALL" }));
        getContentPane().add(cmbtype);
        cmbtype.setBounds(760, 110, 180, 30);

        jLabel10.setText("(Only for STG eg. 31,32,35...)");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(690, 80, 250, 20);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Type");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(720, 110, 40, 20);

        jLabel13.setText("(i.e 210010,210027,210072)");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(240, 80, 230, 20);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        txtpartyname.setText("");
        txtpartycode.setText("");
    }//GEN-LAST:event_jButton1MouseClicked

    private void txtpartycodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtpartycodeFocusLost
        // TODO add your handling code here:
        try {
//            if (!txtpartycode.getText().equals("")) {
//                String strSQL = "";
//                ResultSet rsTmp;
//                strSQL = "";
//                strSQL += "SELECT NAME,AD1,AD2,STATION,CHG_IND_2,TRANS_CD,INS_IND FROM PRODUCTION.FELT_PARTY_MASTER WHERE PARTY_CODE = " + txtpartycode.getText().trim() + "";
//                rsTmp = data.getResult(strSQL);
//                rsTmp.first();
//                txtpartyname.setText(rsTmp.getString("NAME"));
//
//            }

            if (!txtpartycode.getText().equals("")) {
                String strSQL = "";
                txtpartyname.setText(clsSales_Party.getPartyName(2, txtpartycode.getText().trim()));
            }

        } catch (Exception e) {

        }
    }//GEN-LAST:event_txtpartycodeFocusLost

    private void txtpartynameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtpartynameActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_txtpartynameActionPerformed

    private void txtpartycodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpartycodeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            aList.SQL = "SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE APPROVED=1 AND CANCELLED=0";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;

            if (aList.ShowLOV()) {
                txtpartycode.setText(aList.ReturnVal);
                txtpartyname.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));

            }
        }
    }//GEN-LAST:event_txtpartycodeKeyPressed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_formMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        txtFromDate.setText("");
        txtToDate.setText("");
        txtInvoiceFromDate.setText("");
        txtInvoiceToDate.setText("");
        txtpartycode.setText("");
        txtMainAccountCode.setText("");
        txtAgentCode.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
     /*   String rmk = getDescriptionList();

        String dbmNo = (String) TableI.getValueAt(TableI.getSelectedRow(), 1);
        String dbmDt = (String) TableI.getValueAt(TableI.getSelectedRow(), 2);
        String dueDt = (String) TableI.getValueAt(TableI.getSelectedRow(), 8);
        String partyCode = (String) TableI.getValueAt(TableI.getSelectedRow(), 4);
        //String partyName = clsPartyMaster.getAccountName("210010", partyCode);
        String partyName = clsPartyMaster.getAccountName(txtMainAccountCode.getText(), partyCode);
        //String partyAdd = clsPartyMaster.getAccountNameAddress("210010", partyCode);
        String partyAdd = clsPartyMaster.getAccountNameAddress(txtMainAccountCode.getText(), partyCode);
        String intrestAmt = (String) TableI.getValueAt(TableI.getSelectedRow(), 13);

        HashMap Parameters = new HashMap();
        Parameters.put("CURDATE", EITLERPGLOBAL.getCurrentDate());
        Parameters.put("DEBITMEMO_NO", dbmNo);
        Parameters.put("DEBITMEMO_DATE", dbmDt);
        Parameters.put("VOUCHER_DATE", dueDt);
        Parameters.put("PARTY_CODE", partyCode);
        Parameters.put("PARTY_NAME", partyName);
        //Parameters.put("ADDRESS", data.getStringValueFromDB("SELECT CONCAT(ADDRESS1,'  ',ADDRESS2) AS ADD1 FROM  DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE = '" + partyCode.trim() + "' AND MAIN_ACCOUNT_CODE = '210010'", FinanceGlobal.FinURL));
        Parameters.put("ADDRESS", data.getStringValueFromDB("SELECT CONCAT(ADDRESS1,'  ',ADDRESS2) AS ADD1 FROM  DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE = '" + partyCode.trim() + "' AND MAIN_ACCOUNT_CODE = '" + txtMainAccountCode.getText() + "'", FinanceGlobal.FinURL));
        Parameters.put("T_INT_AMT", String.valueOf((data.getDoubleValueFromDB("SELECT  ROUND(SUM(INTEREST_AMT),2) AS INT_AMT FROM D_FIN_DEBITMEMO_RECEIPT_MAPPING WHERE DEBITMEMO_NO = '" + dbmNo + "' GROUP BY DEBITMEMO_NO", FinanceGlobal.FinURL))));
        Parameters.put("ROUNDED_AMOUNT", String.valueOf((data.getDoubleValueFromDB("SELECT ROUND(SUM(INTEREST_AMT),2) AS AMOUNT FROM D_FIN_DEBITMEMO_RECEIPT_MAPPING WHERE DEBITMEMO_NO = '" + dbmNo + "' GROUP BY DEBITMEMO_NO", FinanceGlobal.FinURL))));
        Parameters.put("DESCRIPTION_REMARK", rmk);

        TTable objData = new TTable();
        objData.AddColumn("INVOICE_NO");
        objData.AddColumn("INVOICE_DATE");
        objData.AddColumn("INVOICE_DUE_DATE");
        objData.AddColumn("VALUE_DATE");
        objData.AddColumn("INVOICE_AMOUNT");
        objData.AddColumn("DAYS");
        objData.AddColumn("INTEREST_PER");
        objData.AddColumn("INTEREST_AMT");
        objData.AddColumn("PURPOSE");
        objData.AddColumn("REMARKS");

        try {

            String strSQL = "";
            ResultSet rsReport;

            //Retrieve data
            strSQL = "SELECT * FROM FINANCE.D_FIN_DEBITMEMO_RECEIPT_MAPPING WHERE DEBITMEMO_NO='" + dbmNo + "' AND DEBITMEMO_DATE='" + EITLERPGLOBAL.formatDateDB(dbmDt) + "'";
            //                    "SELECT RIGHT(H.INVOICE_NO,4) AS INVOICE_NO,SUBSTRING(H.INVOICE_DATE,1,10) AS INVOICE_DATE,H.BALE_NO,H.PARTY_CODE,"
            //                    + "SUBSTRING(P.PARTY_NAME,1,22) AS PARTY_NAME, GROUP_CONCAT(D.PIECE_NO) AS PIECE_NO,H.CHARGE_CODE,"
            //                    + "SUM(D.ACTUAL_WEIGHT) AS GROSS_QTY,H.BAS_AMT,H.CGST_AMT ,H.SGST_AMT ,H.IGST_AMT, H.DISC_AMT,H.INSURANCE_AMT,H.NET_AMT,H.INVOICE_AMT,"
            //                    + "(H.CST2+H.CST5+H.VAT1+H.VAT4) AS CST_VAT "
            //                    + "FROM DINESHMILLS.D_SAL_PARTY_MASTER P, PRODUCTION.FELT_SAL_INVOICE_HEADER H, PRODUCTION.FELT_SAL_INVOICE_DETAIL D "
            //                    + "WHERE H.PARTY_CODE=P.PARTY_CODE  AND H.INVOICE_NO=D.INVOICE_NO AND H.APPROVED=1 AND H.CANCELLED=0 AND P.MAIN_ACCOUNT_CODE=210010 "
            //                    + "AND SUBSTRING(H.INVOICE_DATE,1,10)='" + EITLERPGLOBAL.formatDateDB(txtinvdt.getText().trim()) + "' "
            //                    + "AND H.LOT_NO='" + EITLERPGLOBAL.getComboCode(cmbLot) + "' "
            //                    + "GROUP BY D.INVOICE_NO  ORDER BY H.PARTY_CODE,H.INVOICE_NO";

            rsReport = data.getResult(strSQL);
            rsReport.first();

            if (rsReport.getRow() > 0) {

                while (!rsReport.isAfterLast()) {
                    TRow objRow = new TRow();

                    objRow.setValue("INVOICE_NO", rsReport.getString("INVOICE_NO"));
                    objRow.setValue("INVOICE_DATE", rsReport.getString("INVOICE_DATE"));
                    objRow.setValue("INVOICE_DUE_DATE", rsReport.getString("INVOICE_DUE_DATE"));
                    objRow.setValue("VALUE_DATE", rsReport.getString("VALUE_DATE"));
                    objRow.setValue("INVOICE_AMOUNT", Double.toString(rsReport.getDouble("INVOICE_AMOUNT")));
                    objRow.setValue("DAYS", Integer.toString(rsReport.getInt("DAYS")));
                    objRow.setValue("INTEREST_PER", Double.toString(rsReport.getDouble("INTEREST_PER")));
                    objRow.setValue("INTEREST_AMT", Double.toString(rsReport.getDouble("INTEREST_AMT")));
                    objRow.setValue("REMARKS", rsReport.getString("REMARKS"));
                    objRow.setValue("PURPOSE", rsReport.getString("PURPOSE"));

                    objData.AddRow(objRow);
                    rsReport.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/rptAccount_DebitMemo_WithOutReceipt.rpt", Parameters, objData);
        */
previewManualDM();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            File file;
            ExporttoExcelFileChooser.setDialogTitle("Enter Excel File Name");
            ExporttoExcelFileChooser.setFileSelectionMode(JFileChooser.APPROVE_OPTION);
            int returnVal = ExporttoExcelFileChooser.showSaveDialog(frmDebitMemoInfo.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = ExporttoExcelFileChooser.getSelectedFile();
                export.fillData(TableI, new File(file + ".xls"));
                JOptionPane.showMessageDialog(null, " Excel File Saved at : " + file + ".xls", "Message", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void cmbOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOrderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbOrderActionPerformed

    private void cmdOpenIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOpenIActionPerformed
        // TODO add your handling code here:
        //        try{
        //            String dbmNo = (String)TableI.getValueAt(TableI.getSelectedRow(), 1);
        //            String dbmDt = (String)TableI.getValueAt(TableI.getSelectedRow(), 2);
        //            String dueDt = (String)TableI.getValueAt(TableI.getSelectedRow(), 7);
        //            String partyCode =(String)TableI.getValueAt(TableI.getSelectedRow(), 4);
        //            String partyName = clsPartyMaster.getAccountName("210010", partyCode);
        //            String partyAdd = clsPartyMaster.getAccountNameAddress("210010", partyCode);
        //            String intrestAmt =(String)TableI.getValueAt(TableI.getSelectedRow(), 12);
        //
        //            System.out.println(partyCode);
        //            //String a = "test";
        //            //System.out.println(a);
        //            //System.out.println(PieceNo);
        //            //System.out.println(PartyCode);
        //            //AppletFrame aFrame = new AppletFrame("ORDER");
        //            //aFrame.startAppletEx("EITLERP.Production.ReportUI.frmOrder","ORDER");
        //            //aFrame.startAppletEx("EITLERP.Production.ReportUI.frmfeltOrder","Order");
        //            //frmfeltOrder ObjDoc=(frmfeltOrder) aFrame.ObjApplet;
        //            //frmOrder ObjDoc = (frmOrder) aFrame.ObjApplet;
        //            //ObjDoc.FindEx(PartyCode,PieceNo);
        //            //ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,PieceNo);
        //            //ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,PartyCode,PieceNo);
        //
        //        }
        //  /* try {
        //            String DocNo=(String)TableI.getValueAt(TableI.getSelectedRow(), 2);
        //            AppletFrame aFrame=new AppletFrame("Indent");
        //            aFrame.startAppletEx("EITLERP.Stores.FrmIndent","Indent");
        //            FrmIndent ObjDoc=(FrmIndent) aFrame.ObjApplet;
        //            ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo);
        //      }*/
        //        catch(Exception e) {
        //
        //        }
  /*
        String dbmNo = (String) TableI.getValueAt(TableI.getSelectedRow(), 1);
        String dbmDt = (String) TableI.getValueAt(TableI.getSelectedRow(), 2);
        String dueDt = (String) TableI.getValueAt(TableI.getSelectedRow(), 8);
        String partyCode = (String) TableI.getValueAt(TableI.getSelectedRow(), 4);
        //String partyName = clsPartyMaster.getAccountName("210010", partyCode);
        String partyName = clsPartyMaster.getAccountName(txtMainAccountCode.getText(), partyCode);
        //String partyAdd = clsPartyMaster.getAccountNameAddress("210010", partyCode);
        String partyAdd = clsPartyMaster.getAccountNameAddress(txtMainAccountCode.getText(), partyCode);
        String intrestAmt = (String) TableI.getValueAt(TableI.getSelectedRow(), 13);

        HashMap Parameters = new HashMap();
        Parameters.put("CURDATE", EITLERPGLOBAL.getCurrentDate());
        Parameters.put("DEBITMEMO_NO", dbmNo);
        Parameters.put("DEBITMEMO_DATE", dbmDt);
        Parameters.put("VOUCHER_DATE", dueDt);
        Parameters.put("PARTY_CODE", partyCode);
        Parameters.put("PARTY_NAME", partyName);
        //Parameters.put("ADDRESS", data.getStringValueFromDB("SELECT CONCAT(ADDRESS1,'  ',ADDRESS2) AS ADD1 FROM  DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE = '" + partyCode.trim() + "' AND MAIN_ACCOUNT_CODE = '210010'", FinanceGlobal.FinURL));
        Parameters.put("ADDRESS", data.getStringValueFromDB("SELECT CONCAT(ADDRESS1,'  ',ADDRESS2) AS ADD1 FROM  DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE = '" + partyCode.trim() + "' AND MAIN_ACCOUNT_CODE = '" + txtMainAccountCode.getText() + "'", FinanceGlobal.FinURL));
        Parameters.put("T_INT_AMT", String.valueOf((data.getDoubleValueFromDB("SELECT  ROUND(SUM(INTEREST_AMT),2) AS INT_AMT FROM D_FIN_DEBITMEMO_RECEIPT_MAPPING WHERE DEBITMEMO_NO = '" + dbmNo + "' GROUP BY DEBITMEMO_NO", FinanceGlobal.FinURL))));
        Parameters.put("ROUNDED_AMOUNT", String.valueOf((data.getDoubleValueFromDB("SELECT ROUND(SUM(INTEREST_AMT),2) AS AMOUNT FROM D_FIN_DEBITMEMO_RECEIPT_MAPPING WHERE DEBITMEMO_NO = '" + dbmNo + "' GROUP BY DEBITMEMO_NO", FinanceGlobal.FinURL))));

        TTable objData = new TTable();
        objData.AddColumn("INVOICE_NO");
        objData.AddColumn("INVOICE_DATE");
        objData.AddColumn("INVOICE_DUE_DATE");
        objData.AddColumn("VALUE_DATE");
        objData.AddColumn("INVOICE_AMOUNT");
        objData.AddColumn("DAYS");
        objData.AddColumn("INTEREST_PER");
        objData.AddColumn("INTEREST_AMT");
        objData.AddColumn("PURPOSE");
        objData.AddColumn("REMARKS");

        try {

            String strSQL = "";
            ResultSet rsReport;

            //Retrieve data
            //            strSQL = "SELECT * FROM FINANCE.D_FIN_DEBITMEMO_RECEIPT_MAPPING WHERE DEBITMEMO_NO='" + dbmNo + "' AND DEBITMEMO_DATE='" + EITLERPGLOBAL.formatDateDB(dbmDt) + "'";
            strSQL = "SELECT INVOICE_NO,INVOICE_DATE,INVOICE_DUE_DATE,VALUE_DATE,INVOICE_AMOUNT,DAYS,INTEREST_PER,INTEREST_AMT,COALESCE(REMARKS,'') AS REMARKS,COALESCE(PURPOSE,'') AS PURPOSE  FROM FINANCE.D_FIN_DEBITMEMO_RECEIPT_MAPPING WHERE DEBITMEMO_NO='" + dbmNo + "' AND DEBITMEMO_DATE='" + EITLERPGLOBAL.formatDateDB(dbmDt) + "'";
            //                    "SELECT RIGHT(H.INVOICE_NO,4) AS INVOICE_NO,SUBSTRING(H.INVOICE_DATE,1,10) AS INVOICE_DATE,H.BALE_NO,H.PARTY_CODE,"
            //                    + "SUBSTRING(P.PARTY_NAME,1,22) AS PARTY_NAME, GROUP_CONCAT(D.PIECE_NO) AS PIECE_NO,H.CHARGE_CODE,"
            //                    + "SUM(D.ACTUAL_WEIGHT) AS GROSS_QTY,H.BAS_AMT,H.CGST_AMT ,H.SGST_AMT ,H.IGST_AMT, H.DISC_AMT,H.INSURANCE_AMT,H.NET_AMT,H.INVOICE_AMT,"
            //                    + "(H.CST2+H.CST5+H.VAT1+H.VAT4) AS CST_VAT "
            //                    + "FROM DINESHMILLS.D_SAL_PARTY_MASTER P, PRODUCTION.FELT_SAL_INVOICE_HEADER H, PRODUCTION.FELT_SAL_INVOICE_DETAIL D "
            //                    + "WHERE H.PARTY_CODE=P.PARTY_CODE  AND H.INVOICE_NO=D.INVOICE_NO AND H.APPROVED=1 AND H.CANCELLED=0 AND P.MAIN_ACCOUNT_CODE=210010 "
            //                    + "AND SUBSTRING(H.INVOICE_DATE,1,10)='" + EITLERPGLOBAL.formatDateDB(txtinvdt.getText().trim()) + "' "
            //                    + "AND H.LOT_NO='" + EITLERPGLOBAL.getComboCode(cmbLot) + "' "
            //                    + "GROUP BY D.INVOICE_NO  ORDER BY H.PARTY_CODE,H.INVOICE_NO";

            rsReport = data.getResult(strSQL);
            rsReport.first();

            if (rsReport.getRow() > 0) {

                while (!rsReport.isAfterLast()) {
                    TRow objRow = new TRow();

                    objRow.setValue("INVOICE_NO", rsReport.getString("INVOICE_NO"));
                    objRow.setValue("INVOICE_DATE", rsReport.getString("INVOICE_DATE"));
                    objRow.setValue("INVOICE_DUE_DATE", rsReport.getString("INVOICE_DUE_DATE"));
                    objRow.setValue("VALUE_DATE", rsReport.getString("VALUE_DATE"));
                    objRow.setValue("INVOICE_AMOUNT", Double.toString(rsReport.getDouble("INVOICE_AMOUNT")));
                    objRow.setValue("DAYS", Integer.toString(rsReport.getInt("DAYS")));
                    objRow.setValue("INTEREST_PER", Double.toString(rsReport.getDouble("INTEREST_PER")));
                    objRow.setValue("INTEREST_AMT", Double.toString(rsReport.getDouble("INTEREST_AMT")));
                    objRow.setValue("REMARKS", rsReport.getString("REMARKS"));
                    objRow.setValue("PURPOSE", rsReport.getString("PURPOSE"));

                    objData.AddRow(objRow);
                    rsReport.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/finance/rptAccount_DebitMemo.rpt", Parameters, objData);
        */
        previewAutoDM();
    }//GEN-LAST:event_cmdOpenIActionPerformed

    /**
     *
     */
    private void TableIMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableIMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() >= 2) {
            if (TableI.getRowCount() > 0) {
                txtRIA.setText((String) TableI.getValueAt(TableI.getSelectedRow(), 6));
                BigEdit bigEdit = new BigEdit();
                bigEdit.theText = txtRIA;
                bigEdit.ShowEdit();
            }
        }
    }//GEN-LAST:event_TableIMouseClicked

    private void cmdShowIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowIActionPerformed
        //        if(!txtFromDate.getText().equals("") || !txtToDate.getText().equals("") || !txtInvoiceFromDate.getText().equals("") || !txtInvoiceToDate.getText().equals("") || !txtMainAccountCode.getText().equals("") || !txtpartycode.getText().equals("")){
        //            cnd=true;
        //        }
        GenerateInformation();
    }//GEN-LAST:event_cmdShowIActionPerformed

    private void TableSummMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableSummMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TableSummMouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void cmdShowSummActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowSummActionPerformed
        // TODO add your handling code here:
        GenerateSummary();
    }//GEN-LAST:event_cmdShowSummActionPerformed

    private void cmbOrderSummActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOrderSummActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbOrderSummActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser ExporttoExcelFileChooser;
    private javax.swing.JTable TableI;
    private javax.swing.JTable TableSumm;
    private javax.swing.JComboBox cmbOrder;
    private javax.swing.JComboBox cmbOrderSumm;
    private javax.swing.JComboBox<String> cmbtype;
    private javax.swing.JButton cmdOpenI;
    private javax.swing.JButton cmdShowI;
    private javax.swing.JButton cmdShowSumm;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField txtAgentCode;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtInvoiceFromDate;
    private javax.swing.JTextField txtInvoiceToDate;
    private javax.swing.JTextField txtMainAccountCode;
    private javax.swing.JTextField txtRIA;
    private javax.swing.JTextField txtToDate;
    private javax.swing.JTextField txtTotalIntAmt;
    private javax.swing.JTextField txtTotalIntAmtSumm;
    private javax.swing.JTextField txtpartycode;
    private javax.swing.JTextField txtpartyname;
    // End of variables declaration//GEN-END:variables

    private void GenerateCombo() {

        //PRODUCTION PROCESS COMBO
        cmbOrderModel = new EITLComboModel();
        cmbOrder.removeAllItems();
        cmbOrder.setModel(cmbOrderModel);
        ComboData aData = new ComboData();
        aData.Code = 1;
        aData.Text = "DEBITMEMO DATE DESCENDING";
        cmbOrderModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 2;
        aData.Text = "DEBITMEMO DATE ASCENDING";
        cmbOrderModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 3;
        aData.Text = "DEBITMEMO NO DESCENDING";
        cmbOrderModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 4;
        aData.Text = "DEBITMEMO NO ASCENDING";
        cmbOrderModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 5;
        aData.Text = "INVOICE NO";
        cmbOrderModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 6;
        aData.Text = "INVOICE DATE";
        cmbOrderModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 7;
        aData.Text = "DEBITNOTE VOUCHER NO";
        cmbOrderModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 8;
        aData.Text = "PARTY CODE";
        cmbOrderModel.addElement(aData);

        //PRODUCTION PROCESS COMBO
        cmbOrderSummModel = new EITLComboModel();
        cmbOrderSumm.removeAllItems();
        cmbOrderSumm.setModel(cmbOrderSummModel);
        ComboData aDataSumm = new ComboData();
        aDataSumm.Code = 1;
        aDataSumm.Text = "DEBITMEMO DATE DESCENDING";
        cmbOrderSummModel.addElement(aDataSumm);

        aDataSumm = new ComboData();
        aDataSumm.Code = 2;
        aDataSumm.Text = "DEBITMEMO DATE ASCENDING";
        cmbOrderSummModel.addElement(aDataSumm);

        aDataSumm = new ComboData();
        aDataSumm.Code = 3;
        aDataSumm.Text = "DEBITMEMO NO DESCENDING";
        cmbOrderSummModel.addElement(aDataSumm);

        aDataSumm = new ComboData();
        aDataSumm.Code = 4;
        aDataSumm.Text = "DEBITMEMO NO ASCENDING";
        cmbOrderSummModel.addElement(aDataSumm);

        aDataSumm = new ComboData();
        aDataSumm.Code = 5;
        aDataSumm.Text = "INVOICE NO";
        cmbOrderSummModel.addElement(aDataSumm);

        aDataSumm = new ComboData();
        aDataSumm.Code = 6;
        aDataSumm.Text = "INVOICE DATE";
        cmbOrderSummModel.addElement(aDataSumm);

        aDataSumm = new ComboData();
        aDataSumm.Code = 7;
        aDataSumm.Text = "PARTY CODE";
        cmbOrderSummModel.addElement(aDataSumm);
    }

    private void FormatGridI() {
        DataModelI = new EITLTableModel();
        TableI.removeAll();
        TableI.setModel(DataModelI);

        TableI.setAutoResizeMode(TableI.AUTO_RESIZE_OFF);

        DataModelI.addColumn("Sr.");
        DataModelI.addColumn("DM No");
        DataModelI.addColumn("DM Date");
        DataModelI.addColumn("Receipt V/C No");
        DataModelI.addColumn("Party Code");
        DataModelI.addColumn("Party Name");
        DataModelI.addColumn("Invoice No");
        DataModelI.addColumn("Invoice Date");
        DataModelI.addColumn("Due Date");
        DataModelI.addColumn("Value Date");
        DataModelI.addColumn("Days");
        DataModelI.addColumn("Invoice Amt");
        DataModelI.addColumn("Interest Per");
        DataModelI.addColumn("Interest Amt");
        DataModelI.addColumn("DebitNote No");
        DataModelI.addColumn("DebitNote Date");
        DataModelI.addColumn("DebitNote Amt");

        DataModelI.TableReadOnly(true);
    }

    private void GenerateInformation() {
        String strSQL = "";
        String strFromDate = EITLERPGLOBAL.formatDateDB(txtFromDate.getText());
        String strToDate = EITLERPGLOBAL.formatDateDB(txtToDate.getText());
        String strInvFromDate = EITLERPGLOBAL.formatDateDB(txtInvoiceFromDate.getText());
        String strInvToDate = EITLERPGLOBAL.formatDateDB(txtInvoiceToDate.getText());
        String MainAcCode = txtMainAccountCode.getText();
        String PartyCode = txtpartycode.getText();
        String AgentCode = txtAgentCode.getText();
        String mtype = cmbtype.getSelectedItem().toString();
        double totalDNIntAmt = 0;
        try {
            FormatGridI(); //clear existing content of table            
            ResultSet rsTmp;
            //rsTmp=data.getResult("SELECT PIECE_NO FROM FELT_ORDER_MASTER WHERE PARTY_CD="+SelUserID+"");
            strSQL = "";
            //strSQL+="SELECT CASE WHEN PRIORITY=1 THEN 'LOW' WHEN PRIORITY=2 THEN 'MEDIUM' WHEN PRIORITY=3 THEN 'HIGH' END AS PRIOR,REF_NO,CONF_NO,MACHINE_NO,POSITION,PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,ITEM,STYLE,LNGTH,WIDTH,WEIGHT,(SQM_RATE+WT_RATE) AS RATE,DELIV_DATE ,COMM_DATE, INS_IND,BAS_AMT,MEMO_DATE,DISC_PER,DISAMT,DISBASAMT,ROUND(EXCISE,2) AS EXCISE,WPSC AS SEAM_CHG,CASE WHEN INS_IND =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0) WHEN INS_IND !=1 THEN 0  END  AS INSACC_AMT,ROUND((DISBASAMT+EXCISE+WPSC)  +(CASE WHEN INS_IND =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0) WHEN INS_IND !=1 THEN 0  END) ,2) AS INV_AMT FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,ITEM,STYLE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND,DISBASAMT,WPSC,DISC_PER,MEMO_DATE,DISAMT,BAS_AMT,DELIV_DATE ,COMM_DATE ,((DISBASAMT+COALESCE(WPSC,0)) *.12+ ((DISBASAMT+COALESCE(WPSC,0)) *.12)*.01+((DISBASAMT+COALESCE(WPSC,0)) *.12)*.02) AS EXCISE,PRIORITY FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,A.PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,ITEM,STYLE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND,MEMO_DATE,DELIV_DATE ,COMM_DATE,BAS_AMT,WPSC,COALESCE(DISC_PER,0) AS DISC_PER,(BAS_AMT* (COALESCE(DISC_PER,0)/100) ) AS DISAMT,BAS_AMT -  (BAS_AMT* (COALESCE(DISC_PER,0)/100) ) AS DISBASAMT,PRIORITY FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,H.GRUP AS ITEM,REPLACE(BALNK,' ','') AS STYLE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND,DELIV_DATE ,COMM_DATE,CASE WHEN SQM_IND =1 THEN LNGTH * WIDTH*SQM_RATE WHEN SQM_IND =0 THEN WEIGHT * WT_RATE END AS BAS_AMT,CASE WHEN CHEM_TRT_IN=1 THEN WEIGHT*CHARGES WHEN CHEM_TRT_IN =0  THEN 0 END+CASE WHEN PIN_IND=1 THEN WIDTH * CHARGES WHEN PIN_IND =0  THEN 0 END+CASE WHEN SPR_IND=1 THEN WIDTH* CHARGES WHEN SPR_IND =0  THEN 0 END AS WPSC,PRIORITY FROM PRODUCTION.FELT_ORDER_MASTER,PRODUCTION.FELT_RATE_MASTER H,PRODUCTION.FELT_PARTY_MASTER WHERE PRODUCT_CODE*10 = ITEM_CODE AND PARTY_CD = "+SelUserID+" AND PARTY_CD = PARTY_CODE AND PROD_IND_A IN ('') ) AS A LEFT JOIN (SELECT * FROM PRODUCTION.FELT_DISCOUNT_MEMO) AS M ON A.PIECE_NO = CONCAT(M.PIECE_NO,M.PIECE_EXT) AND PARTY_CD =PARTY_CODE  ) AS B ) AS C";
            strSQL += "SELECT * FROM FINANCE.D_FIN_DEBITMEMO_RECEIPT_MAPPING ";
//            if(cnd){
            strSQL += " WHERE ";
//            }
            if (!txtFromDate.getText().equals("")) {
                strSQL += " DEBITMEMO_DATE>= '" + strFromDate + "' AND ";
            }
            if (!txtToDate.getText().equals("")) {
                strSQL += " DEBITMEMO_DATE<= '" + strToDate + "' AND ";
            }
            if (!txtInvoiceFromDate.getText().equals("")) {
                strSQL += " INVOICE_DATE >= '" + strInvFromDate + "' AND ";
            }
            if (!txtInvoiceToDate.getText().equals("")) {
                strSQL += " INVOICE_DATE <= '" + strInvToDate + "' AND ";
            }
            if (!txtMainAccountCode.getText().equals("")) {
                strSQL += " MAIN_ACCOUNT_CODE = '" + MainAcCode + "' AND ";
            }
            if (!txtpartycode.getText().equals("")) {
                strSQL += " DB_PARTY_CODE = '" + PartyCode + "' AND ";
            }
            if (!txtAgentCode.getText().equals("")) {
                strSQL += " SUBSTRING(DB_PARTY_CODE,1,2) IN (" + AgentCode + ") AND ";
            }
            if (mtype.equalsIgnoreCase("WITHOUT DEBITNOTE")) {
                strSQL += " LENGTH(COALESCE(DEBITNOTE_VOUCHER_NO,''))=0 AND ";
            }
            if (mtype.equalsIgnoreCase("WITH DEBITNOTE")) {
                strSQL += " LENGTH(COALESCE(DEBITNOTE_VOUCHER_NO,''))!=0 AND ";
            }
            strSQL += " COMPANY_ID=2 AND APPROVED=1 AND CANCELLED=0 ";
            int Orderby = EITLERPGLOBAL.getComboCode(cmbOrder);
            if (Orderby == 1) {
                strSQL = strSQL + " ORDER BY DEBITMEMO_DATE DESC,DEBITMEMO_NO ";
            }
            if (Orderby == 2) {
                strSQL = strSQL + " ORDER BY DEBITMEMO_DATE,DEBITMEMO_NO ";
            }
            if (Orderby == 3) {
                strSQL = strSQL + " ORDER BY DEBITMEMO_NO DESC ";
            }
            if (Orderby == 4) {
                strSQL = strSQL + " ORDER BY DEBITMEMO_NO ";
            }
            if (Orderby == 5) {
                strSQL = strSQL + " ORDER BY INVOICE_NO ";
            }
            if (Orderby == 6) {
                strSQL = strSQL + " ORDER BY INVOICE_DATE ";
            }

            if (Orderby == 7) {
                strSQL = strSQL + " ORDER BY DEBITNOTE_VOUCHER_NO DESC ";
            }
            if (Orderby == 8) {
                strSQL = strSQL + " ORDER BY DB_PARTY_CODE ";
            }

            System.out.println(strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[28];
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("DEBITMEMO_NO");
                    rowData[2] = EITLERPGLOBAL.formatDate(rsTmp.getString("DEBITMEMO_DATE"));
                    rowData[3] = rsTmp.getString("RECEIPT_VOUCHER_NO");
                    rowData[4] = rsTmp.getString("DB_PARTY_CODE");
                    rowData[5] = clsSales_Party.getPartyName(2, rsTmp.getString("DB_PARTY_CODE"));
                    rowData[6] = rsTmp.getString("INVOICE_NO");
                    rowData[7] = EITLERPGLOBAL.formatDate(rsTmp.getString("INVOICE_DATE"));
                    rowData[8] = EITLERPGLOBAL.formatDate(rsTmp.getString("INVOICE_DUE_DATE"));
                    rowData[9] = EITLERPGLOBAL.formatDate(rsTmp.getString("VALUE_DATE"));
                    rowData[10] = rsTmp.getString("DAYS");
                    rowData[11] = rsTmp.getString("INVOICE_AMOUNT");
                    rowData[12] = rsTmp.getString("INTEREST_PER");
                    rowData[13] = rsTmp.getString("INTEREST_AMT");
                    totalDNIntAmt += Double.parseDouble(rsTmp.getString("INTEREST_AMT"));
                    rowData[14] = rsTmp.getString("DEBITNOTE_VOUCHER_NO");
                    rowData[15] = EITLERPGLOBAL.formatDate(rsTmp.getString("DEBITNOTE_VOUCHER_DATE"));
                    rowData[16] = rsTmp.getString("DEBIT_NOTE_AMOUNT");
                    DataModelI.addRow(rowData);
                    //   System.out.println("rsTmp.getString('PIECE_NO')");
                    rsTmp.next();
                }
            }
            txtTotalIntAmt.setText(String.valueOf(totalDNIntAmt));
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    public String getDescriptionList() {
        String str = "";
        final JLabel sort_text = new JLabel("");

        JRadioButton chk1 = new JRadioButton("Int. Earned STG. D/Note");
        JRadioButton chk2 = new JRadioButton("Worsted Suiting Sale");
        JRadioButton chk3 = new JRadioButton("Processing Charges");
        JRadioButton chk4 = new JRadioButton("Miscellaneous Income");
        JRadioButton chk5 = new JRadioButton("Sales Kharajat - Suitings");
        JRadioButton chk6 = new JRadioButton("Bank chgs - Cheque Return");
        JRadioButton chk7 = new JRadioButton("Bank chgs - L/C Advising chgs");
        JRadioButton chk8 = new JRadioButton("Angadia Charges");
        JRadioButton chk9 = new JRadioButton("Int. Earned FELT D/Note");
        JRadioButton chk10 = new JRadioButton("Compensation for cancel of Felt Order");
        JRadioButton chk11 = new JRadioButton("Sales Kharajat - Felt");

        ButtonGroup bg = new ButtonGroup();
        bg.add(chk1);
        bg.add(chk2);
        bg.add(chk3);
        bg.add(chk4);
        bg.add(chk5);
        bg.add(chk6);
        bg.add(chk7);
        bg.add(chk8);
        bg.add(chk9);
        bg.add(chk10);
        bg.add(chk11);
        //chk1.setSelected(true);

        final JPanel[] panels = new JPanel[17];

        JLabel line = new JLabel("------------------------------------------------------------------------------------------------------------");
        JLabel line2 = new JLabel("-----------------------------------------------------------------------------------------------------------");

        final JLabel blnk_lbl1 = new JLabel("\n");

        chk1.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent ie) {
                sort_text.setText("Int. Earned STG. D/Note");
                String str = "Int. Earned STG. D/Note";
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });

        chk2.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent ie) {
                sort_text.setText("Worsted Suiting Sale");
                String str = "Worsted Suiting Sale";
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });

        chk3.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent ie) {
                sort_text.setText("Processing Charges");
                String str = "Processing Charges";
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });

        chk4.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent ie) {
                sort_text.setText("Miscellaneous Income");
                String str = "Miscellaneous Income";
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });

        chk5.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent ie) {
                sort_text.setText("Sales Kharajat - Suitings");
                String str = "Sales Kharajat - Suitings";
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });

        chk6.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent ie) {
                sort_text.setText("Bank chgs - Cheque Return");
                String str = "Bank chgs - Cheque Return";
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });

        chk7.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent ie) {
                sort_text.setText("Bank chgs - L/C Advising chgs");
                String str = "Bank chgs - L/C Advising chgs";
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });

        chk8.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent ie) {
                sort_text.setText("Angadia Charges");
                String str = "Angadia Charges";
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });

        chk9.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent ie) {
                sort_text.setText("Int. Earned FELT D/Note");
                String str = "Int. Earned FELT D/Note";
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });

        chk10.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent ie) {
                sort_text.setText("Compensation for cancel of Felt Order");
                String str = "Compensation for cancel of Felt Order";
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });

        chk11.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent ie) {
                sort_text.setText("Sales Kharajat - Felt");
                String str = "Sales Kharajat - Felt";
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });

        Object[] grp = {line2, chk1, chk2, chk3, chk4, chk5, chk6, chk7, chk8, chk9, chk10, chk11, line, sort_text};
        JOptionPane.showMessageDialog(null, grp, "SELECT DESCRIPTION LIST", JOptionPane.PLAIN_MESSAGE);
        if (!sort_text.getText().equals("")) {
            str = sort_text.getText();
        }
        return str;
    }

    private void FormatGridSumm() {
        DataModelSumm = new EITLTableModel();
        TableSumm.removeAll();
        TableSumm.setModel(DataModelSumm);

        TableI.setAutoResizeMode(TableI.AUTO_RESIZE_OFF);

        DataModelSumm.addColumn("Sr.");
        DataModelSumm.addColumn("DM No");
        DataModelSumm.addColumn("DM Date");
        DataModelSumm.addColumn("Party Code");
        DataModelSumm.addColumn("Party Name");
        DataModelSumm.addColumn("Invoice No");
        DataModelSumm.addColumn("Invoice Date");
        DataModelSumm.addColumn("Invoice Amt");
        DataModelSumm.addColumn("Interest Amt");

        DataModelSumm.TableReadOnly(true);
    }

    private void GenerateSummary() {
        String strSQL = "";
        String strFromDate = EITLERPGLOBAL.formatDateDB(txtFromDate.getText());
        String strToDate = EITLERPGLOBAL.formatDateDB(txtToDate.getText());
        String strInvFromDate = EITLERPGLOBAL.formatDateDB(txtInvoiceFromDate.getText());
        String strInvToDate = EITLERPGLOBAL.formatDateDB(txtInvoiceToDate.getText());
        String MainAcCode = txtMainAccountCode.getText();
        String PartyCode = txtpartycode.getText();
        String AgentCode = txtAgentCode.getText();
        double totalDNIntAmtSumm = 0;
        try {
            FormatGridSumm(); //clear existing content of table            
            ResultSet rsTmp;

            strSQL = "";

            strSQL += "SELECT DEBITMEMO_NO,DEBITMEMO_DATE,DB_PARTY_CODE,INVOICE_NO,INVOICE_DATE,INVOICE_AMOUNT,SUM(INTEREST_AMT) AS INTEREST_AMT ";
            strSQL += "FROM FINANCE.D_FIN_DEBITMEMO_RECEIPT_MAPPING ";
            strSQL += " WHERE ";

            if (!txtFromDate.getText().equals("")) {
                strSQL += " DEBITMEMO_DATE>= '" + strFromDate + "' AND ";
            }
            if (!txtToDate.getText().equals("")) {
                strSQL += " DEBITMEMO_DATE<= '" + strToDate + "' AND ";
            }
            if (!txtInvoiceFromDate.getText().equals("")) {
                strSQL += " INVOICE_DATE >= '" + strInvFromDate + "' AND ";
            }
            if (!txtInvoiceToDate.getText().equals("")) {
                strSQL += " INVOICE_DATE <= '" + strInvToDate + "' AND ";
            }
            if (!txtMainAccountCode.getText().equals("")) {
                strSQL += " MAIN_ACCOUNT_CODE = '" + MainAcCode + "' AND ";
            }
            if (!txtpartycode.getText().equals("")) {
                strSQL += " DB_PARTY_CODE = '" + PartyCode + "' AND ";
            }
            if (!txtAgentCode.getText().equals("")) {
                strSQL += " SUBSTRING(DB_PARTY_CODE,1,2) IN (" + AgentCode + ") AND ";
            }

            strSQL += " LENGTH(COALESCE(DEBITNOTE_VOUCHER_NO,''))=0 AND ";
            strSQL += " COMPANY_ID=2 AND APPROVED=1 AND CANCELLED=0 ";
            strSQL += " GROUP BY DEBITMEMO_NO,DEBITMEMO_DATE,INVOICE_NO,INVOICE_DATE ";

            int Orderby = EITLERPGLOBAL.getComboCode(cmbOrderSumm);
            if (Orderby == 1) {
                strSQL = strSQL + " ORDER BY DEBITMEMO_DATE DESC,DEBITMEMO_NO ";
            }
            if (Orderby == 2) {
                strSQL = strSQL + " ORDER BY DEBITMEMO_DATE,DEBITMEMO_NO ";
            }
            if (Orderby == 3) {
                strSQL = strSQL + " ORDER BY DEBITMEMO_NO DESC ";
            }
            if (Orderby == 4) {
                strSQL = strSQL + " ORDER BY DEBITMEMO_NO ";
            }
            if (Orderby == 5) {
                strSQL = strSQL + " ORDER BY INVOICE_NO ";
            }
            if (Orderby == 6) {
                strSQL = strSQL + " ORDER BY INVOICE_DATE ";
            }
            if (Orderby == 7) {
                strSQL = strSQL + " ORDER BY DB_PARTY_CODE ";
            }

            System.out.println(strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[10];
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("DEBITMEMO_NO");
                    rowData[2] = EITLERPGLOBAL.formatDate(rsTmp.getString("DEBITMEMO_DATE"));
                    rowData[3] = rsTmp.getString("DB_PARTY_CODE");
                    rowData[4] = clsSales_Party.getPartyName(2, rsTmp.getString("DB_PARTY_CODE"));
                    rowData[5] = rsTmp.getString("INVOICE_NO");
                    rowData[6] = EITLERPGLOBAL.formatDate(rsTmp.getString("INVOICE_DATE"));
                    rowData[7] = rsTmp.getString("INVOICE_AMOUNT");
                    rowData[8] = rsTmp.getString("INTEREST_AMT");
                    totalDNIntAmtSumm += Double.parseDouble(rsTmp.getString("INTEREST_AMT"));
                    DataModelSumm.addRow(rowData);

                    rsTmp.next();
                }
            }
            txtTotalIntAmtSumm.setText(String.valueOf(totalDNIntAmtSumm));
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

private void previewAutoDM(){
       try {
                Connection Conn = EITLERP.data.getConn();
                String dbmNo = (String) TableI.getValueAt(TableI.getSelectedRow(), 1);
        String dbmDt = (String) TableI.getValueAt(TableI.getSelectedRow(), 2);
        String dueDt = (String) TableI.getValueAt(TableI.getSelectedRow(), 8);
        String partyCode = (String) TableI.getValueAt(TableI.getSelectedRow(), 4);
        //String partyName = clsPartyMaster.getAccountName("210010", partyCode);
        String partyName = clsPartyMaster.getAccountName(txtMainAccountCode.getText(), partyCode);
        //String partyAdd = clsPartyMaster.getAccountNameAddress("210010", partyCode);
        String partyAdd = clsPartyMaster.getAccountNameAddress(txtMainAccountCode.getText(), partyCode);
        String intrestAmt = (String) TableI.getValueAt(TableI.getSelectedRow(), 13);
        

        HashMap Parameters = new HashMap();
        Parameters.put("CURDATE", EITLERPGLOBAL.getCurrentDate());
        Parameters.put("DEBITMEMO_NO", dbmNo);
        Parameters.put("DEBITMEMO_DATE", dbmDt);
        Parameters.put("VOUCHER_DATE", dueDt);
        Parameters.put("PARTY_CODE", partyCode);
        Parameters.put("PARTY_NAME", partyName);
        //Parameters.put("ADDRESS", data.getStringValueFromDB("SELECT CONCAT(ADDRESS1,'  ',ADDRESS2) AS ADD1 FROM  DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE = '" + partyCode.trim() + "' AND MAIN_ACCOUNT_CODE = '210010'", FinanceGlobal.FinURL));
        Parameters.put("ADDRESS", data.getStringValueFromDB("SELECT CONCAT(ADDRESS1,'  ',ADDRESS2) AS ADD1 FROM  DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE = '" + partyCode.trim() + "' AND MAIN_ACCOUNT_CODE = '" + txtMainAccountCode.getText() + "'", FinanceGlobal.FinURL));
        Parameters.put("T_INT_AMT", String.valueOf((data.getDoubleValueFromDB("SELECT  ROUND(SUM(INTEREST_AMT),2) AS INT_AMT FROM D_FIN_DEBITMEMO_RECEIPT_MAPPING WHERE DEBITMEMO_NO = '" + dbmNo + "' GROUP BY DEBITMEMO_NO", FinanceGlobal.FinURL))));
        double roundValue=data.getDoubleValueFromDB("SELECT ROUND(SUM(INTEREST_AMT),2) AS AMOUNT FROM D_FIN_DEBITMEMO_RECEIPT_MAPPING WHERE DEBITMEMO_NO = '" + dbmNo + "' GROUP BY DEBITMEMO_NO", FinanceGlobal.FinURL);
        EITLERP.FeltSales.FeltInvReport.NumWord num = new EITLERP.FeltSales.FeltInvReport.NumWord();        
        String valueinWords=num.convertNumToWord(Math.round(roundValue));
        Parameters.put("ROUNDED_AMOUNT", String.valueOf((data.getDoubleValueFromDB("SELECT ROUND(SUM(INTEREST_AMT),2) AS AMOUNT FROM D_FIN_DEBITMEMO_RECEIPT_MAPPING WHERE DEBITMEMO_NO = '" + dbmNo + "' GROUP BY DEBITMEMO_NO", FinanceGlobal.FinURL))));
        Parameters.put("RS_IN_WORDS",valueinWords+" +  Applicable Taxes" );
        Parameters.put("DESCRIPTION","Your account is being debited as per below details." );
        if(TableI.getValueAt(TableI.getSelectedRow(), 3).toString().equals("")){
            Parameters.put("REMARKS_AUTO","" );
        }else{
            Parameters.put("REMARKS_AUTO","Interest on delayed payment on the above invoices." );
        }
        
        
                EITLERP.ReportRegister rpt = new EITLERP.ReportRegister(Parameters, Conn);
                String strSQL = "SELECT INVOICE_NO,INVOICE_DATE,INVOICE_DUE_DATE,VALUE_DATE,INVOICE_AMOUNT,DAYS,INTEREST_PER,INTEREST_AMT,COALESCE(REMARKS,'') AS REMARKS,COALESCE(PURPOSE,'') AS PURPOSE  FROM FINANCE.D_FIN_DEBITMEMO_RECEIPT_MAPPING WHERE DEBITMEMO_NO='" + dbmNo + "' AND DEBITMEMO_DATE='" + EITLERPGLOBAL.formatDateDB(dbmDt) + "'";
                System.out.println("Report :" + strSQL);
                rpt.setReportName("/EITLERP/Sales/DebitMemoReceiptMapping/rpt_Debitmemo_Auto.jrxml", 1, strSQL); //productlist is the name of my jasper file.
                rpt.callReport();
            } catch (Exception e) {
                e.printStackTrace();
            }
        
        
    }

    private void previewManualDM(){
        try {
                Connection Conn = EITLERP.data.getConn();
                String rmk = getDescriptionList();

        String dbmNo = (String) TableI.getValueAt(TableI.getSelectedRow(), 1);
        String dbmDt = (String) TableI.getValueAt(TableI.getSelectedRow(), 2);
        String dueDt = (String) TableI.getValueAt(TableI.getSelectedRow(), 8);
        String partyCode = (String) TableI.getValueAt(TableI.getSelectedRow(), 4);
        //String partyName = clsPartyMaster.getAccountName("210010", partyCode);
        String partyName = clsPartyMaster.getAccountName(txtMainAccountCode.getText(), partyCode);
        //String partyAdd = clsPartyMaster.getAccountNameAddress("210010", partyCode);
        String partyAdd = clsPartyMaster.getAccountNameAddress(txtMainAccountCode.getText(), partyCode);
        String intrestAmt = (String) TableI.getValueAt(TableI.getSelectedRow(), 13);

        HashMap Parameters = new HashMap();
        Parameters.put("CURDATE", EITLERPGLOBAL.getCurrentDate());
        Parameters.put("DEBITMEMO_NO", dbmNo);
        Parameters.put("DEBITMEMO_DATE", dbmDt);
        Parameters.put("VOUCHER_DATE", dueDt);
        Parameters.put("PARTY_CODE", partyCode);
        Parameters.put("PARTY_NAME", partyName);
        //Parameters.put("ADDRESS", data.getStringValueFromDB("SELECT CONCAT(ADDRESS1,'  ',ADDRESS2) AS ADD1 FROM  DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE = '" + partyCode.trim() + "' AND MAIN_ACCOUNT_CODE = '210010'", FinanceGlobal.FinURL));
        Parameters.put("ADDRESS", data.getStringValueFromDB("SELECT CONCAT(ADDRESS1,'  ',ADDRESS2) AS ADD1 FROM  DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE = '" + partyCode.trim() + "' AND MAIN_ACCOUNT_CODE = '" + txtMainAccountCode.getText() + "'", FinanceGlobal.FinURL));
        Parameters.put("T_INT_AMT", String.valueOf((data.getDoubleValueFromDB("SELECT  ROUND(SUM(INTEREST_AMT),2) AS INT_AMT FROM D_FIN_DEBITMEMO_RECEIPT_MAPPING WHERE DEBITMEMO_NO = '" + dbmNo + "' GROUP BY DEBITMEMO_NO", FinanceGlobal.FinURL))));
        Parameters.put("ROUNDED_AMOUNT", String.valueOf((data.getDoubleValueFromDB("SELECT ROUND(SUM(INTEREST_AMT),2) AS AMOUNT FROM D_FIN_DEBITMEMO_RECEIPT_MAPPING WHERE DEBITMEMO_NO = '" + dbmNo + "' GROUP BY DEBITMEMO_NO", FinanceGlobal.FinURL))));
        Parameters.put("DESCRIPTION", rmk);
        double roundValue=data.getDoubleValueFromDB("SELECT ROUND(SUM(INTEREST_AMT),2) AS AMOUNT FROM D_FIN_DEBITMEMO_RECEIPT_MAPPING WHERE DEBITMEMO_NO = '" + dbmNo + "' GROUP BY DEBITMEMO_NO", FinanceGlobal.FinURL);
        EITLERP.FeltSales.FeltInvReport.NumWord num = new EITLERP.FeltSales.FeltInvReport.NumWord();        
        String valueinWords=num.convertNumToWord(Math.round(roundValue));        
        Parameters.put("RS_IN_WORDS",valueinWords+" +  Applicable Taxes" );
        

                EITLERP.ReportRegister rpt = new EITLERP.ReportRegister(Parameters, Conn);
                String strSQL = "SELECT * FROM FINANCE.D_FIN_DEBITMEMO_RECEIPT_MAPPING WHERE DEBITMEMO_NO='" + dbmNo + "' AND DEBITMEMO_DATE='" + EITLERPGLOBAL.formatDateDB(dbmDt) + "'";
                System.out.println("Report :" + strSQL);
                rpt.setReportName("/EITLERP/Sales/DebitMemoReceiptMapping/rpt_Debitmemo_WoReceipt.jrxml", 1, strSQL); //productlist is the name of my jasper file.
                rpt.callReport();
            } catch (Exception e) {
                e.printStackTrace();
            }
    }
    

}
