/*
 * 
 * Created on July 29, 2017
 */
package EITLERP.Sales.DebitMemoReceiptMapping;

/**
 * @author DAXESH PRAJAPATI
 */
import javax.swing.*;
import java.awt.Color;
import java.util.HashMap;
import EITLERP.*;
import java.net.URL;
import EITLERP.data;
import EITLERP.LOV;
import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.ComboData;
import EITLERP.Finance.FinanceGlobal;
import EITLERP.Finance.clsPartyMaster;
import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

public class frmDebitMemoReceiptMapping extends javax.swing.JApplet {

    private int EditMode = 0;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromUserId = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;
    public int DeptID = EITLERPGLOBAL.gUserDeptID;
    public String finalapproved = "";
    public int ModuleId = 99;
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    private boolean DoNotEvaluate = false;
    private String DOC_NO = "";
    private EITLComboModel cmbToModel;
    //private clsFeltPieceUpd objPieces;
    private clsDebitMemoReceiptMapping objDM;
    HashMap hmPieceList = new HashMap();
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    private EITLComboModel cmbAmendReasonModel;

    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;

    public frmPendingApprovals frmPA;
    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
    /**
     * Creates new form frmFeltPieceUpd
     */
    public void init() {
        System.gc();
        setSize(830, 590);
        initComponents();

        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        
        //objPieces=new clsFeltPieceUpd();
        objDM = new clsDebitMemoReceiptMapping();
        
        GenerateHierarchyCombo();
        //    DeptID = 40 ;
        GenerateFromCombo();
        SetMenuForRights();

        
       

        
        boolean load = objDM.LoadData();

        if (load) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(this, "Error occured while Loading Data. Error is " + objDM.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPopupMenu = new javax.swing.JPopupMenu();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        lblRevNo = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        DEBIT_MEMO_NO = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        DEBIT_MEMO_DATE = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        RECEIPT_VOUCHER_NO = new javax.swing.JTextField();
        INVOICE_NO = new javax.swing.JTextField();
        INVOICE_DATE = new javax.swing.JTextField();
        INVOICE_DUE_DATE = new javax.swing.JTextField();
        VALUE_DATE = new javax.swing.JTextField();
        DAYS = new javax.swing.JTextField();
        DB_PARTY_CODE = new javax.swing.JTextField();
        MAIN_ACCOUNT_CODE = new javax.swing.JTextField();
        INTEREST_PER = new javax.swing.JTextField();
        INTEREST_AMT = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        PURPOSE = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        REMARKS = new javax.swing.JTextField();
        lblPARTY = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        PIECE_NO = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        INVOICE_AMT = new javax.swing.JTextField();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdBackToTab1 = new javax.swing.JButton();
        cmdBackToNormal = new javax.swing.JButton();
        cmdViewRevisions = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 830, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("DEBIT MEMO");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 830, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.setLayout(null);

        lblRevNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(300, 20, 20, 18);

        jLabel1.setText("Debit Memo No");
        Tab1.add(jLabel1);
        jLabel1.setBounds(90, 10, 130, 16);

        DEBIT_MEMO_NO.setEditable(false);
        Tab1.add(DEBIT_MEMO_NO);
        DEBIT_MEMO_NO.setBounds(200, 10, 90, 28);

        jLabel2.setText("Debit Memo Date");
        Tab1.add(jLabel2);
        jLabel2.setBounds(350, 10, 140, 30);

        DEBIT_MEMO_DATE.setEditable(false);
        Tab1.add(DEBIT_MEMO_DATE);
        DEBIT_MEMO_DATE.setBounds(470, 10, 150, 30);

        jLabel4.setText("RECEIPT VOUCHER NO ");
        Tab1.add(jLabel4);
        jLabel4.setBounds(40, 310, 170, 16);

        jLabel5.setText("INVOICE NO ");
        Tab1.add(jLabel5);
        jLabel5.setBounds(110, 220, 130, 16);

        jLabel6.setText("INVOICE DATE ");
        Tab1.add(jLabel6);
        jLabel6.setBounds(370, 220, 130, 16);

        jLabel7.setText("INVOICE DUE DATE");
        Tab1.add(jLabel7);
        jLabel7.setBounds(60, 250, 130, 16);

        jLabel8.setText("VALUE DATE ");
        Tab1.add(jLabel8);
        jLabel8.setBounds(100, 280, 130, 16);

        jLabel9.setText("DAYS ");
        Tab1.add(jLabel9);
        jLabel9.setBounds(150, 340, 130, 16);

        jLabel10.setText("     PARTY CODE *");
        Tab1.add(jLabel10);
        jLabel10.setBounds(80, 110, 130, 16);

        jLabel11.setText("MAIN ACCOUNT CODE *");
        Tab1.add(jLabel11);
        jLabel11.setBounds(40, 80, 160, 16);

        jLabel18.setText("INTEREST PER ");
        Tab1.add(jLabel18);
        jLabel18.setBounds(100, 370, 130, 16);

        jLabel19.setText("DM AMOUNT *");
        Tab1.add(jLabel19);
        jLabel19.setBounds(100, 140, 130, 16);
        Tab1.add(RECEIPT_VOUCHER_NO);
        RECEIPT_VOUCHER_NO.setBounds(200, 300, 120, 28);

        INVOICE_NO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                INVOICE_NOKeyPressed(evt);
            }
        });
        Tab1.add(INVOICE_NO);
        INVOICE_NO.setBounds(200, 210, 120, 28);
        Tab1.add(INVOICE_DATE);
        INVOICE_DATE.setBounds(470, 210, 150, 28);
        Tab1.add(INVOICE_DUE_DATE);
        INVOICE_DUE_DATE.setBounds(200, 240, 120, 28);
        Tab1.add(VALUE_DATE);
        VALUE_DATE.setBounds(200, 270, 120, 28);
        Tab1.add(DAYS);
        DAYS.setBounds(200, 330, 120, 28);

        DB_PARTY_CODE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                DB_PARTY_CODEKeyPressed(evt);
            }
        });
        Tab1.add(DB_PARTY_CODE);
        DB_PARTY_CODE.setBounds(200, 100, 120, 28);
        Tab1.add(MAIN_ACCOUNT_CODE);
        MAIN_ACCOUNT_CODE.setBounds(200, 70, 120, 28);
        Tab1.add(INTEREST_PER);
        INTEREST_PER.setBounds(200, 360, 120, 28);
        Tab1.add(INTEREST_AMT);
        INTEREST_AMT.setBounds(200, 130, 120, 28);

        jLabel23.setText("Purpose *");
        Tab1.add(jLabel23);
        jLabel23.setBounds(130, 40, 70, 30);
        Tab1.add(PURPOSE);
        PURPOSE.setBounds(200, 40, 530, 30);

        jLabel3.setText("REMARKS *");
        Tab1.add(jLabel3);
        jLabel3.setBounds(120, 170, 100, 16);
        Tab1.add(REMARKS);
        REMARKS.setBounds(200, 160, 530, 28);
        Tab1.add(lblPARTY);
        lblPARTY.setBounds(330, 100, 400, 20);

        jLabel12.setText("* indicate compulsory fields");
        Tab1.add(jLabel12);
        jLabel12.setBounds(200, 190, 210, 16);

        jLabel13.setText("PIECE NO");
        Tab1.add(jLabel13);
        jLabel13.setBounds(400, 140, 90, 16);
        Tab1.add(PIECE_NO);
        PIECE_NO.setBounds(470, 130, 150, 28);

        jLabel14.setText("INVOICE AMT");
        Tab1.add(jLabel14);
        jLabel14.setBounds(370, 250, 110, 16);
        Tab1.add(INVOICE_AMT);
        INVOICE_AMT.setBounds(470, 240, 150, 30);

        Tab.addTab("Debit Memo Receipt Mapping", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(7, 23, 62, 16);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 20, 184, 28);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(7, 62, 33, 16);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFrom.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 60, 184, 29);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(7, 97, 61, 16);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 95, 630, 28);

        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(7, 130, 73, 16);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 150, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 120, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 70, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 130, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(86, 130, 184, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(7, 249, 50, 16);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(86, 245, 184, 28);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(7, 288, 60, 16);

        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(86, 286, 630, 28);

        cmdBackToTab0.setMnemonic('B');
        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.setToolTipText("Previous Tab");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(500, 350, 102, 28);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(728, 94, 24, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(620, 350, 102, 28);

        Tab.addTab("Approval", Tab2);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(8, 5, 170, 16);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableApprovalStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableApprovalStatus);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 24, 760, 150);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 191, 163, 16);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableUpdateHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(TableUpdateHistory);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(10, 210, 640, 180);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(662, 390, 110, 28);

        cmdBackToNormal.setText("Back To Normal");
        cmdBackToNormal.setMargin(new java.awt.Insets(2, 3, 2, 3));
        cmdBackToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToNormalActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToNormal);
        cmdBackToNormal.setBounds(662, 240, 110, 32);

        cmdViewRevisions.setText("View Revisions");
        cmdViewRevisions.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdViewRevisions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewRevisionsActionPerformed(evt);
            }
        });
        jPanel1.add(cmdViewRevisions);
        cmdViewRevisions.setBounds(662, 210, 110, 32);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(662, 270, 110, 32);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(0, 70, 830, 470);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 540, 830, 22);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOrderActionPerformed

    }//GEN-LAST:event_jMenuItemOrderActionPerformed

    private void jMenuItemWarpingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemWarpingActionPerformed

    }//GEN-LAST:event_jMenuItemWarpingActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
     
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
       previewAutoDM();
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        objDM.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
        //cmbAmendReason.setEnabled(true);
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
        //cmbAmendReason.setEnabled(false);
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4).toString());
            bigEdit.ShowEdit();
        } else {
            JOptionPane.showMessageDialog(this, "Select a row from Document Update History");
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdViewRevisionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewRevisionsActionPerformed

    }//GEN-LAST:event_cmdViewRevisionsActionPerformed

    private void cmdBackToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToNormalActionPerformed

    }//GEN-LAST:event_cmdBackToNormalActionPerformed

    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        finalapproved = "NO";
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);
        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        finalapproved = "NO";
        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }

    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "SelHierarchyId : "+SelHierarchyID);
        DOC_NO = DEBIT_MEMO_NO.getText();
        cmbSendTo.setEnabled(true);
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO, FinanceGlobal.FinURL)) {
                cmbSendTo.setEnabled(true);
                txtToRemarks.setEnabled(true);
                txtFromRemarks.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }
        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }

        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(true);
        OpgHold.setSelected(false);
        txtToRemarks.setEnabled(false);
        if (!OpgApprove.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgApproveMouseClicked

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgApprove.setEnabled(false);
            OpgApprove.setSelected(false);
        }

        if (clsHierarchy.IsCreator((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgApprove.setEnabled(true);
            OpgReject.setEnabled(false);
            OpgReject.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
       // txtAmendDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained

    private void DB_PARTY_CODEKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DB_PARTY_CODEKeyPressed
        // TODO add your handling code here:
         if (evt.getKeyCode() == 112) {
            try {
                LOV aList = new LOV();

                aList.SQL = "SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER  WHERE MAIN_ACCOUNT_CODE='"+MAIN_ACCOUNT_CODE.getText()+"'";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;
                aList.UseSpecifiedConn = true;
                aList.dbURL = EITLERPGLOBAL.DatabaseURL;

                if (aList.ShowLOV()) {
                    DB_PARTY_CODE.setText(aList.ReturnVal);
                    lblPARTY.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
                }
            }catch(Exception e)
            {
                e.printStackTrace();
            }
        } 
    }//GEN-LAST:event_DB_PARTY_CODEKeyPressed

    private void INVOICE_NOKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INVOICE_NOKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) {
            try {
                LOV aList = new LOV();

                aList.SQL = "SELECT INVOICE_NO,INVOICE_DATE,NET_AMOUNT FROM DINESHMILLS.D_SAL_INVOICE_HEADER WHERE INVOICE_TYPE=2 AND INVOICE_DATE >= '2016-04-01'";
                
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 1;
                aList.UseSpecifiedConn = true;
                aList.dbURL = EITLERPGLOBAL.DatabaseURL;

                if (aList.ShowLOV()) {
                  
                    INVOICE_NO.setText(aList.ReturnVal);
                    INVOICE_AMT.setText(data.getStringValueFromDB("SELECT NET_AMOUNT FROM DINESHMILLS.D_SAL_INVOICE_HEADER WHERE INVOICE_TYPE=2 AND INVOICE_DATE >= '2016-04-01' AND INVOICE_NO='"+aList.ReturnVal+"'"));
                    String invoice_date = EITLERPGLOBAL.formatDate(data.getStringValueFromDB("SELECT INVOICE_DATE FROM DINESHMILLS.D_SAL_INVOICE_HEADER WHERE INVOICE_TYPE=2 AND INVOICE_DATE >= '2016-04-01' AND INVOICE_NO='"+aList.ReturnVal+"'"));
                    INVOICE_DATE.setText(invoice_date);
                }
            }catch(Exception e)
            {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_INVOICE_NOKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField DAYS;
    private javax.swing.JTextField DB_PARTY_CODE;
    private javax.swing.JTextField DEBIT_MEMO_DATE;
    private javax.swing.JTextField DEBIT_MEMO_NO;
    private javax.swing.JTextField INTEREST_AMT;
    private javax.swing.JTextField INTEREST_PER;
    private javax.swing.JTextField INVOICE_AMT;
    private javax.swing.JTextField INVOICE_DATE;
    private javax.swing.JTextField INVOICE_DUE_DATE;
    private javax.swing.JTextField INVOICE_NO;
    private javax.swing.JTextField MAIN_ACCOUNT_CODE;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTextField PIECE_NO;
    private javax.swing.JTextField PURPOSE;
    private javax.swing.JTextField RECEIPT_VOUCHER_NO;
    private javax.swing.JTextField REMARKS;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JTextField VALUE_DATE;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToNormal;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewRevisions;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblPARTY;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables

    //Puts toolbar in enable mode
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    //Puts toolbar in disable mode
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);

    }

    private void SetFields(boolean pStat) {
    //    txtAmendDate.setEnabled(pStat);
        //     txtFormNo.setEnabled(pStat);
        RECEIPT_VOUCHER_NO.setEnabled(pStat);
        INVOICE_NO.setEnabled(pStat);
        INVOICE_DATE.setEnabled(pStat);
        INVOICE_DUE_DATE.setEnabled(pStat);
        VALUE_DATE.setEnabled(pStat);
        DAYS.setEnabled(pStat);
        PIECE_NO.setEnabled(pStat);
        PURPOSE.setEnabled(pStat);
        REMARKS.setEnabled(pStat);
        INTEREST_PER.setEnabled(pStat);
        INTEREST_AMT.setEnabled(pStat);
        DB_PARTY_CODE.setEnabled(pStat);
        MAIN_ACCOUNT_CODE.setEnabled(pStat);
        INVOICE_AMT.setEnabled(pStat);
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);

        SetupApproval();
    }

    private void ClearFields() {
        
        RECEIPT_VOUCHER_NO.setText("");
        INVOICE_NO.setText("");
        INVOICE_DATE.setText("");
        INVOICE_DUE_DATE.setText("");
        VALUE_DATE.setText("");
        DAYS.setText("");
        PIECE_NO.setText("");
        REMARKS.setText("");
        PURPOSE.setText("");
        INTEREST_PER.setText("");
        INTEREST_AMT.setText("");
        INVOICE_AMT.setText("");
        DB_PARTY_CODE.setText("");
        lblPARTY.setText("");
        MAIN_ACCOUNT_CODE.setText("");
       

        
        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
    }

    //Display data on the Screen
    private void DisplayData() {
        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleId)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }

        //=========== Color Indication ===============//
        try {
            if (objDM.getAttribute("APPROVED").getVal() == 1.0) {
                lblTitle.setBackground(Color.BLUE);
                lblTitle.setForeground(Color.WHITE);
            }

            if (objDM.getAttribute("APPROVED").getVal() != 1.0) {
                lblTitle.setBackground(Color.GRAY);
                lblTitle.setForeground(Color.BLACK);
            }

            if (objDM.getAttribute("CANCELLED").getBool()) {
                lblTitle.setBackground(Color.RED);
                lblTitle.setForeground(Color.BLACK);
            }
        } catch (Exception c) {

            c.printStackTrace();
        }

        ClearFields();

        try {
            DEBIT_MEMO_NO.setText(objDM.getAttribute("DEBITMEMO_NO").getString());
            DEBIT_MEMO_DATE.setText(EITLERPGLOBAL.formatDate(objDM.getAttribute("DEBITMEMO_DATE").getString()));
            RECEIPT_VOUCHER_NO.setText(objDM.getAttribute("RECEIPT_VOUCHER_NO").getString());
            INVOICE_NO.setText(objDM.getAttribute("INVOICE_NO").getString());
            INVOICE_AMT.setText(objDM.getAttribute("INVOICE_AMOUNT").getString());
            INVOICE_DATE.setText(EITLERPGLOBAL.formatDate(objDM.getAttribute("INVOICE_DATE").getString()));
            INVOICE_DUE_DATE.setText(EITLERPGLOBAL.formatDate(objDM.getAttribute("INVOICE_DUE_DATE").getString()));
            VALUE_DATE.setText(EITLERPGLOBAL.formatDate(objDM.getAttribute("VALUE_DATE").getString()));
            DAYS.setText(objDM.getAttribute("DAYS").getString());
            PIECE_NO.setText(objDM.getAttribute("PIECE_NO").getString());
            PURPOSE.setText(objDM.getAttribute("PURPOSE").getString());
            REMARKS.setText(objDM.getAttribute("REMARKS").getString());
            INTEREST_PER.setText(objDM.getAttribute("INTEREST_PER").getString());
            INTEREST_AMT.setText(objDM.getAttribute("INTEREST_AMT").getString());
            DB_PARTY_CODE.setText(objDM.getAttribute("DB_PARTY_CODE").getString());
            lblPARTY.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, objDM.getAttribute("DB_PARTY_CODE").getString()));
            MAIN_ACCOUNT_CODE.setText(objDM.getAttribute("MAIN_ACCOUNT_CODE").getString());
            
            lblTitle.setText("DEBIT MEMO : "+objDM.getAttribute("DEBITMEMO_NO").getString());
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, objDM.getAttribute("HIERARCHY_ID").getInt());
            
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap List = new HashMap();
            String DocNo = objDM.getAttribute("DEBITMEMO_NO").getString();
            List = ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID,ModuleId, DocNo);
            for (int i = 1; i <= List.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
                Object[] rowData = new Object[7];
                //JOptionPane.showMessageDialog(null, "USER ID : "+ObjFlow.getAttribute("USER_ID").getVal());
                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[3] = (String) ObjFlow.getAttribute("STATUS").getObj();
                rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

                DataModelApprovalStatus.addRow(rowData);
            }

            //Showing Audit Trial History
            FormatGridUpdateHistory();
            HashMap History = objDM.getHistoryList(EITLERPGLOBAL.gCompanyID + "", DocNo);
            for (int i = 1; i <= History.size(); i++) {
                clsDebitMemoReceiptMapping ObjHistory = (clsDebitMemoReceiptMapping) History.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, Integer.parseInt(ObjHistory.getAttribute("MODIFIED_BY").getString()));
                rowData[2] = ObjHistory.getAttribute("ENTRY_DATE").getString();
                

                String ApprovalStatus = "";

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjHistory.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjHistory.getAttribute("FROM_IP").getString();
                DataModelUpdateHistory.addRow(rowData);
            }
            //============================================================//
            //setSTATUS();
            
        
        } catch (Exception e) {
            System.out.println("");
            e.printStackTrace();
        }

        DoNotEvaluate = false;
    }

   

    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {
                if (OpgApprove.isSelected()) {
                    IncludeUser = ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, ModuleId, DEBIT_MEMO_NO.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, ModuleId, DEBIT_MEMO_NO.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }

        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, ModuleId, DEBIT_MEMO_NO.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }

    //Generates User Name Combo Box
    private void SetupApproval() {
        /*// --- Hierarchy Change Rights Check --------
         if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,75)) {
         cmbHierarchy.setEnabled(true);
         }else {
         cmbHierarchy.setEnabled(false);
         }*/

        // select hold for default approval
        OpgHold.setSelected(true);

        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            int FromUserID = ApprovalFlow.getFromID(EITLERPGLOBAL.gCompanyID, ModuleId, objDM.getAttribute("DEBITMEMO_NO").getString());
            lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = ApprovalFlow.getFromRemarks(EITLERPGLOBAL.gCompanyID,  ModuleId, FromUserID, objDM.getAttribute("DEBITMEMO_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if(ApprovalFlow.IsCreator( ModuleId, DEBIT_MEMO_NO.getText())) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 1258, 12581)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 1258, 12582)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 1258, 12583)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 1258, 12585)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }

    private void Add() {
        //  EditMode=EITLERPGLOBAL.ADD;
        //cmbAmendReason.setEnabled(true);
        //Now Generate new document no.
        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = 99;
        aList.FirstFreeNo = clsFirstFree.getDefaultFirstFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId);
        if (aList.ShowList()) {
            EditMode = EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix = aList.Prefix; //Selected Prefix;
            SelSuffix = aList.Suffix;
            FFNo = aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            DEBIT_MEMO_NO.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, clsFirstFree.getDefaultFirstFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId), false));
            DEBIT_MEMO_DATE.setText(df.format(new java.util.Date()));
            //txtAmendDate.requestFocus();

//            lblTitle.setText(" FELT PIECE AMENDMENT ENTRY FORM -  " + txtAmendID.getText());
            lblTitle.setBackground(Color.BLUE);
        } else {
            JOptionPane.showMessageDialog(null, "You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }

        RECEIPT_VOUCHER_NO.requestFocus();

//        SetFields(true);
//        DisableToolbar();
//        ClearFields();
//        SetupApproval();
        lblTitle.setBackground(Color.GRAY);
        
//        RECEIPT_VOUCHER_NO.setText("1");
//        INVOICE_NO.setText("12");
//        INVOICE_DATE.setText("29/07/2017");
//        INVOICE_DUE_DATE.setText("28/07/2017");
//        VALUE_DATE.setText("27/07/2017");
//        DAYS.setText("5");
//        IGST_PER.setText("0");
//        IGST_AMT.setText("0");
//        CGST_PER.setText("6");
//        CGST_AMT.setText("60");
//        SGST_PER.setText("6");
//        SGST_AMT.setText("60");
//        INTEREST_PER.setText("10");
//        INTEREST_AMT.setText("100");
//        DB_PARTY_CODE.setText("1000");
//        MAIN_ACCOUNT_CODE.setText("12345");
//        INVOICE_AMOUNT.setText("1220");
//        DEBITNOTE_VOUCHER_NO.setText("1");
//        DEBITNOTE_VOUCHER_DATE.setText("01/01/2017");
//        DEBIT_NOTE_AMOUNT.setText("1251");

        
    }

    private void Edit() {
        String productionDocumentNo = (String) objDM.getAttribute("DEBITMEMO_NO").getObj();
        if (objDM.IsEditable(productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            SetupApproval();
            //ReasonResetReadonly();
            //cmbOrderReason.setEnabled(false);
            if (ApprovalFlow.IsCreator(ModuleId, productionDocumentNo)) {
                SetFields(true);
            } else {
                EnableApproval();
            }
        } else {
            JOptionPane.showMessageDialog(this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "EDITING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Delete() {

    }

    private void Save() {
        if(PURPOSE.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Please enter purpose");
            PURPOSE.requestFocus();
            return;
        }
        if(DB_PARTY_CODE.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Please enter party code");
            DB_PARTY_CODE.requestFocus();
            return;
        }
        if(INTEREST_AMT.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Please enter DB AMOUNT");
            INTEREST_AMT.requestFocus();
            return;
        }
        if(REMARKS.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Please enter remarks");
            REMARKS.requestFocus();
            return;
        }
        
        SetData();

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //feltOrder.LoadData();
        if (EditMode == EITLERPGLOBAL.ADD) {
            if (objDM.Insert()) {
                SelectFirstFree aList = new SelectFirstFree();
                aList.ModuleID = 99;
                aList.FirstFreeNo = clsFirstFree.getDefaultFirstFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId);
                FFNo = aList.FirstFreeNo;
                clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, true);
                DisplayData();

            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving. Error is " + objDM.LastError, " SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (objDM.Update()) {

                if (OpgFinal.isSelected()) {
//                        //clsHierarchy.sendMailToAllUsers(COMPANY_ID,SelHierarchyID,CURRENT_USER,SUBJECT,MESSAGE,cc);
//                    String Subject = "Felt Order Final Approved";
//                    String Message = "Document No : "+Order_No_Conversion.PieceUpd_No_Only(txtAmendID.getText())+" has been final approved by "+clsUser.getUserName((int) EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gNewUserID);
//                 
//                    clsHierarchy.sendMailToAllUsers((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, Subject, Message, "sdmlerp@dineshmills.com");
                    
                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving editing. Error is " + objDM.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Sets data to the Details Class Object
    private void SetData() {

        DOC_NO = DEBIT_MEMO_NO.getText();
        		
        objDM.setAttribute("DEBITMEMO_NO", DOC_NO);
        objDM.setAttribute("DEBITMEMO_DATE", DEBIT_MEMO_DATE.getText());
        objDM.setAttribute("RECEIPT_VOUCHER_NO", RECEIPT_VOUCHER_NO.getText());
        objDM.setAttribute("INVOICE_NO", INVOICE_NO.getText());
        objDM.setAttribute("INVOICE_DATE", INVOICE_DATE.getText());
        objDM.setAttribute("INVOICE_DUE_DATE", INVOICE_DUE_DATE.getText());
        objDM.setAttribute("VALUE_DATE", VALUE_DATE.getText());
        objDM.setAttribute("DAYS", DAYS.getText());
        objDM.setAttribute("PIECE_NO", PIECE_NO.getText());
        objDM.setAttribute("PURPOSE", PURPOSE.getText());
        objDM.setAttribute("REMARKS", REMARKS.getText());
        
        objDM.setAttribute("INTEREST_PER", INTEREST_PER.getText());
        objDM.setAttribute("INTEREST_AMT", INTEREST_AMT.getText());
        objDM.setAttribute("DB_PARTY_CODE", DB_PARTY_CODE.getText());
        objDM.setAttribute("MAIN_ACCOUNT_CODE", MAIN_ACCOUNT_CODE.getText());
        
        
        objDM.setAttribute("IGST_PER", "0");
        objDM.setAttribute("IGST_AMT", "0");
        objDM.setAttribute("CGST_PER", "0");
        objDM.setAttribute("CGST_AMT", "0");
        objDM.setAttribute("SGST_PER", "0");
        objDM.setAttribute("SGST_AMT", "0");
       // objDM.setAttribute("INVOICE_AMOUNT", "0");
        objDM.setAttribute("INVOICE_AMOUNT", INVOICE_AMT.getText());
        objDM.setAttribute("DEBITNOTE_VOUCHER_NO", "");
        objDM.setAttribute("DEBITNOTE_VOUCHER_DATE", "0000-00-00");
        objDM.setAttribute("DEBIT_NOTE_AMOUNT", "0");
        
        
        
        //-------- Update Approval Specific Fields -----------//
        objDM.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        objDM.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        objDM.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        objDM.setAttribute("FROM_REMARKS", txtToRemarks.getText().trim());
        objDM.setAttribute("COMPANY_ID", EITLERPGLOBAL.gCompanyID);
        //    objPieces.setAttribute("UPDATED_BY",EITLERPGLOBAL.getComboCode(cmbUserName));
        objDM.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
        if (OpgApprove.isSelected()) {
            objDM.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            objDM.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            objDM.setAttribute("APPROVAL_STATUS", "R");
            objDM.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            objDM.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            objDM.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            objDM.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        } else {

            objDM.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            objDM.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }

       
    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
       
    }

    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Sales.DebitMemoReceiptMapping.frmFindFeltDebitMemo",true);
        frmFindFeltDebitMemo ObjFindFeltDebitMemo = (frmFindFeltDebitMemo)ObjLoader.getObj();
        
        if(ObjFindFeltDebitMemo.Cancelled==false) {
            if(!objDM.Filter(ObjFindFeltDebitMemo.stringFindQuery)) {
                JOptionPane.showMessageDialog(this," No records found.","Find Felt Debit Memo Details",JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    // find details by production date
    public void Find(String AmendID) {
        objDM.Filter(" AND DEBITMEMO_NO='"+AmendID+"'");
        SetMenuForRights();
        DisplayData();
    }
    
    

    // find details by piece no.
    public void Find(String pieceNo, String prodDate) {
//        objPieces.Filter(" FELT_PIECE_NO+0='"+pieceNo+"'");
//        SetMenuForRights();
//        DisplayData();
    }

    // find all pending document
    public void FindWaiting() {
       // objDM.Filter(" AND PROD_DOC_NO IN (SELECT DISTINCT PROD_DOC_NO FROM PRODUCTION.FELT_PROD_DATA, PRODUCTION.FELT_PROD_DOC_DATA WHERE PROD_DOC_NO=DOC_NO AND USER_ID="+EITLERPGLOBAL.gNewUserID+" AND STATUS='W' AND MODULE_ID="+ModuleId+" AND CANCELED=0) ");
        
        objDM.Filter(" WHERE DEBITMEMO_NO IN(SELECT FINANCE.D_FIN_DEBITMEMO_RECEIPT_MAPPING.DEBITMEMO_NO FROM FINANCE.D_FIN_DEBITMEMO_RECEIPT_MAPPING,D_COM_DOC_DATA WHERE FINANCE.D_FIN_DEBITMEMO_RECEIPT_MAPPING.DEBITMEMO_NO=D_COM_DOC_DATA.DOC_NO AND FINANCE.D_FIN_DEBITMEMO_RECEIPT_MAPPING.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID  AND D_COM_DOC_DATA.USER_ID="+EITLERPGLOBAL.gNewUserID+" AND D_COM_DOC_DATA.STATUS='W' AND MODULE_ID=99)");
        
        SetMenuForRights();
        DisplayData();
    }

    private void MoveFirst() {
        objDM.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        objDM.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        objDM.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        objDM.MoveLast();
        DisplayData();
    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(" " + pMessage);
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //========== Setting Up Header Fields ================//
        String FieldName = "";
        int SelHierarchy = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        for (int i = 0; i < Tab1.getComponentCount() - 1; i++) {
            if (Tab1.getComponent(i).getName() != null) {

                FieldName = Tab1.getComponent(i).getName();
                if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    Tab1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//

        //=============== Setting Table Fields ==================//
        //   DataModel.ClearAllReadOnly();
        
    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("From IP");
    }

    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {

                if (DEBIT_MEMO_NO.getText().equals("")) {

                } else {
                    hmSendToList = ApprovalFlow.getRemainingUsers(EITLERPGLOBAL.gCompanyID, ModuleId, DEBIT_MEMO_NO.getText());
                    for (int i = 1; i <= hmSendToList.size(); i++) {
                        clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                        ComboData aData = new ComboData();
                        aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                        aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                        cmbSendToModel.addElement(aData);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = ApprovalFlow.getRemainingUsers(EITLERPGLOBAL.gCompanyID, ModuleId, DOC_NO);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
        }

    }
    
    
private void previewAutoDM(){
       try {
                Connection Conn = EITLERP.data.getConn();
                String dbmNo = DEBIT_MEMO_NO.getText().trim();
        String dbmDt = DEBIT_MEMO_DATE.getText().trim();
        String dueDt = INVOICE_DUE_DATE.getText().trim();
        String partyCode = DB_PARTY_CODE.getText().trim();
        //String partyName = clsPartyMaster.getAccountName("210010", partyCode);
        String partyName = clsPartyMaster.getAccountName(MAIN_ACCOUNT_CODE.getText().trim(), partyCode);
        //String partyAdd = clsPartyMaster.getAccountNameAddress("210010", partyCode);
        String partyAdd = clsPartyMaster.getAccountNameAddress(MAIN_ACCOUNT_CODE.getText(), partyCode);
        String intrestAmt = INTEREST_AMT.getText().trim();
        

        HashMap Parameters = new HashMap();
        Parameters.put("CURDATE", EITLERPGLOBAL.getCurrentDate());
        Parameters.put("DEBITMEMO_NO", dbmNo);
        Parameters.put("DEBITMEMO_DATE", dbmDt);
        Parameters.put("VOUCHER_DATE", dueDt);
        Parameters.put("PARTY_CODE", partyCode);
        Parameters.put("PARTY_NAME", partyName);
        //Parameters.put("ADDRESS", data.getStringValueFromDB("SELECT CONCAT(ADDRESS1,'  ',ADDRESS2) AS ADD1 FROM  DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE = '" + partyCode.trim() + "' AND MAIN_ACCOUNT_CODE = '210010'", FinanceGlobal.FinURL));
        Parameters.put("ADDRESS", data.getStringValueFromDB("SELECT CONCAT(ADDRESS1,'  ',ADDRESS2) AS ADD1 FROM  DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE = '" + partyCode.trim() + "' AND MAIN_ACCOUNT_CODE = '" + MAIN_ACCOUNT_CODE.getText() + "'", FinanceGlobal.FinURL));
        Parameters.put("T_INT_AMT", String.valueOf((data.getDoubleValueFromDB("SELECT  ROUND(SUM(INTEREST_AMT),2) AS INT_AMT FROM D_FIN_DEBITMEMO_RECEIPT_MAPPING WHERE DEBITMEMO_NO = '" + dbmNo + "' GROUP BY DEBITMEMO_NO", FinanceGlobal.FinURL))));
        double roundValue=data.getDoubleValueFromDB("SELECT ROUND(SUM(INTEREST_AMT),2) AS AMOUNT FROM D_FIN_DEBITMEMO_RECEIPT_MAPPING WHERE DEBITMEMO_NO = '" + dbmNo + "' GROUP BY DEBITMEMO_NO", FinanceGlobal.FinURL);
        EITLERP.FeltSales.FeltInvReport.NumWord num = new EITLERP.FeltSales.FeltInvReport.NumWord();        
        String valueinWords=num.convertNumToWord(Math.round(roundValue));
        Parameters.put("ROUNDED_AMOUNT", String.valueOf((data.getDoubleValueFromDB("SELECT ROUND(SUM(INTEREST_AMT),2) AS AMOUNT FROM D_FIN_DEBITMEMO_RECEIPT_MAPPING WHERE DEBITMEMO_NO = '" + dbmNo + "' GROUP BY DEBITMEMO_NO", FinanceGlobal.FinURL))));
        Parameters.put("RS_IN_WORDS",valueinWords+" +  Applicable Taxes" );
        Parameters.put("DESCRIPTION","Your account is being debited as per below details." );
        if(RECEIPT_VOUCHER_NO.getText().equals("")){
            Parameters.put("REMARKS_AUTO","" );
        }else{
            Parameters.put("REMARKS_AUTO","Interest on delayed payment on the above invoices." );
        }
        
        
                EITLERP.ReportRegister rpt = new EITLERP.ReportRegister(Parameters, Conn);
                String strSQL = "SELECT INVOICE_NO,INVOICE_DATE,INVOICE_DUE_DATE,VALUE_DATE,INVOICE_AMOUNT,DAYS,INTEREST_PER,INTEREST_AMT,COALESCE(REMARKS,'') AS REMARKS,COALESCE(PURPOSE,'') AS PURPOSE  FROM FINANCE.D_FIN_DEBITMEMO_RECEIPT_MAPPING WHERE DEBITMEMO_NO='" + dbmNo + "' AND DEBITMEMO_DATE='" + EITLERPGLOBAL.formatDateDB(dbmDt) + "'";
                System.out.println("Report :" + strSQL);
                rpt.setReportName("/EITLERP/Sales/DebitMemoReceiptMapping/rpt_Debitmemo_Auto.jrxml", 1, strSQL); //productlist is the name of my jasper file.
                rpt.callReport();
            } catch (Exception e) {
                e.printStackTrace();
            }
        
        
    }

}
