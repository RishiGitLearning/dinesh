/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */
package EITLERP.Sales.DebitMemoReceiptMapping;

/**
 *
 * @author nitin
 */
/*<APPLET CODE=frmInward.class HEIGHT=500 WIDTH=665></APPLET>*/
import javax.swing.*;
import java.awt.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import javax.swing.text.*;
import EITLERP.Utils.*;
import java.sql.*;
import java.net.*;
import EITLERP.*;
import EITLERP.Finance.*;

public class frmDMwithoutDNCancellation extends javax.swing.JApplet {

    private int EditMode = 0;
    private clsDMwithoutDNCancellation objDMCancellation;

    private boolean Updating = false;

    private String theDocNo = "";

    private EITLTableModel DataModel;
    private EITLTableModel DataModelA;
    private EITLTableModel DataModelHS;
    private EITLTableModel DataModelDMCancellation;

    private EITLTableCellRenderer Rend = new EITLTableCellRenderer();

    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbMainCodeTypeModel;
    private int SelHierarchyID = 0;
    private int lnFromID = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;
    public boolean PENDING_DOCUMENT = false;
    private boolean IsGenerating = false;

    public frmPendingApprovals frmPA;
    String cellLastValue = "";
    private boolean DoNotEvaluate = false;

    /**
     * Creates new form frmTemplate
     */
    public frmDMwithoutDNCancellation() {
        System.gc();
        setSize(900, 600);
        initComponents();

        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        GenerateCombos();

        objDMCancellation = new clsDMwithoutDNCancellation();

        SetMenuForRights();

        if (getName().equals("Link")) {

        } else {
            if (objDMCancellation.LoadData(EITLERPGLOBAL.gCompanyID)) {
                objDMCancellation.MoveLast();
                DisplayData();
                SetMenuForRights();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while loading data. Error is " + objDMCancellation.LastError);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        MainPanel = new javax.swing.JTabbedPane();
        Header = new javax.swing.JPanel();
        lblAccountID = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        lblSubCode = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        HeaderDetail = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtPartyCode = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableDM = new javax.swing.JTable();
        cmdGenerateDM = new javax.swing.JButton();
        cmdSelectAll = new javax.swing.JButton();
        cmdClearAll = new javax.swing.JButton();
        cmdNextPanel = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        lblPartyName = new javax.swing.JLabel();
        cmbMainCodeType = new javax.swing.JComboBox();
        jLabel25 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtTotalIntAmt = new javax.swing.JTextField();
        Detail = new javax.swing.JPanel();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdRemove = new javax.swing.JButton();
        txtRemarks = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cmdRemarksBig = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtTotalAmt = new javax.swing.JTextField();
        cmdBack2 = new javax.swing.JButton();
        cmdNext2 = new javax.swing.JButton();
        Approval = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdBack3 = new javax.swing.JButton();
        Status = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 900, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("Debit Memo without DebitNote Cancellation");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 900, 25);

        MainPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MainPanelMouseClicked(evt);
            }
        });

        Header.setLayout(null);

        lblAccountID.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountID.setText("Doc No. :");
        Header.add(lblAccountID);
        lblAccountID.setBounds(10, 18, 80, 21);

        txtDocNo.setEnabled(false);
        txtDocNo.setName("PARTY_ID"); // NOI18N
        txtDocNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDocNoKeyPressed(evt);
            }
        });
        Header.add(txtDocNo);
        txtDocNo.setBounds(90, 20, 120, 33);

        lblSubCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSubCode.setText("Date :");
        Header.add(lblSubCode);
        lblSubCode.setBounds(230, 20, 60, 21);

        txtDocDate.setEnabled(false);
        txtDocDate.setName("PARTY_CODE"); // NOI18N
        txtDocDate.setNextFocusableComponent(txtRemarks);
        Header.add(txtDocDate);
        txtDocDate.setBounds(290, 20, 120, 33);

        HeaderDetail.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        HeaderDetail.setLayout(null);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Party Code :");
        HeaderDetail.add(jLabel2);
        jLabel2.setBounds(10, 40, 100, 20);

        txtPartyCode.setEnabled(false);
        txtPartyCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusLost(evt);
            }
        });
        txtPartyCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyPressed(evt);
            }
        });
        HeaderDetail.add(txtPartyCode);
        txtPartyCode.setBounds(110, 40, 90, 20);

        TableDM.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableDM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableDMMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(TableDM);

        HeaderDetail.add(jScrollPane4);
        jScrollPane4.setBounds(10, 70, 840, 190);

        cmdGenerateDM.setText("Generate DM");
        cmdGenerateDM.setEnabled(false);
        cmdGenerateDM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGenerateDMActionPerformed(evt);
            }
        });
        HeaderDetail.add(cmdGenerateDM);
        cmdGenerateDM.setBounds(370, 10, 160, 20);

        cmdSelectAll.setText("Select All");
        cmdSelectAll.setEnabled(false);
        cmdSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSelectAllActionPerformed(evt);
            }
        });
        HeaderDetail.add(cmdSelectAll);
        cmdSelectAll.setBounds(10, 270, 120, 20);

        cmdClearAll.setText("Clear All");
        cmdClearAll.setEnabled(false);
        cmdClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdClearAllActionPerformed(evt);
            }
        });
        HeaderDetail.add(cmdClearAll);
        cmdClearAll.setBounds(160, 270, 120, 20);

        cmdNextPanel.setText("Next");
        cmdNextPanel.setEnabled(false);
        cmdNextPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextPanelActionPerformed(evt);
            }
        });
        HeaderDetail.add(cmdNextPanel);
        cmdNextPanel.setBounds(760, 270, 90, 33);
        HeaderDetail.add(jLabel5);
        jLabel5.setBounds(210, 20, 310, 0);

        lblPartyName.setText(".....");
        HeaderDetail.add(lblPartyName);
        lblPartyName.setBounds(220, 40, 400, 20);

        cmbMainCodeType.setEnabled(false);
        HeaderDetail.add(cmbMainCodeType);
        cmbMainCodeType.setBounds(110, 10, 170, 20);

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel25.setText("Main Code :");
        HeaderDetail.add(jLabel25);
        jLabel25.setBounds(10, 10, 100, 20);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Total DM Interest Amt :");
        HeaderDetail.add(jLabel3);
        jLabel3.setBounds(410, 270, 170, 30);

        txtTotalIntAmt.setEditable(false);
        txtTotalIntAmt.setBackground(java.awt.Color.white);
        txtTotalIntAmt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        HeaderDetail.add(txtTotalIntAmt);
        txtTotalIntAmt.setBounds(580, 270, 120, 33);

        Header.add(HeaderDetail);
        HeaderDetail.setBounds(10, 60, 860, 310);

        MainPanel.addTab("Header Information", Header);

        Detail.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Detail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DetailMouseClicked(evt);
            }
        });
        Detail.setLayout(null);
        Detail.add(jTextArea2);
        jTextArea2.setBounds(177, 29, 0, 21);

        jLabel1.setText("Invoice Information :");
        Detail.add(jLabel1);
        jLabel1.setBounds(10, 10, 180, 21);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        Detail.add(jScrollPane1);
        jScrollPane1.setBounds(12, 33, 850, 270);

        cmdRemove.setMnemonic('A');
        cmdRemove.setText("Remove");
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        Detail.add(cmdRemove);
        cmdRemove.setBounds(20, 310, 100, 33);

        txtRemarks.setEnabled(false);
        Detail.add(txtRemarks);
        txtRemarks.setBounds(100, 350, 610, 20);

        jLabel6.setText("Remarks :");
        Detail.add(jLabel6);
        jLabel6.setBounds(10, 350, 80, 21);

        cmdRemarksBig.setText("...");
        cmdRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemarksBigActionPerformed(evt);
            }
        });
        Detail.add(cmdRemarksBig);
        cmdRemarksBig.setBounds(720, 350, 33, 21);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Total Interest Amt :");
        Detail.add(jLabel4);
        jLabel4.setBounds(280, 310, 170, 20);

        txtTotalAmt.setEditable(false);
        txtTotalAmt.setBackground(java.awt.Color.white);
        txtTotalAmt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        Detail.add(txtTotalAmt);
        txtTotalAmt.setBounds(450, 310, 120, 30);

        cmdBack2.setText("<<Back");
        cmdBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack2ActionPerformed(evt);
            }
        });
        Detail.add(cmdBack2);
        cmdBack2.setBounds(650, 310, 100, 33);

        cmdNext2.setText("Next >>");
        cmdNext2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext2ActionPerformed(evt);
            }
        });
        Detail.add(cmdNext2);
        cmdNext2.setBounds(760, 310, 100, 33);

        MainPanel.addTab("Cancellation Information", Detail);

        Approval.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Approval.setLayout(null);

        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel31.setText("Hierarchy :");
        Approval.add(jLabel31);
        jLabel31.setBounds(10, 18, 85, 21);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        Approval.add(cmbHierarchy);
        cmbHierarchy.setBounds(100, 14, 184, 33);

        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel32.setText("From :");
        Approval.add(jLabel32);
        jLabel32.setBounds(10, 52, 85, 21);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Approval.add(txtFrom);
        txtFrom.setBounds(100, 50, 182, 33);

        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel35.setText("Remarks :");
        Approval.add(jLabel35);
        jLabel35.setBounds(10, 82, 85, 21);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Approval.add(txtFromRemarks);
        txtFromRemarks.setBounds(100, 80, 468, 33);

        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Your Action :");
        Approval.add(jLabel36);
        jLabel36.setBounds(10, 120, 85, 21);

        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel7.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel7.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 25);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel7.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel7.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        jPanel7.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Approval.add(jPanel7);
        jPanel7.setBounds(100, 120, 182, 100);

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel33.setText("Send To :");
        Approval.add(jLabel33);
        jLabel33.setBounds(10, 232, 85, 21);

        cmbSendTo.setEnabled(false);
        Approval.add(cmbSendTo);
        cmbSendTo.setBounds(100, 228, 184, 33);

        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Remarks :");
        Approval.add(jLabel34);
        jLabel34.setBounds(10, 264, 85, 21);

        txtToRemarks.setEnabled(false);
        Approval.add(txtToRemarks);
        txtToRemarks.setBounds(100, 260, 516, 33);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Approval.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(575, 80, 33, 21);

        cmdBack3.setText("<<Back");
        cmdBack3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack3ActionPerformed(evt);
            }
        });
        Approval.add(cmdBack3);
        cmdBack3.setBounds(518, 310, 100, 33);

        MainPanel.addTab("Approval", Approval);

        Status.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Status.setLayout(null);

        jLabel26.setText("Document Approval Status :");
        Status.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 21);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        Status.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 850, 144);

        lblDocumentHistory.setText("Document Update History :");
        Status.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 191, 182, 21);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        Status.add(jScrollPane3);
        jScrollPane3.setBounds(13, 207, 700, 148);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        Status.add(cmdViewHistory);
        cmdViewHistory.setBounds(730, 240, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        Status.add(cmdNormalView);
        cmdNormalView.setBounds(730, 270, 132, 24);

        cmdPreviewA.setText("Preview Report");
        Status.add(cmdPreviewA);
        cmdPreviewA.setBounds(730, 210, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        Status.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(730, 300, 132, 24);

        txtAuditRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtAuditRemarks.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        txtAuditRemarks.setEnabled(false);
        Status.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(730, 330, 129, 23);

        MainPanel.addTab("Status", Status);

        getContentPane().add(MainPanel);
        MainPanel.setBounds(2, 66, 890, 410);
        MainPanel.getAccessibleContext().setAccessibleName("Account Details");
        MainPanel.getAccessibleContext().setAccessibleDescription("Account Details");
    }// </editor-fold>//GEN-END:initComponents

    private void cmdRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdRemarksBigActionPerformed

    private void txtPartyCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusLost
        // TODO add your handling code here:
        if (!txtPartyCode.getText().trim().equals("") && !EITLERPGLOBAL.getCombostrCode(cmbMainCodeType).equals("")) {
            String PartyName = data.getStringValueFromDB("SELECT PARTY_NAME FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE = '" + txtPartyCode.getText().trim() + "' AND MAIN_ACCOUNT_CODE = '" + EITLERPGLOBAL.getCombostrCode(cmbMainCodeType) + "' AND APPROVED=1 AND CANCELLED=0 ");
            lblPartyName.setText(PartyName);
        }
    }//GEN-LAST:event_txtPartyCodeFocusLost

    private void txtPartyCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyPressed
        // TODO add your handling code here:
        if (!EITLERPGLOBAL.getCombostrCode(cmbMainCodeType).equals("")) {
            if (evt.getKeyCode() == 112) {
                LOV aList = new LOV();

                aList.SQL = "SELECT PARTY_CODE,PARTY_NAME FROM D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = '" + EITLERPGLOBAL.getCombostrCode(cmbMainCodeType) + "' AND APPROVED = 1 AND CANCELLED=0";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;
                aList.UseSpecifiedConn = true;
                aList.dbURL = EITLERPGLOBAL.DatabaseURL;

                if (aList.ShowLOV()) {
                    txtPartyCode.setText(aList.ReturnVal);
                    lblPartyName.setText(clsPartyMaster.getAccountName("", txtPartyCode.getText()));
                }

            }
        }
    }//GEN-LAST:event_txtPartyCodeKeyPressed

    private void txtDocNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDocNoKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDocNoKeyPressed

    private void cmdNextPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextPanelActionPerformed
        // TODO add your handling code here:

        boolean flag = false;
        for (int i = 0; i <= TableDM.getRowCount(); i++) {
            if (DataModelDMCancellation.getValueAt(i, 0).toString().equals("true")) {
                flag = true;
                break;
            }
        }
        if (flag == false) {
            JOptionPane.showMessageDialog(null, "Please Select DebitMemo");
            return;
        }
        FormatGrid();
        int cnt = 1;
        for (int i = 0; i <= TableDM.getRowCount(); i++) {
            Object[] rowData = new Object[10];

            if (DataModelDMCancellation.getValueAt(i, 0).toString().equals("true")) {
                rowData[0] = Integer.toString(cnt++);
                rowData[1] = DataModelDMCancellation.getValueAt(i, 2);
                rowData[2] = DataModelDMCancellation.getValueAt(i, 3);
                rowData[3] = DataModelDMCancellation.getValueAt(i, 4);
                rowData[4] = DataModelDMCancellation.getValueAt(i, 5);
                rowData[5] = DataModelDMCancellation.getValueAt(i, 6).toString();
                rowData[6] = DataModelDMCancellation.getValueAt(i, 7).toString();

                DataModel.addRow(rowData);
            }
            MainPanel.setSelectedIndex(1);
        }
        CalculateTotal("CANCELLATION");
        MainPanel.setEnabledAt(0, false);
        MainPanel.setEnabledAt(1, true);
        MainPanel.setEnabledAt(2, false);
        MainPanel.setEnabledAt(3, false);
    }//GEN-LAST:event_cmdNextPanelActionPerformed

    private void cmdClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdClearAllActionPerformed
        // TODO add your handling code here:
        for (int i = 0; i <= TableDM.getRowCount(); i++) {
            DataModelDMCancellation.setValueAt(Boolean.valueOf(false), i, 0);
        }
        CalculateTotal("SELECTION");
    }//GEN-LAST:event_cmdClearAllActionPerformed

    private void cmdSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSelectAllActionPerformed
        // TODO add your handling code here:
        for (int i = 0; i <= TableDM.getRowCount(); i++) {
            DataModelDMCancellation.setValueAt(Boolean.valueOf(true), i, 0);
        }
        CalculateTotal("SELECTION");
    }//GEN-LAST:event_cmdSelectAllActionPerformed

    private void cmdGenerateDMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGenerateDMActionPerformed
        // TODO add your handling code here:

        if (txtPartyCode.getText().trim().equals("") || EITLERPGLOBAL.getCombostrCode(cmbMainCodeType).equals("")) {
            JOptionPane.showMessageDialog(null, "Select main code and insert party code");
            return;
        }

        FormatGridInvoices();
        InvoiceList();
        CalculateTotal("SELECTION");
    }//GEN-LAST:event_cmdGenerateDMActionPerformed

    private void MainPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MainPanelMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_MainPanelMouseClicked

    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        if (Table.getRowCount() > 0) {
            DataModel.removeRow(Table.getSelectedRow());
            UpdateSrNo();
        }
        CalculateTotal("CANCELLATION");
    }//GEN-LAST:event_cmdRemoveActionPerformed

    private void DetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DetailMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_DetailMouseClicked

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if (TableHS.getRowCount() > 0 && TableHS.getSelectedRow() >= 0) {
            txtAuditRemarks.setText((String) TableHS.getValueAt(TableHS.getSelectedRow(), 4));
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText = txtAuditRemarks;
            bigEdit.ShowEdit();
        }

    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        objDMCancellation.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveFirst();
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        objDMCancellation.ShowHistory(EITLERPGLOBAL.gCompanyID, objDMCancellation.getAttribute("DOC_NO").getString());
        MoveFirst();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);

    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }

    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        SetupApproval();

        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedUserCombo();
            if (ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID, clsDMwithoutDNCancellation.ModuleID, objDMCancellation.getAttribute("DOC_NO").getString())) {
                cmbSendTo.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateFromCombo();
        }

    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();

    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {

            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        objDMCancellation.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
        MainPanel.setSelectedIndex(0);
        MainPanel.setEnabledAt(0, true);
        MainPanel.setEnabledAt(1, true);
        MainPanel.setEnabledAt(2, true);
        MainPanel.setEnabledAt(3, true);
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this record ?", "SDML ERP", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void TableDMMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableDMMouseClicked
        // TODO add your handling code here:
        CalculateTotal("SELECTION");
    }//GEN-LAST:event_TableDMMouseClicked

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
        CalculateTotal("CANCELLATION");
    }//GEN-LAST:event_TableMouseClicked

    private void cmdBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack2ActionPerformed
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
            MainPanel.setSelectedIndex(0);
            MainPanel.setEnabledAt(0, true);
            MainPanel.setEnabledAt(1, false);
            MainPanel.setEnabledAt(2, false);
            MainPanel.setEnabledAt(3, false);
            FormatGrid();
        } else {
            MainPanel.setSelectedIndex(0);
        }
    }//GEN-LAST:event_cmdBack2ActionPerformed

    private void cmdNext2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext2ActionPerformed
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
            MainPanel.setSelectedIndex(2);
            MainPanel.setEnabledAt(0, false);
            MainPanel.setEnabledAt(1, false);
            MainPanel.setEnabledAt(2, true);
            MainPanel.setEnabledAt(3, true);
        } else {
            MainPanel.setSelectedIndex(2);
        }
    }//GEN-LAST:event_cmdNext2ActionPerformed

    private void cmdBack3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack3ActionPerformed
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
            MainPanel.setSelectedIndex(1);
            MainPanel.setEnabledAt(0, false);
            MainPanel.setEnabledAt(1, true);
            MainPanel.setEnabledAt(2, false);
            MainPanel.setEnabledAt(3, false);
        } else {
            MainPanel.setSelectedIndex(1);
        }
    }//GEN-LAST:event_cmdBack3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Approval;
    private javax.swing.JPanel Detail;
    private javax.swing.JPanel Header;
    private javax.swing.JPanel HeaderDetail;
    private javax.swing.JTabbedPane MainPanel;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel Status;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableDM;
    private javax.swing.JTable TableHS;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbMainCodeType;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdBack3;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdClearAll;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdGenerateDM;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext2;
    private javax.swing.JButton cmdNextPanel;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemarksBig;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdSelectAll;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JLabel lblAccountID;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblPartyName;
    private javax.swing.JLabel lblSubCode;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtTotalAmt;
    private javax.swing.JTextField txtTotalIntAmt;
    // End of variables declaration//GEN-END:variables

    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }

    private void SetFields(boolean pStat) {

        cmbMainCodeType.setEnabled(pStat);
        txtPartyCode.setEnabled(pStat);
        cmdGenerateDM.setEnabled(pStat);
        cmdSelectAll.setEnabled(pStat);
        cmdClearAll.setEnabled(pStat);
        cmbMainCodeType.setEnabled(pStat);
        cmdNextPanel.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);

        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        DataModel.TableReadOnly(!pStat);

        SetupApproval();
    }

    private void ClearFields() {

        txtDocNo.setText("");
        txtDocDate.setText("");
        txtRemarks.setText("");
        txtPartyCode.setText("");
        lblPartyName.setText("");
        txtTotalIntAmt.setText("");
        cmbMainCodeType.setSelectedIndex(0);

        FormatGrid();
        FormatGridInvoices();
        FormatGridA();
        FormatGridHS();
    }

    //Didplay data on the Screen
    private void DisplayData() {

        //=========== Color Indication ===============//
        try {
            if (EditMode == 0) {
                if (objDMCancellation.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                }

                if (objDMCancellation.getAttribute("APPROVED").getInt() != 1) {
                    lblTitle.setBackground(Color.GRAY);
                }

                if (objDMCancellation.getAttribute("CANCELLED").getInt() == 1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
        } catch (Exception c) {

        }
        //============================================//

        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            int ModuleID = clsDMwithoutDNCancellation.ModuleID;

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleID)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        ClearFields();

        txtDocNo.setText(objDMCancellation.getAttribute("DOC_NO").getString());
        txtDocDate.setText(EITLERPGLOBAL.formatDate(objDMCancellation.getAttribute("DOC_DATE").getString()));
        txtPartyCode.setText(objDMCancellation.getAttribute("PARTY_CODE").getString());
        EITLERPGLOBAL.setComboIndex(cmbMainCodeType, objDMCancellation.getAttribute("MAIN_ACCOUNT_CODE").getString());
        txtRemarks.setText(objDMCancellation.getAttribute("REMARKS").getString());
        lblTitle.setText("Debit Memo without DebitNote Cancellation - " + txtDocNo.getText());

        //************ Misc. Display *****************//
        txtToRemarks.setText("");
        SetupApproval();

        EITLERPGLOBAL.setComboIndex(cmbHierarchy, objDMCancellation.getAttribute("HIERARCHY_ID").getInt());

        //======== Generating Grid for Document Approval Flow ========//
        FormatGridA();
        HashMap List = new HashMap();
        String DocNo = objDMCancellation.getAttribute("DOC_NO").getString();
        List = ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, clsDMwithoutDNCancellation.ModuleID, DocNo);
        for (int i = 1; i <= List.size(); i++) {
            clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
            Object[] rowData = new Object[10];

            rowData[0] = Integer.toString(i);
            rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
            rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
            rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
            rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
            rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
            rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

            DataModelA.addRow(rowData);
        }
        //============================================================//

        //=========================== Audit Trail ===========================//
        FormatGridHS();

        HashMap History = clsDMwithoutDNCancellation.getHistoryList(EITLERPGLOBAL.gCompanyID, objDMCancellation.getAttribute("DOC_NO").getString());
        for (int i = 1; i <= History.size(); i++) {
            clsDMwithoutDNCancellation ObjHistory = (clsDMwithoutDNCancellation) History.get(Integer.toString(i));
            Object[] rowData = new Object[5];
            Object o = ObjHistory.getAttribute("UPDATED_BY").getObj();
            String test = ObjHistory.getAttribute("UPDATED_BY").getObj().toString();
            rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
            //rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(long)ObjHistory.getAttribute("UPDATED_BY").getVal());
            rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, Long.parseLong(ObjHistory.getAttribute("UPDATED_BY").getObj().toString()));
            rowData[2] = ObjHistory.getAttribute("ENTRY_DATE").getString();

            String ApprovalStatus = "";

            if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                ApprovalStatus = "Approved";
            }

            if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                ApprovalStatus = "Final Approved";
            }

            if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                ApprovalStatus = "Waiting";
            }

            if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                ApprovalStatus = "Rejected";
            }

            if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                ApprovalStatus = "Pending";
            }

            if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                ApprovalStatus = "Skiped";
            }

            rowData[3] = ApprovalStatus;
            rowData[4] = (String) ObjHistory.getAttribute("APPROVER_REMARKS").getObj();

            DataModelHS.addRow(rowData);
        }
        //=========================== Audit Trail Over ===========================//

        FormatGrid();
        FormatGridInvoices();
        for (int i = 1; i <= objDMCancellation.colItems.size(); i++) {
            clsDMwithoutDNCancellationItem objItem = (clsDMwithoutDNCancellationItem) objDMCancellation.colItems.get(Integer.toString(i));
            //-------------------------------------

            Object[] rowData = new Object[1];
            DataModel.addRow(rowData);
            int NewRow = Table.getRowCount() - 1;

            //FOR THE DETAIL TABLE SECOND GRID
            DataModel.setValueByVariable("SR_NO", Integer.toString(i), NewRow);
            DataModel.setValueByVariable("DEBITMEMO_NO", objItem.getAttribute("DEBITMEMO_NO").getString(), NewRow);
            DataModel.setValueByVariable("DEBITMEMO_DATE", EITLERPGLOBAL.formatDate(objItem.getAttribute("DEBITMEMO_DATE").getString()), NewRow);
            DataModel.setValueByVariable("INVOICE_NO", objItem.getAttribute("INVOICE_NO").getString(), NewRow);
            DataModel.setValueByVariable("INVOICE_DATE", EITLERPGLOBAL.formatDate(objItem.getAttribute("INVOICE_DATE").getString()), NewRow);
            DataModel.setValueByVariable("INVOICE_AMOUNT", Double.toString(objItem.getAttribute("INVOICE_AMOUNT").getDouble()), NewRow);
            DataModel.setValueByVariable("INTEREST_AMOUNT", Double.toString(objItem.getAttribute("INTEREST_AMOUNT").getDouble()), NewRow);
            //-------------------------------------
        }
        CalculateTotal("CANCELLATION");
        //********************************************//
    }

    //Sets data to the Class Object
    private void SetData() {
        objDMCancellation.setAttribute("PREFIX", SelPrefix);
        objDMCancellation.setAttribute("SUFFIX", SelSuffix);
        objDMCancellation.setAttribute("FFNO", FFNo);

        objDMCancellation.setAttribute("COMPANY_ID", EITLERPGLOBAL.gCompanyID);
        objDMCancellation.setAttribute("DOC_NO", txtDocNo.getText());
        objDMCancellation.setAttribute("DOC_DATE", txtDocDate.getText());
        objDMCancellation.setAttribute("REMARKS", txtRemarks.getText().trim());

        //----- Update Approval Specific Fields -----------//
        objDMCancellation.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        objDMCancellation.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        objDMCancellation.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        objDMCancellation.setAttribute("FROM_REMARKS", txtToRemarks.getText());
        objDMCancellation.setAttribute("MAIN_ACCOUNT_CODE", EITLERPGLOBAL.getCombostrCode(cmbMainCodeType));
        objDMCancellation.setAttribute("PARTY_CODE", txtPartyCode.getText().trim());
        objDMCancellation.setAttribute("REJECTED_REASON", "");

        if (OpgApprove.isSelected()) {
            objDMCancellation.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            objDMCancellation.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            objDMCancellation.setAttribute("APPROVAL_STATUS", "R");
            objDMCancellation.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
            objDMCancellation.setAttribute("REJECTED_REASON", txtToRemarks.getText().trim());
        }

        if (OpgHold.isSelected()) {
            objDMCancellation.setAttribute("APPROVAL_STATUS", "H");
        }

        if (EditMode == EITLERPGLOBAL.ADD) {
            objDMCancellation.setAttribute("CREATED_BY", EITLERPGLOBAL.gUserID);
            objDMCancellation.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDate());
            objDMCancellation.setAttribute("MODIFIED_BY", "");
            objDMCancellation.setAttribute("MODIFIED_DATE", "0000-00-00");
        } else {
            objDMCancellation.setAttribute("CREATED_BY", "");
            objDMCancellation.setAttribute("CREATED_DATE", "0000-00-00");
            objDMCancellation.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gUserID);
            objDMCancellation.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDate());
        }

        objDMCancellation.colItems.clear();

        for (int i = 0; i < Table.getRowCount(); i++) {
            clsDMwithoutDNCancellationItem objItem = new clsDMwithoutDNCancellationItem();

            objItem.setAttribute("SR_NO", i + 1);
            objItem.setAttribute("DEBITMEMO_NO", DataModel.getValueByVariable("DEBITMEMO_NO", i));
            objItem.setAttribute("DEBITMEMO_DATE", DataModel.getValueByVariable("DEBITMEMO_DATE", i));
            objItem.setAttribute("INVOICE_NO", DataModel.getValueByVariable("INVOICE_NO", i));
            objItem.setAttribute("INVOICE_DATE", DataModel.getValueByVariable("INVOICE_DATE", i));
            objItem.setAttribute("INVOICE_AMOUNT", Double.parseDouble(DataModel.getValueByVariable("INVOICE_AMOUNT", i)));
            objItem.setAttribute("INTEREST_AMOUNT", Double.parseDouble(DataModel.getValueByVariable("INTEREST_AMOUNT", i)));

            objDMCancellation.colItems.put(Integer.toString(objDMCancellation.colItems.size() + 1), objItem);
        }
        //--------------------------------------------------------------------------------------------------//

    }

    private void SetMenuForRights() {

        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 12621)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 12622)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 12623)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 12624)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }

    }

    private void Add() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        //Now Generate new document no.
        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = clsDMwithoutDNCancellation.ModuleID;

        if (aList.ShowList()) {
            EditMode = EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix = aList.Prefix; //Selected Prefix;
            SelSuffix = aList.Suffix;
            FFNo = aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, clsDMwithoutDNCancellation.ModuleID, FFNo, false));
            txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
            txtDocDate.requestFocus();

            lblTitle.setText("Debit Memo without DebitNote Cancellation - " + txtDocNo.getText());
            lblTitle.setBackground(Color.GRAY);
        } else {
            JOptionPane.showMessageDialog(null, "You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }

    }

    private void Edit() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//

        String lDocNo = objDMCancellation.getAttribute("DOC_NO").getString();

        if (objDMCancellation.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {

            EITLERPGLOBAL.ChangeCursorToWait(this);

            EditMode = EITLERPGLOBAL.EDIT;
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            SetupApproval();
            //----------------//

            if (ApprovalFlow.IsCreator(clsDMwithoutDNCancellation.ModuleID, lDocNo) || clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 12622)) {
                SetFields(true);
            } else {
                EnableApproval();
            }

            SetupApproval();
            DisableToolbar();
            txtDocDate.requestFocus();

            EITLERPGLOBAL.ChangeCursorToDefault(this);
        } else {
            JOptionPane.showMessageDialog(null, "You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }

    }

    private void Delete() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//

        if (objDMCancellation.Delete(EITLERPGLOBAL.gNewUserID)) {
            MoveLast();
        }
    }

    private void Save() {

        if (!Validate()) {
            return;
        }

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Please select the hierarchy.");
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(null, "Please select the Approval Action");
            return;
        }

        if (EditMode == EITLERPGLOBAL.ADD && !clsHierarchy.IsCreator(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.getComboCode(cmbHierarchy), EITLERPGLOBAL.gUserID)) {
            JOptionPane.showMessageDialog(null, "You can not add record. You are not creator");
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter the remarks for rejection");
            return;
        }

        EITLERPGLOBAL.ChangeCursorToWait(this);

        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (objDMCancellation.Insert()) {
                MoveLast();
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, " " + objDMCancellation.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (objDMCancellation.Update()) {
                //Nothing to do
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, " " + objDMCancellation.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);

        try {
            frmPA.RefreshView();
        } catch (Exception e) {
        }

    }

    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.Sales.DebitMemoReceiptMapping.frmDMwithoutDNCancellationFind", true);
        frmDMwithoutDNCancellationFind ObjReturn = (frmDMwithoutDNCancellationFind) ObjLoader.getObj();

        if (ObjReturn.Cancelled == false) {
            if (!objDMCancellation.Filter(ObjReturn.strQuery, EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null, "No records found.");
            }
            MoveFirst();
        }
    }

    public void Find(String pDocNo) {
        objDMCancellation.Filter(" WHERE DOC_NO='" + pDocNo + "' ", EITLERPGLOBAL.gCompanyID);
        SetMenuForRights();
        DisplayData();
    }

    public void FindWaiting() {
        objDMCancellation.Filter(" WHERE DOC_NO IN (SELECT H.DOC_NO FROM FINANCE.D_FIN_DEBITMEMO_CANCELLATION_HEADER H, DINESHMILLS.D_COM_DOC_DATA D WHERE H.DOC_NO=D.DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=100 AND CANCELLED=0) ", EITLERPGLOBAL.gCompanyID);
        SetMenuForRights();
        DisplayData();
    }

    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objDMCancellation.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objDMCancellation.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objDMCancellation.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        objDMCancellation.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    public void FindEx(int pCompanyID, String pDocNo) {
        objDMCancellation.FilterEx(" WHERE COMPANY_ID=" + Integer.toString(pCompanyID) + " AND DOC_NO='" + pDocNo + "' ", pCompanyID);
        objDMCancellation.MoveFirst();
        DisplayData();
    }

    private void FormatGridA() {
        DataModelA = new EITLTableModel();

        TableA.removeAll();
        TableA.setModel(DataModelA);

        //Set the table Readonly
        DataModelA.TableReadOnly(true);

        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");

        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);

    }

    private void FormatGridHS() {
        DataModelHS = new EITLTableModel();

        TableHS.removeAll();
        TableHS.setModel(DataModelHS);

        //Set the table Readonly
        DataModelHS.TableReadOnly(true);

        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");

        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }

    private void SetupApproval() {

        /*if(cmbHierarchy.getItemCount()>1) {
         cmbHierarchy.setEnabled(true);
         }*/
        //In Edit Mode Hierarchy Should be disabled
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {

            int FromUserID = ApprovalFlow.getFromID((int) EITLERPGLOBAL.gCompanyID, clsDMwithoutDNCancellation.ModuleID, objDMCancellation.getAttribute("DOC_NO").getString());
            lnFromID = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = ApprovalFlow.getFromRemarks((int) EITLERPGLOBAL.gCompanyID, clsDMwithoutDNCancellation.ModuleID, FromUserID, objDMCancellation.getAttribute("DOC_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }

        if (EditMode == 0) {
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }

    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = ApprovalFlow.getRemainingUsers((int) EITLERPGLOBAL.gCompanyID, clsDMwithoutDNCancellation.ModuleID, objDMCancellation.getAttribute("DOC_NO").getString());
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
        }

    }

    private void GenerateRejectedUserCombo() {
        HashMap List = new HashMap();
        HashMap DeptList = new HashMap();
        HashMap DeptUsers = new HashMap();

        //----- Generate cmbType ------- //
        cmbToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= List.size(); i++) {
            clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

            /// NEW CODE ///
            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {
                if (OpgApprove.isSelected()) {
                    IncludeUser = ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, clsDMwithoutDNCancellation.ModuleID, objDMCancellation.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, clsDMwithoutDNCancellation.ModuleID, objDMCancellation.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            } else {
                if ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///

        }
        //------------------------------ //

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, clsDMwithoutDNCancellation.ModuleID, objDMCancellation.getAttribute("DOC_NO").getString());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }

    }

    private void GenerateCombos() {

        ComboData aData = new ComboData();
        try {
            //Generates Hierarchy Combo Boxes
            HashMap List = new HashMap();
            String strCondition = "";
            ResultSet rsTmp;

            cmbHierarchyModel = new EITLComboModel();
            cmbHierarchy.removeAllItems();
            cmbHierarchy.setModel(cmbHierarchyModel);

            List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + clsDMwithoutDNCancellation.ModuleID);

            if (EditMode == EITLERPGLOBAL.EDIT) {
                List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + clsDMwithoutDNCancellation.ModuleID);
            }
            for (int i = 1; i <= List.size(); i++) {
                clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
                aData = new ComboData();
                aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
                aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
                cmbHierarchyModel.addElement(aData);
            }
        } catch (Exception e) {

        }
        //------------------------------//

        //-------Main Code Type --------//
        cmbMainCodeTypeModel = new EITLComboModel();
        cmbMainCodeType.removeAllItems();
        cmbMainCodeType.setModel(cmbMainCodeTypeModel);

        aData = new ComboData();
        aData.strCode = "";
        aData.Text = "Select Main Code";
        cmbMainCodeTypeModel.addElement(aData);

        aData = new ComboData();
        aData.strCode = "210027";
        aData.Text = "Suiting";
        cmbMainCodeTypeModel.addElement(aData);

        aData = new ComboData();
        aData.strCode = "210010";
        aData.Text = "Felt";
        cmbMainCodeTypeModel.addElement(aData);

        //------------------------------//
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //========== Setting Up Header Fields ================//
        String FieldName = "";
        int SelHierarchy = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        for (int i = 0; i < Header.getComponentCount() - 1; i++) {
            if (Header.getComponent(i).getName() != null) {

                FieldName = Header.getComponent(i).getName();
                if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {

                    Header.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//
    }

    private void FormatGrid() {

        cmdRemove.requestFocus();

        DataModel = new EITLTableModel();
        Table.removeAll();

        Table.setModel(DataModel);
        TableColumnModel ColModel = Table.getColumnModel();
        Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr."); //0
        DataModel.addColumn("DebitMemo No"); //1
        DataModel.addColumn("DebitMemo Date"); //2
        DataModel.addColumn("Invoice No"); //3
        DataModel.addColumn("Invoice Date"); //4
        DataModel.addColumn("Invoice Amount"); //5
        DataModel.addColumn("Interest Amount"); //6

        DataModel.SetVariable(0, "SR_NO"); //0 - Read Only
        DataModel.SetVariable(1, "DEBITMEMO_NO"); //1 - Read Only
        DataModel.SetVariable(2, "DEBITMEMO_DATE"); //2 - Read Only
        DataModel.SetVariable(3, "INVOICE_NO"); //3 - Read Only
        DataModel.SetVariable(4, "INVOICE_DATE"); //4
        DataModel.SetVariable(5, "INVOICE_AMOUNT"); //5
        DataModel.SetVariable(6, "INTEREST_AMOUNT"); //6

        for (int i = 0; i <= 6; i++) {
            DataModel.SetReadOnly(i);
        }

    }

    private void FormatGridInvoices() {

        DataModelDMCancellation = new EITLTableModel();
        TableDM.removeAll();

        TableDM.setModel(DataModelDMCancellation);
        TableColumnModel ColModel = TableDM.getColumnModel();
        TableDM.setAutoResizeMode(TableDM.AUTO_RESIZE_OFF);

        DataModelDMCancellation.addColumn("Select");
        DataModelDMCancellation.addColumn("Sr."); //0
        DataModelDMCancellation.addColumn("DebitMemo No"); //1
        DataModelDMCancellation.addColumn("DebitMemo Date"); //2
        DataModelDMCancellation.addColumn("Invoice No"); //3
        DataModelDMCancellation.addColumn("Invoice Date"); //4
        DataModelDMCancellation.addColumn("Invoice Amount"); //5
        DataModelDMCancellation.addColumn("Interest Amount"); //6

        Rend.setCustomComponent(0, "CheckBox");
        TableDM.getColumnModel().getColumn(0).setCellRenderer(Rend);
        TableDM.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));

        DataModelDMCancellation.SetVariable(0, "");
        DataModelDMCancellation.SetVariable(1, "SR_NO"); //0 - Read Only
        DataModelDMCancellation.SetVariable(2, "DEBITMEMO_NO"); //1 - Read Only
        DataModelDMCancellation.SetVariable(3, "DEBITMEMO_DATE"); //2 - Read Only
        DataModelDMCancellation.SetVariable(4, "INVOICE_NO"); //3 - Read Only
        DataModelDMCancellation.SetVariable(5, "INVOICE_DATE"); //4
        DataModelDMCancellation.SetVariable(6, "INVOICE_AMOUNT"); //5
        DataModelDMCancellation.SetVariable(7, "INTEREST_AMOUNT"); //6

        DataModelDMCancellation.TableReadOnly(false);

        for (int i = 1; i <= 7; i++) {
            DataModelDMCancellation.SetReadOnly(i);
        }

    }

    private boolean Validate() {

        if (txtPartyCode.getText().trim().equals("") || EITLERPGLOBAL.getCombostrCode(cmbMainCodeType).equals("")) {
            JOptionPane.showMessageDialog(null, "Select main code and insert party code");
            return false;
        }

        for (int i = 0; i < Table.getRowCount(); i++) {
            if (!data.IsRecordExist("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='" + EITLERPGLOBAL.getCombostrCode(cmbMainCodeType) + "' AND PARTY_CODE='" + txtPartyCode.getText().trim() + "' AND APPROVED=1 AND CANCELLED=0 ", FinanceGlobal.FinURL)) {
                JOptionPane.showMessageDialog(null, "Party code is wrongly inputed.");
                return false;
            }
        }

        if (OpgReject.isSelected() && txtToRemarks.equals("")) {
            JOptionPane.showMessageDialog(null, "Please insert rejection reason.");
            return false;
        }

        return true;
    }

    private void InvoiceList() {
        try {
            //suiting invoice_tyepe 1  payment code(2,4,8) felt 2 (2,8)

            String MainAccountCode = "";
            String MainCode = String.valueOf(EITLERPGLOBAL.getCombostrCode(cmbMainCodeType));
            if (String.valueOf(EITLERPGLOBAL.getCombostrCode(cmbMainCodeType)).equals("210027")) {
                MainAccountCode = "210027";
            } else if (String.valueOf(EITLERPGLOBAL.getCombostrCode(cmbMainCodeType)).equals("210010")) {
                MainAccountCode = "210010";
            }

            String Sql = "SELECT DEBITMEMO_NO,DEBITMEMO_DATE,INVOICE_NO,INVOICE_DATE,INVOICE_AMOUNT,SUM(INTEREST_AMT) AS INTEREST_AMT ";
            Sql += "FROM FINANCE.D_FIN_DEBITMEMO_RECEIPT_MAPPING ";
            Sql += "WHERE DB_PARTY_CODE ='" + txtPartyCode.getText().trim() + "' ";
            Sql += "AND MAIN_ACCOUNT_CODE ='" + MainAccountCode + "' ";
            Sql += "AND LENGTH(COALESCE(DEBITNOTE_VOUCHER_NO,''))=0 ";
            Sql += "AND APPROVED=1 AND CANCELLED=0 ";
            Sql += "GROUP BY DEBITMEMO_NO,DEBITMEMO_DATE,INVOICE_NO,INVOICE_DATE ";
            Sql += "ORDER BY DEBITMEMO_NO,DEBITMEMO_DATE,INVOICE_NO,INVOICE_DATE ";

            ResultSet rsDM = data.getResult(Sql);
            int SrNo = 0;
            if (rsDM.getRow() > 0) {
                while (!rsDM.isAfterLast()) {
                    Object[] rowData = new Object[10];
                    SrNo++;
                    rowData[0] = Boolean.valueOf(false);
                    rowData[1] = Integer.toString(SrNo);
                    rowData[2] = rsDM.getString("DEBITMEMO_NO");
                    rowData[3] = EITLERPGLOBAL.formatDate(rsDM.getString("DEBITMEMO_DATE"));
                    rowData[4] = rsDM.getString("INVOICE_NO");
                    rowData[5] = EITLERPGLOBAL.formatDate(rsDM.getString("INVOICE_DATE"));
                    rowData[6] = rsDM.getString("INVOICE_AMOUNT");
                    rowData[7] = rsDM.getString("INTEREST_AMT");

                    DataModelDMCancellation.addRow(rowData);
                    rsDM.next();
                }

            } else {
                JOptionPane.showMessageDialog(this, "No Record Found");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void UpdateSrNo() {
        int SrCol = DataModel.getColFromVariable("SR_NO");

        for (int i = 0; i < Table.getRowCount(); i++) {
            Table.setValueAt(Integer.toString(i + 1), i, SrCol);
        }
    }

    private void CalculateTotal(String pTotalType) {
        double TotalDMIntAmt = 0;
        double TotalAmt = 0;

        if (pTotalType.equals("SELECTION")) {
            for (int i = 0; i < TableDM.getRowCount(); i++) {
                if (TableDM.getValueAt(i, 0).equals(true)) {
                    TotalDMIntAmt += Double.parseDouble(DataModelDMCancellation.getValueByVariable("INTEREST_AMOUNT", i));
                }
            }
            txtTotalIntAmt.setText(String.valueOf(TotalDMIntAmt));
        }

        if (pTotalType.equals("CANCELLATION")) {
            for (int i = 0; i < Table.getRowCount(); i++) {
                TotalAmt += Double.parseDouble(DataModel.getValueByVariable("INTEREST_AMOUNT", i));
            }
            txtTotalAmt.setText(String.valueOf(TotalAmt));
        }
    }
}
