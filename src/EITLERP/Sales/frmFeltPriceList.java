/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */

package EITLERP.Sales;

/**
 *
 * @author  nhpatel
 */
/*<APPLET CODE=frmMR.class HEIGHT=550 WIDTH=665></APPLET>*/

import javax.swing.*;
import java.awt.*;
import EITLERP.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import javax.swing.text.*;
import java.awt.event.*;
import java.net.*;
import EITLERP.Utils.*;
import EITLERP.Sales.*;

public class frmFeltPriceList extends javax.swing.JApplet {
    
    private int EditMode=0;
    private clsFeltPriceList ObjPrice;
    
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromID=0;
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private int FFNo=0;
    
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbChem_TrtinModel;
    private EITLComboModel cmbPINindmodel;
    private EITLComboModel cmbSprlindModel;
    private EITLComboModel cmbSurchgindModel;
    private EITLComboModel cmbSQMIndModel;
    private EITLComboModel cmbWarehouseCodeModel;
    
    private EITLTableModel DataModelA;
    
    private EITLTableModel DataModel=new EITLTableModel();
    private boolean Updating=false;
    
    private boolean HistoryView=false;
    private String theDocNo="";
    private EITLTableModel DataModelHS;
    
    private boolean DoNotEvaluate=false;
    
    public frmPendingApprovals frmPA;
    
    private EITLTableCellRenderer CellPainter=new EITLTableCellRenderer();
    
    String cellLastValue="";
    private boolean chkStatus = false;
    private int rowcount = 0;
    private boolean btncheck = false;
    
    /** Creates new form frmTemplate */
    public void init() {
        System.gc();
        setSize(665,600);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        // ((JFrame) getParent().getParent().getParent().getParent()).setTitle("Jay");
        
        GenerateCombos();
        ObjPrice=new clsFeltPriceList();
        
        SetMenuForRights();
        
        if(getName().equals("Link")) {
            
        }
        else {
            if(ObjPrice.LoadData(EITLERPGLOBAL.gCompanyID)) {
                ObjPrice.MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+ObjPrice.LastError);
            }
        }
        
        txtAuditRemarks.setVisible(false);
        DataModel.TableReadOnly(true);
        cmdChanges.setEnabled(false);
        lblwhcode.setVisible(false);
        cmbWarehouse.setVisible(false);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtQualityID = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        cmdNext1 = new javax.swing.JButton();
        lblRevNo = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtQualityDesc = new javax.swing.JTextField();
        lblwhcode = new javax.swing.JLabel();
        cmbWarehouse = new javax.swing.JComboBox();
        cmbChem_Trtin = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cmbPINind = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        cmbSurchgind = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        cmbSQMInd = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        cmbSprlind = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        txtSynPerc = new javax.swing.JTextField();
        cmdChanges = new javax.swing.JButton();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack2 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText("FELT QUALITY PRICE LIST");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 666, 25);

        Tab1.setLayout(null);

        Tab1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tab1MouseClicked(evt);
            }
        });
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Doc No");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel2);
        jLabel2.setBounds(18, 20, 100, 15);

        txtDocNo.setEditable(false);
        Tab1.add(txtDocNo);
        txtDocNo.setBounds(130, 20, 104, 19);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Quality ID");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel6);
        jLabel6.setBounds(20, 50, 100, 15);

        txtQualityID.setName("PURPOSE");
        txtQualityID.setEnabled(false);
        txtQualityID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtQualityIDFocusGained(evt);
            }
        });

        Tab1.add(txtQualityID);
        txtQualityID.setBounds(130, 50, 104, 19);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setNextFocusableComponent(cmdAdd);
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TableMousePressed(evt);
            }
        });
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
        });

        jScrollPane1.setViewportView(Table);

        Tab1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 270, 628, 162);

        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add");
        cmdAdd.setNextFocusableComponent(cmdRemove);
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        cmdAdd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdAddFocusGained(evt);
            }
        });

        Tab1.add(cmdAdd);
        cmdAdd.setBounds(360, 440, 80, 25);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setNextFocusableComponent(cmdNext1);
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        cmdRemove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdRemoveFocusGained(evt);
            }
        });

        Tab1.add(cmdRemove);
        cmdRemove.setBounds(450, 440, 86, 25);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel3);
        jPanel3.setBounds(10, 255, 632, 6);

        cmdNext1.setMnemonic('X');
        cmdNext1.setText("Next >>");
        cmdNext1.setNextFocusableComponent(cmdRemove);
        cmdNext1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext1ActionPerformed(evt);
            }
        });

        Tab1.add(cmdNext1);
        cmdNext1.setBounds(540, 440, 102, 25);

        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(240, 20, 44, 15);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Quality Desc");
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel7);
        jLabel7.setBounds(20, 80, 100, 15);

        txtQualityDesc.setName("PURPOSE");
        txtQualityDesc.setEnabled(false);
        Tab1.add(txtQualityDesc);
        txtQualityDesc.setBounds(130, 80, 450, 19);

        lblwhcode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblwhcode.setText("Warehouse Code");
        lblwhcode.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(lblwhcode);
        lblwhcode.setBounds(10, 200, 110, 15);

        cmbWarehouse.setName("OPEN_STATUS");
        cmbWarehouse.setEnabled(false);
        Tab1.add(cmbWarehouse);
        cmbWarehouse.setBounds(130, 200, 290, 24);

        cmbChem_Trtin.setName("OPEN_STATUS");
        cmbChem_Trtin.setEnabled(false);
        Tab1.add(cmbChem_Trtin);
        cmbChem_Trtin.setBounds(450, 110, 140, 24);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Chemical Treatment");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel4);
        jLabel4.setBounds(300, 110, 140, 15);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("PIN Indicator");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel5);
        jLabel5.setBounds(0, 140, 120, 15);

        cmbPINind.setName("OPEN_STATUS");
        cmbPINind.setEnabled(false);
        Tab1.add(cmbPINind);
        cmbPINind.setBounds(130, 140, 140, 24);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Surcharges Indicator");
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel8);
        jLabel8.setBounds(280, 140, 160, 15);

        cmbSurchgind.setName("OPEN_STATUS");
        cmbSurchgind.setEnabled(false);
        Tab1.add(cmbSurchgind);
        cmbSurchgind.setBounds(450, 140, 140, 24);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("SQM Indicator");
        jLabel9.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel9);
        jLabel9.setBounds(300, 170, 140, 15);

        cmbSQMInd.setName("OPEN_STATUS");
        cmbSQMInd.setNextFocusableComponent(cmdAdd);
        cmbSQMInd.setEnabled(false);
        Tab1.add(cmbSQMInd);
        cmbSQMInd.setBounds(450, 170, 140, 24);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Spiral Indicator");
        jLabel10.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel10);
        jLabel10.setBounds(0, 170, 120, 15);

        cmbSprlind.setName("OPEN_STATUS");
        cmbSprlind.setEnabled(false);
        Tab1.add(cmbSprlind);
        cmbSprlind.setBounds(130, 170, 140, 24);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Synthetic Per.");
        jLabel11.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel11);
        jLabel11.setBounds(20, 110, 100, 15);

        txtSynPerc.setName("PURPOSE");
        txtSynPerc.setEnabled(false);
        Tab1.add(txtSynPerc);
        txtSynPerc.setBounds(130, 110, 104, 19);

        cmdChanges.setMnemonic('A');
        cmdChanges.setText("Change");
        cmdChanges.setNextFocusableComponent(cmdRemove);
        cmdChanges.setEnabled(false);
        cmdChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdChangesActionPerformed(evt);
            }
        });

        Tab1.add(cmdChanges);
        cmdChanges.setBounds(240, 440, 110, 25);

        Tab.addTab("Price List", Tab1);

        Tab2.setLayout(null);

        Tab2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(16, 18, 66, 15);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });

        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 14, 184, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(20, 52, 56, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 50, 182, 19);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(20, 82, 62, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 78, 468, 19);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(20, 116, 86, 15);

        jPanel6.setLayout(null);

        jPanel6.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        buttonGroup1.add(OpgApprove);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.setEnabled(false);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        OpgFinal.setText("Final Approve");
        buttonGroup1.add(OpgFinal);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.setEnabled(false);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        buttonGroup1.add(OpgReject);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.setEnabled(false);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        buttonGroup1.add(OpgHold);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.setEnabled(false);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });

        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(88, 120, 182, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(18, 232, 60, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });

        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(88, 228, 184, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(16, 264, 60, 15);

        txtToRemarks.setNextFocusableComponent(cmdBack2);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });

        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 260, 516, 19);

        cmdBack2.setText("<< Back");
        cmdBack2.setNextFocusableComponent(cmdRemove);
        cmdBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack2ActionPerformed(evt);
            }
        });

        Tab2.add(cmdBack2);
        cmdBack2.setBounds(534, 350, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });

        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(559, 77, 33, 21);

        Tab.addTab("Approval", Tab2);

        jPanel1.setLayout(null);

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 614, 144);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 191, 182, 15);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(13, 207, 473, 148);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });

        jPanel1.add(cmdViewHistory);
        cmdViewHistory.setBounds(498, 242, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });

        jPanel1.add(cmdNormalView);
        cmdNormalView.setBounds(498, 273, 132, 24);

        cmdPreviewA.setText("Preview Report");
        cmdPreviewA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewAActionPerformed(evt);
            }
        });

        jPanel1.add(cmdPreviewA);
        cmdPreviewA.setBounds(498, 209, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(498, 305, 132, 24);

        txtAuditRemarks.setEnabled(false);
        jPanel1.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(506, 334, 129, 19);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 654, 500);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 570, 650, 22);

    }//GEN-END:initComponents

    private void cmdChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdChangesActionPerformed
        // TODO add your handling code here:
        btncheck = true;
    }//GEN-LAST:event_cmdChangesActionPerformed
    
    private void TableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMousePressed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_TableMousePressed
    
    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // TODO add your handling code here:
        if (btncheck == true) {
            if (Table.getSelectedRow() == (rowcount-1)) {
                
            }
            else
                if (Table.getSelectedRow() < rowcount) {                    
                    Table.setColumnSelectionInterval(0, 0);
                }
        }
        else {
            if (Table.getSelectedRow() < rowcount) {
                //Table.setColumnSelectionAllowed(false);
                Table.setColumnSelectionInterval(0, 0);
            }
        }
    }//GEN-LAST:event_TableKeyPressed
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0) {
            txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText=txtAuditRemarks;
            bigEdit.ShowEdit();
        }
        
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void cmdPreviewAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewAActionPerformed
        // TODO add your handling code here:
        PreviewAuditReport();
    }//GEN-LAST:event_cmdPreviewAActionPerformed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        ObjPrice.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo=txtDocNo.getText();
        ObjPrice.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        // TODO add your handling code here:
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained
    
    private void cmdBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBack2ActionPerformed
    
    private void cmdNext1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext1ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext1ActionPerformed
    
    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        // TODO add your handling code here:
        txtQualityID.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained
    
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained
    
    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained
    
    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained
    
    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained
    
    private void cmdRemoveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdRemoveFocusGained
        // TODO add your handling code here:
        ShowMessage("Click on this button to remove selected row from the table");
    }//GEN-LAST:event_cmdRemoveFocusGained
    
    private void cmdAddFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdAddFocusGained
        // TODO add your handling code here:
        ShowMessage("Click on this button to add a new row to table");
    }//GEN-LAST:event_cmdAddFocusGained
    
    private void txtQualityIDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQualityIDFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the Quality ID");
    }//GEN-LAST:event_txtQualityIDFocusGained
    
    private void Tab1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tab1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Tab1MouseClicked
    
    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);
    }//GEN-LAST:event_OpgHoldMouseClicked
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        SetupApproval();
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedUserCombo();
            if(ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID,clsFeltPriceList.ModuleID,txtDocNo.getText())) {
                cmbSendTo.setEnabled(true);
            }
            else {
                cmbSendTo.setEnabled(false);
            }
        }
        
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateFromCombo();
        }
        
        
        
        
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgHoldItemStateChanged
    
    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_OpgRejectItemStateChanged
    
    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgFinalItemStateChanged
    
    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgApproveItemStateChanged
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ObjPrice.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        PreviewReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:        
        if(Table.getRowCount()>0) {
            if (Table.getSelectedRow() >= rowcount) {
                DataModel.removeRow(Table.getSelectedRow());
            }
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        Updating=true;
        Object[] rowData=new Object[6];
        rowData[0]=Integer.toString(Table.getRowCount()+1);
        rowData[1]="";
        rowData[2]="";
        rowData[3]="";
        rowData[4]="";
        rowData[5]="";
        DataModel.addRow(rowData);
        
        //Table.changeSelection(Table.getRowCount()-1, 1, false,false);
        //Table.requestFocus();
        
        if(Table.getRowCount()>1) {
            int NewRow=Table.getRowCount()-1;
            
            //Add Last Row References
            DataModel.setValueByVariable("QUALITY_ID",DataModel.getValueByVariable("QUALITY_ID", NewRow-1) ,NewRow);
            
        }
        else {
            DataModel.setValueByVariable("QUALITY_ID",txtQualityID.getText().trim() ,0);
        }
        Updating=false;
        Table.requestFocus();
    }//GEN-LAST:event_cmdAddActionPerformed
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        //Set Default Send to User
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbChem_Trtin;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbPINind;
    private javax.swing.JComboBox cmbSQMInd;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JComboBox cmbSprlind;
    private javax.swing.JComboBox cmbSurchgind;
    private javax.swing.JComboBox cmbWarehouse;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdChanges;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext1;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblwhcode;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtQualityDesc;
    private javax.swing.JTextField txtQualityID;
    private javax.swing.JTextField txtSynPerc;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    
    private void SetFields(boolean pStat) {
        //txtDocNo.setEnabled(pStat);
        txtQualityDesc.setEnabled(pStat);
        txtQualityID.setEnabled(pStat);
        
        cmbWarehouse.setEnabled(pStat);
        cmbChem_Trtin.setEnabled(pStat);
        txtSynPerc.setEnabled(pStat);
        cmbPINind.setEnabled(pStat);
        cmbSprlind.setEnabled(pStat);
        cmbSurchgind.setEnabled(pStat);
        cmbSQMInd.setEnabled(pStat);
        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        cmbWarehouse.setEnabled(pStat);
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        
        SetupApproval();
        cmdChanges.setEnabled(pStat);
        if (pStat==true) {
            String str = "";
            str = "SELECT COUNT(*) FROM D_COM_HIERARCHY  A,D_COM_HIERARCHY_RIGHTS B "+
            "WHERE A.MODULE_ID="+clsFeltPriceList.ModuleID+" AND A.COMPANY_ID="+ EITLERPGLOBAL.gCompanyID +" "+
            "AND A.COMPANY_ID=B.COMPANY_ID AND A.HIERARCHY_ID=B.HIERARCHY_ID  "+
            "AND B.CREATOR=1 AND B.FINAL_APPROVER=1 AND B.USER_ID=" + EITLERPGLOBAL.gNewUserID ;
            int chk = data.getIntValueFromDB(str);
            if (chk == 1) {
                cmdChanges.setEnabled(true);
            }
            else {
                cmdChanges.setEnabled(false);
            }
        }
        
        
    }
    
    private void ClearFields() {
        txtDocNo.setText("");
        txtQualityID.setText("");
        txtQualityDesc.setText("");
        txtSynPerc.setText("");
        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        cmbChem_Trtin.setSelectedIndex(0);
        cmbPINind.setSelectedIndex(0);
        cmbSprlind.setSelectedIndex(0);
        cmbSurchgind.setSelectedIndex(0);
        cmbSQMInd.setSelectedIndex(0);
        cmbWarehouse.setSelectedIndex(0);
        FormatGrid();
        FormatGridA();
        FormatGridHS();
        
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        
        //=========== Color Indication ===============//
        try {
            if(EditMode==0) {
                
                if(ObjPrice.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }
                
                if(ObjPrice.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(ObjPrice.getAttribute("CANCELLED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
                
                
            }
        }
        catch(Exception c) {
            
        }
        //============================================//
        
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            int ModuleID=clsFeltPriceList.ModuleID;
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        
        ClearFields();
        txtDocNo.setText(Integer.toString((int)ObjPrice.getAttribute("DOC_NO").getVal()));
        lblTitle.setText("FELT QUALITY PRICE LIST - "+txtDocNo.getText());
        lblRevNo.setText(Integer.toString((int)ObjPrice.getAttribute("REVISION_NO").getVal()));
        
        txtQualityID.setText((String)ObjPrice.getAttribute("QUALITY_ID").getObj());
        txtQualityDesc.setText((String)ObjPrice.getAttribute("QUALITY_DESC").getObj());
        txtSynPerc.setText(Double.toString((double)ObjPrice.getAttribute("SYN_PERC").getVal()));
        
        EITLERPGLOBAL.setComboIndex(cmbWarehouse,(String)ObjPrice.getAttribute("WH_CODE").getObj());
        
        EITLERPGLOBAL.setComboIndex(cmbChem_Trtin,(String)ObjPrice.getAttribute("CHEM_TRTIN").getObj());
        EITLERPGLOBAL.setComboIndex(cmbSprlind,(String)ObjPrice.getAttribute("SPRL_IND").getObj());
        EITLERPGLOBAL.setComboIndex(cmbSurchgind,(String)ObjPrice.getAttribute("SUR_CHGIND").getObj());
        EITLERPGLOBAL.setComboIndex(cmbSQMInd,(String)ObjPrice.getAttribute("SQM_IND").getObj());
        EITLERPGLOBAL.setComboIndex(cmbPINind,(String)ObjPrice.getAttribute("PIN_IND").getObj());
        
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,(int)ObjPrice.getAttribute("HIERARCHY_ID").getVal());
        
        DoNotEvaluate=true;
        
        FormatGrid();
        //Now Generate Table
        for(int i=1;i<=ObjPrice.colPriceDetails.size();i++) {
            clsFeltPriceListDetail ObjItem=(clsFeltPriceListDetail)ObjPrice.colPriceDetails.get(Integer.toString(i));
            Object[] rowData=new Object[6];
            
            rowData[0]=Integer.toString(i);
            rowData[1]=(String)ObjItem.getAttribute("QUALITY_ID").getObj();
            rowData[2]=Double.toString(EITLERPGLOBAL.round((double)ObjItem.getAttribute("SQM_RATE").getVal(),2));
            rowData[3]=EITLERPGLOBAL.formatDate((String)ObjItem.getAttribute("SQM_RATE_DATE").getObj());
            rowData[4]=Double.toString(EITLERPGLOBAL.round((double)ObjItem.getAttribute("WT_RATE").getVal(),2));
            rowData[5]=EITLERPGLOBAL.formatDate((String)ObjItem.getAttribute("WT_RATE_DATE").getObj());
            
            DataModel.addRow(rowData);
        }
        
        DoNotEvaluate=false;
        
        //======== Generating Grid for Document Approval Flow ========//
        FormatGridA();
        HashMap List=new HashMap();
        String DocNo=Integer.toString((int)ObjPrice.getAttribute("DOC_NO").getVal());
        List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, clsFeltPriceList.ModuleID , DocNo);
        for(int i=1;i<=List.size();i++) {
            clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
            Object[] rowData=new Object[7];
            
            rowData[0]=Integer.toString(i);
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
            rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
            rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
            rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
            rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
            rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
            
            DataModelA.addRow(rowData);
        }
        
        //Showing Audit Trial History
        FormatGridHS();
        HashMap History=clsFeltPriceList.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
        for(int i=1;i<=History.size();i++) {
            clsFeltPriceList ObjHistory=(clsFeltPriceList)History.get(Integer.toString(i));
            Object[] rowData=new Object[5];
            
            rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(long)ObjHistory.getAttribute("UPDATED_BY").getVal());
            rowData[2]=EITLERPGLOBAL.formatDate((String)ObjHistory.getAttribute("ENTRY_DATE").getObj());
            
            String ApprovalStatus="";
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                ApprovalStatus="Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                ApprovalStatus="Final Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                ApprovalStatus="Waiting";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                ApprovalStatus="Rejected";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                ApprovalStatus="Pending";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                ApprovalStatus="Skiped";
            }
            
            
            rowData[3]=ApprovalStatus;
            rowData[4]=(String)ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
            
            DataModelHS.addRow(rowData);
        }
        
        //============================================================//
    }
    
    //Sets data to the Class Object
    private void SetData() {
        
        ObjPrice.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        ObjPrice.setAttribute("DOC_NO",Integer.parseInt(txtDocNo.getText()));
        ObjPrice.setAttribute("QUALITY_ID",txtQualityID.getText());
        ObjPrice.setAttribute("QUALITY_DESC",txtQualityDesc.getText());
        ObjPrice.setAttribute("SYN_PERC",Double.parseDouble(txtSynPerc.getText()));
        ObjPrice.setAttribute("WH_CODE",EITLERPGLOBAL.getCombostrCode(cmbWarehouse));
        ObjPrice.setAttribute("CHEM_TRTIN",EITLERPGLOBAL.getCombostrCode(cmbChem_Trtin));
        ObjPrice.setAttribute("PIN_IND",EITLERPGLOBAL.getCombostrCode(cmbPINind));
        ObjPrice.setAttribute("SPRL_IND",EITLERPGLOBAL.getCombostrCode(cmbSprlind));
        ObjPrice.setAttribute("SUR_CHGIND",EITLERPGLOBAL.getCombostrCode(cmbSurchgind));
        ObjPrice.setAttribute("SQM_IND",EITLERPGLOBAL.getCombostrCode(cmbSQMInd));
        
        //----- Update Approval Specific Fields -----------//
        ObjPrice.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjPrice.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        ObjPrice.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjPrice.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        if(OpgApprove.isSelected()) {
            ObjPrice.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            ObjPrice.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            ObjPrice.setAttribute("APPROVAL_STATUS","R");
            ObjPrice.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        }
        
        if(OpgHold.isSelected()) {
            ObjPrice.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjPrice.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
            ObjPrice.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        else {
            ObjPrice.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gNewUserID);
            ObjPrice.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        
        
        //======= Set Line part ============
        ObjPrice.colPriceDetails.clear();
        
        for(int i=0;i<Table.getRowCount();i++) {
            clsFeltPriceListDetail ObjItem=new clsFeltPriceListDetail();
            
            ObjItem.setAttribute("SR_NO",i);
            ObjItem.setAttribute("QUALITY_ID",txtQualityID.getText());
            String sqm_rate = "";
            sqm_rate = (String)Table.getValueAt(i,2);
            if (sqm_rate.trim().equals("")) {
                sqm_rate = "0";
            }
            ObjItem.setAttribute("SQM_RATE",EITLERPGLOBAL.round(Double.parseDouble(sqm_rate),2));
            ObjItem.setAttribute("SQM_RATE_DATE",EITLERPGLOBAL.formatDateDB((String)Table.getValueAt(i,3)));
            String wt_rate = "";
            wt_rate = (String)Table.getValueAt(i,4);
            if (wt_rate.trim().equals("")) {
                wt_rate = "0";
            }
            ObjItem.setAttribute("WT_RATE",EITLERPGLOBAL.round(Double.parseDouble(wt_rate),2));
            ObjItem.setAttribute("WT_RATE_DATE",EITLERPGLOBAL.formatDateDB((String)Table.getValueAt(i,5)));
            
            ObjPrice.colPriceDetails.put(Integer.toString(ObjPrice.colPriceDetails.size()+1), ObjItem);
            
        }
    }
    
    
    private void FormatGrid() {
        
        Updating=true; //Stops recursion
        
        try {
            cmdAdd.requestFocus();
            
            DataModel=new EITLTableModel();
            Table.removeAll();
            
            Table.setModel(DataModel);
            TableColumnModel ColModel=Table.getColumnModel();
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //Add Columns to it
            DataModel.addColumn("Sr."); //0 - Read Only
            DataModel.addColumn("Quality ID"); //1 //Read Only
            DataModel.addColumn("SQM Rate"); //2
            DataModel.addColumn("SQM Rate Date");//3
            DataModel.addColumn("WT Rate"); //4
            DataModel.addColumn("WT Rate Date"); //5
            
            DataModel.SetVariable(0,"SR_NO"); //0 - Read Only
            DataModel.SetVariable(1,"QUALITY_ID"); //1 //Read Only
            DataModel.SetVariable(2,"SQM_RATE"); //2
            DataModel.SetVariable(3,"SQM_RATE_DATE"); //3
            DataModel.SetVariable(4,"WT_RATE"); //4
            DataModel.SetVariable(5,"WT_RATE_DATE"); //5
            
            
            
            DataModel.TableReadOnly(false);
            DataModel.SetReadOnly(0);
            DataModel.SetReadOnly(1);
            
            //            //Hide Unit Code column
            //            Table.getColumnModel().getColumn(6).setMinWidth(0);
            //            Table.getColumnModel().getColumn(6).setMaxWidth(0);
            //            Table.getColumnModel().getColumn(6).setWidth(0);
            //
            //            //------- Install Table List Selection Listener ------//
            //            Table.getColumnModel().getSelectionModel().addListSelectionListener(
            //            new ListSelectionListener() {
            //                public void valueChanged(ListSelectionEvent e) {
            //                    int last=Table.getSelectedColumn();
            //                    String strVar=DataModel.getVariable(last);
            //
            //                    //=============== Cell Editing Routine =======================//
            //                    try {
            //                        cellLastValue=(String)Table.getValueAt(Table.getSelectedRow(),Table.getSelectedColumn());
            //
            //                        Table.editCellAt(Table.getSelectedRow(),Table.getSelectedColumn());
            //                        if(Table.getEditorComponent() instanceof JTextComponent) {
            //                            ((JTextComponent)Table.getEditorComponent()).selectAll();
            //                        }
            //                    }
            //                    catch(Exception cell){}
            //                    //============= Cell Editing Routine Ended =================//
            //
            //                    ShowMessage("Ready");
            //
            //                    if(last==1) {
            //                        ShowMessage("Enter item id. Press F1 for the list of items");
            //                    }
            //                }
            //            }
            //            );
            //            //===================================================//
            
            
            //            //----- Install Table Model Event Listener -------//
            //            Table.getModel().addTableModelListener(new TableModelListener() {
            //                public void tableChanged(TableModelEvent e) {
            //                    if (e.getType() == TableModelEvent.UPDATE) {
            //                        int col = e.getColumn();
            //
            //                        //=========== Cell Update Prevention Check ===========//
            //                        String curValue=(String)Table.getValueAt(Table.getSelectedRow(), e.getColumn());
            //                        if(curValue.equals(cellLastValue)) {
            //                            return;
            //                        }
            //                        //====================================================//
            //
            //                        if(DoNotEvaluate) {
            //                            return;
            //                        }
            //
            //
            //                        if(col==1){
            //                            try {
            //
            //
            //
            //                                String lItemID=(String)Table.getValueAt(Table.getSelectedRow(),1);
            //                                String lItemName=clsItem.getItemName((int)EITLERPGLOBAL.gCompanyID, lItemID);
            //                                Table.setValueAt(lItemName, Table.getSelectedRow(), 2);
            //
            //
            //
            //                                int lItemUnit=clsItem.getItemUnit(EITLERPGLOBAL.gCompanyID, lItemID);
            //                                Table.setValueAt(Integer.toString(lItemUnit),Table.getSelectedRow(),6);
            //                                String lUnitName=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT", lItemUnit);
            //                                Table.setValueAt(lUnitName,Table.getSelectedRow(),7);
            //
            //                            }
            //                            catch(Exception ex){}
            //                        }
            //
            //
            //
            //                    }
            //                }
            //            });
        }
        catch(Exception e) {
            
        }
        Updating=false;
        //Table formatting completed
    }
    
    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        String strCondition="";
        
        //----- Generate cmbType ------- //
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID= "+clsFeltPriceList.ModuleID);
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+clsFeltPriceList.ModuleID);
        }
        for(int i=1;i<=List.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
        
        //--- Generate Chemical Treatment Combo ------//
        cmbChem_TrtinModel =new EITLComboModel();
        cmbChem_Trtin.removeAllItems();
        cmbChem_Trtin.setModel(cmbChem_TrtinModel);
        
        ComboData aData=new ComboData();
        aData.strCode="0";
        aData.Text="Non Applicable";
        cmbChem_TrtinModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="1";
        aData.Text="Applicable";
        cmbChem_TrtinModel.addElement(aData);
        //===============================//
        
        //--- Generate PIN Indicator Combo ------//
        cmbPINindmodel =new EITLComboModel();
        cmbPINind.removeAllItems();
        cmbPINind.setModel(cmbPINindmodel);
        
        aData=new ComboData();
        aData.strCode="0";
        aData.Text="Non Applicable";
        cmbPINindmodel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="1";
        aData.Text="Applicable";
        cmbPINindmodel.addElement(aData);
        //===============================//
        
        //--- Generate Spiral Indicator Combo ------//
        cmbSprlindModel =new EITLComboModel();
        cmbSprlind.removeAllItems();
        cmbSprlind.setModel(cmbSprlindModel);
        
        aData=new ComboData();
        aData.strCode="0";
        aData.Text="Non Applicable";
        cmbSprlindModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="1";
        aData.Text="Applicable";
        cmbSprlindModel.addElement(aData);
        //===============================//
        
        //--- Generate sur charges Indicator Combo ------//
        cmbSurchgindModel =new EITLComboModel();
        cmbSurchgind.removeAllItems();
        cmbSurchgind.setModel(cmbSurchgindModel);
        
        aData=new ComboData();
        aData.strCode="0";
        aData.Text="Non Applicable";
        cmbSurchgindModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="1";
        aData.Text="Applicable";
        cmbSurchgindModel.addElement(aData);
        //===============================//
        
        //--- Generate SQM Indicator Combo ------//
        cmbSQMIndModel =new EITLComboModel();
        cmbSQMInd.removeAllItems();
        cmbSQMInd.setModel(cmbSQMIndModel);
        
        aData=new ComboData();
        aData.strCode="0";
        aData.Text="Non Applicable";
        cmbSQMIndModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="1";
        aData.Text="Applicable";
        cmbSQMIndModel.addElement(aData);
        //===============================//
        
        //----- Generate Warehouse Combo ------- //
        cmbWarehouseCodeModel=new EITLComboModel();
        cmbWarehouse.removeAllItems();
        cmbWarehouse.setModel(cmbWarehouseCodeModel);
        
        List=clsWarehouse.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID);
        for(int i=1;i<=List.size();i++) {
            clsWarehouse ObjWarehouse=(clsWarehouse) List.get(Integer.toString(i));
            aData=new ComboData();
            aData.strCode=(String) ObjWarehouse.getAttribute("WAREHOUSE_ID").getObj();
            aData.Text=(String)ObjWarehouse.getAttribute("WAREHOUSE_NAME").getObj();
            cmbWarehouseCodeModel.addElement(aData);
        }
        //------------------------------ //
    }
    
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, clsFeltPriceList.ModuleID ,Integer.toString((int)ObjPrice.getAttribute("DOC_NO").getVal()));
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e)
        {}
        
    }
    
    
    private void SetupApproval() {
        // --- Hierarchy Change Rights Check --------
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,1150)) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
            
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, clsFeltPriceList.ModuleID ,Integer.toString((int)ObjPrice.getAttribute("DOC_NO").getVal()));
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,clsFeltPriceList.ModuleID ,FromUserID,Integer.toString((int)ObjPrice.getAttribute("DOC_NO").getVal()));
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        
        //In Edit Mode Hierarchy Should be disabled
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,11501)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,11502)) {
            cmdEdit.setEnabled(true);
        }
        else {
            cmdEdit.setEnabled(false);
        }*/
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,11503)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,11504)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
        
    }
    
    private void Add() {
        
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String QualityID="";
        LOV aList=new LOV();
        
        aList.SQL="SELECT QUALITY_ID,WH_CODE FROM D_SAL_POLICY_FELT_PRICELIST_HEADER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND APPROVED=1 ORDER BY QUALITY_ID";
        aList.ReturnCol=1;
        aList.ShowReturnCol=true;
        aList.DefaultSearchOn=2;
        
        if(aList.ShowLOV()) {
            QualityID=aList.ReturnVal;
            
            EditMode=EITLERPGLOBAL.EDIT;
            
            SetFields(true);
            
            DisableToolbar();
            
            ClearFields();
            
            SetupApproval();
            
            
            clsFeltPriceList ObjPrice=(clsFeltPriceList)clsFeltPriceList.getObjectEx(EITLERPGLOBAL.gCompanyID, QualityID);
            
            DisplayPriceData(ObjPrice);
            lblTitle.setBackground(Color.BLUE);
            
            //long srno = data.getMaxID(EITLERPGLOBAL.gCompanyID,"D_SAL_POLICY_FELT_PRICELIST_HEADER","DOC_NO");
            //txtDocNo.setText(Long.toString(srno));
            
            
            txtQualityDesc.setEnabled(false);
            txtQualityID.setEnabled(false);
            
            cmbWarehouse.setEnabled(false);
            cmbChem_Trtin.setEnabled(false);
            txtSynPerc.setEnabled(false);
            cmbPINind.setEnabled(false);
            cmbSprlind.setEnabled(false);
            cmbSurchgind.setEnabled(false);
            cmbSQMInd.setEnabled(false);
            chkStatus = true;
            cmdAdd.requestFocus();
            
            //            String str = "";
            //            str = "SELECT COUNT(*) FROM D_COM_HIERARCHY  A,D_COM_HIERARCHY_RIGHTS B "+
            //            "WHERE A.MODULE_ID="+clsFeltPriceList.ModuleID+" AND A.COMPANY_ID="+ EITLERPGLOBAL.gCompanyID +" "+
            //            "AND A.COMPANY_ID=B.COMPANY_ID AND A.HIERARCHY_ID=B.HIERARCHY_ID  "+
            //            "AND B.CREATOR=1 AND B.FINAL_APPROVER=1 AND B.USER_ID=" + EITLERPGLOBAL.gNewUserID ;
            //            int chk = data.getIntValueFromDB(str);
            //            if (chk == 1) {
            //                cmdChanges.setEnabled(true);
            //            }
            //            else {
            //                cmdChanges.setEnabled(false);
            //            }
        }
        else {
            EditMode=EITLERPGLOBAL.ADD;
            
            SetFields(true);
            
            DisableToolbar();
            
            ClearFields();
            
            SetupApproval();
            
            long srno = data.getMaxID(EITLERPGLOBAL.gCompanyID,"D_SAL_POLICY_FELT_PRICELIST_HEADER","DOC_NO");
            txtDocNo.setText(Long.toString(srno));
            
            lblTitle.setBackground(Color.BLUE);
            chkStatus = false;
            txtQualityID.requestFocus();
        }
        
        
    }
    
    private void Edit() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=Integer.toString((int)ObjPrice.getAttribute("DOC_NO").getVal());
        if(ObjPrice.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode=EITLERPGLOBAL.EDIT;
            
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            //----------------//
            
            if(ApprovalFlow.IsCreator(clsFeltPriceList.ModuleID ,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,11502)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            DisableToolbar();
            txtQualityDesc.requestFocus();
            
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
    }
    
    private void Delete() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=Integer.toString((int)ObjPrice.getAttribute("DOC_NO").getVal());
        
        if(ObjPrice.CanDelete(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            if(ObjPrice.Delete(EITLERPGLOBAL.gNewUserID)) {
                MoveLast();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while deleting. Error is "+ObjPrice.LastError);
            }
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot delete this record. It is either approved/rejected record or waiting approval for other user or is referred in other documents");
        }
    }
    
    private void Save() {
        //Form level validations
        if(txtQualityID.getText().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter Quality ID");
            return;
        }
        
        if(txtQualityDesc.getText().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter Quality Desc");
            return;
        }
        
        if (txtSynPerc.getText().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter Synthetic Percentage");
            return;
        }
        
        if(cmbWarehouse.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select the Warehouse Code");
            return;
        }
        
        if(cmbHierarchy.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select the hierarchy.");
            return;
        }
        
        if((!OpgApprove.isSelected())&&(!OpgReject.isSelected())&&(!OpgFinal.isSelected())&&(!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(null,"Please select the Approval Action");
            return;
        }
        
        //Check the no. of items
        if(Table.getRowCount()<=0) {
            JOptionPane.showMessageDialog(null,"Please enter some items.");
            return;
        }
        
        if(OpgReject.isSelected()&&txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter the remarks for rejection");
            return;
        }
        
        if( (OpgApprove.isSelected()||OpgReject.isSelected())&&cmbSendTo.getItemCount()<=0) {
            JOptionPane.showMessageDialog(null,"Please select the user, to whom rejected document to be send");
            return;
        }
        
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjPrice.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjPrice.LastError);
                return;
            }
        }
        
        if ((EditMode==EITLERPGLOBAL.EDIT) && (chkStatus==false)) {
            if(ObjPrice.Update()) {
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjPrice.LastError);
                return;
            }
        }
        
        if ((EditMode==EITLERPGLOBAL.EDIT) && (chkStatus==true)) {
            if(ObjPrice.PriceUpdate()) {
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjPrice.LastError);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        cmdChanges.setEnabled(false);
        try {
            frmPA.RefreshView();
        }catch(Exception e){}
    }
    
    private void Cancel() {
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Sales.frmFeltPriceListFind",true);
        frmFeltPriceListFind ObjReturn= (frmFeltPriceListFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            if(!ObjPrice.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveLast();
        }
    }
    
    private void MoveFirst() {
        ObjPrice.MoveFirst();
        DisplayData();
    }
    
    private void MovePrevious() {
        ObjPrice.MovePrevious();
        DisplayData();
    }
    
    private void MoveNext() {
        ObjPrice.MoveNext();
        DisplayData();
    }
    
    private void MoveLast() {
        ObjPrice.MoveLast();
        DisplayData();
    }
    
    public void FindEx(int pCompanyID,String pDocNo) {
        ObjPrice.Filter(" WHERE COMPANY_ID="+Integer.toString(pCompanyID)+" AND DOC_NO='"+pDocNo+"'",pCompanyID);
        ObjPrice.MoveLast();
        DisplayData();
    }
    
    public void FindWaiting() {
        ObjPrice.Filter(" WHERE DOC_NO IN (SELECT D_SAL_POLICY_FELT_PRICELIST_HEADER.DOC_NO FROM D_SAL_POLICY_FELT_PRICELIST_HEADER,D_COM_DOC_DATA WHERE D_SAL_POLICY_FELT_PRICELIST_HEADER.DOC_NO=D_COM_DOC_DATA.DOC_NO AND D_SAL_POLICY_FELT_PRICELIST_HEADER.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID AND D_SAL_POLICY_FELT_PRICELIST_HEADER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_COM_DOC_DATA.USER_ID="+EITLERPGLOBAL.gNewUserID+" AND D_COM_DOC_DATA.STATUS='W' AND MODULE_ID="+clsFeltPriceList.ModuleID+")",EITLERPGLOBAL.gCompanyID);
        ObjPrice.MoveLast();
        DisplayData();
    }
    
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
        
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
            if(Tab1.getComponent(i).getName()!=null) {
                
                FieldName=Tab1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Tab1.getComponent(i).setEnabled(true);
                }
                
            }
        }
        //=============== Header Fields Setup Complete =================//
        
        
        
        //=============== Setting Table Fields ==================//
        DataModel.ClearAllReadOnly();
        for(int i=0;i<Table.getColumnCount();i++) {
            FieldName=DataModel.getVariable(i);
            
            if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "L", FieldName)) {
                //Do Nothing
            }
            else {
                DataModel.SetReadOnly(i);
            }
        }
        //=======================================================//
        
    }
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
    
    
    private void PreviewAuditReport() {
        try {
            //URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptMaterialREQA.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtDocNo.getText());
            //EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"Error Previwing "+e.getMessage());
        }
    }
    
    private void GenerateRejectedUserCombo() {
        HashMap List=new HashMap();
        HashMap DeptList=new HashMap();
        HashMap DeptUsers=new HashMap();
        
        //----- Generate cmbType ------- //
        cmbToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);
        
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=List.size();i++) {
            clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
            
            
            /// NEW CODE ///
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                if(OpgApprove.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID,clsFeltPriceList.ModuleID, txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID,clsFeltPriceList.ModuleID , txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            }
            else {
                if(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///
            
            
        }
        //------------------------------ //
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID,clsFeltPriceList.ModuleID,txtDocNo.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
    }
    
    
    private void PreviewReport() {
        //        HashMap Params=new HashMap();
        //
        //        try {
        //            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptIssueRequisition.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtDocNo.getText());
        //            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
        //        }
        //        catch(Exception e) {
        //            JOptionPane.showMessageDialog(null,"File error "+e.getMessage());
        //        }
    }
    
    //Display data on the Screen
    private void DisplayPriceData(clsFeltPriceList ObjPrice) {
        txtDocNo.setText(Integer.toString((int)ObjPrice.getAttribute("DOC_NO").getVal()));
        lblTitle.setText("FELT QUALITY PRICE LIST - "+txtDocNo.getText());
        lblRevNo.setText(Integer.toString((int)ObjPrice.getAttribute("REVISION_NO").getVal()));
        
        txtQualityID.setText((String)ObjPrice.getAttribute("QUALITY_ID").getObj());
        txtQualityDesc.setText((String)ObjPrice.getAttribute("QUALITY_DESC").getObj());
        txtSynPerc.setText(Double.toString((double)ObjPrice.getAttribute("SYN_PERC").getVal()));
        
        EITLERPGLOBAL.setComboIndex(cmbWarehouse,(String)ObjPrice.getAttribute("WH_CODE").getObj());
        
        EITLERPGLOBAL.setComboIndex(cmbChem_Trtin,(String)ObjPrice.getAttribute("CHEM_TRTIN").getObj());
        EITLERPGLOBAL.setComboIndex(cmbSprlind,(String)ObjPrice.getAttribute("SPRL_IND").getObj());
        EITLERPGLOBAL.setComboIndex(cmbSurchgind,(String)ObjPrice.getAttribute("SUR_CHGIND").getObj());
        EITLERPGLOBAL.setComboIndex(cmbSQMInd,(String)ObjPrice.getAttribute("SQM_IND").getObj());
        EITLERPGLOBAL.setComboIndex(cmbPINind,(String)ObjPrice.getAttribute("PIN_IND").getObj());
        
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,(int)ObjPrice.getAttribute("HIERARCHY_ID").getVal());
        
        DoNotEvaluate=true;
        
        FormatGrid();
        rowcount = ObjPrice.colPriceDetails.size();
        //Now Generate Table
        for(int i=1;i<=ObjPrice.colPriceDetails.size();i++) {
            clsFeltPriceListDetail ObjItem=(clsFeltPriceListDetail)ObjPrice.colPriceDetails.get(Integer.toString(i));
            Object[] rowData=new Object[6];
            
            rowData[0]=Integer.toString(i);
            rowData[1]=(String)ObjItem.getAttribute("QUALITY_ID").getObj();
            rowData[2]=Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("SQM_RATE").getVal(),2));
            rowData[3]=EITLERPGLOBAL.formatDate((String)ObjItem.getAttribute("SQM_RATE_DATE").getObj());
            rowData[4]=Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("WT_RATE").getVal(),2));
            rowData[5]=EITLERPGLOBAL.formatDate((String)ObjItem.getAttribute("WT_RATE_DATE").getObj());
            
            DataModel.addRow(rowData);
        }
        
        DoNotEvaluate=false;
        
        
    }
    
    
}
