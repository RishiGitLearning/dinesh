/*
 * frmReqCommDateEntry.java
 *
 * Created on October , 2014, 11:18 AM
 */

package EITLERP.ReportUI;

/**
 *
 * @author  ASHUTOSH
 *@AUTHOR RISHI 03/02/2015
 *
 */

import EITLERP.*;
import java.sql.*;
import javax.swing.*;
import EITLERP.Finance.UtilFunctions;
import java.util.*;
import EITLERP.Production.ReportUI.*;
import java.io.File;
import TReportWriter.*;

public class frmCFormEntryForm extends javax.swing.JApplet {
   
    private clsExcelExporter exp = new clsExcelExporter();  
    private EITLTableModel DataModel=new EITLTableModel();
    private EITLTableModel DataModel2=new EITLTableModel();
    private TReportEngine objEngine=new TReportEngine();
    private EITLComboModel cmbMonthModel;
    private EITLComboModel cmbYearModel;
    private EITLComboModel cmbCFormModel;
    private ResultSet rsResultSet,rsResultSet1;
    private Connection Conn;
    private Statement Stmt;
    
    
 
    /** Initializes the applet frmLegacyVouchers */
    public void init() {
        setSize(1000,650);
        //txtFromDate.setVisible(false);
        //txtToDate.setVisible(false);
        //txtInvoiceNo.setVisible(false);
        initComponents();
        GenerateMonthCombo();
        GenerateYearCombo();
        GenerateCFormCategoryCombo();
        FormatGrid();
       // FormatGrid2();
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        lblTitle = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdShowList = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        MONTH = new javax.swing.JLabel();
        cmbCFormCategory = new javax.swing.JComboBox();
        ExportToExcel = new javax.swing.JButton();
        cmbYear = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cmbMonthType = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtPartyCode = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText("CFORM ENTRY FORM");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 2, 980, 25);

        jLabel2.setText("FILTER CRITERIA :");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(6, 39, 180, 15);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(900, 403));
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });

        jScrollPane1.setViewportView(Table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 120, 970, 240);

        cmdShowList.setText("Show List");
        cmdShowList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowListActionPerformed(evt);
            }
        });

        getContentPane().add(cmdShowList);
        cmdShowList.setBounds(870, 60, 110, 25);

        cmdSave.setText("Save");
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        getContentPane().add(cmdSave);
        cmdSave.setBounds(780, 380, 90, 25);

        MONTH.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        MONTH.setText("MONTH  :");
        getContentPane().add(MONTH);
        MONTH.setBounds(190, 60, 70, 15);

        cmbCFormCategory.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbCFormCategoryItemStateChanged(evt);
            }
        });

        getContentPane().add(cmbCFormCategory);
        cmbCFormCategory.setBounds(540, 60, 120, 24);

        ExportToExcel.setText("Export To Excel");
        ExportToExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportToExcelActionPerformed(evt);
            }
        });

        getContentPane().add(ExportToExcel);
        ExportToExcel.setBounds(620, 380, 140, 25);

        cmbYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbYearItemStateChanged(evt);
            }
        });

        getContentPane().add(cmbYear);
        cmbYear.setBounds(70, 60, 110, 24);

        jLabel4.setText("YEAR :");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(20, 60, 40, 15);

        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(20, 380, 280, 15);

        jLabel3.setText("jLabel3");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(70, 90, 110, 15);

        jLabel5.setText("jLabel5");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(270, 90, 130, 15);

        cmbMonthType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMonthTypeItemStateChanged(evt);
            }
        });

        getContentPane().add(cmbMonthType);
        cmbMonthType.setBounds(270, 60, 130, 24);

        jLabel6.setText("CFORM CATEGORY :");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(410, 60, 130, 15);

        jLabel7.setText("jLabel7");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(540, 90, 110, 15);

        txtPartyCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusLost(evt);
            }
        });
        txtPartyCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyPressed(evt);
            }
        });

        getContentPane().add(txtPartyCode);
        txtPartyCode.setBounds(760, 60, 90, 19);

        jLabel8.setText("Party Code :");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(670, 60, 80, 15);

    }//GEN-END:initComponents

    private void txtPartyCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusLost
      try{
            if(!txtPartyCode.getText().equals("")){
                String strSQL="";
                ResultSet rsTmp;
                strSQL= "";
                strSQL+="SELECT DISTINCT(TAX_PARTY_CODE) FROM DINESHMILLS.D_SAL_INVOICE_TAX WHERE TAX_PARTY_CODE = "+txtPartyCode.getText().trim()+"";
                rsTmp=data.getResult(strSQL);
                rsTmp.first();
                txtPartyCode.setText(rsTmp.getString("TAX_PARTY_CODE"));
                
            }
        }
        catch(Exception e){
            // TODO add your handling code here:
        }        // TODO add your handling code here:
    }//GEN-LAST:event_txtPartyCodeFocusLost

    private void txtPartyCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyPressed
     if(evt.getKeyCode()==112) //F1 Key pressed
        {
            LOV aList=new LOV();
            
            aList.SQL="SELECT DISTINCT(TAX_PARTY_CODE) FROM DINESHMILLS.D_SAL_INVOICE_TAX ORDER BY TAX_PARTY_CODE";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;
            //aList.DefaultSearchOn=1;
            
            if(aList.ShowLOV()) {
               txtPartyCode.setText(aList.ReturnVal);
                
        }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_txtPartyCodeKeyPressed

    private void cmbMonthTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMonthTypeItemStateChanged
    jLabel5.setText((String)cmbMonthType.getSelectedItem());        // TODO add your handling code here:
    }//GEN-LAST:event_cmbMonthTypeItemStateChanged

    private void cmbCFormCategoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbCFormCategoryItemStateChanged
         jLabel7.setText((String)cmbCFormCategory.getSelectedItem());            // TODO add your handling code here:
    }//GEN-LAST:event_cmbCFormCategoryItemStateChanged

    private void cmbYearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbYearItemStateChanged
              jLabel3.setText((String)cmbYear.getSelectedItem());
       //        int AmdReason =  cmbAmendReason.getSelectedIndex();
            //   txtamendreasoncode.setText( Integer.toString(cmbAmendReason.getSelectedIndex()));
           //    txtamendreasonname.setText((String)cmbAmendReason.getSelectedItem());
      
    }//GEN-LAST:event_cmbYearItemStateChanged

    private void ExportToExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportToExcelActionPerformed
          try{
             
                    exp.fillData(Table,new File("/root/Desktop/CFormdata.xls"));
                    exp.fillData(Table,new File("D://CFormdata.xls"));
                    JOptionPane.showMessageDialog(null, "Data saved at " +
                            "'/root/Desktop/CFormdata.xls' successfully in Linux PC or 'D://CFormdata.xls' successfully in Windows PC    ", "Message",
                            JOptionPane.INFORMATION_MESSAGE);
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }     
    }//GEN-LAST:event_ExportToExcelActionPerformed

    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased
    /*
        String str1=(String)Table.getValueAt(Table.getSelectedRow(),7);
        String str2=(String)Table.getValueAt(Table.getSelectedRow(),8);
        System.out.println(str1);
        System.out.println(str2);
        
        if(str1.equals("") || str2.equals("")){
            Table.setValueAt("", Table.getSelectedRow(), 9);
            Table.setValueAt("1", Table.getSelectedRow(), 10);
            
        }        
        
       
        if(!str1.equals("") && !str2.equals("")){
            //if(!str2.equals("")){
        int dateDiff= EITLERPGLOBAL.compareDate(str1,str2);                       
             System.out.println("days : "+dateDiff);              
             if(dateDiff==1)
             {  
                 Table.setValueAt(str1, Table.getSelectedRow() , 9);                 
                 Table.setValueAt("1", Table.getSelectedRow() , 10);                 
               //txtAgreedDate.setText(txtRevisedRequestedDate.getText());               
             }
             else if (dateDiff==-1)
              {
               //txtAgreedDate.setText(txtRevisedCommDate.getText());
              Table.setValueAt("", Table.getSelectedRow() , 9);
              Table.setValueAt("1", Table.getSelectedRow() , 10);
               //JOptionPane.showMessageDialog(frmReqCommDateEntry.this,"Requested date must be larger than or equal to Commited date Otherwise Agreed Date will be blank. ","Requested Date and Commited Date Comparison",JOptionPane.YES_OPTION);               
             } 
              else{
                Table.setValueAt(str1, Table.getSelectedRow() , 9);                 
                Table.setValueAt("1", Table.getSelectedRow() , 10);                 
                //txtAgreedDate.setText(txtRevisedRequestedDate.getText()); 
             }
            //}
        }
        //else{
        //    Table.setValueAt("", Table.getSelectedRow(), 7);
        //}*/
        double cst=0,cfrm=0;
        try{
            cst=Double.parseDouble(Table.getValueAt(Table.getSelectedRow(),7).toString());
            cfrm=Double.parseDouble(Table.getValueAt(Table.getSelectedRow(),15).toString());
        }
        catch(Exception e){
            
        }
        if(cfrm>0)
        Table.setValueAt(String.valueOf(cst-cfrm), Table.getSelectedRow(), 16);
    }//GEN-LAST:event_TableKeyReleased
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
     
        //new Thread() {
         //   public void run() {
                try {
                    for(int i=0;i<Table.getRowCount();i++) {
                  
                       // String CFormFlg=DataModel.getValueByVariable("CFORM_FLG", i);                        
                        String CFormNo=DataModel.getValueByVariable("CFORM_NO", i);
                        String CFormDate=EITLERPGLOBAL.formatDateDB(DataModel.getValueByVariable("CFORM_DATE", i));
                        String CFormAmt=DataModel.getValueByVariable("CFORM_AMT", i);
                        String CFormShortAmt=DataModel.getValueByVariable("CFORM_SHORT_AMT", i);
                        String OrgInvoiceNo=DataModel.getValueByVariable("ORG_INVOICE_NO", i);
                        String iInvoiceNo=DataModel.getValueByVariable("TAX_INVOICE_NO", i);
                        String iInvoiceDate=DataModel.getValueByVariable("TAX_INVOICE_DATE", i);
                        String iPartyCode=DataModel.getValueByVariable("TAX_PARTY_CODE", i);
                        
                        data.Execute("UPDATE DINESHMILLS.D_SAL_INVOICE_TAX SET CFORM_NO='"+CFormNo+"',CFORM_DATE='"+CFormDate+"',CFORM_AMT='"+CFormAmt+"',CFORM_SHORT_AMT='"+CFormShortAmt+"' WHERE ORG_INVOICE_NO='"+OrgInvoiceNo+"' AND TAX_INVOICE_NO='"+iInvoiceNo+"' AND TAX_INVOICE_DATE='"+EITLERPGLOBAL.formatDateDB(iInvoiceDate)+"' AND TAX_PARTY_CODE='"+iPartyCode+"'");
                     
                        //System.out.println(strSQL);
                    }
                   
                } catch(Exception e) {
                }
            
        
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdShowListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowListActionPerformed
       FormatGrid();
       GenerateData();          
       
    }//GEN-LAST:event_cmdShowListActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ExportToExcel;
    private javax.swing.JLabel MONTH;
    private javax.swing.JTable Table;
    private javax.swing.JComboBox cmbCFormCategory;
    private javax.swing.JComboBox cmbMonthType;
    private javax.swing.JComboBox cmbYear;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtPartyCode;
    // End of variables declaration//GEN-END:variables
    
    
     private void FormatGrid() {
       
      
        try{
       
            DataModel=new EITLTableModel();
            Table.removeAll();
            Table.setModel(DataModel);
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
      
            DataModel.addColumn("Reail Invoive No");//0
            DataModel.addColumn("Invoice No");//1
            DataModel.addColumn("Invoice Date"); //2  
            DataModel.addColumn("Party Code");//3
            DataModel.addColumn("Party Name");//4
            DataModel.addColumn("Basic Amount");//5
            DataModel.addColumn("CST Amount");//6
            DataModel.addColumn("Total Amount");//7
            DataModel.addColumn("Security Deposite");//8
            DataModel.addColumn("Total Invoice Amount");//9
            DataModel.addColumn("Tin No");//10
            DataModel.addColumn("Station");//11
            DataModel.addColumn("CForm Flag");//12
            DataModel.addColumn("CForm No");//13
            DataModel.addColumn("CForm Date");//14
            DataModel.addColumn("CForm Amount");//15
            DataModel.addColumn("CForm Short Amount");//16
            
            
          
            DataModel.SetVariable(0,"TAX_INVOICE_NO");  //0
            DataModel.SetVariable(1,"ORG_INVOICE_NO");  //1
            DataModel.SetVariable(2,"TAX_INVOICE_DATE");    //2
            DataModel.SetVariable(3,"TAX_PARTY_CODE");    //3
            DataModel.SetVariable(4,"TAX_PARTY_NAME");    //4
            DataModel.SetVariable(5,"BASIC_AMOUNT");    //5
            DataModel.SetVariable(6,"CST_AMT");    //6
            DataModel.SetVariable(7,"TOT_AMT");    //9
            DataModel.SetVariable(8,"SECURITY_DEPOSIT");    //7
            DataModel.SetVariable(9,"TOTAL_INV_AMT");    //8
            DataModel.SetVariable(10,"TIN_NO");    //10
            DataModel.SetVariable(11,"STATION");    //11
            DataModel.SetVariable(12,"CFORM_FLG");    //12
            DataModel.SetVariable(13,"CFORM_NO");    //13
            DataModel.SetVariable(14,"CFORM_DATE");    //14
            DataModel.SetVariable(15,"CFORM_AMT");    //15
            DataModel.SetVariable(16,"CFORM_SHORT_AMT"); //16
       
            DataModel.SetReadOnly(0);
            DataModel.SetReadOnly(1);
            DataModel.SetReadOnly(2);
            DataModel.SetReadOnly(3);
            DataModel.SetReadOnly(4);
            DataModel.SetReadOnly(5);
            DataModel.SetReadOnly(6);
            DataModel.SetReadOnly(7);
            DataModel.SetReadOnly(8);
            DataModel.SetReadOnly(9);
            DataModel.SetReadOnly(10);
            DataModel.SetReadOnly(11);
            DataModel.SetReadOnly(12);
            DataModel.SetReadOnly(13);
            DataModel.SetReadOnly(14);
            DataModel.SetReadOnly(15);
            DataModel.SetReadOnly(16);
            
            if((EITLERPGLOBAL.gUserDeptID)== 29)
            {
               DataModel.ResetReadOnly(13);
               DataModel.ResetReadOnly(14);
               DataModel.ResetReadOnly(15);
               DataModel.ResetReadOnly(16);
         
            }
            
        
        }
        catch(Exception e) {
            
        }
      
    }
    private void ShowMessage(String pMessage) {
        //lblStatus.setText(pMessage);
        
    }
    
    private void GenerateMonthCombo() {
        HashMap List=new HashMap();
   
        //----- Generate Department Combo ------- //
        
        cmbMonthModel=new EITLComboModel();
        cmbMonthType.removeAllItems();
        cmbMonthType.setModel(cmbMonthModel);
        
        try{
            ComboData combodata=new ComboData();
            combodata.Code=0;
            combodata.Text="SELECT MONTH";
            
            cmbMonthModel.addElement(combodata);
            ResultSet rs=data.getResult("SELECT PARA_CODE,PARA_DESC FROM PRODUCTION.FELT_PARAMETER_MASTER WHERE PARA_ID ='MONTH' ");
            while(!rs.isAfterLast()){
                combodata=new ComboData();
                combodata.Code=rs.getLong("PARA_CODE");
               // combodata.Text=rs.getLong("PARA_CODE")+" "+rs.getString("PARA_DESC");
                
               combodata.Text=rs.getString("PARA_DESC");
                cmbMonthModel.addElement(combodata);
                rs.next();
            }
        }catch(SQLException e) {
            e.printStackTrace();
        }
        
    }
      private void GenerateYearCombo() {
        HashMap List2=new HashMap();
   
        //----- Generate Department Combo ------- //
        
        cmbYearModel=new EITLComboModel();
        cmbYear.removeAllItems();
        cmbYear.setModel(cmbYearModel);
        
        try{
            ComboData combodata2=new ComboData();
            combodata2.Code=0;
            combodata2.Text="SELECT YEAR";
            
            cmbYearModel.addElement(combodata2);
            ResultSet rs2=data.getResult("SELECT PARA_CODE,PARA_DESC FROM PRODUCTION.FELT_PARAMETER_MASTER WHERE PARA_ID ='YEAR' ");
            while(!rs2.isAfterLast()){
                combodata2=new ComboData();
                combodata2.Code=rs2.getLong("PARA_CODE");
                //combodata.strCode=rs.getString("PRIORITY_DESC");
                combodata2.Text=rs2.getString("PARA_DESC");
                
                cmbYearModel.addElement(combodata2);
                rs2.next();
            }
        }catch(SQLException e) {
            e.printStackTrace();
        }
        
    }
  
    private void GenerateCFormCategoryCombo() {
        HashMap List3=new HashMap();
   
        //----- Generate Department Combo ------- //
        
        cmbCFormModel=new EITLComboModel();
        cmbCFormCategory.removeAllItems();
        cmbCFormCategory.setModel(cmbCFormModel);
        
        try{
            ComboData combodata=new ComboData();
            combodata.Code=0;
            combodata.Text="SELECT CATEGORY";
            
            cmbCFormModel.addElement(combodata);
            ResultSet rs=data.getResult("SELECT PARA_CODE,PARA_DESC FROM PRODUCTION.FELT_PARAMETER_MASTER WHERE PARA_ID ='CFORM_CATEGORY' ");
            while(!rs.isAfterLast()){
                combodata=new ComboData();
                combodata.Code=rs.getLong("PARA_CODE");
               // combodata.Text=rs.getLong("PARA_CODE")+" "+rs.getString("PARA_DESC");
                
               combodata.Text=rs.getString("PARA_DESC");
                cmbCFormModel.addElement(combodata);
                rs.next();
            }
        }catch(SQLException e) {
            e.printStackTrace();
        }
        
    }
      
      
   
   public void show1()
    {
        
        
         new Thread() {            
            public void run() {
                try {
                    
         int Monthtype = cmbMonthType.getSelectedIndex();
         String Yeartype  = (String)cmbYear.getSelectedItem();
             
                   String strSQL2="SELECT 'ACNE' AS PRODUCT ,90 AS CAPACITY,COUNT(*) AS CNT FROM PRODUCTION.FELT_ORDER_MASTER A,PRODUCTION.FELT_RATE_MASTER B WHERE EXTRACT(MONTH FROM WVG_AGREED_DATE) = '"+ Monthtype +"' AND  EXTRACT(YEAR FROM WVG_AGREED_DATE) = '"+ Yeartype +"' AND PRODUCT_CODE = SUBSTRING(ITEM_CODE,1,6) AND SUBSTRING(B.GRUP,1,3) = 'ACN' UNION ALL SELECT 'HDS,SDF' AS PRODUCT ,30,COUNT(*) FROM PRODUCTION.FELT_ORDER_MASTER A,PRODUCTION.FELT_RATE_MASTER B WHERE EXTRACT(MONTH FROM WVG_AGREED_DATE) = '"+ Monthtype +"' AND  EXTRACT(YEAR FROM WVG_AGREED_DATE) = '"+ Yeartype +"' AND PRODUCT_CODE = SUBSTRING(ITEM_CODE,1,6) AND SUBSTRING(B.GRUP,1,3) IN ('HDS','SDF') UNION ALL SELECT 'MNE.MNG,FCNE' AS PRODUCT ,155,COUNT(*) FROM PRODUCTION.FELT_ORDER_MASTER A,PRODUCTION.FELT_RATE_MASTER B WHERE EXTRACT(MONTH FROM WVG_AGREED_DATE) = '"+ Monthtype +"' AND  EXTRACT(YEAR FROM WVG_AGREED_DATE) = '"+ Yeartype +"' AND PRODUCT_CODE = SUBSTRING(ITEM_CODE,1,6)  AND SUBSTRING(B.GRUP,1,3) IN ('MNE','MNG','FCN') UNION ALL SELECT 'OTHER' AS PRODUCT ,0,COUNT(*) FROM PRODUCTION.FELT_ORDER_MASTER A,PRODUCTION.FELT_RATE_MASTER B WHERE EXTRACT(MONTH FROM WVG_AGREED_DATE) = '"+ Monthtype +"' AND  EXTRACT(YEAR FROM WVG_AGREED_DATE) = '"+ Yeartype +"' AND PRODUCT_CODE = SUBSTRING(ITEM_CODE,1,6) AND SUBSTRING(B.GRUP,1,3) NOT IN ('MNE','MNG','FCN','HDS','SDF','ACN') UNION ALL SELECT 'TOTAL ' AS PRODUCT ,275,COUNT(*) FROM PRODUCTION.FELT_ORDER_MASTER A,PRODUCTION.FELT_RATE_MASTER B WHERE EXTRACT(MONTH FROM WVG_AGREED_DATE) = '"+ Monthtype +"' AND  EXTRACT(YEAR FROM WVG_AGREED_DATE) = '"+ Yeartype +"' AND PRODUCT_CODE = SUBSTRING(ITEM_CODE,1,6) ";
                   System.out.println(strSQL2);
                   ResultSet rsTmp2=data.getResult(strSQL2);
                   rsTmp2.first();
                    
                  /*  FormatGrid2();
                    
                    if(rsTmp2.getRow()>0) {
                        while(!rsTmp2.isAfterLast()) {                                                        
                            Object[] rowData2=new Object[5];
                            DataModel2.addRow(rowData2);                            
                            int NewRow2=Table2.getRowCount()-1;
                            lblStatus.setText("Generating Table "+NewRow2);
                            DataModel2.setValueByVariable("SR_NO",Integer.toString(NewRow2+1), NewRow2);
                            DataModel2.setValueByVariable("PRODUCT",UtilFunctions.getString(rsTmp2,"PRODUCT",""),NewRow2);
                            DataModel2.setValueByVariable("CAPACITY",UtilFunctions.getString(rsTmp2,"CAPACITY",""),NewRow2);
                            DataModel2.setValueByVariable("CNT",UtilFunctions.getString(rsTmp2,"CNT",""),NewRow2);
                    
                            
                            rsTmp2.next();
                        }
                    }
                    
                    */
                } catch(Exception e) {
                    e.printStackTrace();
                }
            };
        }.start(); 
        
    }

      
      private void GenerateData() {
        try {
           
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
         
            objReportData.AddColumn("TAX_INVOICE_NO");//0
            objReportData.AddColumn("ORG_INVOICE_NO");//1
            objReportData.AddColumn("TAX_INVOICE_DATE");//2
            objReportData.AddColumn("TAX_PARTY_CODE"); //3
            objReportData.AddColumn("TAX_PARTY_NAME"); //4
            objReportData.AddColumn("BASIC_AMT");     //5
            objReportData.AddColumn("CST_AMT"); //6
            objReportData.AddColumn("TOT_AMT"); //9
            objReportData.AddColumn("SECURITY_DEPOSIT"); //7
            objReportData.AddColumn("TOTAL_INV_AMT"); //8
            objReportData.AddColumn("TIN_NO"); //10
            objReportData.AddColumn("STATION"); //11
            objReportData.AddColumn("CFORM_FLG"); //12
            objReportData.AddColumn("CFORM_NO"); //13
            objReportData.AddColumn("CFORM_DATE"); //14
            objReportData.AddColumn("CFORM_AMT"); //15
            objReportData.AddColumn("CFORM_SHORT_AMT"); //16
        
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            
        
            objOpeningRow.setValue("TAX_INVOICE_NO","");
            objOpeningRow.setValue("ORG_INVOICE_NO","");
            objOpeningRow.setValue("TAX_INVOICE_DATE","0000-00-00");
            objOpeningRow.setValue("TAX_PARTY_CODE","");
            objOpeningRow.setValue("TAX_PARTY_NAME","");
            objOpeningRow.setValue("BASIC_AMT","");
            objOpeningRow.setValue("CST_AMT","");
            objOpeningRow.setValue("TOT_AMT","");
            objOpeningRow.setValue("SECURITY_DEPOSIT","");
            objOpeningRow.setValue("TOTAL_INV_AMT","");
            objOpeningRow.setValue("TIN_NO","");
            objOpeningRow.setValue("STATION","");
            objOpeningRow.setValue("CFORM_FLG","");
            objOpeningRow.setValue("CFORM_NO","");
            objOpeningRow.setValue("CFORM_DATE","0000-00-00");
            objOpeningRow.setValue("CFORM_AMT","");
            objOpeningRow.setValue("CFORM_SHORT_AMT","");
           
           
            int Monthtype = cmbMonthType.getSelectedIndex();
            String CFormCategory = (String)cmbCFormCategory.getSelectedItem();
        
            String Yeartype  = (String)cmbYear.getSelectedItem();
            
            String cntn = "";
            String cnmnth = "";
            
            if(txtPartyCode.getText().trim().length()>0){
                cntn = " AND TAX_PARTY_CODE= "+txtPartyCode.getText().trim()+"";
            }
            else
            {
                cntn = "";
            }
            
             if(cmbMonthType.getSelectedIndex()>0){
                cnmnth = " AND EXTRACT(MONTH FROM TAX_INVOICE_DATE)='"+ Monthtype +"'";
            }
            else
            {
                cnmnth = "";
            }
                
            
            String strSQL="SELECT TAX_INVOICE_NO,ORG_INVOICE_NO,TAX_INVOICE_DATE,TAX_PARTY_CODE,TAX_PARTY_NAME,BASIC_AMT,CST_AMT,SECURITY_DEPOSIT,TOTAL_INV_AMT,TOT_AMT,TIN_NO,STATION,CFORM_FLG,CFORM_NO,CFORM_DATE,CFORM_AMT,CFORM_SHORT_AMT FROM DINESHMILLS.D_SAL_INVOICE_TAX WHERE EXTRACT(YEAR FROM TAX_INVOICE_DATE)= '"+ Yeartype +"'"+cnmnth+" AND TAX_FL_CD='"+CFormCategory+"' "+cntn+" AND CST_AMT!=0 ORDER BY TAX_INVOICE_DATE,ORG_INVOICE_NO";
            
           // String strSQL="SELECT * FROM DINESHMILLS.D_SAL_INVOICE_TAX WHERE EXTRACT(YEAR FROM TAX_INVOICE_DATE)= '"+ Yeartype +"' AND EXTRACT(MONTH FROM TAX_INVOICE_DATE)='"+ Monthtype +"' AND TAX_FL_CD='"+CFormCategory+"' AND CST_AMT#0 ORDER BY ORG_INVOICE_NO";
            
           System.out.println(strSQL);
            
            ResultSet jLabel2=data.getResult("SELECT COUNT(*) AS B FROM DINESHMILLS.D_SAL_INVOICE_TAX WHERE EXTRACT(YEAR FROM TAX_INVOICE_DATE)= '"+ Yeartype +"'"+cnmnth+" AND TAX_FL_CD='"+CFormCategory+"'"+cntn+" AND CST_AMT!=0");
            jLabel1.setText(jLabel2.getString("B")+" No Of Record");
            
           
            ResultSet rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            int Counter = 0;
            
            if(rsTmp.getRow()>0) {
                
                while(!rsTmp.isAfterLast()) {
                    Counter ++;
                    objRow=objReportData.newRow();                    
                    Object[] rowData=new Object[22];
                    
                    
                   // rowData[0]=UtilFunctions.getString(rsTmp,"TAX_FL_CD","");
                    rowData[0]=UtilFunctions.getString(rsTmp,"TAX_INVOICE_NO","");
                    rowData[1]=UtilFunctions.getString(rsTmp,"ORG_INVOICE_NO","");
                    rowData[2]=EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"TAX_INVOICE_DATE","0000-00-00"));                   
                    rowData[3]=UtilFunctions.getString(rsTmp,"TAX_PARTY_CODE","");
                    rowData[4]=UtilFunctions.getString(rsTmp,"TAX_PARTY_NAME","");
                    rowData[5]=UtilFunctions.getString(rsTmp,"BASIC_AMT","");
                    rowData[6]=UtilFunctions.getString(rsTmp,"CST_AMT","");
                    rowData[7]=UtilFunctions.getString(rsTmp,"TOT_AMT","");
                    rowData[8]=UtilFunctions.getString(rsTmp,"SECURITY_DEPOSIT","");
                    rowData[9]=UtilFunctions.getString(rsTmp,"TOTAL_INV_AMT","");
                    rowData[10]=UtilFunctions.getString(rsTmp,"TIN_NO","");
                    rowData[11]=UtilFunctions.getString(rsTmp,"STATION","");
                    rowData[12]=UtilFunctions.getString(rsTmp,"CFORM_FLG","");
                    rowData[13]=UtilFunctions.getString(rsTmp,"CFORM_NO","");
                    rowData[14]=EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"CFORM_DATE","0000-00-00"));
                    rowData[15]=UtilFunctions.getString(rsTmp,"CFORM_AMT","");
                    rowData[16]=UtilFunctions.getString(rsTmp,"CFORM_SHORT_AMT","");
 
                    objReportData.AddRow(objRow);
                    DataModel.addRow(rowData);
                    rsTmp.next();
                    
                }
            }
      
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
    }
   
    /*
      private void GenerateReport1() {
        try {
           
          
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            
            objReportData.AddColumn("INVOICE_NO");
            objReportData.AddColumn("INVOICE_DATE");
            objReportData.AddColumn("PARTY_CODE");
            objReportData.AddColumn("PARTY_NAME");
           // objReportData.AddColumn("CITY_ID");
            objReportData.AddColumn("TOTAL_NET_AMOUNT");
            objReportData.AddColumn("AMOUNT");
            objReportData.AddColumn("VOUCHER");
            objReportData.AddColumn("VALUE_DATE");
            objReportData.AddColumn("REMARKS1");
            objReportData.AddColumn("REMARKS2");
            objReportData.AddColumn("F6");
          
         
           TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            
            objOpeningRow.setValue("INVOICE_NO","");
            objOpeningRow.setValue("INVOICE_DATE","0000-00-00");
            objOpeningRow.setValue("PARTY_CODE","");
            objOpeningRow.setValue("PARTY_NAME","");
           // objOpeningRow.setValue("CITY_ID","");
            objOpeningRow.setValue("TOTAL_NET_AMOUNT","");
            objOpeningRow.setValue("AMOUNT","");
            objOpeningRow.setValue("VOUCHER","");
            objOpeningRow.setValue("VALUE_DATE","0000-00-00");
            objOpeningRow.setValue("REMARKS1","");
            objOpeningRow.setValue("REMARKS2","");
            objOpeningRow.setValue("F6","");
          
          
           // String mmonth=cmbMonthType.getSelectedItem().toString().substring(0,1).toUpperCase()+cmbMonthType.getSelectedItem().toString().substring(1).toLowerCase();
      
             int Monthtype = cmbMonthType.getSelectedIndex();
            String Yeartype  = (String)cmbYear.getSelectedItem();
            
            String strSQL="SELECT * FROM PRODUCTION.FELT_F6_REPORT_DETAIL WHERE EXTRACT(YEAR FROM INVOICE_DATE)= '"+ Yeartype +"' AND EXTRACT(MONTH FROM INVOICE_DATE)='"+ Monthtype +"'";
         //   String strSQL="SELECT * FROM PRODUCTION.FELT_F6_REPORT_DETAIL";
            
            System.out.println(strSQL);
            ResultSet rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            int Counter = 0;
            
          if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Counter ++;
                   objRow=objReportData.newRow();
                    
                   objRow.setValue("INVOICE_NO",UtilFunctions.getString(rsTmp,"INVOICE_NO",""));
                   objRow.setValue("INVOICE_DATE",UtilFunctions.getString(rsTmp,"INVOICE_DATE","0000-00-00"));
                   objRow.setValue("PARTY_CODE",UtilFunctions.getString(rsTmp,"PARTY_CODE",""));
                   objRow.setValue("PARTY_NAME",UtilFunctions.getString(rsTmp,"PARTY_NAME",""));
                 //  objRow.setValue("CITY_ID",UtilFunctions.getString(rsTmp,"CITY_ID",""));
                   objRow.setValue("TOTAL_NET_AMOUNT",UtilFunctions.getString(rsTmp,"TOTAL_NET_AMOUNT",""));
                   objRow.setValue("AMOUNT",UtilFunctions.getString(rsTmp,"AMOUNT",""));
                   objRow.setValue("VOUCHER",UtilFunctions.getString(rsTmp,"VOUCHER",""));
                   objRow.setValue("VALUE_DATE",UtilFunctions.getString(rsTmp,"VALUE_DATE","0000-00-00"));
                   objRow.setValue("REMARKS1",UtilFunctions.getString(rsTmp,"REMARKS1",""));
                   objRow.setValue("REMARKS2",UtilFunctions.getString(rsTmp,"REMARKS2",""));
                   objRow.setValue("F6",UtilFunctions.getString(rsTmp,"F6",""));
                   
                   objReportData.AddRow(objRow);
                    
                    rsTmp.next();
               }
           }
            
            int Comp_ID = EITLERPGLOBAL.gCompanyID;
          //  int Monthtype = cmbMonthType.getSelectedIndex();
            HashMap Parameters=new HashMap();
            Parameters.put("MONTH",(String)cmbMonthType.getSelectedItem());
            Parameters.put("YEAR",(String)cmbYear.getSelectedItem());
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
           
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptf6Report.rpt",Parameters,objReportData);
       
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }  */
}
