/* frmFeltSalesInfo.java 
 * 
 * 
 * Created on July 13, 2005, 10:47 AM
 */
package EITLERP.GSTR1;

import EITLERP.*;
import java.awt.Color;
import java.io.File;
import java.sql.*;
import javax.swing.*;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import javax.swing.table.JTableHeader;

/**
 *
 * @author ashutosh/RISHI
 */
public class frmCreditRegisterInfo extends javax.swing.JApplet {

    public boolean forceToChange = false;
    public boolean cancelled = false;
    private EITLTableModel[] DataModel;
    private EITLTableModel DataModelInputTax = new EITLTableModel();
    private EITLTableModel DataModelCapitalGoodsTax = new EITLTableModel();
    private EITLTableModel DataModelServiceTax = new EITLTableModel();

    String strProductCode = "";
    private JDialog aDialog;
    DateFormat df = new SimpleDateFormat("dd-MMM-yy");
    HashMap hmPieceList = new HashMap();
    String ORDER_BY = "";
    private clsExcelExporterCreditRegister exp = new clsExcelExporterCreditRegister();

    public void init() {
        initComponents();
        file1.setVisible(false);
        FormatGridInputTax();//780, 560
        setSize(780, 560);
        jLabel1.setForeground(Color.WHITE);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        lblStatus = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        txtToDate = new javax.swing.JTextField();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        Table_InputTax = new javax.swing.JTable();
        btnShowInputTax = new javax.swing.JButton();
        xlsInputTax = new javax.swing.JButton();
        file1 = new javax.swing.JFileChooser();
        CLR_BTN = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        getContentPane().setLayout(null);

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(0, 102, 153));
        jLabel2.setForeground(java.awt.Color.white);
        jLabel2.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 70, 780, 10);

        txtFromDate = new JTextFieldHint(new JTextField(),"DD/MM/YYYY");
        getContentPane().add(txtFromDate);
        txtFromDate.setBounds(180, 30, 110, 30);

        txtToDate = new JTextFieldHint(new JTextField(),"DD/MM/YYYY");
        getContentPane().add(txtToDate);
        txtToDate.setBounds(390, 30, 100, 30);

        jPanel10.setLayout(null);

        Table_InputTax.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_InputTax.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_InputTax.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_InputTax.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_InputTaxKeyPressed(evt);
            }
        });

        jScrollPane10.setViewportView(Table_InputTax);

        jPanel10.add(jScrollPane10);
        jScrollPane10.setBounds(10, 50, 720, 340);

        btnShowInputTax.setText("Show List");
        btnShowInputTax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowInputTaxActionPerformed(evt);
            }
        });

        jPanel10.add(btnShowInputTax);
        btnShowInputTax.setBounds(10, 10, 130, 30);

        xlsInputTax.setText("EXPORT TO EXCEL");
        xlsInputTax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xlsInputTaxActionPerformed(evt);
            }
        });

        jPanel10.add(xlsInputTax);
        xlsInputTax.setBounds(540, 10, 170, 25);

        jPanel10.add(file1);
        file1.setBounds(150, 0, 506, 380);

        jTabbedPane2.addTab("Tax Detail", jPanel10);

        getContentPane().add(jTabbedPane2);
        jTabbedPane2.setBounds(10, 80, 760, 440);

        CLR_BTN.setText("Clear");
        CLR_BTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        CLR_BTN.setMargin(new java.awt.Insets(2, 7, 2, 7));
        CLR_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLR_BTNActionPerformed(evt);
            }
        });

        getContentPane().add(CLR_BTN);
        CLR_BTN.setBounds(540, 30, 80, 30);

        jLabel3.setText("Period : ");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 30, 60, 20);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("From Date :");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(80, 30, 90, 20);

        jLabel5.setText("To Date :");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(310, 30, 70, 20);

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setForeground(java.awt.Color.white);
        jLabel1.setText("Credit Register Information System");
        jLabel1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 2, 780, 25);

    }//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

    }//GEN-LAST:event_formMouseClicked

    private void Table_InputTaxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_InputTaxKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_InputTaxKeyPressed

    private void btnShowInputTaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowInputTaxActionPerformed
        // TODO add your handling code here:
        if (!Validate()) {
            return;
        }
        FormatGridInputTax();
        GenerateInputTaxData(ORDER_BY);
    }//GEN-LAST:event_btnShowInputTaxActionPerformed

    private void xlsInputTaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xlsInputTaxActionPerformed
        //        // TODO add your handling code here:
        //        try{
        //            exp.fillData(Table_b2b,new File("/root/Desktop/gstr1_B2B.xls"));
        //            exp.fillData(Table_b2b,new File("D://gstr1_B2B.xls"));
        //            JOptionPane.showMessageDialog(null, "Data saved at " +
        //                "'/root/Desktop/gstr1_B2B.xls' successfully in Linux PC or 'D://gstr1_B2B.xls' successfully in Windows PC    ", "Message",
        //                JOptionPane.INFORMATION_MESSAGE);
        //        }
        //        catch(Exception ex) {
        //            ex.printStackTrace();
        //        }
        // TODO add your handling code here:
        File file = null;
        file1.setVisible(true);
        try {
            int returnVal = file1.showOpenDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }

            exp.fillData(Table_InputTax, file, "InputTax");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file1.getSelectedFile().toString() + " successfully... ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_xlsInputTaxActionPerformed

    private void CLR_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLR_BTNActionPerformed
        txtFromDate.setText("");
        txtToDate.setText("");
        FormatGridInputTax();
    }//GEN-LAST:event_CLR_BTNActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CLR_BTN;
    private javax.swing.JTable Table_InputTax;
    private javax.swing.JButton btnShowInputTax;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtToDate;
    private javax.swing.JButton xlsInputTax;
    // End of variables declaration//GEN-END:variables

    private boolean Validate() {
        //Form level validations
        if (txtFromDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter from Date");
            return false;
        } else if (!EITLERPGLOBAL.isDate(txtFromDate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid From Date in DD/MM/YYYY format.");
            return false;
        }

        if (txtToDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter To Date");
            return false;
        } else if (!EITLERPGLOBAL.isDate(txtToDate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid To Date in DD/MM/YYYY format.");
            return false;
        }

        return true;
    }

    private void FormatGridInputTax1() {
        try {
            DataModelInputTax = new EITLTableModel();
            Table_InputTax.removeAll();

            Table_InputTax.setModel(DataModelInputTax);
            Table_InputTax.setAutoResizeMode(0);

            DataModelInputTax.addColumn("Sr.No");//0
            DataModelInputTax.addColumn("Voucher No");//1
            DataModelInputTax.addColumn("Voucher Date");//2
            DataModelInputTax.addColumn("PO No");//3
            DataModelInputTax.addColumn("PO Date");//4
            DataModelInputTax.addColumn("GRN No");//5
            DataModelInputTax.addColumn("GRN Date");//6
            DataModelInputTax.addColumn("Invoice No");//7
            DataModelInputTax.addColumn("Invoice Date");//8
            DataModelInputTax.addColumn("BOE No");//9
            DataModelInputTax.addColumn("BOE Date");//10
            DataModelInputTax.addColumn("CGST Amt");//11
            DataModelInputTax.addColumn("SGST Amt");//12
            DataModelInputTax.addColumn("IGST Amt");//13
            DataModelInputTax.addColumn("Total GST Amt");//14
            DataModelInputTax.addColumn("Party Code");//15
            DataModelInputTax.addColumn("Party Name");//16
            DataModelInputTax.addColumn("GSTIN No");//17
            DataModelInputTax.addColumn("Supplier Code");//18
            DataModelInputTax.addColumn("Item Description");//19
            DataModelInputTax.addColumn("HSN Code");//20
            DataModelInputTax.addColumn("Rate");//21
            DataModelInputTax.addColumn("Category");//22

            DataModelInputTax.SetNumeric(11, true);
            DataModelInputTax.SetNumeric(12, true);
            DataModelInputTax.SetNumeric(13, true);
            DataModelInputTax.SetNumeric(14, true);

//            DataModelInputTax.addColumn("Sr.No.");//0
//            DataModelInputTax.addColumn("Date");//1
//            DataModelInputTax.addColumn("Self Invoice No");//2
//            DataModelInputTax.addColumn("Date");//3
//            DataModelInputTax.addColumn("GRN No");//4
//            DataModelInputTax.addColumn("GRN Date");//5
//            DataModelInputTax.addColumn("Supplier Credit Note");//6
//            DataModelInputTax.addColumn("Credit Note Date");//7
//            DataModelInputTax.addColumn("Supplier Invoice No.");//8
//            DataModelInputTax.addColumn("Import B/E No.");//9
//            DataModelInputTax.addColumn("Inv./B.E. Date");//10
//            DataModelInputTax.addColumn("Material Description");//11
//            DataModelInputTax.addColumn("HSN Code");//12
//            DataModelInputTax.addColumn("Supplier Name");//13
//            DataModelInputTax.addColumn("Supplier GSTIN No.");//14
//            DataModelInputTax.addColumn("Taxable Value");//15
//            DataModelInputTax.addColumn("Tax Rate");//16
//            DataModelInputTax.addColumn("Reverse Charge(Y/N)");//17
//            DataModelInputTax.addColumn("Credit Availed CGST");//18
//            DataModelInputTax.addColumn("Credit Availed SGST");//19
//            DataModelInputTax.addColumn("Credit Availed IGST");//20
//            DataModelInputTax.addColumn("Credit Reversed CGST");//21
//            DataModelInputTax.addColumn("Credit Reversed SGST");//22
//            DataModelInputTax.addColumn("Credit Reversed IGST");//23
//            DataModelInputTax.addColumn("Credit Utilize CGST");//24
//            DataModelInputTax.addColumn("Credit Utilize SGST");//25
//            DataModelInputTax.addColumn("Credit Utilize IGST");//26
//            DataModelInputTax.addColumn("Credit Closing Balance CGST");//27
//            DataModelInputTax.addColumn("Credit Closing Balance SGST");//28
//            DataModelInputTax.addColumn("Credit Closing Balance IGST");//29
//            DataModelInputTax.addColumn("PO No");//30
//            DataModelInputTax.addColumn("Supplier Code");//31
//            DataModelInputTax.addColumn("Item Extra Desc");//32
//            DataModelInputTax.SetVariable(0, "SR_N0"); //0 - Read Only
//            DataModelInputTax.SetVariable(1, "GSTIN_NO"); //1
//            DataModelInputTax.SetNumeric(15, true);
//            DataModelInputTax.SetNumeric(18, true);
//            DataModelInputTax.SetNumeric(19, true);
//            DataModelInputTax.SetNumeric(20, true);
//            DataModelInputTax.SetNumeric(21, true);
//            DataModelInputTax.SetNumeric(22, true);
//            DataModelInputTax.SetNumeric(23, true);
//            DataModelInputTax.SetNumeric(24, true);
//            DataModelInputTax.SetNumeric(25, true);
//            DataModelInputTax.SetNumeric(26, true);
//            DataModelInputTax.SetNumeric(27, true);
//            DataModelInputTax.SetNumeric(28, true);
//            DataModelInputTax.SetNumeric(29, true);
            for (int i = 0; i <= 22; i++) {
                DataModelInputTax.SetReadOnly(i);
            }

            Table_InputTax.getColumnModel().getColumn(0).setMinWidth(30);
            Table_InputTax.getColumnModel().getColumn(0).setMaxWidth(40);
            for (int j = 1; j <= 22; j++) {
                Table_InputTax.getColumnModel().getColumn(j).setMinWidth(100);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void GenerateInputTaxData1(String ORDER_BY) {

        try {
            String strSQL = "SELECT VG.COMPANY_ID,VOUCHER_NO,VOUCHER_DATE,VG.PO_NO,PO_DATE,GRN_NO,GRN_DATE,INVNO,INVDATE,CGST_AMT,SGST_AMT,IGST_AMT,TOT_GST,DTOTALAMT,CTOTALAMT,TAXABLE_AMOUNT,MAIN_CODE,SUPP_CODE,CATG,PARTY_CODE,PARTY_NAME,GSTIN_NO,BOE_NO,BOE_DATE,VG.ITEM_DESC,VG.HSN,VG.RATE1,PO_ITEM_DESC,PO_HSN,PO_RATE, "
                    + "CASE WHEN RATE1 IS NULL AND PO_RATE IS NULL THEN NULL "
                    + "WHEN RATE1 >0 AND PO_RATE IS NULL THEN RATE1 "
                    + "WHEN RATE1 IS NULL  AND PO_RATE >0  THEN PO_RATE "
                    + "WHEN RATE1 >0  AND PO_RATE >0  THEN RATE1 "
                    + "END AS RATE, "
                    + "CASE WHEN ITEM_DESC IS NULL AND PO_ITEM_DESC IS NULL THEN NULL "
                    + "WHEN ITEM_DESC IS NULL AND PO_ITEM_DESC IS NOT NULL THEN PO_ITEM_DESC "
                    + "WHEN ITEM_DESC IS NOT NULL  AND PO_ITEM_DESC IS NULL THEN ITEM_DESC "
                    + "WHEN ITEM_DESC IS NOT NULL  AND PO_ITEM_DESC IS NOT NULL THEN ITEM_DESC "
                    + "END AS ITEM_DESCRIPTION "
                    + "FROM "
                    + "(SELECT P1.COMPANY_ID,VOUCHER_NO,VOUCHER_DATE,PO_NO,P1.GRN_NO,P1.GRN_DATE,INVNO,INVDATE,CGST_AMT,SGST_AMT,IGST_AMT,TOT_GST,DTOTALAMT,CTOTALAMT,MAIN_CODE,SUPP_CODE,CATG,PARTY_CODE,PARTY_NAME,GSTIN_NO,BOE_NO,BOE_DATE,ITEM_DESC,HSN,RATE1 FROM "
                    + "(SELECT PJ.COMPANY_ID,VOUCHER_NO,VOUCHER_DATE,PO_NO,PJ.GRN_NO,PJ.GRN_DATE,INVNO,INVDATE,CGST_AMT,SGST_AMT,IGST_AMT,TOT_GST,DTOTALAMT,CTOTALAMT,MAIN_CODE,SUPP_CODE,CATG,PARTY_CODE,PARTY_NAME,GSTIN_NO FROM "
                    + "(SELECT * FROM "
                    + "(SELECT VH.COMPANY_ID,VH.VOUCHER_NO,VH.VOUCHER_DATE,VD.PO_NO,GRN_NO,GRN_DATE,MAX(INVOICE_NO) AS INVNO,MAX(INVOICE_DATE) AS INVDATE, "
                    + "SUM(COALESCE(CASE WHEN MAIN_ACCOUNT_CODE IN (231756)  AND EFFECT ='D' THEN AMOUNT END,0)) AS CGST_AMT, "
                    + "SUM(COALESCE(CASE WHEN MAIN_ACCOUNT_CODE IN (231757)  AND EFFECT ='D' THEN AMOUNT END,0)) AS SGST_AMT, "
                    + "SUM(COALESCE(CASE WHEN MAIN_ACCOUNT_CODE IN (231758)  AND EFFECT ='D' THEN AMOUNT END,0)) AS IGST_AMT, "
                    + "SUM(COALESCE(CASE WHEN MAIN_ACCOUNT_CODE IN (231756,231757,23758)  AND SUB_ACCOUNT_CODE = '' AND EFFECT = 'D' THEN AMOUNT END,0)) AS TOT_GST, "
                    + "SUM(COALESCE(CASE WHEN MAIN_ACCOUNT_CODE NOT IN (231756,231757,23758)  AND EFFECT ='D' THEN AMOUNT END,0))  AS DTOTALAMT, "
                    + "SUM(COALESCE(CASE WHEN MAIN_ACCOUNT_CODE NOT IN (231756,231757,23758)  AND SUB_ACCOUNT_CODE <> ''  AND EFFECT = 'C' THEN AMOUNT END,0)) AS CTOTALAMT, "
                    + "MAX(COALESCE(CASE WHEN MAIN_ACCOUNT_CODE NOT IN (231756,231757,23758)  AND SUB_ACCOUNT_CODE <> '' AND EFFECT = 'C' THEN MAIN_ACCOUNT_CODE END,0)) AS MAIN_CODE, "
                    + "MAX(COALESCE(CASE WHEN  SUB_ACCOUNT_CODE <> '' AND EFFECT = 'C' THEN SUB_ACCOUNT_CODE END,0)) AS SUPP_CODE, "
                    + "CASE WHEN SUBSTRING(VD.PO_NO,1,2)  IN ('A0','B0')  THEN 'GENERAL' "
                    + "WHEN SUBSTRING(VD.GRN_NO,1,2)  IN ('BP')  THEN 'EXPENSE' "
                    + "WHEN SUBSTRING(VD.PO_NO,1,2) IN ('P0','W0')  THEN 'WO_INDENT' "
                    + "WHEN SUBSTRING(VD.PO_NO,1,2)  IN ('CA','D-')  THEN 'ACLASS' "
                    + "WHEN SUBSTRING(VD.PO_NO,1,2)  IN ('RM')  THEN 'RAW_MATERIAL' "
                    + "WHEN SUBSTRING(VD.PO_NO,1,2)  IN ('I/')  THEN 'SPARES' "
                    + "WHEN SUBSTRING(VD.PO_NO,1,1)  IN ('S') AND SUBSTRING(VD.PO_NO,1,2) NOT IN ('S/')  THEN 'SPARE' "
                    + "WHEN SUBSTRING(VD.PO_NO,1,1)  IN ('S') AND SUBSTRING(VD.PO_NO,1,2) IN ('S/')  THEN 'SERVICES' "
                    + "WHEN SUBSTRING(VD.PO_NO,1,2)  IN ('CP','A6')  THEN 'CAPITAL_GOODS' "
                    + "WHEN SUBSTRING(VD.PO_NO,1,2)  IN ('MR')  THEN 'MERCHANDIZE' "
                    + "END AS CATG "
                    + "FROM FINANCE.D_FIN_VOUCHER_DETAIL VD ,FINANCE.D_FIN_VOUCHER_HEADER VH "
                    + "WHERE VH.VOUCHER_NO = VD.VOUCHER_NO AND VH.APPROVED IN (1) AND VH.CANCELLED =0 AND VH.VOUCHER_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "'  AND  VH.VOUCHER_DATE <= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "' "
                    + "AND SUBSTRING(VH.VOUCHER_NO,1,2) IN ('PA','PJ')  AND VH.VOUCHER_NO IN ( SELECT DISTINCT VOUCHER_NO FROM FINANCE.D_FIN_VOUCHER_DETAIL "
                    + "WHERE MAIN_ACCOUNT_CODE IN  (231756,231757,23758)  AND EFFECT ='D' AND CREATED_DATE >='2017-01-01') "
                    + "GROUP BY VH.COMPANY_ID,VH.VOUCHER_NO,VH.VOUCHER_DATE,VD.PO_NO,GRN_NO) AS P) AS PJ "
                    + "LEFT JOIN "
                    + "(SELECT  COMPANY_ID,PARTY_CODE,PARTY_NAME,COALESCE(GSTIN_NO,'') AS GSTIN_NO,MAIN_ACCOUNT_CODE FROM FINANCE.D_FIN_PARTY_MASTER "
                    + ") AS FP "
                    + "ON FP.MAIN_ACCOUNT_CODE = PJ.MAIN_CODE "
                    + "AND FP.PARTY_CODE = PJ.SUPP_CODE "
                    + ") AS P1 "
                    + "LEFT JOIN "
                    + "(SELECT * FROM ( "
                    + "SELECT GH.COMPANY_ID,GH.GRN_NO,GH.GRN_DATE,GD.BOE_NO,GD.BOE_DATE,MAX(ITEM_DESCRIPTION) AS ITEM_DESC,MAX(IM.HSN_SAC_CODE+0) AS HSN, "
                    + "MAX(GD.COLUMN_3_PER) AS CGST_PER, "
                    + "MAX(GD.COLUMN_4_PER) AS SGST_PER, "
                    + "MAX(GD.COLUMN_5_PER) AS IGST_PER, "
                    + "((SUM(GD.TOTAL_AMOUNT) - SUM(GD.COLUMN_1_AMT)) + SUM(GD.COLUMN_2_AMT)+SUM(GD.COLUMN_15_AMT)) AS TAXABLE_AMOUNT, "
                    + "MAX(CASE WHEN ROUND((GD.COLUMN_3_PER+GD.COLUMN_4_PER+GD.COLUMN_5_PER),0) IN (4,5,6) THEN 5 "
                    + "WHEN ROUND((GD.COLUMN_3_PER+GD.COLUMN_4_PER+GD.COLUMN_5_PER),0) IN (10,11,12,13,14) THEN 12 "
                    + "WHEN ROUND((GD.COLUMN_3_PER+GD.COLUMN_4_PER+GD.COLUMN_5_PER),0) IN (16,17,18,19,20) THEN 18 "
                    + "WHEN ROUND((GD.COLUMN_3_PER+GD.COLUMN_4_PER+GD.COLUMN_5_PER),0) IN (26,27,28,29,30) THEN 28 "
                    + "WHEN ROUND((GD.COLUMN_3_PER+GD.COLUMN_4_PER+GD.COLUMN_5_PER),0) NOT IN (4,5,6,10,11,12,13,14,16,17,18,19,20,26,27,28,29,30) THEN ROUND((GD.COLUMN_3_PER+GD.COLUMN_4_PER+GD.COLUMN_5_PER),0) END ) AS RATE1 "
                    + "FROM DINESHMILLS.D_INV_GRN_HEADER GH,DINESHMILLS.D_INV_GRN_DETAIL GD,DINESHMILLS.D_INV_ITEM_MASTER IM "
                    + "WHERE GH.GRN_NO = GD.GRN_NO AND IM.ITEM_ID = GD.ITEM_ID "
                    + "AND GRN_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' "
                    + "AND GRN_DATE <= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "' "
                    + "AND GH.APPROVED =1 AND GH.CANCELLED =0 "
                    + "GROUP BY GH.COMPANY_ID,GH.GRN_NO,GH.GRN_DATE,GD.BOE_NO,GD.BOE_DATE,GH.SUPP_ID "
                    + "UNION ALL "
                    + "SELECT GH.COMPANY_ID,GH.GRN_NO,GH.GRN_DATE,GD.BOE_NO,GD.BOE_DATE,MAX(ITEM_DESCRIPTION) AS ITEM_DESC,MAX(IM.HSN_SAC_CODE+0) AS HSN, "
                    + "MAX(GD.COLUMN_3_PER) AS CGST_PER, "
                    + "MAX(GD.COLUMN_4_PER) AS SGST_PER, "
                    + "MAX(GD.COLUMN_5_PER) AS IGST_PER, "
                    + "((SUM(GD.TOTAL_AMOUNT) - SUM(GD.COLUMN_1_AMT)) + SUM(GD.COLUMN_2_AMT)+SUM(GD.COLUMN_15_AMT)) AS TAXABLE_AMOUNT, "
                    + "MAX(CASE WHEN ROUND((GD.COLUMN_3_PER+GD.COLUMN_4_PER+GD.COLUMN_5_PER),0) IN (4,5,6) THEN 5 "
                    + "WHEN ROUND((GD.COLUMN_3_PER+GD.COLUMN_4_PER+GD.COLUMN_5_PER),0) IN (10,11,12,13,14) THEN 12 "
                    + "WHEN ROUND((GD.COLUMN_3_PER+GD.COLUMN_4_PER+GD.COLUMN_5_PER),0) IN (16,17,18,19,20) THEN 18 "
                    + "WHEN ROUND((GD.COLUMN_3_PER+GD.COLUMN_4_PER+GD.COLUMN_5_PER),0) IN (26,27,28,29,30) THEN 28 "
                    + "WHEN ROUND((GD.COLUMN_3_PER+GD.COLUMN_4_PER+GD.COLUMN_5_PER),0) NOT IN (4,5,6,10,11,12,13,14,16,17,18,19,20,26,27,28,29,30) THEN ROUND((GD.COLUMN_3_PER+GD.COLUMN_4_PER+GD.COLUMN_5_PER),0) END ) AS RATE1 "
                    + "FROM DINESHMILLSA.D_INV_GRN_HEADER GH,DINESHMILLSA.D_INV_GRN_DETAIL GD,DINESHMILLSA.D_INV_ITEM_MASTER IM "
                    + "WHERE GH.GRN_NO = GD.GRN_NO AND IM.ITEM_ID = GD.ITEM_ID "
                    + "AND GRN_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' "
                    + "AND GRN_DATE <= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "' "
                    + "AND GH.APPROVED =1 AND GH.CANCELLED =0 "
                    + "GROUP BY GH.COMPANY_ID,GH.GRN_NO,GH.GRN_DATE,GD.BOE_NO,GD.BOE_DATE,GH.SUPP_ID "
                    + ") AS GRN) AS GN "
                    + "ON P1.GRN_NO = GN.GRN_NO "
                    + "AND P1.COMPANY_ID = GN.COMPANY_ID) AS VG "
                    + "LEFT JOIN "
                    + "(SELECT PH.PO_NO,PH.PO_DATE,MAX(ITEM_DESC) AS PO_ITEM_DESC,ITEM_ID,MAX(HSN_SAC_CODE+0)  AS PO_HSN, "
                    + "MAX(PD.COLUMN_3_PER) AS CGST_PER, "
                    + "MAX(PD.COLUMN_4_PER) AS SGST_PER, "
                    + "MAX(PD.COLUMN_5_PER) AS IGST_PER, "
                    + "MAX(CASE WHEN ROUND((PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER),0) IN (4,5,6) THEN 5 "
                    + "WHEN ROUND((PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER),0) IN (10,11,12,13,14) THEN 12 "
                    + "WHEN ROUND((PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER),0) IN (16,17,18,19,20) THEN 18 "
                    + "WHEN ROUND((PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER),0) IN (26,27,28,29,30) THEN 28 "
                    + "WHEN ROUND((PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER),0) NOT IN (4,5,6,10,11,12,13,14,16,17,18,19,20,26,27,28,29,30) THEN ROUND((PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER),0) END ) AS PO_RATE "
                    + "FROM DINESHMILLS.D_PUR_PO_HEADER PH,DINESHMILLS.D_PUR_PO_DETAIL PD "
                    + "WHERE PH.PO_NO = PD.PO_NO "
                    + "AND PO_DATE >= '2012-01-01' AND PH.APPROVED =1 AND PH.CANCELLED =0 AND PD.COLUMN_3_CAPTION = 'CGST' AND (PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER) >0 "
                    + "GROUP BY PH.PO_NO,PH.PO_DATE "
                    + "UNION ALL "
                    + "SELECT PH.PO_NO,PH.PO_DATE,MAX(ITEM_DESC) AS PO_ITEM_DESC,ITEM_ID,MAX(HSN_SAC_CODE+0) AS PO_HSN, "
                    + "MAX(PD.COLUMN_3_PER) AS CGST_PER, "
                    + "MAX(PD.COLUMN_4_PER) AS SGST_PER, "
                    + "MAX(PD.COLUMN_5_PER) AS IGST_PER, "
                    + "MAX(CASE WHEN ROUND((PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER),0) IN (4,5,6) THEN 5 "
                    + "WHEN ROUND((PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER),0) IN (10,11,12,13,14) THEN 12 "
                    + "WHEN ROUND((PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER),0) IN (16,17,18,19,20) THEN 18 "
                    + "WHEN ROUND((PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER),0) IN (26,27,28,29,30) THEN 28 "
                    + "WHEN ROUND((PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER),0) NOT IN (4,5,6,10,11,12,13,14,16,17,18,19,20,26,27,28,29,30) THEN ROUND((PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER),0) END ) AS PO_RATE "
                    + "FROM DINESHMILLSA.D_PUR_PO_HEADER PH,DINESHMILLSA.D_PUR_PO_DETAIL PD "
                    + "WHERE PH.PO_NO = PD.PO_NO "
                    + "AND PO_DATE >= '2012-01-01' AND PH.APPROVED =1 AND PH.CANCELLED =0 AND PD.COLUMN_3_CAPTION = 'CGST' AND (PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER) >0  "
                    + "GROUP BY PH.PO_NO,PH.PO_DATE "
                    + ") AS PO "
                    + "ON VG.PO_NO = PO.PO_NO ";

            //"SELECT *,RIGHT(HSN_CODE,4) AS HSN FROM FINANCE.D_SAL_GSTR_INVOICE WHERE INVOICE_DATE>='" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' AND INVOICE_DATE <= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "' AND APPROVED=1 AND CANCELLED=0 ORDER BY INVOICE_DATE,INVOICE_NO " + ORDER_BY;
            ResultSet rs = data.getResult(strSQL);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {

                Object[] rowData = new Object[40];
                // rowData[0]=rs.getString("");
                //,,,,,,,,,,,,,,'N',,,,
                rowData[0] = cnt++;
                rowData[1] = rs.getString("VOUCHER_NO");
                if (rs.getDate("VOUCHER_DATE") == null || rs.getDate("VOUCHER_DATE").equals("") || rs.getDate("VOUCHER_DATE").equals("0000-00-00")) {
                    rowData[2] = "";
                } else {
                    rowData[2] = df.format(rs.getDate("VOUCHER_DATE"));
                }
                rowData[3] = rs.getString("PO_NO");
                if (rs.getDate("PO_DATE") == null || rs.getDate("PO_DATE").equals("") || rs.getDate("PO_DATE").equals("0000-00-00")) {
                    rowData[4] = "";
                } else {
                    rowData[4] = df.format(rs.getDate("PO_DATE"));
                }
                rowData[5] = rs.getString("GRN_NO");
                if (rs.getDate("GRN_DATE") == null || rs.getDate("GRN_DATE").equals("") || rs.getDate("GRN_DATE").equals("0000-00-00")) {
                    rowData[6] = "";
                } else {
                    rowData[6] = df.format(rs.getDate("GRN_DATE"));
                }
                rowData[7] = rs.getString("INVNO");
                if (rs.getDate("INVDATE") == null || rs.getDate("INVDATE").equals("") || rs.getDate("INVDATE").equals("0000-00-00")) {
                    rowData[8] = "";
                } else {
                    rowData[8] = df.format(rs.getDate("INVDATE"));
                }
                rowData[9] = rs.getString("BOE_NO");
                if (rs.getDate("BOE_DATE") == null || rs.getDate("BOE_DATE").equals("") || rs.getDate("BOE_DATE").equals("0000-00-00")) {
                    rowData[10] = "";
                } else {
                    rowData[10] = df.format(rs.getDate("BOE_DATE"));
                }
                rowData[11] = rs.getString("CGST_AMT");
                rowData[12] = rs.getString("SGST_AMT");
                rowData[13] = rs.getString("IGST_AMT");
                rowData[14] = rs.getString("TOT_GST");
                rowData[15] = rs.getString("PARTY_CODE");
                rowData[16] = rs.getString("PARTY_NAME");
                rowData[17] = rs.getString("GSTIN_NO");
                rowData[18] = rs.getString("SUPP_CODE");
                rowData[19] = rs.getString("ITEM_DESCRIPTION");
                rowData[20] = rs.getString("HSN");
                rowData[21] = rs.getString("RATE");
                rowData[22] = rs.getString("CATG");

                DataModelInputTax.addRow(rowData);
                rs.next();
            }
            rs.close();

        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
    }

    private void FormatGridInputTax() {
        try {
            DataModelInputTax = new EITLTableModel();
            Table_InputTax.removeAll();

            Table_InputTax.setModel(DataModelInputTax);
            Table_InputTax.setAutoResizeMode(0);

            DataModelInputTax.addColumn("Sr.No.");//0
            DataModelInputTax.addColumn("Date");//1
            DataModelInputTax.addColumn("Self Invoice No");//2
            DataModelInputTax.addColumn("Date");//3
            DataModelInputTax.addColumn("GRN No");//4
            DataModelInputTax.addColumn("GRN Date");//5
            DataModelInputTax.addColumn("Supplier Credit Note");//6
            DataModelInputTax.addColumn("Credit Note Date");//7
            DataModelInputTax.addColumn("Supplier Invoice No.");//8
            DataModelInputTax.addColumn("Import B/E No.");//9
            DataModelInputTax.addColumn("Inv./B.E. Date");//10
            DataModelInputTax.addColumn("Material Description");//11
            DataModelInputTax.addColumn("HSN Code");//12
            DataModelInputTax.addColumn("Supplier Name");//13
            DataModelInputTax.addColumn("Supplier GSTIN No.");//14
            DataModelInputTax.addColumn("Taxable Value");//15
            DataModelInputTax.addColumn("Tax Rate");//16
            DataModelInputTax.addColumn("Reverse Charge(Y/N)");//17
            DataModelInputTax.addColumn("Credit Availed CGST");//18
            DataModelInputTax.addColumn("Credit Availed SGST");//19
            DataModelInputTax.addColumn("Credit Availed IGST");//20
            DataModelInputTax.addColumn("Credit Reversed CGST");//21
            DataModelInputTax.addColumn("Credit Reversed SGST");//22
            DataModelInputTax.addColumn("Credit Reversed IGST");//23
            DataModelInputTax.addColumn("Credit Utilize CGST");//24
            DataModelInputTax.addColumn("Credit Utilize SGST");//25
            DataModelInputTax.addColumn("Credit Utilize IGST");//26
            DataModelInputTax.addColumn("Credit Closing Balance CGST");//27
            DataModelInputTax.addColumn("Credit Closing Balance SGST");//28
            DataModelInputTax.addColumn("Credit Closing Balance IGST");//29
            DataModelInputTax.addColumn("PO No");//30
            DataModelInputTax.addColumn("Supplier Code");//31
            DataModelInputTax.addColumn("Category");//32

            DataModelInputTax.SetVariable(0, "SR_N0"); //0 - Read Only
            DataModelInputTax.SetVariable(1, "GSTIN_NO"); //1

            DataModelInputTax.SetNumeric(15, true);
            DataModelInputTax.SetNumeric(18, true);
            DataModelInputTax.SetNumeric(19, true);
            DataModelInputTax.SetNumeric(20, true);
            DataModelInputTax.SetNumeric(21, true);
            DataModelInputTax.SetNumeric(22, true);
            DataModelInputTax.SetNumeric(23, true);
            DataModelInputTax.SetNumeric(24, true);
            DataModelInputTax.SetNumeric(25, true);
            DataModelInputTax.SetNumeric(26, true);
            DataModelInputTax.SetNumeric(27, true);
            DataModelInputTax.SetNumeric(28, true);
            DataModelInputTax.SetNumeric(29, true);

            for (int i = 0; i <= 32; i++) {
                DataModelInputTax.SetReadOnly(i);
            }

            Table_InputTax.getColumnModel().getColumn(0).setMinWidth(30);
            Table_InputTax.getColumnModel().getColumn(0).setMaxWidth(40);
            for (int j = 1; j <= 32; j++) {
                Table_InputTax.getColumnModel().getColumn(j).setMinWidth(100);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void GenerateInputTaxData(String ORDER_BY) {

        try {
//            String strSQL = "SELECT " +
//            "VOUCHER_NO,VOUCHER_DATE,GRN_NO,GRN_DATE,INVOICE_NO,INVOICE_DATE,BOE_NO,BOE_DATE,ITEM_DESCRIPTION,HSN_SAC_CODE,SUPP_NAME,GSTIN_NO,TAXABLE_AMOUNT,RATE1,'N',CGST_AMT,SGST_AMT,IGST_AMT,PO_NO,SUPPLIER_CODE,ITEM_EXTRA_DESC " +
//            "FROM " +
//            "(SELECT GRN.GRN_NO,GRN.GRN_DATE,GRN.INVOICE_NO,GRN.INVOICE_DATE,ITEM_ID,BOE_NO,BOE_DATE,ITEM_EXTRA_DESC,ITEM_DESCRIPTION,SUPPLIER_CODE,HSN_SAC_CODE,GSTIN_NO,SUPP_NAME, " +
//            "CGST_PER,CGST_AMT,SGST_PER,SGST_AMT,IGST_PER,IGST_AMT, " +
//            "CASE WHEN ROUND((CGST_PER+IGST_PER+SGST_PER),0) IN (4,5,6) THEN 5 " +
//            "WHEN ROUND((CGST_PER+IGST_PER+SGST_PER),0) IN (10,11,12,13,14) THEN 12 " +
//            "WHEN ROUND((CGST_PER+IGST_PER+SGST_PER),0) IN (16,17,18,19,20) THEN 18 " +
//            "WHEN ROUND((CGST_PER+IGST_PER+SGST_PER),0) IN (26,27,28,29,30) THEN 28 " +
//            "WHEN ROUND((CGST_PER+IGST_PER+SGST_PER),0) NOT IN (4,5,6,10,11,12,13,14,16,17,18,19,20,26,27,28,29,30) THEN ROUND((CGST_PER+IGST_PER+SGST_PER),0) END AS RATE1, " +
//            "TAXABLE_AMOUNT,VT.VOUCHER_NO,VT.VOUCHER_DATE,VT.MAIN_ACCOUNT_CODE,VT.SUB_ACCOUNT_CODE, " +
//            "GRN.PO_NO " +
//            "FROM " +
//            "(SELECT GH.GRN_NO,GH.GRN_DATE,GH.INVOICE_NO,GH.INVOICE_DATE,GD.ITEM_ID,GD.BOE_NO,GD.BOE_DATE,ITEM_EXTRA_DESC,ITEM_DESCRIPTION,SUPPLIER_CODE,IM.HSN_SAC_CODE,SM.GSTIN_NO,SM.SUPP_NAME, " +
//            "GD.COLUMN_3_PER AS CGST_PER, " +
//            "GD.COLUMN_3_AMT AS CGST_AMT, " +
//            "GD.COLUMN_4_PER AS SGST_PER, " +
//            "GD.COLUMN_4_AMT AS SGST_AMT, " +
//            "GD.COLUMN_5_PER AS IGST_PER, " +
//            "GD.COLUMN_5_AMT AS IGST_AMT, " +
//            "((GD.TOTAL_AMOUNT - GD.COLUMN_1_AMT) + GD.COLUMN_2_AMT+GD.COLUMN_15_AMT) AS TAXABLE_AMOUNT,SM.MAIN_ACCOUNT_CODE, " +
//            "GD.PO_NO, " +
//            "GD.TOTAL_AMOUNT " +
//            "FROM DINESHMILLS.D_INV_GRN_HEADER GH,DINESHMILLS.D_INV_GRN_DETAIL GD,DINESHMILLS.D_COM_SUPP_MASTER SM,DINESHMILLS.D_INV_ITEM_MASTER IM " +
//            "WHERE GH.GRN_NO = GD.GRN_NO AND IM.ITEM_ID = GD.ITEM_ID " +
//            "AND GRN_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' " +
//            "AND GRN_DATE <= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "' " +
//            "AND GH.APPROVED =1 AND GH.CANCELLED =0 " +
//            "AND SM.SUPPLIER_CODE = GH.SUPP_ID " +
//            "" +
//            "UNION ALL " +
//            "" +
//            "SELECT GH.GRN_NO,GH.GRN_DATE,GH.INVOICE_NO,GH.INVOICE_DATE,GD.ITEM_ID,GD.BOE_NO,GD.BOE_DATE,ITEM_EXTRA_DESC,ITEM_DESCRIPTION,SUPPLIER_CODE,IM.HSN_SAC_CODE,SM.GSTIN_NO,SM.SUPP_NAME, " +
//            "GD.COLUMN_3_PER AS CGST_PER, " +
//            "GD.COLUMN_3_AMT AS CGST_AMT, " +
//            "GD.COLUMN_4_PER AS SGST_PER, " +
//            "GD.COLUMN_4_AMT AS SGST_AMT, " +
//            "GD.COLUMN_5_PER AS IGST_PER, " +
//            "GD.COLUMN_5_AMT AS IGST_AMT, " +
//            "((GD.TOTAL_AMOUNT - GD.COLUMN_1_AMT) + GD.COLUMN_2_AMT+GD.COLUMN_15_AMT) AS TAXABLE_AMOUNT,SM.MAIN_ACCOUNT_CODE, " +
//            "GD.PO_NO, " +
//            "GD.TOTAL_AMOUNT " +
//            "FROM DINESHMILLSA.D_INV_GRN_HEADER GH,DINESHMILLSA.D_INV_GRN_DETAIL GD,DINESHMILLSA.D_COM_SUPP_MASTER SM,DINESHMILLSA.D_INV_ITEM_MASTER IM " +
//            "WHERE GH.GRN_NO = GD.GRN_NO AND IM.ITEM_ID = GD.ITEM_ID " +
//            "AND GRN_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' " +
//            "AND GRN_DATE <= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "' " +
//            "AND GH.APPROVED =1 AND GH.CANCELLED =0 " +
//            "AND SM.SUPPLIER_CODE = GH.SUPP_ID " +
//            ") AS GRN " +
//            "LEFT JOIN " +
//            "(SELECT VH.VOUCHER_NO, " +
//            "VH.VOUCHER_DATE,VD.GRN_NO,VD.GRN_DATE,VD.AMOUNT,VD.INVOICE_NO,VD.INVOICE_DATE,VD.MAIN_ACCOUNT_CODE,VD.SUB_ACCOUNT_CODE " +
//            "FROM FINANCE.D_FIN_VOUCHER_DETAIL VD ,FINANCE.D_FIN_VOUCHER_HEADER VH " +
//            "WHERE VH.VOUCHER_NO = VD.VOUCHER_NO AND VH.APPROVED IN (1,0) AND VH.CANCELLED =0 " +
//            "AND VH.VOUCHER_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' " +
//            "AND VH.VOUCHER_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "' " +
//            "AND SUBSTRING(VH.VOUCHER_NO,1,2) IN ('PA','PJ') AND VD.MAIN_ACCOUNT_CODE = 125019 " +
//            ") AS VT " +
//            "ON VT.GRN_NO = GRN.GRN_NO " +
//            "WHERE IGST_PER +SGST_PER+ CGST_PER > 0 " +
//            "ORDER BY GRN.GRN_NO) AS P";

            String strSQL = "SELECT VG.COMPANY_ID,VOUCHER_NO,VOUCHER_DATE,VG.PO_NO,PO_DATE,GRN_NO,GRN_DATE,INVNO,INVDATE,CGST_AMT,SGST_AMT,IGST_AMT,TOT_GST,DTOTALAMT,CTOTALAMT,TAXABLE_AMOUNT,MAIN_CODE,SUPP_CODE,CATG,PARTY_CODE,PARTY_NAME,GSTIN_NO,BOE_NO,BOE_DATE,VG.ITEM_DESC,VG.HSN,VG.RATE1,PO_ITEM_DESC,PO_HSN,PO_RATE, "
                    + "CASE WHEN RATE1 IS NULL AND PO_RATE IS NULL THEN NULL "
                    + "WHEN RATE1 >0 AND PO_RATE IS NULL THEN RATE1 "
                    + "WHEN RATE1 IS NULL  AND PO_RATE >0  THEN PO_RATE "
                    + "WHEN RATE1 >0  AND PO_RATE >0  THEN RATE1 "
                    + "END AS RATE, "
                    + "CASE WHEN ITEM_DESC IS NULL AND PO_ITEM_DESC IS NULL THEN NULL "
                    + "WHEN ITEM_DESC IS NULL AND PO_ITEM_DESC IS NOT NULL THEN PO_ITEM_DESC "
                    + "WHEN ITEM_DESC IS NOT NULL  AND PO_ITEM_DESC IS NULL THEN ITEM_DESC "
                    + "WHEN ITEM_DESC IS NOT NULL  AND PO_ITEM_DESC IS NOT NULL THEN ITEM_DESC "
                    + "END AS ITEM_DESCRIPTION "
                    + "FROM "
                    + "(SELECT P1.COMPANY_ID,VOUCHER_NO,VOUCHER_DATE,PO_NO,P1.GRN_NO,P1.GRN_DATE,INVNO,INVDATE,CGST_AMT,SGST_AMT,IGST_AMT,TOT_GST,TAXABLE_AMOUNT,DTOTALAMT,CTOTALAMT,MAIN_CODE,SUPP_CODE,CATG,PARTY_CODE,PARTY_NAME,GSTIN_NO,BOE_NO,BOE_DATE,ITEM_DESC,HSN,RATE1 FROM "
                    + "(SELECT PJ.COMPANY_ID,VOUCHER_NO,VOUCHER_DATE,PO_NO,PJ.GRN_NO,PJ.GRN_DATE,INVNO,INVDATE,CGST_AMT,SGST_AMT,IGST_AMT,TOT_GST,DTOTALAMT,CTOTALAMT,MAIN_CODE,SUPP_CODE,CATG,PARTY_CODE,PARTY_NAME,GSTIN_NO FROM "
                    + "(SELECT * FROM "
                    + "(SELECT VH.COMPANY_ID,VH.VOUCHER_NO,VH.VOUCHER_DATE,VD.PO_NO,GRN_NO,GRN_DATE,MAX(INVOICE_NO) AS INVNO,MAX(INVOICE_DATE) AS INVDATE, "
                    + "SUM(COALESCE(CASE WHEN MAIN_ACCOUNT_CODE IN (231756)  AND EFFECT ='D' THEN AMOUNT END,0)) AS CGST_AMT, "
                    + "SUM(COALESCE(CASE WHEN MAIN_ACCOUNT_CODE IN (231757)  AND EFFECT ='D' THEN AMOUNT END,0)) AS SGST_AMT, "
                    + "SUM(COALESCE(CASE WHEN MAIN_ACCOUNT_CODE IN (231758)  AND EFFECT ='D' THEN AMOUNT END,0)) AS IGST_AMT, "
                    + "SUM(COALESCE(CASE WHEN MAIN_ACCOUNT_CODE IN (231756,231757,23758)  AND SUB_ACCOUNT_CODE = '' AND EFFECT = 'D' THEN AMOUNT END,0)) AS TOT_GST, "
                    + "SUM(COALESCE(CASE WHEN MAIN_ACCOUNT_CODE NOT IN (231756,231757,23758)  AND EFFECT ='D' THEN AMOUNT END,0))  AS DTOTALAMT, "
                    + "SUM(COALESCE(CASE WHEN MAIN_ACCOUNT_CODE NOT IN (231756,231757,23758)  AND SUB_ACCOUNT_CODE <> ''  AND EFFECT = 'C' THEN AMOUNT END,0)) AS CTOTALAMT, "
                    + "MAX(COALESCE(CASE WHEN MAIN_ACCOUNT_CODE NOT IN (231756,231757,23758)  AND SUB_ACCOUNT_CODE <> '' AND EFFECT = 'C' THEN MAIN_ACCOUNT_CODE END,0)) AS MAIN_CODE, "
                    + "MAX(COALESCE(CASE WHEN  SUB_ACCOUNT_CODE <> '' AND EFFECT = 'C' THEN SUB_ACCOUNT_CODE END,0)) AS SUPP_CODE, "
                    + "CASE WHEN SUBSTRING(VD.PO_NO,1,2)  IN ('A0','B0')  THEN 'GENERAL' "
                    + "WHEN SUBSTRING(VD.GRN_NO,1,2)  IN ('BP')  THEN 'EXPENSE' "
                    + "WHEN SUBSTRING(VD.PO_NO,1,2) IN ('P0','W0')  THEN 'WO_INDENT' "
                    + "WHEN SUBSTRING(VD.PO_NO,1,2)  IN ('CA','D-')  THEN 'ACLASS' "
                    + "WHEN SUBSTRING(VD.PO_NO,1,2)  IN ('RM')  THEN 'RAW_MATERIAL' "
                    + "WHEN SUBSTRING(VD.PO_NO,1,2)  IN ('I/')  THEN 'SPARES' "
                    + "WHEN SUBSTRING(VD.PO_NO,1,1)  IN ('S') AND SUBSTRING(VD.PO_NO,1,2) NOT IN ('S/')  THEN 'SPARE' "
                    + "WHEN SUBSTRING(VD.PO_NO,1,1)  IN ('S') AND SUBSTRING(VD.PO_NO,1,2) IN ('S/')  THEN 'SERVICES' "
                    + "WHEN SUBSTRING(VD.PO_NO,1,2)  IN ('CP','A6')  THEN 'CAPITAL_GOODS' "
                    + "WHEN SUBSTRING(VD.PO_NO,1,2)  IN ('MR')  THEN 'MERCHANDIZE' "
                    + "END AS CATG "
                    + "FROM FINANCE.D_FIN_VOUCHER_DETAIL VD ,FINANCE.D_FIN_VOUCHER_HEADER VH "
                    + "WHERE VH.VOUCHER_NO = VD.VOUCHER_NO AND VH.APPROVED IN (1) AND VH.CANCELLED =0 AND VH.VOUCHER_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "'  AND  VH.VOUCHER_DATE <= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "' "
                    + "AND SUBSTRING(VH.VOUCHER_NO,1,2) IN ('PA','PJ')  AND VH.VOUCHER_NO IN ( SELECT DISTINCT VOUCHER_NO FROM FINANCE.D_FIN_VOUCHER_DETAIL "
                    + "WHERE MAIN_ACCOUNT_CODE IN  (231756,231757,23758)  AND EFFECT ='D' AND CREATED_DATE >='2017-01-01') "
                    + "GROUP BY VH.COMPANY_ID,VH.VOUCHER_NO,VH.VOUCHER_DATE,VD.PO_NO,GRN_NO) AS P) AS PJ "
                    + "LEFT JOIN "
                    + "(SELECT  COMPANY_ID,PARTY_CODE,PARTY_NAME,COALESCE(GSTIN_NO,'') AS GSTIN_NO,MAIN_ACCOUNT_CODE FROM FINANCE.D_FIN_PARTY_MASTER "
                    + ") AS FP "
                    + "ON FP.MAIN_ACCOUNT_CODE = PJ.MAIN_CODE "
                    + "AND FP.PARTY_CODE = PJ.SUPP_CODE "
                    + ") AS P1 "
                    + "LEFT JOIN "
                    + "(SELECT * FROM ( "
                    + "SELECT GH.COMPANY_ID,GH.GRN_NO,GH.GRN_DATE,GD.BOE_NO,GD.BOE_DATE,MAX(ITEM_DESCRIPTION) AS ITEM_DESC,MAX(IM.HSN_SAC_CODE+0) AS HSN, "
                    + "MAX(GD.COLUMN_3_PER) AS CGST_PER, "
                    + "MAX(GD.COLUMN_4_PER) AS SGST_PER, "
                    + "MAX(GD.COLUMN_5_PER) AS IGST_PER, "
                    + "((SUM(GD.TOTAL_AMOUNT) - SUM(GD.COLUMN_1_AMT)) + SUM(GD.COLUMN_2_AMT)+SUM(GD.COLUMN_15_AMT)) AS TAXABLE_AMOUNT, "
                    + "MAX(CASE WHEN ROUND((GD.COLUMN_3_PER+GD.COLUMN_4_PER+GD.COLUMN_5_PER),0) IN (4,5,6) THEN 5 "
                    + "WHEN ROUND((GD.COLUMN_3_PER+GD.COLUMN_4_PER+GD.COLUMN_5_PER),0) IN (10,11,12,13,14) THEN 12 "
                    + "WHEN ROUND((GD.COLUMN_3_PER+GD.COLUMN_4_PER+GD.COLUMN_5_PER),0) IN (16,17,18,19,20) THEN 18 "
                    + "WHEN ROUND((GD.COLUMN_3_PER+GD.COLUMN_4_PER+GD.COLUMN_5_PER),0) IN (26,27,28,29,30) THEN 28 "
                    + "WHEN ROUND((GD.COLUMN_3_PER+GD.COLUMN_4_PER+GD.COLUMN_5_PER),0) NOT IN (4,5,6,10,11,12,13,14,16,17,18,19,20,26,27,28,29,30) THEN ROUND((GD.COLUMN_3_PER+GD.COLUMN_4_PER+GD.COLUMN_5_PER),0) END ) AS RATE1 "
                    + "FROM DINESHMILLS.D_INV_GRN_HEADER GH,DINESHMILLS.D_INV_GRN_DETAIL GD,DINESHMILLS.D_INV_ITEM_MASTER IM "
                    + "WHERE GH.GRN_NO = GD.GRN_NO AND IM.ITEM_ID = GD.ITEM_ID "
                    + "AND GRN_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' "
                    + "AND GRN_DATE <= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "' "
                    + "AND GH.APPROVED =1 AND GH.CANCELLED =0 "
                    + "GROUP BY GH.COMPANY_ID,GH.GRN_NO,GH.GRN_DATE,GD.BOE_NO,GD.BOE_DATE,GH.SUPP_ID "
                    + "UNION ALL "
                    + "SELECT GH.COMPANY_ID,GH.GRN_NO,GH.GRN_DATE,GD.BOE_NO,GD.BOE_DATE,MAX(ITEM_DESCRIPTION) AS ITEM_DESC,MAX(IM.HSN_SAC_CODE+0) AS HSN, "
                    + "MAX(GD.COLUMN_3_PER) AS CGST_PER, "
                    + "MAX(GD.COLUMN_4_PER) AS SGST_PER, "
                    + "MAX(GD.COLUMN_5_PER) AS IGST_PER, "
                    + "((SUM(GD.TOTAL_AMOUNT) - SUM(GD.COLUMN_1_AMT)) + SUM(GD.COLUMN_2_AMT)+SUM(GD.COLUMN_15_AMT)) AS TAXABLE_AMOUNT, "
                    + "MAX(CASE WHEN ROUND((GD.COLUMN_3_PER+GD.COLUMN_4_PER+GD.COLUMN_5_PER),0) IN (4,5,6) THEN 5 "
                    + "WHEN ROUND((GD.COLUMN_3_PER+GD.COLUMN_4_PER+GD.COLUMN_5_PER),0) IN (10,11,12,13,14) THEN 12 "
                    + "WHEN ROUND((GD.COLUMN_3_PER+GD.COLUMN_4_PER+GD.COLUMN_5_PER),0) IN (16,17,18,19,20) THEN 18 "
                    + "WHEN ROUND((GD.COLUMN_3_PER+GD.COLUMN_4_PER+GD.COLUMN_5_PER),0) IN (26,27,28,29,30) THEN 28 "
                    + "WHEN ROUND((GD.COLUMN_3_PER+GD.COLUMN_4_PER+GD.COLUMN_5_PER),0) NOT IN (4,5,6,10,11,12,13,14,16,17,18,19,20,26,27,28,29,30) THEN ROUND((GD.COLUMN_3_PER+GD.COLUMN_4_PER+GD.COLUMN_5_PER),0) END ) AS RATE1 "
                    + "FROM DINESHMILLSA.D_INV_GRN_HEADER GH,DINESHMILLSA.D_INV_GRN_DETAIL GD,DINESHMILLSA.D_INV_ITEM_MASTER IM "
                    + "WHERE GH.GRN_NO = GD.GRN_NO AND IM.ITEM_ID = GD.ITEM_ID "
                    + "AND GRN_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' "
                    + "AND GRN_DATE <= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "' "
                    + "AND GH.APPROVED =1 AND GH.CANCELLED =0 "
                    + "GROUP BY GH.COMPANY_ID,GH.GRN_NO,GH.GRN_DATE,GD.BOE_NO,GD.BOE_DATE,GH.SUPP_ID "
                    + ") AS GRN) AS GN "
                    + "ON P1.GRN_NO = GN.GRN_NO "
                    + "AND P1.COMPANY_ID = GN.COMPANY_ID) AS VG "
                    + "LEFT JOIN "
                    + "(SELECT PH.PO_NO,PH.PO_DATE,MAX(ITEM_DESC) AS PO_ITEM_DESC,ITEM_ID,MAX(HSN_SAC_CODE+0)  AS PO_HSN, "
                    + "MAX(PD.COLUMN_3_PER) AS CGST_PER, "
                    + "MAX(PD.COLUMN_4_PER) AS SGST_PER, "
                    + "MAX(PD.COLUMN_5_PER) AS IGST_PER, "
                    + "MAX(CASE WHEN ROUND((PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER),0) IN (4,5,6) THEN 5 "
                    + "WHEN ROUND((PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER),0) IN (10,11,12,13,14) THEN 12 "
                    + "WHEN ROUND((PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER),0) IN (16,17,18,19,20) THEN 18 "
                    + "WHEN ROUND((PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER),0) IN (26,27,28,29,30) THEN 28 "
                    + "WHEN ROUND((PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER),0) NOT IN (4,5,6,10,11,12,13,14,16,17,18,19,20,26,27,28,29,30) THEN ROUND((PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER),0) END ) AS PO_RATE "
                    + "FROM DINESHMILLS.D_PUR_PO_HEADER PH,DINESHMILLS.D_PUR_PO_DETAIL PD "
                    + "WHERE PH.PO_NO = PD.PO_NO "
                    + "AND PO_DATE >= '2012-01-01' AND PH.APPROVED =1 AND PH.CANCELLED =0 AND PD.COLUMN_3_CAPTION = 'CGST' AND (PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER) >0 "
                    + "GROUP BY PH.PO_NO,PH.PO_DATE "
                    + "UNION ALL "
                    + "SELECT PH.PO_NO,PH.PO_DATE,MAX(ITEM_DESC) AS PO_ITEM_DESC,ITEM_ID,MAX(HSN_SAC_CODE+0) AS PO_HSN, "
                    + "MAX(PD.COLUMN_3_PER) AS CGST_PER, "
                    + "MAX(PD.COLUMN_4_PER) AS SGST_PER, "
                    + "MAX(PD.COLUMN_5_PER) AS IGST_PER, "
                    + "MAX(CASE WHEN ROUND((PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER),0) IN (4,5,6) THEN 5 "
                    + "WHEN ROUND((PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER),0) IN (10,11,12,13,14) THEN 12 "
                    + "WHEN ROUND((PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER),0) IN (16,17,18,19,20) THEN 18 "
                    + "WHEN ROUND((PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER),0) IN (26,27,28,29,30) THEN 28 "
                    + "WHEN ROUND((PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER),0) NOT IN (4,5,6,10,11,12,13,14,16,17,18,19,20,26,27,28,29,30) THEN ROUND((PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER),0) END ) AS PO_RATE "
                    + "FROM DINESHMILLSA.D_PUR_PO_HEADER PH,DINESHMILLSA.D_PUR_PO_DETAIL PD "
                    + "WHERE PH.PO_NO = PD.PO_NO "
                    + "AND PO_DATE >= '2012-01-01' AND PH.APPROVED =1 AND PH.CANCELLED =0 AND PD.COLUMN_3_CAPTION = 'CGST' AND (PD.COLUMN_3_PER+PD.COLUMN_4_PER+PD.COLUMN_5_PER) >0  "
                    + "GROUP BY PH.PO_NO,PH.PO_DATE "
                    + ") AS PO "
                    + "ON VG.PO_NO = PO.PO_NO ";

            //"SELECT *,RIGHT(HSN_CODE,4) AS HSN FROM FINANCE.D_SAL_GSTR_INVOICE WHERE INVOICE_DATE>='" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' AND INVOICE_DATE <= '" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "' AND APPROVED=1 AND CANCELLED=0 ORDER BY INVOICE_DATE,INVOICE_NO " + ORDER_BY;
            ResultSet rs = data.getResult(strSQL);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {

                Object[] rowData = new Object[40];
                // rowData[0]=rs.getString("");
                //,,,,,,,,,,,,,,'N',,,,
                rowData[0] = cnt++;
                rowData[1] = "";
                rowData[2] = rs.getString("VOUCHER_NO");

                //rowData[3] = df.format(rs.getDate("VOUCHER_DATE"));
                if (rs.getDate("VOUCHER_DATE") == null || rs.getDate("VOUCHER_DATE").equals("") || rs.getDate("VOUCHER_DATE").equals("0000-00-00")) {
                    rowData[3] = "";
                } else {
                    rowData[3] = df.format(rs.getDate("VOUCHER_DATE"));
                }

                rowData[4] = rs.getString("GRN_NO");

                //rowData[5] = df.format(rs.getDate("GRN_DATE"));
                if (rs.getDate("GRN_DATE") == null || rs.getDate("GRN_DATE").equals("") || rs.getDate("GRN_DATE").equals("0000-00-00")) {
                    rowData[5] = "";
                } else {
                    rowData[5] = df.format(rs.getDate("GRN_DATE"));
                }

                rowData[6] = "";
                rowData[7] = "";
                rowData[8] = rs.getString("INVNO");
                rowData[9] = rs.getString("BOE_NO");

                //rowData[10] = df.format(rs.getDate("INVOICE_DATE"));
                if (rs.getDate("INVDATE") == null || rs.getDate("INVDATE").equals("") || rs.getDate("INVDATE").equals("0000-00-00")) {
                    rowData[10] = "";
                } else {
                    rowData[10] = df.format(rs.getDate("INVDATE"));
                }

                rowData[11] = rs.getString("ITEM_DESCRIPTION");
                rowData[12] = rs.getString("HSN");
                rowData[13] = rs.getString("PARTY_NAME");
                rowData[14] = rs.getString("GSTIN_NO");
                rowData[15] = rs.getString("TAXABLE_AMOUNT");
                rowData[16] = rs.getString("RATE");
                rowData[17] = "N";
                rowData[18] = rs.getString("CGST_AMT");
                rowData[19] = rs.getString("SGST_AMT");
                rowData[20] = rs.getString("IGST_AMT");
                rowData[21] = "";
                rowData[22] = "";
                rowData[23] = "";
                rowData[24] = "";
                rowData[25] = "";
                rowData[26] = "";
                rowData[27] = "";
                rowData[28] = "";
                rowData[29] = "";
                rowData[30] = rs.getString("PO_NO");
                rowData[31] = rs.getString("SUPP_CODE");
                rowData[32] = rs.getString("CATG");

                DataModelInputTax.addRow(rowData);
                rs.next();
            }
            rs.close();

        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
    }

}
