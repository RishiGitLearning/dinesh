/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.GSTR1;

import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.data;
import EITLERP.frmPendingApprovals;
import java.awt.Color;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.util.NumberToTextConverter;

/**
 *
 * @author Dharmendra PRAJAPATI
 *
 */
public class FrmGSTPortalDownload extends javax.swing.JApplet {

    static int tableWidth = 0; // set the tableWidth
    static int tableHeight = 0; // set the tableHeight

    private EITLTableModel DataModel;

    String seleval = "", seltyp = "", selqlt = "", selshd = "", selpiece = "", selext = "", selinv = "", selsz = "";
    private int mlstrc;

    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
    DateFormat dateForDB = new SimpleDateFormat("yyyy-MM-dd");

    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    public frmPendingApprovals frmPA;
    String fileName = "";

    private EITLComboModel cmbYearModel;
    private EITLComboModel cmbMonthModel;

    @Override
    public void init() {

        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        initComponents();
        file1.setVisible(false);
        cmdSave.setVisible(false);
//        FormatGrid();
        DataModel = new EITLTableModel();
        Table.removeAll();

        Table.setModel(DataModel);
        Table.setAutoResizeMode(0);
        DataModel.ClearAllReadOnly();
        GenerateCombo();
        cmbMonth.setSelectedIndex(EITLERPGLOBAL.getMonth(EITLERPGLOBAL.getCurrentDateDB()));
        cmbYear.setSelectedIndex(1);

        lblTitle1.setForeground(Color.WHITE);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void GenerateCombo() {

        ResultSet rsTmp;
        Connection tmpConn;
        Statement tmpStmt;
        tmpConn = data.getCreatedConn();

        cmbMonthModel = new EITLComboModel();
        cmbMonth.removeAllItems();  //Clearing previous contents
        cmbMonth.setModel(cmbMonthModel);

        ComboData aDataM = new ComboData();
        aDataM.Code = 0;
        aDataM.Text = "Select Month";
        cmbMonthModel.addElement(aDataM);

        for (int i = 1; i <= 12; i++) {
            aDataM.Code = i;
            if (i < 10) {
                aDataM.Text = String.valueOf(i) + " (" + EITLERPGLOBAL.getMonthName("2000-0" + String.valueOf(i) + "-01") + ")";
            } else {
                aDataM.Text = String.valueOf(i) + " (" + EITLERPGLOBAL.getMonthName("2000-" + String.valueOf(i) + "-01") + ")";
            }
            cmbMonthModel.addElement(aDataM);
        }

        long CounterY = 0;
        cmbYearModel = new EITLComboModel();
        cmbYear.removeAllItems();  //Clearing previous contents
        cmbYear.setModel(cmbYearModel);

        ComboData aDataY = new ComboData();
        aDataY.Code = CounterY;
        aDataY.Text = "Select Year";
        cmbYearModel.addElement(aDataY);

        try {
            tmpStmt = tmpConn.createStatement();
            rsTmp = tmpStmt.executeQuery("SELECT DISTINCT EXTRACT(YEAR FROM PROD_DATE) AS YEAR_ID FROM PRODUCTION.FELT_PROD_DATA ORDER BY PROD_DATE DESC");

            while (rsTmp.next()) {
                aDataY.Code = ++CounterY;
                aDataY.Text = rsTmp.getString("YEAR_ID");
                cmbYearModel.addElement(aDataY);
            }

            rsTmp.close();
            tmpStmt.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void FormatGrid() {
        try {

            ResultSet rs;
            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            Table.setAutoResizeMode(0);
            String sql = "SELECT '' AS SR_NO, "
                    + "'' AS FILEINDEX, "
                    + "'' AS TOTALFILES, "
                    + "'' AS GSTIN, "
                    + "'' AS FP, "
                    + "'' AS B2B_CTIN, "
                    + "'' AS B2B_CFS, "
                    + "'' AS B2B_CNAME, "
                    + "'' AS B2B_INV_ITMS_NUM, "
                    + "'' AS B2B_INV_ITMS_ITM_DET_SAMT, "
                    + "'' AS B2B_INV_ITMS_ITM_DET_CSAMT, "
                    + "'' AS B2B_INV_ITMS_ITM_DET_RT, "
                    + "'' AS B2B_INV_ITMS_ITM_DET_TXVAL, "
                    + "'' AS B2B_INV_ITMS_ITM_DET_CAMT, "
                    + "'' AS B2B_INV_ITMS_ITM_DET_IAMT, "
                    + "'' AS B2B_INV_VAL, "
                    + "'' AS B2B_INV_INV_TYP, "
                    + "'' AS B2B_INV_POS, "
                    + "'' AS B2B_INV_IDT, "
                    + "'' AS B2B_INV_RCHRG, "
                    + "'' AS B2B_INV_INUM, "
                    + "'' AS B2B_INV_CHKSUM, "
                    + "'' AS CDN_CFS, "
                    + "'' AS CDN_CTIN, "
                    + "'' AS CDN_NT_ITMS_NUM, "
                    + "'' AS CDN_NT_ITMS_ITM_DET_SAMT, "
                    + "'' AS CDN_NT_ITMS_ITM_DET_CSAMT, "
                    + "'' AS CDN_NT_ITMS_ITM_DET_RT, "
                    + "'' AS CDN_NT_ITMS_ITM_DET_TXVAL, "
                    + "'' AS CDN_NT_ITMS_ITM_DET_CAMT, "
                    + "'' AS CDN_NT_ITMS_ITM_DET_IAMT, "
                    + "'' AS CDN_NT_VAL, "
                    + "'' AS CDN_NT_NTTY, "
                    + "'' AS CDN_NT_IDT, "
                    + "'' AS CDN_NT_NT_NUM, "
                    + "'' AS CDN_NT_INUM, "
                    + "'' AS CDN_NT_NT_DT, "
                    + "'' AS CDN_NT_CHKSUM, "
                    + "'' AS CDN_NT_P_GST, "
                    + "'' AS B2BA_INV_ITMS_NUM, "
                    + "'' AS B2BA_INV_ITMS_ITM_DET_SAMT, "
                    + "'' AS B2BA_INV_ITMS_ITM_DET_RT, "
                    + "'' AS B2BA_INV_ITMS_ITM_DET_TXVAL, "
                    + "'' AS B2BA_INV_ITMS_ITM_DET_IAMT, "
                    + "'' AS B2BA_INV_ITMS_ITM_DET_CAMT, "
                    + "'' AS B2BA_INV_VAL, "
                    + "'' AS B2BA_INV_OINUM, "
                    + "'' AS B2BA_INV_INV_TYP, "
                    + "'' AS B2BA_INV_POS, "
                    + "'' AS B2BA_INV_IDT, "
                    + "'' AS B2BA_INV_RCHRG, "
                    + "'' AS B2BA_INV_INUM, "
                    + "'' AS B2BA_INV_OIDT, "
                    + "'' AS B2BA_INV_CHKSUM, "
                    + "'' AS B2BA_CFS, "
                    + "'' AS B2BA_CTIN "
                    + "FROM DUAL";
            // + ",'' AS Q1_WEIGHT,'' AS Q1_SQMTR,'' AS Q2_WEIGHT,'' AS Q2_SQMTR,'' AS Q3_WEIGHT,'' AS Q3_SQMTR,'' AS Q4_WEIGHT,'' AS Q4_SQMTR "
            //length*width*(gsm/1000)*q1=KG
            //length*width*q1=SQMT
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModel.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
                DataModel.SetReadOnly(i - 1);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        Tab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        lblStatus1 = new javax.swing.JLabel();
        file1 = new javax.swing.JFileChooser();
        cmdImport = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmbMonth = new javax.swing.JComboBox();
        cmbYear = new javax.swing.JComboBox();
        lblYear = new javax.swing.JLabel();
        lblMonth = new javax.swing.JLabel();
        lblTitle1 = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        Tab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        Tab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabMouseClicked(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table.setSelectionForeground(new java.awt.Color(51, 51, 255));
        Table.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TableFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TableFocusLost(evt);
            }
        });
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 50, 900, 350);

        lblStatus1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus1.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(lblStatus1);
        lblStatus1.setBounds(10, 410, 900, 20);
        jPanel1.add(file1);
        file1.setBounds(270, 40, 300, 330);

        cmdImport.setText("Import File");
        cmdImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdImportActionPerformed(evt);
            }
        });
        jPanel1.add(cmdImport);
        cmdImport.setBounds(400, 10, 140, 25);

        cmdSave.setText("SAVE");
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        jPanel1.add(cmdSave);
        cmdSave.setBounds(790, 10, 100, 25);

        cmbMonth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMonthItemStateChanged(evt);
            }
        });
        jPanel1.add(cmbMonth);
        cmbMonth.setBounds(70, 10, 120, 20);

        jPanel1.add(cmbYear);
        cmbYear.setBounds(250, 10, 120, 20);

        lblYear.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblYear.setText("Year ");
        jPanel1.add(lblYear);
        lblYear.setBounds(190, 10, 50, 15);

        lblMonth.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblMonth.setText("Month");
        jPanel1.add(lblMonth);
        lblMonth.setBounds(10, 10, 50, 15);

        Tab.addTab("Upload Excel Data", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(0, 40, 930, 480);

        lblTitle1.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle1.setText("GST Portal DOWNLOAD");
        lblTitle1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle1.setOpaque(true);
        getContentPane().add(lblTitle1);
        lblTitle1.setBounds(0, 0, 930, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void TabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabMouseClicked

    }//GEN-LAST:event_TabMouseClicked

    private void cmdImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdImportActionPerformed
        // TODO add your handling code here:
        if (cmbMonth.getSelectedIndex() != 0 && cmbYear.getSelectedIndex() != 0) {
            //if (!data.IsRecordExist("SELECT * FROM FINANCE.D_FIN_GST_PORTAL_DOWNLOAD WHERE FILE_YEAR='" + cmbYear.getSelectedItem() + "' AND FILE_MONTH='" + cmbMonth.getSelectedItem().toString().substring(0, 2).trim() + "'")) {
                value_import_file();
                value_insert_data();
            //    cmdImport.setVisible(false);
                cmdSave.setVisible(true);
            //} else {
            //    JOptionPane.showMessageDialog(null, "Data already Saved for Selected Month and Year.", "Message", JOptionPane.PLAIN_MESSAGE);
            //}
        } else {
            JOptionPane.showMessageDialog(null, "Please Select Month and Year.", "Message", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_cmdImportActionPerformed

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed

    }//GEN-LAST:event_TableKeyPressed

    private void TableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableFocusLost
        // TODO add your handling code here:
        lblStatus1.setText("");
    }//GEN-LAST:event_TableFocusLost

    private void TableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_TableFocusGained

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
int datafound=data.getIntValueFromDB("SELECT COUNT(*) FROM FINANCE.TMP_GST_PORTAL_DOWNLOAD WHERE CONCAT(FILE_MONTH,FILE_YEAR)=FP"); 
                if(datafound==0){
                    JOptionPane.showMessageDialog(null, "For The Period does not match with file month and file year", "Message", JOptionPane.PLAIN_MESSAGE);
                }
                else{
                  value_insert_portal_data();
                  cmdSave.setVisible(false);  
                }

        //if (!data.IsRecordExist("SELECT * FROM FINANCE.D_FIN_GST_PORTAL_DOWNLOAD WHERE FILE_YEAR='" + cmbYear.getSelectedItem() + "' AND FILE_MONTH='" + cmbMonth.getSelectedItem().toString().substring(0, 2).trim() + "'")) {
//            value_insert_portal_data();
//            cmdSave.setVisible(false);
        //} else {
        //    JOptionPane.showMessageDialog(null, "Data already Saved for Selected Month and Year.", "Message", JOptionPane.PLAIN_MESSAGE);
        //}
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmbMonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMonthItemStateChanged
        // TODO add your handling code here:
//        System.out.println("Index Month : " + cmbMonth.getSelectedIndex());
    }//GEN-LAST:event_cmbMonthItemStateChanged

//    private void Save() {
//
//        if (Table.getRowCount() <= 0) {
//            JOptionPane.showMessageDialog(this, "Enter Budget Details Before Saving.", "ERROR", JOptionPane.ERROR_MESSAGE);
//            return;
//        }
//        SetData();
//
//        //BudgetUpload.LoadData();
//        if (BudgetUpload.Insert()) {
//            } else {
//                JOptionPane.showMessageDialog(this, "Error occured while saving. Error is " + BudgetUpload.LastError, " SAVING ERROR", JOptionPane.ERROR_MESSAGE);
//                return;
//        }
//    }
//    
//    private void SetData() {
//
////      
//        BudgetUpload.setAttribute("DOC_NO", DOC_NO1.getText());
//
//        DOC_NO = DOC_NO1.getText();
//
//        BudgetUpload.setAttribute("DOC_NO", DOC_NO);
//        BudgetUpload.setAttribute("MODULE_ID", ModuleId);
//        BudgetUpload.setAttribute("USER_ID", EITLERPGLOBAL.gNewUserID);
//
//        BudgetUpload.setAttribute("REJECTED_REMARKS", txtToRemarks.getText());
//        BudgetUpload.setAttribute("REMARKS", "");
//        BudgetUpload.setAttribute("APPROVAL_STATUS", "");
//        BudgetUpload.setAttribute("APPROVER_REMARKS", txtFromRemarks.getText());
//        BudgetUpload.setAttribute("ENTRY_DATE", EITLERPGLOBAL.getCurrentDateDB());
//
//        //----- Update Approval Specific Fields -----------//
//        BudgetUpload.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
//        BudgetUpload.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
//        BudgetUpload.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
//        BudgetUpload.setAttribute("FROM_REMARKS", txtToRemarks.getText());
//
//        if (OpgApprove.isSelected()) {
//            BudgetUpload.setAttribute("APPROVAL_STATUS", "A");
//        }
//
//        if (OpgFinal.isSelected()) {
//            BudgetUpload.setAttribute("APPROVAL_STATUS", "F");
//        }
//
//        if (OpgReject.isSelected()) {
//            BudgetUpload.setAttribute("APPROVAL_STATUS", "R");
//            BudgetUpload.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
//        }
//
//        if (OpgHold.isSelected()) {
//            BudgetUpload.setAttribute("APPROVAL_STATUS", "H");
//        }
//        //-------------------------------------------------//
//
//        if (EditMode == EITLERPGLOBAL.ADD) {
//            BudgetUpload.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
//            BudgetUpload.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
//        } else {
//            BudgetUpload.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
//            BudgetUpload.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
//            BudgetUpload.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);
//            BudgetUpload.setAttribute("UPDATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
//        }
//        BudgetUpload.colMRItems.clear();
//        double mq1, mq2, mq3, mq4;
//        for (int m = 0; m < Table.getRowCount(); m++) {
//            try {
//                mq1 = Double.parseDouble(Table.getValueAt(m, 22).toString());
//            } catch (Exception e) {
//                mq1 = 0;
//            }
//            try {
//                mq2 = Double.parseDouble(Table.getValueAt(m, 25).toString());
//            } catch (Exception e) {
//                mq2 = 0;
//            }
//            try {
//                mq3 = Double.parseDouble(Table.getValueAt(m, 28).toString());
//            } catch (Exception e) {
//                mq3 = 0;
//            }
//            try {
//                mq4 = Double.parseDouble(Table.getValueAt(m, 31).toString());
//            } catch (Exception e) {
//                mq4 = 0;
//            }
//
//            if (mq1 > 0 || mq2 > 0 || mq3 > 0 || mq4 > 0) {
//                clsBudgetUploadItem ObjItem = new clsBudgetUploadItem();
//
//                ObjItem.setAttribute("DOC_NO", DOC_NO1.getText());
//                ObjItem.setAttribute("YEAR_FROM", txtyearfrom.getText());
//                ObjItem.setAttribute("YEAR_TO", lblyearto.getText());
//                ObjItem.setAttribute("PARTY_CODE", Table.getValueAt(m, 1).toString());
//                ObjItem.setAttribute("PARTY_NAME", Table.getValueAt(m, 2).toString());
//                ObjItem.setAttribute("MACHINE_NO", Table.getValueAt(m, 3).toString());
//                ObjItem.setAttribute("POSITION_NO", Table.getValueAt(m, 4).toString());
//                ObjItem.setAttribute("POSITION_DESC", Table.getValueAt(m, 5).toString());
//                ObjItem.setAttribute("STYLE", Table.getValueAt(m, 6).toString());
//                ObjItem.setAttribute("PRESS_LENGTH", Double.parseDouble(Table.getValueAt(m, 7).toString()));
//                ObjItem.setAttribute("PRESS_WIDTH", Double.parseDouble(Table.getValueAt(m, 8).toString()));
//                ObjItem.setAttribute("PRESS_GSM", Double.parseDouble(Table.getValueAt(m, 9).toString()));
//                ObjItem.setAttribute("PRESS_WEIGHT", Double.parseDouble(Table.getValueAt(m, 10).toString()));
//                ObjItem.setAttribute("PRESS_SQMTR", Double.parseDouble(Table.getValueAt(m, 11).toString()));
//                ObjItem.setAttribute("DRY_LENGTH", Double.parseDouble(Table.getValueAt(m, 12).toString()));
//                ObjItem.setAttribute("DRY_WIDTH", Double.parseDouble(Table.getValueAt(m, 13).toString()));
//                ObjItem.setAttribute("DRY_SQMTR", Double.parseDouble(Table.getValueAt(m, 14).toString()));
//                ObjItem.setAttribute("DRY_WEIGHT", Double.parseDouble(Table.getValueAt(m, 15).toString()));
//                ObjItem.setAttribute("QUALITY_NO", Table.getValueAt(m, 16).toString());
//                ObjItem.setAttribute("GROUP_NAME", Table.getValueAt(m, 17).toString());
//                ObjItem.setAttribute("SELLING_PRICE", Double.parseDouble(Table.getValueAt(m, 18).toString()));
//                ObjItem.setAttribute("SPL_DISCOUNT", Double.parseDouble(Table.getValueAt(m, 19).toString()));
//                ObjItem.setAttribute("WIP", Double.parseDouble(Table.getValueAt(m, 20).toString()));
//                ObjItem.setAttribute("STOCK", Double.parseDouble(Table.getValueAt(m, 21).toString()));
//                try {
//                    ObjItem.setAttribute("Q1", Double.parseDouble(Table.getValueAt(m, 22).toString()));
//                    ObjItem.setAttribute("Q1KG", Double.parseDouble(Table.getValueAt(m, 23).toString()));
//                    ObjItem.setAttribute("Q1SQMTR", Double.parseDouble(Table.getValueAt(m, 24).toString()));
//                } catch (Exception q1) {
//                    ObjItem.setAttribute("Q1", 0.0);
//                    ObjItem.setAttribute("Q1KG", 0.0);
//                    ObjItem.setAttribute("Q1SQMTR", 0.0);
//                }
//                try {
//                    ObjItem.setAttribute("Q2", Double.parseDouble(Table.getValueAt(m, 25).toString()));
//                    ObjItem.setAttribute("Q2KG", Double.parseDouble(Table.getValueAt(m, 26).toString()));
//                    ObjItem.setAttribute("Q2SQMTR", Double.parseDouble(Table.getValueAt(m, 27).toString()));
//                } catch (Exception q2) {
//                    ObjItem.setAttribute("Q2", 0.0);
//                    ObjItem.setAttribute("Q2KG", 0.0);
//                    ObjItem.setAttribute("Q2SQMTR", 0.0);
//                }
//                try {
//                    ObjItem.setAttribute("Q3", Double.parseDouble(Table.getValueAt(m, 28).toString()));
//                    ObjItem.setAttribute("Q3KG", Double.parseDouble(Table.getValueAt(m, 29).toString()));
//                    ObjItem.setAttribute("Q3SQMTR", Double.parseDouble(Table.getValueAt(m, 30).toString()));
//                } catch (Exception q3) {
//                    ObjItem.setAttribute("Q3", 0.0);
//                    ObjItem.setAttribute("Q3KG", 0.0);
//                    ObjItem.setAttribute("Q3SQMTR", 0.0);
//                }
//                try {
//                    ObjItem.setAttribute("Q4", Double.parseDouble(Table.getValueAt(m, 31).toString()));
//                    ObjItem.setAttribute("Q4KG", Double.parseDouble(Table.getValueAt(m, 32).toString()));
//                    ObjItem.setAttribute("Q4SQMTR", Double.parseDouble(Table.getValueAt(m, 33).toString()));
//                } catch (Exception q4) {
//                    ObjItem.setAttribute("Q4", 0.0);
//                    ObjItem.setAttribute("Q4KG", 0.0);
//                    ObjItem.setAttribute("Q4SQMTR", 0.0);
//                }
//                ObjItem.setAttribute("TOTAL", Double.parseDouble(Table.getValueAt(m, 34).toString()));
//                ObjItem.setAttribute("TOTAL_KG", Double.parseDouble(Table.getValueAt(m, 35).toString()));
//                ObjItem.setAttribute("TOTAL_SQMTR", Double.parseDouble(Table.getValueAt(m, 36).toString()));
//                ObjItem.setAttribute("GST_PER", Double.parseDouble(Table.getValueAt(m, 37).toString()));
//                ObjItem.setAttribute("GROSS_AMOUNT", Double.parseDouble(Table.getValueAt(m, 38).toString()));
//                ObjItem.setAttribute("DISCOUNT_AMOUNT", Double.parseDouble(Table.getValueAt(m, 39).toString()));
//                ObjItem.setAttribute("NET_AMOUNT", Double.parseDouble(Table.getValueAt(m, 40).toString()));
//                ObjItem.setAttribute("PARTY_STATUS", Table.getValueAt(m, 41).toString());
//                ObjItem.setAttribute("REMARKS", Table.getValueAt(m, 42).toString());
//                ObjItem.setAttribute("PP_REMARKS", Table.getValueAt(m, 43).toString());
//                BudgetUpload.colMRItems.put(Integer.toString(BudgetUpload.colMRItems.size() + 1), ObjItem);
//            }
//        }
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JTable Table;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JComboBox cmbMonth;
    private javax.swing.JComboBox cmbYear;
    private javax.swing.JButton cmdImport;
    private javax.swing.JButton cmdSave;
    private javax.swing.JFileChooser file1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMonth;
    private javax.swing.JLabel lblStatus1;
    private javax.swing.JLabel lblTitle1;
    private javax.swing.JLabel lblYear;
    // End of variables declaration//GEN-END:variables

    private void import_data() {
        Connection Conn = null, con = null;
        Statement stmt = null;
        fileName = "";

        try {
            String strSQL = "";
            Conn = data.getConn();
            Conn.setAutoCommit(false);
            stmt = Conn.createStatement();

            con = data.getConn();
            PreparedStatement pstm = null;
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showOpenDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);
            FileInputStream input = new FileInputStream(file);

            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            Table.setAutoResizeMode(0);
            DataModel.ClearAllReadOnly();
            DataModel.addColumn("SR_NO");

            if (!file.getName().endsWith("xls")) {
                JOptionPane.showMessageDialog(null,
                        "Please select only .xls formated Excel file.",
                        "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                fileName = file.getName();
//                    fillData(file);
//                    model = new DefaultTableModel(data,
//                            headers);
//                    tableWidth = model.getColumnCount()
//                            * 150;
//                    tableHeight = model.getRowCount()
//                            * 25;
//                    table.setPreferredSize(new Dimension(
//                            tableWidth, tableHeight));
//
//                    table.setModel(model);
//                }
                POIFSFileSystem fs = new POIFSFileSystem(input);
                HSSFWorkbook wb = new HSSFWorkbook(fs);
                HSSFSheet sheet = wb.getSheetAt(0);
                Row row;
                int k = 1, r = 0, m = 0;
                String cellName = "";

                data.Execute("DROP TABLE FINANCE.TMP_GST_PORTAL_DOWNLOAD");
                data.Execute("CREATE TABLE FINANCE.TMP_GST_PORTAL_DOWNLOAD (FILE_MONTH varchar(255),FILE_YEAR varchar(255))");

//                FormatGrid();
                for (int i = 0; i < sheet.getRow(0).getLastCellNum(); i++) {
                    cellName = sheet.getRow(0).getCell((short) i).toString().toUpperCase();
                    data.Execute("ALTER TABLE FINANCE.TMP_GST_PORTAL_DOWNLOAD ADD " + cellName + " varchar(255)");
                    DataModel.addColumn(cellName);
                    DataModel.SetReadOnly(i);
                }

                System.out.println("TABLE CREATED");

                String InsertSQL = "";

                for (int i = 1; i <= sheet.getLastRowNum(); i++) {
                    row = (Row) sheet.getRow(i);
                    Object[] rowData = new Object[100];
                    rowData[0] = i;
                    InsertSQL = "INSERT INTO FINANCE.TMP_GST_PORTAL_DOWNLOAD VALUES ('" + cmbMonth.getSelectedItem().toString().substring(0, 2).trim() + "', '" + cmbYear.getSelectedItem().toString() + "'";

//                    for (k = 0; k <= 55; k++) {
                    for (k = 0; k < sheet.getRow(0).getLastCellNum(); k++) {
                        try {
//                        if (k == 0 || k == 2 || k == 3 || k == 15) {
//                            rowData[k + 1] = row.getCell(k).getStringCellValue();
//                        } else {
                            rowData[k + 1] = row.getCell(k).getNumericCellValue();
                            InsertSQL += ", '" + row.getCell(k).getNumericCellValue() + "'";
//                        }

                        } catch (Exception a) {
                            try {
                                rowData[k + 1] = row.getCell(k).getStringCellValue();
                                InsertSQL += ", '" + row.getCell(k).getStringCellValue() + "'";
                            } catch (Exception b) {
                                rowData[k + 1] = "";
                                InsertSQL += ", ''";
                            }
                        }
                    }
                    InsertSQL += "); ";
//                    System.out.println("InsertSQL "+i+" : "+InsertSQL);
                    data.Execute(InsertSQL);
//                    String no = data.getStringValueFromDB("SELECT COUNT(*) FROM FINANCE.TMP_GST_PORTAL_DOWNLOAD");
//                    System.out.println("Record Inserted : "+no);
                    DataModel.addRow(rowData);

                    //System.out.println("Import rows " + i);
                }
                boolean cmdsv = true;
                cmdSave.setEnabled(cmdsv);
            }
            Conn.commit();
//            Conn.setAutoCommit(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void Upload_File() {
        Connection Conn = null, con = null;
        Statement stmt = null;

        try {
            String sql = "";
            Conn = data.getConn();
            Conn.setAutoCommit(false);
            stmt = Conn.createStatement();
            con = data.getConn();
            PreparedStatement pstm = null;

            ResultSet rsTmp = data.getResult("SELECT USER()");
            rsTmp.first();
            String str = rsTmp.getString(1);
            String str_split[] = str.split("@");

            Statement tmpStmt;

            tmpStmt = Conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            Conn.setAutoCommit(false);
            rsTmp = tmpStmt.executeQuery("SELECT * FROM FINANCE.TMP_GST_PORTAL_DOWNLOAD_DATA");

            sql = "INSERT INTO FINANCE.TMP_GST_PORTAL_DOWNLOAD_DATA "
                    + "(FILEINDEX, TOTALFILES, GSTIN, FP, B2B_CTIN, B2B_CFS, B2B_CNAME, B2B_INV_ITMS_NUM, "
                    + "B2B_INV_ITMS_ITM_DET_SAMT, B2B_INV_ITMS_ITM_DET_CSAMT, B2B_INV_ITMS_ITM_DET_RT, B2B_INV_ITMS_ITM_DET_TXVAL, "
                    + "B2B_INV_ITMS_ITM_DET_CAMT, B2B_INV_ITMS_ITM_DET_IAMT, B2B_INV_VAL, B2B_INV_INV_TYP, B2B_INV_POS, B2B_INV_IDT, "
                    + "B2B_INV_RCHRG, B2B_INV_INUM, B2B_INV_CHKSUM, CDN_CFS, CDN_CTIN, CDN_NT_ITMS_NUM, CDN_NT_ITMS_ITM_DET_SAMT, "
                    + "CDN_NT_ITMS_ITM_DET_CSAMT, CDN_NT_ITMS_ITM_DET_RT, CDN_NT_ITMS_ITM_DET_TXVAL, CDN_NT_ITMS_ITM_DET_CAMT, "
                    + "CDN_NT_ITMS_ITM_DET_IAMT, CDN_NT_VAL, CDN_NT_NTTY, CDN_NT_IDT, CDN_NT_NT_NUM, CDN_NT_INUM, CDN_NT_NT_DT, "
                    + "CDN_NT_CHKSUM, CDN_NT_P_GST, B2BA_INV_ITMS_NUM, B2BA_INV_ITMS_ITM_DET_SAMT, B2BA_INV_ITMS_ITM_DET_RT, "
                    + "B2BA_INV_ITMS_ITM_DET_TXVAL, B2BA_INV_ITMS_ITM_DET_IAMT, B2BA_INV_ITMS_ITM_DET_CAMT, B2BA_INV_VAL, "
                    + "B2BA_INV_OINUM, B2BA_INV_INV_TYP, B2BA_INV_POS, B2BA_INV_IDT, B2BA_INV_RCHRG, B2BA_INV_INUM, B2BA_INV_OIDT, "
                    + "B2BA_INV_CHKSUM, B2BA_CFS, B2BA_CTIN, USER_ID, RUN_DATETIME, FROM_IP, FILE_NAME, FILE_YEAR, FILE_MONTH ) ";

            sql = sql + "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            pstm = Conn.prepareStatement(sql);
            //Now Insert records into table
            for (int i = 0; i < Table.getRowCount(); i++) {

                pstm.setString(1, Table.getValueAt(i, 1).toString());
                pstm.setString(2, Table.getValueAt(i, 2).toString());
                pstm.setString(3, Table.getValueAt(i, 3).toString());
                pstm.setString(4, Table.getValueAt(i, 4).toString());
                pstm.setString(5, Table.getValueAt(i, 5).toString());
                pstm.setString(6, Table.getValueAt(i, 6).toString());
                pstm.setString(7, Table.getValueAt(i, 7).toString());
                pstm.setString(8, Table.getValueAt(i, 8).toString());
                pstm.setString(9, Table.getValueAt(i, 9).toString());
                pstm.setString(10, Table.getValueAt(i, 10).toString());
                pstm.setString(11, Table.getValueAt(i, 11).toString());
                pstm.setString(12, Table.getValueAt(i, 12).toString());
                pstm.setString(13, Table.getValueAt(i, 13).toString());
                pstm.setString(14, Table.getValueAt(i, 14).toString());
                pstm.setString(15, Table.getValueAt(i, 15).toString());
                pstm.setString(16, Table.getValueAt(i, 16).toString());
                pstm.setString(17, Table.getValueAt(i, 17).toString());
                pstm.setString(18, Table.getValueAt(i, 18).toString());
                pstm.setString(19, Table.getValueAt(i, 19).toString());
                pstm.setString(20, Table.getValueAt(i, 20).toString());
                pstm.setString(21, Table.getValueAt(i, 21).toString());
                pstm.setString(22, Table.getValueAt(i, 22).toString());
                pstm.setString(23, Table.getValueAt(i, 23).toString());
                pstm.setString(24, Table.getValueAt(i, 24).toString());
                pstm.setString(25, Table.getValueAt(i, 25).toString());
                pstm.setString(26, Table.getValueAt(i, 26).toString());
                pstm.setString(27, Table.getValueAt(i, 27).toString());
                pstm.setString(28, Table.getValueAt(i, 28).toString());
                pstm.setString(29, Table.getValueAt(i, 29).toString());
                pstm.setString(30, Table.getValueAt(i, 30).toString());
                pstm.setString(31, Table.getValueAt(i, 31).toString());
                pstm.setString(32, Table.getValueAt(i, 32).toString());
                pstm.setString(33, Table.getValueAt(i, 33).toString());
                pstm.setString(34, Table.getValueAt(i, 34).toString());
                pstm.setString(35, Table.getValueAt(i, 35).toString());
                pstm.setString(36, Table.getValueAt(i, 36).toString());
                pstm.setString(37, Table.getValueAt(i, 37).toString());
                pstm.setString(38, Table.getValueAt(i, 38).toString());
                pstm.setString(39, Table.getValueAt(i, 39).toString());
                pstm.setString(40, Table.getValueAt(i, 40).toString());
                pstm.setString(41, Table.getValueAt(i, 41).toString());
                pstm.setString(42, Table.getValueAt(i, 42).toString());
                pstm.setString(43, Table.getValueAt(i, 43).toString());
                pstm.setString(44, Table.getValueAt(i, 44).toString());
                pstm.setString(45, Table.getValueAt(i, 45).toString());
                pstm.setString(46, Table.getValueAt(i, 46).toString());
                pstm.setString(47, Table.getValueAt(i, 47).toString());
                pstm.setString(48, Table.getValueAt(i, 48).toString());
                pstm.setString(49, Table.getValueAt(i, 49).toString());
                pstm.setString(50, Table.getValueAt(i, 50).toString());
                pstm.setString(51, Table.getValueAt(i, 51).toString());
                pstm.setString(52, Table.getValueAt(i, 52).toString());
                pstm.setString(53, Table.getValueAt(i, 53).toString());
                pstm.setString(54, Table.getValueAt(i, 54).toString());
                pstm.setString(55, Table.getValueAt(i, 55).toString());
                pstm.setString(56, String.valueOf(EITLERPGLOBAL.gUserID));
                pstm.setString(57, EITLERPGLOBAL.getCurrentDateTimeDB());
                pstm.setString(58, str_split[1]);
                pstm.setString(59, fileName);
                pstm.setString(60, cmbYear.getSelectedItem().toString());
                pstm.setString(61, cmbMonth.getSelectedItem().toString().substring(0, 2).trim());
                pstm.addBatch();

                if ((i + 1) % 1000 == 0) {
                    pstm.executeBatch();
                    Conn.commit();
                }
            }
            pstm.executeBatch();
            Conn.commit();
            Conn.setAutoCommit(true);

            JOptionPane.showMessageDialog(null, "Data SAVE Successfully.", "Message", JOptionPane.PLAIN_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void Upload_Portal_Data() {
        Connection Conn = null, con = null;
        Statement stmt = null;

        try {
            String sql = "";
            Conn = data.getConn();
            Conn.setAutoCommit(false);
            stmt = Conn.createStatement();
            con = data.getConn();
            PreparedStatement pstm = null;

            ResultSet rsTmp = data.getResult("SELECT USER()");
            rsTmp.first();
            String str = rsTmp.getString(1);
            String str_split[] = str.split("@");

            Statement tmpStmt;

            tmpStmt = Conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            Conn.setAutoCommit(false);
            rsTmp = tmpStmt.executeQuery("SELECT * FROM FINANCE.D_FIN_GST_PORTAL_DOWNLOAD");

            sql = "INSERT INTO FINANCE.D_FIN_GST_PORTAL_DOWNLOAD "
                    + "(FILE_YEAR, FILE_MONTH, GST_TYPE, COMPANY_GSTIN_NO, FOR_THE_PERIOD, PARTY_GSTIN_NO, PARTY_NAME, "
                    + "FILING_STATUS, ITEM_NUMBER, INVOICE_NO, INVOICE_DATE, GST_RATE, TAXABLE_AMOUNT, NET_AMOUNT, "
                    + "SGST_AMOUNT, CGST_AMOUNT, IGST_AMOUNT, CESS_AMOUNT, INVOICE_TYPE, PLACE_OF_SUPPLY, REVERCE_CHARGE, CHECKSUM, "
                    + "CREDIT_NOTE_NO, CREDIT_NOTE_DATE, CREDIT_NOTE_TYPE, CREDIT_NOTE_ISSUE_GST_REASON, ORIGINAL_INVOICE_NO, "
                    + "ORIGINAL_INVOICE_DATE, USER_ID, RUN_DATETIME, AUTO_INCREMENT, FROM_IP, FILE_NAME ) ";

            sql = sql + "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            pstm = Conn.prepareStatement(sql);
            //Now Insert records into table
            for (int i = 0; i < Table.getRowCount(); i++) {

                pstm.setString(1, Table.getValueAt(i, 1).toString());
                pstm.setString(2, Table.getValueAt(i, 2).toString());
                pstm.setString(3, Table.getValueAt(i, 3).toString());
                pstm.setString(4, Table.getValueAt(i, 4).toString());
                pstm.setString(5, Table.getValueAt(i, 5).toString());
                pstm.setString(6, Table.getValueAt(i, 6).toString());
                pstm.setString(7, Table.getValueAt(i, 7).toString());
                pstm.setString(8, Table.getValueAt(i, 8).toString());
                pstm.setString(9, Table.getValueAt(i, 9).toString());
                pstm.setString(10, Table.getValueAt(i, 10).toString());
                pstm.setString(11, Table.getValueAt(i, 11).toString());
                pstm.setString(12, Table.getValueAt(i, 12).toString());
                pstm.setString(13, Table.getValueAt(i, 13).toString());
                pstm.setString(14, Table.getValueAt(i, 14).toString());
                pstm.setString(15, Table.getValueAt(i, 15).toString());
                pstm.setString(16, Table.getValueAt(i, 16).toString());
                pstm.setString(17, Table.getValueAt(i, 17).toString());
                pstm.setString(18, Table.getValueAt(i, 18).toString());
                pstm.setString(19, Table.getValueAt(i, 19).toString());
                pstm.setString(20, Table.getValueAt(i, 20).toString());
                pstm.setString(21, Table.getValueAt(i, 21).toString());
                pstm.setString(22, Table.getValueAt(i, 22).toString());
                pstm.setString(23, Table.getValueAt(i, 23).toString());
                pstm.setString(24, Table.getValueAt(i, 24).toString());
                pstm.setString(25, Table.getValueAt(i, 25).toString());
                pstm.setString(26, Table.getValueAt(i, 26).toString());
                pstm.setString(27, Table.getValueAt(i, 27).toString());
                pstm.setString(28, Table.getValueAt(i, 28).toString());
                pstm.setString(29, Table.getValueAt(i, 29).toString());
                pstm.setString(30, Table.getValueAt(i, 30).toString());
                pstm.setString(31, Table.getValueAt(i, 31).toString());
                pstm.setString(32, Table.getValueAt(i, 32).toString());
                pstm.setString(33, Table.getValueAt(i, 33).toString());
                pstm.setString(34, Table.getValueAt(i, 34).toString());
                pstm.setString(35, Table.getValueAt(i, 35).toString());
                pstm.setString(36, Table.getValueAt(i, 36).toString());
                pstm.setString(37, Table.getValueAt(i, 37).toString());
                pstm.setString(38, Table.getValueAt(i, 38).toString());
                pstm.setString(39, Table.getValueAt(i, 39).toString());
                pstm.setString(40, Table.getValueAt(i, 40).toString());
                pstm.setString(41, Table.getValueAt(i, 41).toString());
                pstm.setString(42, Table.getValueAt(i, 42).toString());
                pstm.setString(43, Table.getValueAt(i, 43).toString());
                pstm.setString(44, Table.getValueAt(i, 44).toString());
                pstm.setString(45, Table.getValueAt(i, 45).toString());
                pstm.setString(46, Table.getValueAt(i, 46).toString());
                pstm.setString(47, Table.getValueAt(i, 47).toString());
                pstm.setString(48, Table.getValueAt(i, 48).toString());
                pstm.setString(49, Table.getValueAt(i, 49).toString());
                pstm.setString(50, Table.getValueAt(i, 50).toString());
                pstm.setString(51, Table.getValueAt(i, 51).toString());
                pstm.setString(52, Table.getValueAt(i, 52).toString());
                pstm.setString(53, Table.getValueAt(i, 53).toString());
                pstm.setString(54, Table.getValueAt(i, 54).toString());
                pstm.setString(55, Table.getValueAt(i, 55).toString());
                pstm.setString(56, String.valueOf(EITLERPGLOBAL.gUserID));
                pstm.setString(57, EITLERPGLOBAL.getCurrentDateTimeDB());
                pstm.setString(58, str_split[1]);
                pstm.setString(59, fileName);
                pstm.setString(60, cmbYear.getSelectedItem().toString());
                pstm.setString(61, cmbMonth.getSelectedItem().toString().substring(0, 2).trim());
                pstm.addBatch();

                if ((i + 1) % 1000 == 0) {
                    pstm.executeBatch();
                    Conn.commit();
                }
            }
            pstm.executeBatch();
            Conn.commit();
            Conn.setAutoCommit(true);

            JOptionPane.showMessageDialog(null, "Data SAVE Successfully.", "Message", JOptionPane.PLAIN_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void value_import_file() {

        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showOpenDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);
            FileInputStream input = new FileInputStream(file);

            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            Table.setAutoResizeMode(0);
            DataModel.ClearAllReadOnly();
            DataModel.addColumn("SR_NO");

            if (!file.getName().endsWith("xls")) {
                JOptionPane.showMessageDialog(null,
                        "Please select only .xls formated Excel file.",
                        "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                fileName = file.getName();
//                    fillData(file);
//                    model = new DefaultTableModel(data,
//                            headers);
//                    tableWidth = model.getColumnCount()
//                            * 150;
//                    tableHeight = model.getRowCount()
//                            * 25;
//                    table.setPreferredSize(new Dimension(
//                            tableWidth, tableHeight));
//
//                    table.setModel(model);
//                }
                POIFSFileSystem fs = new POIFSFileSystem(input);
                HSSFWorkbook wb = new HSSFWorkbook(fs);
                HSSFSheet sheet = wb.getSheetAt(0);
                Row row;
                int k = 1, r = 0, m = 0;
                String cellName = "";
                String cellValue = "";
                String tempGSTIN = "";
                String tempFP = "";

                String tempB2B_CTIN = "";
                String tempB2B_CFS = "";
                String tempB2B_CNAME = "";
                String tempB2B_INV_VAL = "";
                String tempB2B_INV_TYP = "";
                String tempB2B_INV_POS = "";
                String tempB2B_INV_IDT = "";
                String tempB2B_INV_RCHRG = "";
                String tempB2B_INV_INUM = "";
                String tempB2B_INV_CHKSUM = "";

                String tempCDN_CFS = "";
                String tempCDN_CTIN = "";
                String tempCDN_NT_VAL = "";
                String tempCDN_NT_NTTY = "";
                String tempCDN_NT_IDT = "";
                String tempCDN_NT_NT_NUM = "";
                String tempCDN_NT_INUM = "";
                String tempCDN_NT_NT_DT = "";
                String tempCDN_NT_CHKSUM = "";
                String tempCDN_NT_P_GST = "";

                String tempB2BA_INV_VAL = "";
                String tempB2BA_INV_OINUM = "";
                String tempB2BA_INV_TYP = "";
                String tempB2BA_INV_POS = "";
                String tempB2BA_INV_IDT = "";
                String tempB2BA_INV_RCHRG = "";
                String tempB2BA_INV_INUM = "";
                String tempB2BA_INV_OIDT = "";
                String tempB2BA_INV_CHKSUM = "";
                String tempB2BA_CFS = "";
                String tempB2BA_CTIN = "";

                data.Execute("DROP TABLE FINANCE.TMP_GST_PORTAL_DOWNLOAD");
                data.Execute("CREATE TABLE FINANCE.TMP_GST_PORTAL_DOWNLOAD (FILE_MONTH varchar(255),FILE_YEAR varchar(255))");
//                FormatGrid();
                for (int i = 0; i < sheet.getRow(0).getLastCellNum(); i++) {
                    cellName = sheet.getRow(0).getCell((short) i).toString().toUpperCase();
                    cellName = cellName.replaceAll("__", "_");
                    data.Execute("ALTER TABLE FINANCE.TMP_GST_PORTAL_DOWNLOAD ADD " + cellName + " varchar(255)");
                    DataModel.addColumn(cellName);
                    DataModel.SetReadOnly(i);
                }

                System.out.println("TABLE CREATED");
//                String InsertSQL = "";
                for (int i = 1; i <= sheet.getLastRowNum(); i++) {
                    row = (Row) sheet.getRow(i);
                    Object[] rowData = new Object[500];
                    rowData[0] = i;
//                    InsertSQL = "INSERT INTO FINANCE.TMP_GST_PORTAL_DOWNLOAD VALUES ('" + cmbMonth.getSelectedItem().toString().substring(0, 2).trim() + "', '" + cmbYear.getSelectedItem().toString() + "'";

//                    for (k = 0; k <= 55; k++) {
                    for (k = 0; k < sheet.getRow(0).getLastCellNum(); k++) {
                        try {
//                        if (k == 0 || k == 2 || k == 3 || k == 15) {
//                            rowData[k + 1] = row.getCell(k).getStringCellValue();
//                        } else {
//                            System.out.println("cell Type "+i+": "+row.getCell(k).getCellType());
                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().contains("__IDT") || sheet.getRow(0).getCell((short) k).toString().toUpperCase().contains("__NT_DT") || sheet.getRow(0).getCell((short) k).toString().toUpperCase().contains("__OLDT")) {
                                cellValue = (new SimpleDateFormat("dd/MM/yyyy").format(row.getCell(k).getDateCellValue()));
                                rowData[k + 1] = cellValue;
                            } else if (row.getCell(k).getCellType() == Cell.CELL_TYPE_NUMERIC) {
                                cellValue = NumberToTextConverter.toText(row.getCell(k).getNumericCellValue());
                                rowData[k + 1] = cellValue;
                            } else {
                                cellValue = row.getCell(k).getStringCellValue();
                                if (cellValue.equals("null")) {
                                    cellValue = " ";
                                }
                                rowData[k + 1] = cellValue;
                            }
//                            rowData[k + 1] = row.getCell(k).getNumericCellValue();
//                            InsertSQL += ", '" + row.getCell(k).getNumericCellValue() + "'";
//                        }
                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("GSTIN")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempGSTIN;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempGSTIN = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("FP")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempFP;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempFP = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2B__CTIN")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempB2B_CTIN;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempB2B_CTIN = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2B__CFS")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempB2B_CFS;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempB2B_CFS = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2B__CNAME")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempB2B_CNAME;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempB2B_CNAME = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2B__INV__VAL")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempB2B_INV_VAL;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempB2B_INV_VAL = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2B__INV__INV_TYP")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempB2B_INV_TYP;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempB2B_INV_TYP = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2B__INV__POS")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempB2B_INV_POS;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempB2B_INV_POS = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2B__INV__IDT")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempB2B_INV_IDT;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempB2B_INV_IDT = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2B__INV__RCHRG")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempB2B_INV_RCHRG;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempB2B_INV_RCHRG = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2B__INV__INUM")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempB2B_INV_INUM;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempB2B_INV_INUM = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2B__INV__CHKSUM")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempB2B_INV_CHKSUM;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempB2B_INV_CHKSUM = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("CDN__CFS")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempCDN_CFS;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempCDN_CFS = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("CDN__CTIN")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempCDN_CTIN;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempCDN_CTIN = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("CDN__NT__VAL")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempCDN_NT_VAL;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempCDN_NT_VAL = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("CDN__NT__NTTY")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempCDN_NT_NTTY;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempCDN_NT_NTTY = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("CDN__NT__IDT")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempCDN_NT_IDT;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempCDN_NT_IDT = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("CDN__NT__NT_NUM")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempCDN_NT_NT_NUM;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempCDN_NT_NT_NUM = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("CDN__NT__INUM")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempCDN_NT_INUM;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempCDN_NT_INUM = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("CDN__NT__NT_DT")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempCDN_NT_NT_DT;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempCDN_NT_NT_DT = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("CDN__NT__CHKSUM")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempCDN_NT_CHKSUM;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempCDN_NT_CHKSUM = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("CDN__NT__P_GST")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempCDN_NT_P_GST;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempCDN_NT_P_GST = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2BA__INV__VAL")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempB2BA_INV_VAL;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempB2BA_INV_VAL = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2BA__INV__OINUM")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempB2BA_INV_OINUM;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempB2BA_INV_OINUM = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2BA__INV__INV_TYP")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempB2BA_INV_TYP;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempB2BA_INV_TYP = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2BA__INV__POS")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempB2BA_INV_POS;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempB2BA_INV_POS = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2BA__INV__IDT")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempB2BA_INV_IDT;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempB2BA_INV_IDT = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2BA__INV__RCHRG")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempB2BA_INV_RCHRG;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempB2BA_INV_RCHRG = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2BA__INV__INUM")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempB2BA_INV_INUM;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempB2BA_INV_INUM = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2BA__INV__OIDT")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempB2BA_INV_OIDT;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempB2BA_INV_OIDT = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2BA__INV__CHKSUM")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempB2BA_INV_CHKSUM;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempB2BA_INV_CHKSUM = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2BA__CFS")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempB2BA_CFS;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempB2BA_CFS = cellValue;
                                }
                            }

                            if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2BA__CTIN")) {
//                                System.out.println("Value "+i+k+": "+row.getCell(k).toString());
                                if (cellValue.trim().equals("")) {
                                    rowData[k + 1] = tempB2BA_CTIN;
                                } else {
                                    rowData[k + 1] = cellValue;
                                    tempB2BA_CTIN = cellValue;
                                }
                            }

                        } catch (Exception a) {
                            try {
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().contains("B2B__INV__IDT")) {
                                    rowData[k + 1] = tempB2B_INV_IDT;
                                } else if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().contains("CDN__NT__IDT")) {
                                    rowData[k + 1] = tempCDN_NT_IDT;
                                } else if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().contains("CDN__NT__NT_DT")) {
                                    rowData[k + 1] = tempCDN_NT_NT_DT;
                                } else if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().contains("B2BA__INV__IDT")) {
                                    rowData[k + 1] = tempB2BA_INV_IDT;
                                } else if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().contains("B2BA__INV__OIDT")) {
                                    rowData[k + 1] = tempB2BA_INV_OIDT;
                                } else {
                                    rowData[k + 1] = row.getCell(k).getStringCellValue();
                                }
//                                InsertSQL += ", '" + row.getCell(k).getStringCellValue() + "'";
                            } catch (Exception b) {
                                rowData[k + 1] = "";
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("GSTIN")) {
                                    rowData[k + 1] = tempGSTIN;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("FP")) {
                                    rowData[k + 1] = tempFP;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2B__CTIN")) {
                                    rowData[k + 1] = tempB2B_CTIN;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2B__CFS")) {
                                    rowData[k + 1] = tempB2B_CFS;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2B__CNAME")) {
                                    rowData[k + 1] = tempB2B_CNAME;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2B__INV__VAL")) {
                                    rowData[k + 1] = tempB2B_INV_VAL;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2B__INV__INV_TYP")) {
                                    rowData[k + 1] = tempB2B_INV_TYP;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2B__INV__POS")) {
                                    rowData[k + 1] = tempB2B_INV_POS;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2B__INV__IDT")) {
                                    rowData[k + 1] = tempB2B_INV_IDT;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2B__INV__RCHRG")) {
                                    rowData[k + 1] = tempB2B_INV_RCHRG;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2B__INV__INUM")) {
                                    rowData[k + 1] = tempB2B_INV_INUM;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2B__INV__CHKSUM")) {
                                    rowData[k + 1] = tempB2B_INV_CHKSUM;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("CDN__CFS")) {
                                    rowData[k + 1] = tempCDN_CFS;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("CDN__CTIN")) {
                                    rowData[k + 1] = tempCDN_CTIN;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("CDN__NT__VAL")) {
                                    rowData[k + 1] = tempCDN_NT_VAL;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("CDN__NT__NTTY")) {
                                    rowData[k + 1] = tempCDN_NT_NTTY;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("CDN__NT__IDT")) {
                                    rowData[k + 1] = tempCDN_NT_IDT;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("CDN__NT__NT_NUM")) {
                                    rowData[k + 1] = tempCDN_NT_NT_NUM;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("CDN__NT__INUM")) {
                                    rowData[k + 1] = tempCDN_NT_INUM;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("CDN__NT__NT_DT")) {
                                    rowData[k + 1] = tempCDN_NT_NT_DT;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("CDN__NT__CHKSUM")) {
                                    rowData[k + 1] = tempCDN_NT_CHKSUM;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("CDN__NT__P_GST")) {
                                    rowData[k + 1] = tempCDN_NT_P_GST;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2BA__INV__VAL")) {
                                    rowData[k + 1] = tempB2BA_INV_VAL;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2BA__INV__OINUM")) {
                                    rowData[k + 1] = tempB2BA_INV_OINUM;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2BA__INV__INV_TYP")) {
                                    rowData[k + 1] = tempB2BA_INV_TYP;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2BA__INV__POS")) {
                                    rowData[k + 1] = tempB2BA_INV_POS;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2BA__INV__IDT")) {
                                    rowData[k + 1] = tempB2BA_INV_IDT;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2BA__INV__RCHRG")) {
                                    rowData[k + 1] = tempB2BA_INV_RCHRG;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2BA__INV__INUM")) {
                                    rowData[k + 1] = tempB2BA_INV_INUM;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2BA__INV__OIDT")) {
                                    rowData[k + 1] = tempB2BA_INV_OIDT;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2BA__INV__CHKSUM")) {
                                    rowData[k + 1] = tempB2BA_INV_CHKSUM;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2BA__CFS")) {
                                    rowData[k + 1] = tempB2BA_CFS;
                                }
                                if (sheet.getRow(0).getCell((short) k).toString().toUpperCase().equals("B2BA__CTIN")) {
                                    rowData[k + 1] = tempB2BA_CTIN;
                                }
//                                InsertSQL += ", ''";
                            }
                        }
                    }
//                    InsertSQL += "); ";
//                    System.out.println("InsertSQL "+i+" : "+InsertSQL);
//                    data.Execute(InsertSQL);
//                    String no = data.getStringValueFromDB("SELECT COUNT(*) FROM FINANCE.TMP_GST_PORTAL_DOWNLOAD");
//                    System.out.println("Record Inserted : "+no);
                    DataModel.addRow(rowData);

                    //System.out.println("Import rows " + i);
                }
                boolean cmdsv = true;
                cmdSave.setEnabled(cmdsv);
            }
            System.out.println("Total Column Count : " + Table.getColumnCount());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void value_insert_data() {
        Connection Conn = null, con = null;
        Statement stmt = null;

        try {
            String sql = "";
            Conn = data.getConn();
            Conn.setAutoCommit(false);
            stmt = Conn.createStatement();
            con = data.getConn();
            PreparedStatement pstm = null;

            ResultSet rsTmp = data.getResult("SELECT USER()");
            rsTmp.first();
            String str = rsTmp.getString(1);
            String str_split[] = str.split("@");

            Statement tmpStmt;

//            tmpStmt = Conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
//            Conn.setAutoCommit(false);
//            rsTmp = tmpStmt.executeQuery("SELECT * FROM FINANCE.TMP_GST_PORTAL_DOWNLOAD");
            sql = "INSERT INTO FINANCE.TMP_GST_PORTAL_DOWNLOAD (FILE_MONTH, FILE_YEAR";
            for (int i = 1; i < Table.getColumnCount(); i++) {
                sql = sql + ", " + Table.getColumnName(i);
            }
            sql = sql + ") ";

            //sql = sql + "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            sql = sql + "VALUES (?,?";
            for (int i = 1; i < Table.getColumnCount(); i++) {
                sql = sql + ",?";
            }
            sql = sql + ")";
            System.out.println("SQL :" + sql);
            pstm = Conn.prepareStatement(sql);
            //Now Insert records into table
            for (int i = 0; i < Table.getRowCount(); i++) {//Table.getRowCount()

                pstm.setString(1, cmbMonth.getSelectedItem().toString().substring(0, 2).trim());
                pstm.setString(2, cmbYear.getSelectedItem().toString());
                for (int k = 1; k < Table.getColumnCount(); k++) {
                    if (Table.getValueAt(i, k).toString().equals("") || Table.getValueAt(i, k).toString().equals("null")) {
                        pstm.setString((k + 2), "");
                    } else {
                        pstm.setString((k + 2), Table.getValueAt(i, k).toString());
                    }
                }
                pstm.addBatch();

                if ((i + 1) % 1000 == 0) {
                    pstm.executeBatch();
                    Conn.commit();
                }
            }
            pstm.executeBatch();
            Conn.commit();
            Conn.setAutoCommit(true);

//            JOptionPane.showMessageDialog(null, "Data SAVE Successfully.", "Message", JOptionPane.PLAIN_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void value_insert_portal_data() {
        Connection Conn = null, con = null;
        Statement stmt = null;

        try {
            String sql = "";
            Conn = data.getConn();
            Conn.setAutoCommit(false);
            stmt = Conn.createStatement();
            con = data.getConn();
            PreparedStatement pstm = null;

            ResultSet rsTmp = data.getResult("SELECT USER()");
            rsTmp.first();
            String str = rsTmp.getString(1);
            String str_split[] = str.split("@");

            Statement tmpStmt;

            HashMap List = new HashMap();
            long Counter = 0;

            tmpStmt = Conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            Conn.setAutoCommit(false);
            rsTmp = tmpStmt.executeQuery("SELECT * FROM FINANCE.TMP_GST_PORTAL_DOWNLOAD");

            sql = "INSERT INTO FINANCE.D_FIN_GST_PORTAL_DOWNLOAD "
                    + "(FILE_YEAR, FILE_MONTH, GST_TYPE, COMPANY_GSTIN_NO, FOR_THE_PERIOD, PARTY_GSTIN_NO, PARTY_NAME, "
                    + "FILING_STATUS, ITEM_NUMBER, INVOICE_NO, INVOICE_DATE, GST_RATE, TAXABLE_AMOUNT, NET_AMOUNT, SGST_AMOUNT, "
                    + "CGST_AMOUNT, IGST_AMOUNT, CESS_AMOUNT, INVOICE_TYPE, PLACE_OF_SUPPLY, REVERCE_CHARGE, CHECKSUM, "
                    + "CREDIT_NOTE_NO, CREDIT_NOTE_DATE, CREDIT_NOTE_TYPE, CREDIT_NOTE_ISSUE_GST_REASON, ORIGINAL_INVOICE_NO, "
                    + "ORIGINAL_INVOICE_DATE, USER_ID, RUN_DATETIME, FROM_IP, FILE_NAME ) ";

            sql = sql + "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            pstm = Conn.prepareStatement(sql);

            while (rsTmp.next()) {
                if (!rsTmp.getString("B2B_INV_ITMS_NUM").equals("")) {
                    System.out.println(rsTmp.getString("B2B_CTIN"));    
                    int datafound=data.getIntValueFromDB("SELECT COUNT(*) FROM FINANCE.D_FIN_GST_PORTAL_DOWNLOAD WHERE GST_TYPE='B2B' AND FOR_THE_PERIOD='"+rsTmp.getString("FP")+"' " +
                    "AND PARTY_GSTIN_NO='"+rsTmp.getString("B2B_CTIN")+"' AND INVOICE_DATE='"+EITLERPGLOBAL.formatDateDB(rsTmp.getString("B2B_INV_IDT"))+"' AND INVOICE_NO='"+rsTmp.getString("B2B_INV_INUM")+"'"); 
                if(datafound>0){
                    //rsTmp.next();
                    continue;
                }
                    
                    
                    pstm.setString(1, cmbYear.getSelectedItem().toString());
                    pstm.setString(2, cmbMonth.getSelectedItem().toString().substring(0, 2).trim());
                    pstm.setString(3, "B2B");
                    pstm.setString(4, rsTmp.getString("GSTIN"));
                    pstm.setString(5, rsTmp.getString("FP"));

                    try {
                        pstm.setString(6, rsTmp.getString("B2B_CTIN"));
                    } catch (Exception e) {
                        pstm.setString(6, "");
                    }

                    try {
                        pstm.setString(7, rsTmp.getString("B2B_CNAME"));
                    } catch (Exception e) {
                        pstm.setString(7, "");
                    }

                    try {
                        pstm.setString(8, rsTmp.getString("B2B_CFS"));
                    } catch (Exception e) {
                        pstm.setString(8, "");
                    }

                    try {
                        pstm.setString(9, rsTmp.getString("B2B_INV_ITMS_NUM"));
                    } catch (Exception e) {
                        pstm.setString(9, "");
                    }

                    try {
                        pstm.setString(10, rsTmp.getString("B2B_INV_INUM"));
                    } catch (Exception e) {
                        pstm.setString(10, "");
                    }

                    try {
                        pstm.setString(11, EITLERPGLOBAL.formatDateDB(rsTmp.getString("B2B_INV_IDT")));
                    } catch (Exception e) {
                        pstm.setString(11, "");
                    }

                    try {
                        pstm.setString(12, rsTmp.getString("B2B_INV_ITMS_ITM_DET_RT"));
                    } catch (Exception e) {
                        pstm.setString(12, "");
                    }

                    try {
                        pstm.setString(13, rsTmp.getString("B2B_INV_ITMS_ITM_DET_TXVAL"));
                    } catch (Exception e) {
                        pstm.setString(13, "");
                    }

                    try {
                        pstm.setString(14, rsTmp.getString("B2B_INV_VAL"));
                    } catch (Exception e) {
                        pstm.setString(14, "");
                    }

                    try {
                        pstm.setString(15, rsTmp.getString("B2B_INV_ITMS_ITM_DET_SAMT"));
                    } catch (Exception e) {
                        pstm.setString(15, "");
                    }

                    try {
                        pstm.setString(16, rsTmp.getString("B2B_INV_ITMS_ITM_DET_CAMT"));
                    } catch (Exception e) {
                        pstm.setString(16, "");
                    }

                    try {
                        pstm.setString(17, rsTmp.getString("B2B_INV_ITMS_ITM_DET_IAMT"));
                    } catch (Exception e) {
                        pstm.setString(17, "");
                    }

                    try {
                        pstm.setString(18, rsTmp.getString("B2B_INV_ITMS_ITM_DET_CSAMT"));
                    } catch (Exception e) {
                        pstm.setString(18, "");
                    }

                    try {
                        pstm.setString(19, rsTmp.getString("B2B_INV_INV_TYP"));
                    } catch (Exception e) {
                        pstm.setString(19, "");
                    }

                    try {
                        pstm.setString(20, rsTmp.getString("B2B_INV_POS"));
                    } catch (Exception e) {
                        pstm.setString(20, "");
                    }

                    try {
                        pstm.setString(21, rsTmp.getString("B2B_INV_RCHRG"));
                    } catch (Exception e) {
                        pstm.setString(21, "");
                    }

                    try {
                        pstm.setString(22, rsTmp.getString("B2B_INV_CHKSUM"));
                    } catch (Exception e) {
                        pstm.setString(22, "");
                    }

                    pstm.setString(23, "");
                    pstm.setString(24, "");
                    pstm.setString(25, "");
                    pstm.setString(26, "");
                    pstm.setString(27, "");
                    pstm.setString(28, "");

                    pstm.setString(29, String.valueOf(EITLERPGLOBAL.gUserID));
                    pstm.setString(30, EITLERPGLOBAL.getCurrentDateTimeDB());
                    pstm.setString(31, str_split[1]);
                    pstm.setString(32, fileName);

                    pstm.addBatch();
                }
            }
            rsTmp = tmpStmt.executeQuery("SELECT * FROM FINANCE.TMP_GST_PORTAL_DOWNLOAD");
            while (rsTmp.next()) {
                if (!rsTmp.getString("CDN_NT_ITMS_NUM").equals("")) {

                    int datafound=data.getIntValueFromDB("SELECT COUNT(*) FROM FINANCE.D_FIN_GST_PORTAL_DOWNLOAD WHERE GST_TYPE='CDN' AND FOR_THE_PERIOD='"+rsTmp.getString("FP")+"' " +
                    "AND PARTY_GSTIN_NO='"+rsTmp.getString("CDN_CTIN")+"' AND INVOICE_DATE='"+EITLERPGLOBAL.formatDateDB(rsTmp.getString("CDN_NT_IDT"))+"' AND INVOICE_NO='"+rsTmp.getString("CDN_NT_INUM")+"'"); 
                if(datafound>0){
                    rsTmp.next();
                    continue;
                }
                    
                    pstm.setString(1, cmbYear.getSelectedItem().toString());
                    pstm.setString(2, cmbMonth.getSelectedItem().toString().substring(0, 2).trim());
                    pstm.setString(3, "CDN");
                    pstm.setString(4, rsTmp.getString("GSTIN"));
                    pstm.setString(5, rsTmp.getString("FP"));

                    try {
                        pstm.setString(6, rsTmp.getString("CDN_CTIN"));
                    } catch (Exception e) {
                        pstm.setString(6, "");
                    }

                    try {
                        pstm.setString(7, rsTmp.getString("CDN_CNAME"));
                    } catch (Exception e) {
                        pstm.setString(7, "");
                    }

                    try {
                        pstm.setString(8, rsTmp.getString("CDN_CFS"));
                    } catch (Exception e) {
                        pstm.setString(8, "");
                    }

                    try {
                        pstm.setString(9, rsTmp.getString("CDN_NT_ITMS_NUM"));
                    } catch (Exception e) {
                        pstm.setString(9, "");
                    }

                    try {
                        pstm.setString(10, rsTmp.getString("CDN_NT_INUM"));
                    } catch (Exception e) {
                        pstm.setString(10, "");
                    }

                    try {
                        pstm.setString(11, EITLERPGLOBAL.formatDateDB(rsTmp.getString("CDN_NT_IDT")));
                    } catch (Exception e) {
                        pstm.setString(11, "");
                    }

                    try {
                        pstm.setString(12, rsTmp.getString("CDN_NT_ITMS_ITM_DET_RT"));
                    } catch (Exception e) {
                        pstm.setString(12, "");
                    }

                    try {
                        pstm.setString(13, rsTmp.getString("CDN_NT_ITMS_ITM_DET_TXVAL"));
                    } catch (Exception e) {
                        pstm.setString(13, "");
                    }

                    try {
                        pstm.setString(14, rsTmp.getString("CDN_NT_VAL"));
                    } catch (Exception e) {
                        pstm.setString(14, "");
                    }

                    try {
                        pstm.setString(15, rsTmp.getString("CDN_NT_ITMS_ITM_DET_SAMT"));
                    } catch (Exception e) {
                        pstm.setString(15, "");
                    }

                    try {
                        pstm.setString(16, rsTmp.getString("CDN_NT_ITMS_ITM_DET_CAMT"));
                    } catch (Exception e) {
                        pstm.setString(16, "");
                    }

                    try {
                        pstm.setString(17, rsTmp.getString("CDN_NT_ITMS_ITM_DET_IAMT"));
                    } catch (Exception e) {
                        pstm.setString(17, "");
                    }

                    try {
                        pstm.setString(18, rsTmp.getString("CDN_NT_ITMS_ITM_DET_CSAMT"));
                    } catch (Exception e) {
                        pstm.setString(18, "");
                    }

                    try {
                        pstm.setString(19, rsTmp.getString("CDN_NT_INV_TYP"));
                    } catch (Exception e) {
                        pstm.setString(19, "");
                    }

                    try {
                        pstm.setString(20, rsTmp.getString("CDN_NT_POS"));
                    } catch (Exception e) {
                        pstm.setString(20, "");
                    }

                    try {
                        pstm.setString(21, rsTmp.getString("CDN_NT_RCHRG"));
                    } catch (Exception e) {
                        pstm.setString(21, "");
                    }

                    try {
                        pstm.setString(22, rsTmp.getString("CDN_NT_CHKSUM"));
                    } catch (Exception e) {
                        pstm.setString(22, "");
                    }

                    try {
                        pstm.setString(23, rsTmp.getString("CDN_NT_NT_NUM"));
                    } catch (Exception e) {
                        pstm.setString(23, "");
                    }

                    try {
                        pstm.setString(24, EITLERPGLOBAL.formatDateDB(rsTmp.getString("CDN_NT_NT_DT")));
                    } catch (Exception e) {
                        pstm.setString(24, "");
                    }

                    try {
                        pstm.setString(25, rsTmp.getString("CDN_NT_NTTY"));
                    } catch (Exception e) {
                        pstm.setString(25, "");
                    }

                    try {
                        pstm.setString(26, rsTmp.getString("CDN_NT_P_GST"));
                    } catch (Exception e) {
                        pstm.setString(26, "");
                    }

                    pstm.setString(27, "");
                    pstm.setString(28, "");

                    pstm.setString(29, String.valueOf(EITLERPGLOBAL.gUserID));
                    pstm.setString(30, EITLERPGLOBAL.getCurrentDateTimeDB());
                    pstm.setString(31, str_split[1]);
                    pstm.setString(32, fileName);

                    pstm.addBatch();
                }
            }
            rsTmp = tmpStmt.executeQuery("SELECT * FROM FINANCE.TMP_GST_PORTAL_DOWNLOAD");
            while (rsTmp.next()) {
                if (!rsTmp.getString("B2BA_INV_ITMS_NUM").equals("")) {

                    int datafound=data.getIntValueFromDB("SELECT COUNT(*) FROM FINANCE.D_FIN_GST_PORTAL_DOWNLOAD WHERE GST_TYPE='B2BA' AND FOR_THE_PERIOD='"+rsTmp.getString("FP")+"' " +
                    "AND PARTY_GSTIN_NO='"+rsTmp.getString("B2BA_CTIN")+"' AND INVOICE_DATE='"+EITLERPGLOBAL.formatDateDB(rsTmp.getString("B2BA_INV_IDT"))+"' AND INVOICE_NO='"+rsTmp.getString("B2BA_INV_INUM")+"'"); 
                if(datafound>0){
                    rsTmp.next();
                    continue;
                }
                    
                    pstm.setString(1, cmbYear.getSelectedItem().toString());
                    pstm.setString(2, cmbMonth.getSelectedItem().toString().substring(0, 2).trim());
                    pstm.setString(3, "B2BA");
                    pstm.setString(4, rsTmp.getString("GSTIN"));
                    pstm.setString(5, rsTmp.getString("FP"));

                    try {
                        pstm.setString(6, rsTmp.getString("B2BA_CTIN"));
                    } catch (Exception e) {
                        pstm.setString(6, "");
                    }

                    try {
                        pstm.setString(7, rsTmp.getString("B2BA_CNAME"));
                    } catch (Exception e) {
                        pstm.setString(7, "");
                    }

                    try {
                        pstm.setString(8, rsTmp.getString("B2BA_CFS"));
                    } catch (Exception e) {
                        pstm.setString(8, "");
                    }

                    try {
                        pstm.setString(9, rsTmp.getString("B2BA_INV_ITMS_NUM"));
                    } catch (Exception e) {
                        pstm.setString(9, "");
                    }

                    try {
                        pstm.setString(10, rsTmp.getString("B2BA_INV_INUM"));
                    } catch (Exception e) {
                        pstm.setString(10, "");
                    }

                    try {
                        pstm.setString(11, EITLERPGLOBAL.formatDateDB(rsTmp.getString("B2BA_INV_IDT")));
                    } catch (Exception e) {
                        pstm.setString(11, "");
                    }

                    try {
                        pstm.setString(12, rsTmp.getString("B2BA_INV_ITMS_ITM_DET_RT"));
                    } catch (Exception e) {
                        pstm.setString(12, "");
                    }

                    try {
                        pstm.setString(13, rsTmp.getString("B2BA_INV_ITMS_ITM_DET_TXVAL"));
                    } catch (Exception e) {
                        pstm.setString(13, "");
                    }

                    try {
                        pstm.setString(14, rsTmp.getString("B2BA_INV_VAL"));
                    } catch (Exception e) {
                        pstm.setString(14, "");
                    }

                    try {
                        pstm.setString(15, rsTmp.getString("B2BA_INV_ITMS_ITM_DET_SAMT"));
                    } catch (Exception e) {
                        pstm.setString(15, "");
                    }

                    try {
                        pstm.setString(16, rsTmp.getString("B2BA_INV_ITMS_ITM_DET_CAMT"));
                    } catch (Exception e) {
                        pstm.setString(16, "");
                    }

                    try {
                        pstm.setString(17, rsTmp.getString("B2BA_INV_ITMS_ITM_DET_IAMT"));
                    } catch (Exception e) {
                        pstm.setString(17, "");
                    }

                    try {
                        pstm.setString(18, rsTmp.getString("B2BA_INV_ITMS_ITM_DET_CSAMT"));
                    } catch (Exception e) {
                        pstm.setString(18, "");
                    }

                    try {
                        pstm.setString(19, rsTmp.getString("B2BA_INV_INV_TYP"));
                    } catch (Exception e) {
                        pstm.setString(19, "");
                    }

                    try {
                        pstm.setString(20, rsTmp.getString("B2BA_INV_POS"));
                    } catch (Exception e) {
                        pstm.setString(20, "");
                    }

                    try {
                        pstm.setString(21, rsTmp.getString("B2BA_INV_RCHRG"));
                    } catch (Exception e) {
                        pstm.setString(21, "");
                    }

                    try {
                        pstm.setString(22, rsTmp.getString("B2BA_INV_CHKSUM"));
                    } catch (Exception e) {
                        pstm.setString(22, "");
                    }

                    pstm.setString(23, "");
                    pstm.setString(24, "");
                    pstm.setString(25, "");
                    pstm.setString(26, "");

                    try {
                        pstm.setString(27, rsTmp.getString("B2B_INV_OINUM"));
                    } catch (Exception e) {
                        pstm.setString(27, "");
                    }

                    try {
                        pstm.setString(28, EITLERPGLOBAL.formatDateDB(rsTmp.getString("B2BA_INV_OIDT")));
                    } catch (Exception e) {
                        pstm.setString(28, "");
                    }

                    pstm.setString(29, String.valueOf(EITLERPGLOBAL.gUserID));
                    pstm.setString(30, EITLERPGLOBAL.getCurrentDateTimeDB());
                    pstm.setString(31, str_split[1]);
                    pstm.setString(32, fileName);

                    pstm.addBatch();
                }
            }

            pstm.executeBatch();
            Conn.commit();
            Conn.setAutoCommit(true);

            JOptionPane.showMessageDialog(null, "Data SAVE Successfully.", "Message", JOptionPane.PLAIN_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

}
