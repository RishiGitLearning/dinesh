/* frmFeltSalesInfo.java 
 * 
 * 
 * Created on July 13, 2005, 10:47 AM
 */
package EITLERP.GSTR1;

import EITLERP.*;
import EITLERP.Finance.UtilFunctions;
import java.awt.Color;
import java.io.File;
import java.sql.*;
import javax.swing.*;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import javax.swing.table.JTableHeader;
import java.awt.*;
import java.util.*;
import java.lang.*;
import java.math.BigDecimal;


/**
 *
 * @author ashutosh/RISHI
 */
public class frmGSTR2Info extends javax.swing.JApplet {

    public boolean forceToChange = false;
    public boolean cancelled = false;
    private EITLTableModel[] DataModel;
    private EITLTableModel DataModelB2B = new EITLTableModel();
    private EITLTableModel DataModelHSNDetail = new EITLTableModel();
    private EITLTableModel DataModelHSNSummary = new EITLTableModel();

    String strProductCode = "";
    private JDialog aDialog;
    DateFormat df = new SimpleDateFormat("dd-MMM-yy");
    HashMap hmPieceList = new HashMap();
    String ORDER_BY = "";
    String Parameter="";
    private clsExcel_Exporter exp = new clsExcel_Exporter();

    public void init() {
        initComponents();
        file1.setVisible(false);
        FormatGrid();//780, 560
        FormatGridHSNDetail();
        setSize(780, 560);
        jLabel1.setForeground(Color.WHITE);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStatus = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        mnuDetail = new javax.swing.JPopupMenu();
        mnuItemMaterialDetail = new javax.swing.JMenuItem();
        mnuItemServiceDetail = new javax.swing.JMenuItem();
        mnuHSNwiseDetail = new javax.swing.JPopupMenu();
        mnuItemMaterialHSNwiseDetail = new javax.swing.JMenuItem();
        mnuItemServiceHSNwiseDetail = new javax.swing.JMenuItem();
        mnuItemMaterialRecvdandServiceHSNDetail = new javax.swing.JMenuItem();
        mnuHSNwiseSummary = new javax.swing.JPopupMenu();
        mnuItemMaterialHSNwiseSummary = new javax.swing.JMenuItem();
        mnuItemServiceHSNwiseSummary = new javax.swing.JMenuItem();
        mnuItemMaterialRecvdandServiceHSNSummary = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        btnShow = new javax.swing.JButton();
        ExportExcel = new javax.swing.JButton();
        file1 = new javax.swing.JFileChooser();
        jLabel11 = new javax.swing.JLabel();
        totalInvAmt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        totalTaxAmt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        totalSGSTAmt = new javax.swing.JTextField();
        totalCGSTAmt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        totalIGSTAmt = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        TableHSNDetail = new javax.swing.JTable();
        btnShowList = new javax.swing.JButton();
        ExportExcel1 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        totalInvAmt1 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        totalTaxAmt1 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        totalSGSTAmt1 = new javax.swing.JTextField();
        totalCGSTAmt1 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        totalIGSTAmt1 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        TableHSNSummary = new javax.swing.JTable();
        btnShowList1 = new javax.swing.JButton();
        ExportExcel2 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        totalTaxAmt2 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        totalSGSTAmt2 = new javax.swing.JTextField();
        totalCGSTAmt2 = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        totalIGSTAmt2 = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        txtToDate = new javax.swing.JTextField();
        CLR_BTN = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        mnuItemMaterialDetail.setText("Material");
        mnuItemMaterialDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuItemMaterialDetailActionPerformed(evt);
            }
        });
        mnuDetail.add(mnuItemMaterialDetail);

        mnuItemServiceDetail.setText("Service");
        mnuItemServiceDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuItemServiceDetailActionPerformed(evt);
            }
        });
        mnuDetail.add(mnuItemServiceDetail);

        mnuItemMaterialHSNwiseDetail.setText("Material");
        mnuItemMaterialHSNwiseDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuItemMaterialHSNwiseDetailActionPerformed(evt);
            }
        });
        mnuHSNwiseDetail.add(mnuItemMaterialHSNwiseDetail);

        mnuItemServiceHSNwiseDetail.setText("Service");
        mnuItemServiceHSNwiseDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuItemServiceHSNwiseDetailActionPerformed(evt);
            }
        });
        mnuHSNwiseDetail.add(mnuItemServiceHSNwiseDetail);

        mnuItemMaterialRecvdandServiceHSNDetail.setText("MaterialReceived+Service");
        mnuItemMaterialRecvdandServiceHSNDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuItemMaterialRecvdandServiceHSNDetailActionPerformed(evt);
            }
        });
        mnuHSNwiseDetail.add(mnuItemMaterialRecvdandServiceHSNDetail);

        mnuItemMaterialHSNwiseSummary.setText("Material");
        mnuItemMaterialHSNwiseSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuItemMaterialHSNwiseSummaryActionPerformed(evt);
            }
        });
        mnuHSNwiseSummary.add(mnuItemMaterialHSNwiseSummary);

        mnuItemServiceHSNwiseSummary.setText("Service");
        mnuItemServiceHSNwiseSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuItemServiceHSNwiseSummaryActionPerformed(evt);
            }
        });
        mnuHSNwiseSummary.add(mnuItemServiceHSNwiseSummary);

        mnuItemMaterialRecvdandServiceHSNSummary.setText("MaterialReceived+Service");
        mnuItemMaterialRecvdandServiceHSNSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuItemMaterialRecvdandServiceHSNSummaryActionPerformed(evt);
            }
        });
        mnuHSNwiseSummary.add(mnuItemMaterialRecvdandServiceHSNSummary);

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        getContentPane().setLayout(null);

        jTabbedPane1.setToolTipText("");

        jPanel10.setLayout(null);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
        });
        jScrollPane10.setViewportView(Table);

        jPanel10.add(jScrollPane10);
        jScrollPane10.setBounds(10, 50, 720, 260);

        btnShow.setText("Show List");
        btnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowActionPerformed(evt);
            }
        });
        jPanel10.add(btnShow);
        btnShow.setBounds(10, 10, 130, 30);

        ExportExcel.setText("EXPORT TO EXCEL");
        ExportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportExcelActionPerformed(evt);
            }
        });
        jPanel10.add(ExportExcel);
        ExportExcel.setBounds(540, 10, 170, 27);
        jPanel10.add(file1);
        file1.setBounds(160, -30, 509, 350);

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel11.setText("TOTAL :");
        jPanel10.add(jLabel11);
        jLabel11.setBounds(30, 330, 70, 40);
        jPanel10.add(totalInvAmt);
        totalInvAmt.setBounds(110, 350, 110, 27);

        jLabel6.setText("INVOICE VALUE");
        jPanel10.add(jLabel6);
        jLabel6.setBounds(110, 330, 110, 15);

        jLabel7.setText("TAXABLE VALUE");
        jPanel10.add(jLabel7);
        jLabel7.setBounds(230, 330, 110, 15);
        jPanel10.add(totalTaxAmt);
        totalTaxAmt.setBounds(230, 350, 110, 27);

        jLabel9.setText("SGST VALUE");
        jPanel10.add(jLabel9);
        jLabel9.setBounds(360, 330, 110, 15);
        jPanel10.add(totalSGSTAmt);
        totalSGSTAmt.setBounds(350, 350, 110, 27);
        jPanel10.add(totalCGSTAmt);
        totalCGSTAmt.setBounds(470, 350, 110, 27);

        jLabel8.setText("CGST VALUE");
        jPanel10.add(jLabel8);
        jLabel8.setBounds(480, 330, 110, 15);
        jPanel10.add(totalIGSTAmt);
        totalIGSTAmt.setBounds(590, 350, 110, 27);

        jLabel10.setText("IGST VALUE");
        jPanel10.add(jLabel10);
        jLabel10.setBounds(600, 330, 120, 15);

        jTabbedPane1.addTab("Detail", jPanel10);

        jPanel1.setLayout(null);

        TableHSNDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableHSNDetail.setSelectionBackground(new java.awt.Color(208, 220, 234));
        TableHSNDetail.setSelectionForeground(new java.awt.Color(231, 16, 16));
        TableHSNDetail.getTableHeader().setFont(new Font("Plain", Font.BOLD, 12));
        TableHSNDetail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableHSNDetailKeyPressed(evt);
            }
        });
        jScrollPane11.setViewportView(TableHSNDetail);

        jPanel1.add(jScrollPane11);
        jScrollPane11.setBounds(10, 50, 720, 260);

        btnShowList.setText("Show List");
        btnShowList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowListActionPerformed(evt);
            }
        });
        jPanel1.add(btnShowList);
        btnShowList.setBounds(10, 10, 130, 30);

        ExportExcel1.setText("EXPORT TO EXCEL");
        ExportExcel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportExcel1ActionPerformed(evt);
            }
        });
        jPanel1.add(ExportExcel1);
        ExportExcel1.setBounds(540, 10, 170, 27);

        jLabel12.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel12.setText("TOTAL :");
        jPanel1.add(jLabel12);
        jLabel12.setBounds(30, 330, 70, 40);
        jPanel1.add(totalInvAmt1);
        totalInvAmt1.setBounds(110, 350, 110, 27);

        jLabel13.setText("INVOICE VALUE");
        jPanel1.add(jLabel13);
        jLabel13.setBounds(110, 330, 110, 15);

        jLabel14.setText("TAXABLE VALUE");
        jPanel1.add(jLabel14);
        jLabel14.setBounds(230, 330, 110, 15);
        jPanel1.add(totalTaxAmt1);
        totalTaxAmt1.setBounds(230, 350, 110, 27);

        jLabel15.setText("SGST VALUE");
        jPanel1.add(jLabel15);
        jLabel15.setBounds(360, 330, 110, 15);
        jPanel1.add(totalSGSTAmt1);
        totalSGSTAmt1.setBounds(350, 350, 110, 27);
        jPanel1.add(totalCGSTAmt1);
        totalCGSTAmt1.setBounds(470, 350, 110, 27);

        jLabel16.setText("CGST VALUE");
        jPanel1.add(jLabel16);
        jLabel16.setBounds(480, 330, 110, 15);
        jPanel1.add(totalIGSTAmt1);
        totalIGSTAmt1.setBounds(590, 350, 110, 27);

        jLabel17.setText("IGST VALUE");
        jPanel1.add(jLabel17);
        jLabel17.setBounds(600, 330, 120, 15);

        jTabbedPane1.addTab("HSN Wise Detail", jPanel1);

        jPanel2.setLayout(null);

        TableHSNSummary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableHSNSummary.setSelectionBackground(new java.awt.Color(208, 220, 234));
        TableHSNSummary.setSelectionForeground(new java.awt.Color(231, 16, 16));
        TableHSNSummary.getTableHeader().setFont(new Font("Plain", Font.BOLD, 12));
        TableHSNSummary.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableHSNSummaryKeyPressed(evt);
            }
        });
        jScrollPane12.setViewportView(TableHSNSummary);

        jPanel2.add(jScrollPane12);
        jScrollPane12.setBounds(10, 50, 720, 260);

        btnShowList1.setText("Show List");
        btnShowList1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowList1ActionPerformed(evt);
            }
        });
        jPanel2.add(btnShowList1);
        btnShowList1.setBounds(10, 10, 130, 30);

        ExportExcel2.setText("EXPORT TO EXCEL");
        ExportExcel2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportExcel2ActionPerformed(evt);
            }
        });
        jPanel2.add(ExportExcel2);
        ExportExcel2.setBounds(540, 10, 170, 27);

        jLabel18.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel18.setText("TOTAL :");
        jPanel2.add(jLabel18);
        jLabel18.setBounds(30, 340, 70, 40);

        jLabel20.setText("TAXABLE VALUE");
        jPanel2.add(jLabel20);
        jLabel20.setBounds(230, 330, 110, 15);
        jPanel2.add(totalTaxAmt2);
        totalTaxAmt2.setBounds(230, 350, 110, 27);

        jLabel21.setText("SGST VALUE");
        jPanel2.add(jLabel21);
        jLabel21.setBounds(360, 330, 110, 15);
        jPanel2.add(totalSGSTAmt2);
        totalSGSTAmt2.setBounds(350, 350, 110, 27);
        jPanel2.add(totalCGSTAmt2);
        totalCGSTAmt2.setBounds(470, 350, 110, 27);

        jLabel22.setText("CGST VALUE");
        jPanel2.add(jLabel22);
        jLabel22.setBounds(480, 330, 110, 15);
        jPanel2.add(totalIGSTAmt2);
        totalIGSTAmt2.setBounds(590, 350, 110, 27);

        jLabel23.setText("IGST VALUE");
        jPanel2.add(jLabel23);
        jLabel23.setBounds(600, 330, 120, 15);

        jTabbedPane1.addTab("HSN Wise Summary", jPanel2);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(10, 80, 750, 470);

        jLabel2.setBackground(new java.awt.Color(0, 102, 153));
        jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 70, 780, 10);

        txtFromDate = new JTextFieldHint(new JTextField(),"DD/MM/YYYY");
        getContentPane().add(txtFromDate);
        txtFromDate.setBounds(170, 30, 110, 30);

        txtToDate = new JTextFieldHint(new JTextField(),"DD/MM/YYYY");
        txtToDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToDateFocusGained(evt);
            }
        });
        getContentPane().add(txtToDate);
        txtToDate.setBounds(380, 30, 100, 30);

        CLR_BTN.setText("Clear");
        CLR_BTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        CLR_BTN.setMargin(new java.awt.Insets(2, 7, 2, 7));
        CLR_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLR_BTNActionPerformed(evt);
            }
        });
        getContentPane().add(CLR_BTN);
        CLR_BTN.setBounds(540, 30, 80, 30);

        jLabel3.setText("Period : ");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 30, 60, 20);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("From Date :");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(60, 30, 100, 20);

        jLabel5.setText("To Date :");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(310, 30, 70, 20);

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setText("GSTR2 Information System");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 2, 780, 25);
    }// </editor-fold>//GEN-END:initComponents

    private void txtToDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToDateFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtToDateFocusGained

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

    }//GEN-LAST:event_formMouseClicked

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TableKeyPressed

    private void btnShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowActionPerformed
//        if (!Validate()) {
//            return;
//        }
//        FormatGrid();
//        GenerateB2BData(ORDER_BY);
        
        mnuDetail.show(jPanel10, btnShow.getX(), btnShow.getY()+btnShow.getHeight());
    }//GEN-LAST:event_btnShowActionPerformed

    private void ExportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportExcelActionPerformed
        //        // TODO add your handling code here:
        //        try{
        //            exp.fillData(Table_b2b,new File("/root/Desktop/gstr1_B2B.xls"));
        //            exp.fillData(Table_b2b,new File("D://gstr1_B2B.xls"));
        //            JOptionPane.showMessageDialog(null, "Data saved at " +
        //                "'/root/Desktop/gstr1_B2B.xls' successfully in Linux PC or 'D://gstr1_B2B.xls' successfully in Windows PC    ", "Message",
        //                JOptionPane.INFORMATION_MESSAGE);
        //        }
        //        catch(Exception ex) {
        //            ex.printStackTrace();
        //        }
        // TODO add your handling code here:
        File file = null;
        file1.setVisible(true);
        try {
            int returnVal = file1.showOpenDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exp.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), "GSTR2");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file1.getSelectedFile().toString() + " successfully... ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_ExportExcelActionPerformed

    private void CLR_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLR_BTNActionPerformed
        txtFromDate.setText("");
        txtToDate.setText("");
        totalInvAmt.setText("");
        totalTaxAmt.setText("");
        totalSGSTAmt.setText("");
        totalCGSTAmt.setText("");
        totalIGSTAmt.setText("");
        totalInvAmt1.setText("");
        totalTaxAmt1.setText("");
        totalSGSTAmt1.setText("");
        totalCGSTAmt1.setText("");
        totalIGSTAmt1.setText("");
        totalTaxAmt2.setText("");
        totalSGSTAmt2.setText("");
        totalCGSTAmt2.setText("");
        totalIGSTAmt2.setText("");
        
        FormatGrid();
        FormatGridHSNDetail();
        FormatGridHSNSummary();
    }//GEN-LAST:event_CLR_BTNActionPerformed

    private void TableHSNDetailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableHSNDetailKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TableHSNDetailKeyPressed

    private void btnShowListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowListActionPerformed
//    if (!Validate()) {
//            return;
//        }
//        FormatGridHSNDetail();
//        GenerateHSNDetail(ORDER_BY);
        mnuHSNwiseDetail.show(jPanel1, btnShowList.getX(), btnShowList.getY()+btnShowList.getHeight());
    }//GEN-LAST:event_btnShowListActionPerformed

    private void ExportExcel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportExcel1ActionPerformed
        File file = null;
        file1.setVisible(true);
        try {
            int returnVal = file1.showOpenDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exp.fillData(TableHSNDetail, new File(file1.getSelectedFile().toString() + ".xls"), "GSTR2");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file1.getSelectedFile().toString() + " successfully... ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_ExportExcel1ActionPerformed

    private void TableHSNSummaryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableHSNSummaryKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TableHSNSummaryKeyPressed

    private void btnShowList1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowList1ActionPerformed
//if (!Validate()) {
//            return;
//        }
//        FormatGridHSNSummary();
//        GenerateHSNSummary(ORDER_BY);
        mnuHSNwiseSummary.show(jPanel2, btnShowList1.getX(), btnShowList1.getY()+btnShowList1.getHeight());
    }//GEN-LAST:event_btnShowList1ActionPerformed

    private void ExportExcel2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportExcel2ActionPerformed
File file = null;
        file1.setVisible(true);
        try {
            int returnVal = file1.showOpenDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exp.fillData(TableHSNSummary, new File(file1.getSelectedFile().toString() + ".xls"), "GSTR2");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file1.getSelectedFile().toString() + " successfully... ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            //ex.printStackTrace();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_ExportExcel2ActionPerformed

    private void mnuItemMaterialDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuItemMaterialDetailActionPerformed
        if (!Validate()) {
            return;
        }
        FormatGrid();
        Parameter="MATERIAL";
        GenerateB2BData(Parameter);
    }//GEN-LAST:event_mnuItemMaterialDetailActionPerformed

    private void mnuItemServiceDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuItemServiceDetailActionPerformed
        if (!Validate()) {
            return;
        }
        FormatGrid();
        Parameter = "SERVICE";
        GenerateB2BData(Parameter);
    }//GEN-LAST:event_mnuItemServiceDetailActionPerformed

    private void mnuItemMaterialHSNwiseDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuItemMaterialHSNwiseDetailActionPerformed
    if (!Validate()) {
            return;
        }
        FormatGridHSNDetail();
        Parameter="MATERIAL";
        GenerateHSNDetail(Parameter);
    }//GEN-LAST:event_mnuItemMaterialHSNwiseDetailActionPerformed

    private void mnuItemServiceHSNwiseDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuItemServiceHSNwiseDetailActionPerformed
      if (!Validate()) {
            return;
        }
        FormatGridHSNDetail();
        Parameter="SERVICE";
        GenerateHSNDetail(Parameter);
    }//GEN-LAST:event_mnuItemServiceHSNwiseDetailActionPerformed

    private void mnuItemMaterialHSNwiseSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuItemMaterialHSNwiseSummaryActionPerformed
if (!Validate()) {
            return;
        }
        FormatGridHSNSummary();
        Parameter="MATERIAL";
        GenerateHSNSummary(Parameter);
    }//GEN-LAST:event_mnuItemMaterialHSNwiseSummaryActionPerformed

    private void mnuItemServiceHSNwiseSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuItemServiceHSNwiseSummaryActionPerformed
        if (!Validate()) {
            return;
        }
        FormatGridHSNSummary();
        Parameter="SERVICE";
        GenerateHSNSummary(Parameter);
    }//GEN-LAST:event_mnuItemServiceHSNwiseSummaryActionPerformed

    private void mnuItemMaterialRecvdandServiceHSNDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuItemMaterialRecvdandServiceHSNDetailActionPerformed
        if (!Validate()) {
            return;
        }
        FormatGridHSNDetail();
        Parameter="MATERIALRECEIVEDANDSERVICE";
        GenerateHSNDetail(Parameter);
    }//GEN-LAST:event_mnuItemMaterialRecvdandServiceHSNDetailActionPerformed

    private void mnuItemMaterialRecvdandServiceHSNSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuItemMaterialRecvdandServiceHSNSummaryActionPerformed
        if (!Validate()) {
            return;
        }
        FormatGridHSNSummary();
        Parameter="MATERIALRECEIVEDANDSERVICE";
        GenerateHSNSummary(Parameter);
    }//GEN-LAST:event_mnuItemMaterialRecvdandServiceHSNSummaryActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CLR_BTN;
    private javax.swing.JButton ExportExcel;
    private javax.swing.JButton ExportExcel1;
    private javax.swing.JButton ExportExcel2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableHSNDetail;
    private javax.swing.JTable TableHSNSummary;
    private javax.swing.JButton btnShow;
    private javax.swing.JButton btnShowList;
    private javax.swing.JButton btnShowList1;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JPopupMenu mnuDetail;
    private javax.swing.JPopupMenu mnuHSNwiseDetail;
    private javax.swing.JPopupMenu mnuHSNwiseSummary;
    private javax.swing.JMenuItem mnuItemMaterialDetail;
    private javax.swing.JMenuItem mnuItemMaterialHSNwiseDetail;
    private javax.swing.JMenuItem mnuItemMaterialHSNwiseSummary;
    private javax.swing.JMenuItem mnuItemMaterialRecvdandServiceHSNDetail;
    private javax.swing.JMenuItem mnuItemMaterialRecvdandServiceHSNSummary;
    private javax.swing.JMenuItem mnuItemServiceDetail;
    private javax.swing.JMenuItem mnuItemServiceHSNwiseDetail;
    private javax.swing.JMenuItem mnuItemServiceHSNwiseSummary;
    private javax.swing.JTextField totalCGSTAmt;
    private javax.swing.JTextField totalCGSTAmt1;
    private javax.swing.JTextField totalCGSTAmt2;
    private javax.swing.JTextField totalIGSTAmt;
    private javax.swing.JTextField totalIGSTAmt1;
    private javax.swing.JTextField totalIGSTAmt2;
    private javax.swing.JTextField totalInvAmt;
    private javax.swing.JTextField totalInvAmt1;
    private javax.swing.JTextField totalSGSTAmt;
    private javax.swing.JTextField totalSGSTAmt1;
    private javax.swing.JTextField totalSGSTAmt2;
    private javax.swing.JTextField totalTaxAmt;
    private javax.swing.JTextField totalTaxAmt1;
    private javax.swing.JTextField totalTaxAmt2;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables

    private boolean Validate() {
        //Form level validations
        if (txtFromDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter from Date");
            return false;
        } else if (!EITLERPGLOBAL.isDate(txtFromDate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid From Date in DD/MM/YYYY format.");
            return false;
        }

        if (txtToDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter To Date");
            return false;
        } else if (!EITLERPGLOBAL.isDate(txtToDate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid To Date in DD/MM/YYYY format.");
            return false;
        }

        return true;
    }

    private void FormatGrid() {
        try {
            DataModelB2B = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModelB2B);
            Table.setAutoResizeMode(0);

            DataModelB2B.addColumn("SrNo"); //0 - Read Only
            DataModelB2B.addColumn("MIR NO"); //1
            DataModelB2B.addColumn("DATE"); //2
            DataModelB2B.addColumn("Supplier Name"); //3
            DataModelB2B.addColumn("GSTIN of Supplier"); //3
            DataModelB2B.addColumn("Invoice Number"); //4
            DataModelB2B.addColumn("Invoice date"); //5
            DataModelB2B.addColumn("Invoice Value"); //6
            DataModelB2B.addColumn("Place Of Supply"); //7
            DataModelB2B.addColumn("Reverse Charge"); //8
            DataModelB2B.addColumn("Invoice Type"); //9
            DataModelB2B.addColumn("Rate"); //10
            DataModelB2B.addColumn("Taxable Value"); //11
            DataModelB2B.addColumn("Integrated Tax Paid"); //12
            DataModelB2B.addColumn("Central Tax Paid"); //13
            DataModelB2B.addColumn("State/UT Tax Paid"); //14
            DataModelB2B.addColumn("Cess Paid"); //15
            DataModelB2B.addColumn("Eligibility For ITC"); //16
            DataModelB2B.addColumn("Availed ITC Integrated Tax"); //17
            DataModelB2B.addColumn("Availed ITC Central Tax"); //18
            DataModelB2B.addColumn("Availed ITC State/UT Tax"); //19
            DataModelB2B.addColumn("Availed ITC Cess");//20

            DataModelB2B.SetNumeric(7, true);
            DataModelB2B.SetNumeric(11, true);
            DataModelB2B.SetNumeric(12, true);
            DataModelB2B.SetNumeric(13, true);
            DataModelB2B.SetNumeric(14, true);
            DataModelB2B.SetNumeric(15, true);
            DataModelB2B.SetNumeric(16, true);
            

            for (int i = 0; i <= 21; i++) {
                DataModelB2B.SetReadOnly(i);
            }

            Table.getColumnModel().getColumn(0).setMinWidth(30);
            for (int i = 1; i <= 21; i++) {
                Table.getColumnModel().getColumn(i).setMinWidth(100);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void FormatGridHSNDetail() {
        try {
            DataModelHSNDetail = new EITLTableModel();
            TableHSNDetail.removeAll();

            TableHSNDetail.setModel(DataModelHSNDetail);
            TableHSNDetail.setAutoResizeMode(0);

            DataModelHSNDetail.addColumn("SrNo"); //0 - Read Only
            DataModelHSNDetail.addColumn("MIR NO"); //1
            DataModelHSNDetail.addColumn("DATE"); //2
            DataModelHSNDetail.addColumn("Supplier Name"); //3
            DataModelHSNDetail.addColumn("GSTIN of Supplier"); //4
            DataModelHSNDetail.addColumn("Invoice Number"); //5
            DataModelHSNDetail.addColumn("Invoice date"); //6
            DataModelHSNDetail.addColumn("Item ID"); //7
            DataModelHSNDetail.addColumn("Item Desc"); //8
            DataModelHSNDetail.addColumn("Invoice Value"); //9
            DataModelHSNDetail.addColumn("Place Of Supply"); //10
            DataModelHSNDetail.addColumn("Reverse Charge"); //11
            DataModelHSNDetail.addColumn("Invoice Type"); //12
            DataModelHSNDetail.addColumn("HSN Code"); //13
            DataModelHSNDetail.addColumn("Quantity"); //14
            DataModelHSNDetail.addColumn("Unit");//15
            DataModelHSNDetail.addColumn("Rate"); //16
            DataModelHSNDetail.addColumn("Taxable Value"); //17
            DataModelHSNDetail.addColumn("Integrated Tax Paid"); //18
            DataModelHSNDetail.addColumn("Central Tax Paid"); //19
            DataModelHSNDetail.addColumn("State/UT Tax Paid"); //20
            DataModelHSNDetail.addColumn("Cess Paid"); //21
            DataModelHSNDetail.addColumn("Eligibility For ITC"); //22
            DataModelHSNDetail.addColumn("Availed ITC Integrated Tax"); //23
            DataModelHSNDetail.addColumn("Availed ITC Central Tax"); //24
            DataModelHSNDetail.addColumn("Availed ITC State/UT Tax"); //25
            DataModelHSNDetail.addColumn("Availed ITC Cess");//26

            DataModelHSNDetail.SetNumeric(9, true);                        
            DataModelHSNDetail.SetNumeric(16, true);
            DataModelHSNDetail.SetNumeric(17, true);
            DataModelHSNDetail.SetNumeric(18, true);
            DataModelHSNDetail.SetNumeric(19, true);
            DataModelHSNDetail.SetNumeric(20, true);
            DataModelHSNDetail.SetNumeric(21, true);
            

            for (int i = 0; i <= 26; i++) {
                DataModelHSNDetail.SetReadOnly(i);
            }

            TableHSNDetail.getColumnModel().getColumn(0).setMinWidth(30);
            for (int i = 1; i <= 26; i++) {
                TableHSNDetail.getColumnModel().getColumn(i).setMinWidth(100);
            }
            
            

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void FormatGridHSNSummary() {
        try {
            DataModelHSNSummary = new EITLTableModel();
            TableHSNSummary.removeAll();

            TableHSNSummary.setModel(DataModelHSNSummary);
            TableHSNSummary.setAutoResizeMode(0);

            DataModelHSNSummary.addColumn("SrNo"); //0 - Read Only
            DataModelHSNSummary.addColumn("HSN Code"); //1
            DataModelHSNSummary.addColumn("Taxable Value"); //2
            DataModelHSNSummary.addColumn("CGST"); //3
            DataModelHSNSummary.addColumn("SGST"); //4
            DataModelHSNSummary.addColumn("IGST"); //5
            
            DataModelHSNSummary.SetNumeric(2, true);            
            DataModelHSNSummary.SetNumeric(3, true);
            DataModelHSNSummary.SetNumeric(4, true);
            DataModelHSNSummary.SetNumeric(5, true);            

            for (int i = 0; i <= 5; i++) {
                DataModelHSNSummary.SetReadOnly(i);
            }

            TableHSNSummary.getColumnModel().getColumn(0).setMinWidth(30);
            for (int i = 1; i <= 5; i++) {
                TableHSNSummary.getColumnModel().getColumn(i).setMinWidth(100);
            }          
            

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void GenerateB2BData(String Parameter) {
        double IGSTAmt = 0, CGSTAmt = 0, SGSTAmt = 0;
        String strCondition="";
        try {
            
            if(Parameter.equals("MATERIAL")){
                strCondition=" AND H.MIR_TYPE IN (1,2) ";
            }
            if(Parameter.equals("SERVICE")){
                strCondition=" AND H.MIR_TYPE IN (3) ";
            }
            String strSQL = "SELECT MIR_NO, MIR_DATE, MIR_SUPP_ID, INVOICE_NO, INVOICE_DATE, INVOICE_AMOUNT, TAX_RATE,  "
                    + "SUM(TAXABLE_AMOUNT) AS TAXABLE_AMOUNT, SUM(IGST_AMOUNT) AS IGST_AMOUNT,  "
                    + "SUM(CGST_AMOUNT) AS CGST_AMOUNT, SUM(SGST_AMOUNT) AS SGST_AMOUNT, SUM(CESS_AMOUNT) AS CESS_AMOUNT,  "
                    + "SUPP_ID, SUPPLIER_CODE, SUPP_NAME, GSTIN_NO  "
                    + "FROM (SELECT *  "
                    + "FROM  "
                    + "(SELECT H.MIR_NO,H.MIR_DATE,H.SUPP_ID AS MIR_SUPP_ID,H.INVOICE_NO,H.INVOICE_DATE,H.INVOICE_AMOUNT,  "
                    + "(D.COLUMN_3_PER+D.COLUMN_4_PER+D.COLUMN_5_PER) AS TAX_RATE, "
                    + "(D.TOTAL_AMOUNT-D.COLUMN_1_AMT)+D.COLUMN_2_AMT+D.COLUMN_12_AMT AS TAXABLE_AMOUNT, "
                    + "D.COLUMN_5_AMT AS IGST_AMOUNT, "
                    + "D.COLUMN_3_AMT AS CGST_AMOUNT, "
                    + "D.COLUMN_4_AMT AS SGST_AMOUNT, "
                    + "D.COLUMN_8_AMT AS CESS_AMOUNT "
                    + "FROM DINESHMILLS.D_INV_MIR_HEADER H, DINESHMILLS.D_INV_MIR_DETAIL D "
                    + "WHERE H.MIR_NO=D.MIR_NO "
                    + "AND H.APPROVED=1 AND H.CANCELLED=0 "
                    + strCondition 
                    + "AND H.MIR_DATE>='" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' "
                    + "AND H.MIR_DATE<='" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "') AS MIR "
                    + "LEFT JOIN  "
                    + "(SELECT SUPP_ID,SUPPLIER_CODE ,SUPP_NAME,GSTIN_NO FROM DINESHMILLS.D_COM_SUPP_MASTER) AS SUPP "
                    + "ON SUPP.SUPPLIER_CODE=MIR.MIR_SUPP_ID)AS T "
                    + "GROUP BY MIR_NO,MIR_DATE,TAX_RATE "
                    + "ORDER BY MIR_NO,TAX_RATE " ;

            System.out.println("QUERY : "+strSQL);
            ResultSet rs = data.getResult(strSQL);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {

                Object[] rowData = new Object[25];
                // rowData[0]=rs.getString("");
                rowData[0] = cnt++;
                rowData[1] = UtilFunctions.getString(rs, "MIR_NO", "");
                rowData[2] = df.format(rs.getDate("MIR_DATE"));
                rowData[3] = UtilFunctions.getString(rs, "SUPP_NAME", "");
                rowData[4] = UtilFunctions.getString(rs, "GSTIN_NO", "");
                rowData[5] = UtilFunctions.getString(rs, "INVOICE_NO", "");
                if (rs.getString("INVOICE_DATE").equals("") || rs.getString("INVOICE_DATE")==null || rs.getString("INVOICE_DATE").equals("0000-00-00")) {
                    rowData[6] = "";
                } else {
                    rowData[6] = df.format(rs.getDate("INVOICE_DATE"));
                }
                rowData[7] = UtilFunctions.getString(rs, "INVOICE_AMOUNT", "");
                rowData[8] = "24-Gujarat";
                rowData[9] = "N";
                rowData[10] = "R";
                rowData[11] = UtilFunctions.getInt(rs, "TAX_RATE", 0);
                rowData[12] = UtilFunctions.getInt(rs, "TAXABLE_AMOUNT", 0);
                rowData[13] = UtilFunctions.getInt(rs, "IGST_AMOUNT", 0);
                IGSTAmt += UtilFunctions.getDouble(rs, "IGST_AMOUNT", 0);
                rowData[14] = UtilFunctions.getInt(rs, "CGST_AMOUNT", 0);
                CGSTAmt += UtilFunctions.getDouble(rs, "CGST_AMOUNT", 0);
                rowData[15] = UtilFunctions.getInt(rs, "SGST_AMOUNT", 0);
                SGSTAmt += UtilFunctions.getDouble(rs, "SGST_AMOUNT", 0);
                rowData[16] = UtilFunctions.getInt(rs, "CESS_AMOUNT", 0);
                rowData[17] = "0";
                rowData[18] = "0";
                rowData[19] = "0";
                rowData[20] = "0";
                rowData[21] = "0";

                DataModelB2B.addRow(rowData);
                rs.next();
            }
            rs.close();

        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
        
        String sql;
        sql = "SELECT SUM(INVOICE_AMOUNT) FROM DINESHMILLS.D_INV_MIR_HEADER H WHERE APPROVED=1 AND CANCELLED=0 "+strCondition+" AND MIR_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"' AND MIR_DATE<='"+ EITLERPGLOBAL.formatDateDB(txtToDate.getText()) +"'";
        String invAmt = data.getStringValueFromDB(sql);
        totalInvAmt.setText(invAmt);
        
        sql = "SELECT ROUND(SUM((D.TOTAL_AMOUNT-D.COLUMN_1_AMT)+D.COLUMN_2_AMT+D.COLUMN_12_AMT),2) AS TAXABLE_AMOUNT FROM DINESHMILLS.D_INV_MIR_HEADER H, DINESHMILLS.D_INV_MIR_DETAIL D WHERE H.MIR_NO=D.MIR_NO AND H.APPROVED=1 AND H.CANCELLED=0 "+strCondition+" AND MIR_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"' AND MIR_DATE<='"+ EITLERPGLOBAL.formatDateDB(txtToDate.getText()) +"'";
        String TaxableAmt = data.getStringValueFromDB(sql);
        totalTaxAmt.setText(TaxableAmt);
        
        totalSGSTAmt.setText(String.valueOf(EITLERPGLOBAL.round(SGSTAmt, 2)));
        
        totalCGSTAmt.setText(String.valueOf(EITLERPGLOBAL.round(CGSTAmt, 2)));
        
        totalIGSTAmt.setText(String.valueOf(EITLERPGLOBAL.round(IGSTAmt, 2)));
    }
    public void GenerateHSNDetail(String ORDER_BY) {
        double IGSTAmt = 0, CGSTAmt = 0, SGSTAmt = 0;
        String strCondition="";
        try {
            
            if(Parameter.equals("MATERIAL")){
                strCondition=" AND H.MIR_TYPE IN (1,2) ";
            }
            if(Parameter.equals("SERVICE")){
                strCondition=" AND H.MIR_TYPE IN (3) ";
            }
            
            String strSQL = "SELECT MIR_NO, MIR_DATE, MIR_SUPP_ID, INVOICE_NO, INVOICE_DATE, INVOICE_AMOUNT, TAX_RATE,  "
                    //+ "SUM(TAXABLE_AMOUNT) AS TAXABLE_AMOUNT, SUM(IGST_AMOUNT) AS IGST_AMOUNT,  "
                    + "SUM(TAXABLE_AMOUNT) AS TAXABLE_AMOUNT, ROUND(SUM(IGST_AMOUNT),2) AS IGST_AMOUNT,  "
                    //+ "SUM(CGST_AMOUNT) AS CGST_AMOUNT, SUM(SGST_AMOUNT) AS SGST_AMOUNT, SUM(CESS_AMOUNT) AS CESS_AMOUNT,  "
                    + "ROUND(SUM(CGST_AMOUNT),2) AS CGST_AMOUNT, ROUND(SUM(SGST_AMOUNT),2) AS SGST_AMOUNT, SUM(CESS_AMOUNT) AS CESS_AMOUNT,  "
                    + "SUPP_ID, SUPPLIER_CODE, SUPP_NAME, GSTIN_NO,HSN_SAC_CODE,QTY,ITEM_ID,ITEM_EXTRA_DESC,UNIT,SR_NO,MIR_TYPE  "
                    + "FROM (SELECT *  "
                    + "FROM  "
                    + "(SELECT H.MIR_NO,H.MIR_DATE,H.SUPP_ID AS MIR_SUPP_ID,H.INVOICE_NO,H.INVOICE_DATE,H.INVOICE_AMOUNT,HSN_SAC_CODE,QTY,ITEM_ID,ITEM_EXTRA_DESC,UNIT,  "
                    + "(D.COLUMN_3_PER+D.COLUMN_4_PER+D.COLUMN_5_PER) AS TAX_RATE, "
                    + "(D.TOTAL_AMOUNT-D.COLUMN_1_AMT)+D.COLUMN_2_AMT+D.COLUMN_12_AMT AS TAXABLE_AMOUNT, "
                    + "D.COLUMN_5_AMT AS IGST_AMOUNT, "
                    + "D.COLUMN_3_AMT AS CGST_AMOUNT, "
                    + "D.COLUMN_4_AMT AS SGST_AMOUNT, "
                    + "D.COLUMN_8_AMT AS CESS_AMOUNT,SR_NO,H.MIR_TYPE AS MIR_TYPE "
                    + "FROM DINESHMILLS.D_INV_MIR_HEADER H, DINESHMILLS.D_INV_MIR_DETAIL D "
                    + "WHERE H.MIR_NO=D.MIR_NO "
                    + "AND H.APPROVED=1 AND H.CANCELLED=0 "
                    + strCondition
                    + "AND H.MIR_DATE>='" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' "
                    + "AND H.MIR_DATE<='" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "') AS MIR "
                    + "LEFT JOIN  "
                    + "(SELECT SUPP_ID,SUPPLIER_CODE ,SUPP_NAME,GSTIN_NO FROM DINESHMILLS.D_COM_SUPP_MASTER) AS SUPP "
                    + "ON SUPP.SUPPLIER_CODE=MIR.MIR_SUPP_ID)AS T "
                    + "GROUP BY MIR_NO,MIR_DATE,TAX_RATE "
                    + "ORDER BY MIR_NO,TAX_RATE " ;

            System.out.println("QUERY : "+strSQL);
            ResultSet rs = data.getResult(strSQL);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {

                Object[] rowData = new Object[27];
                int mirType=UtilFunctions.getInt(rs, "MIR_TYPE", 0);
                if(mirType==1 || mirType==2){
                if(Parameter.equals("MATERIALRECEIVEDANDSERVICE")){
                String MIRNo=UtilFunctions.getString(rs, "MIR_NO", "");
                java.sql.Date MIRDate=rs.getDate("MIR_DATE");                                
                int srNo=UtilFunctions.getInt(rs, "SR_NO", 0);
                int datafound=data.getIntValueFromDB("SELECT COUNT(*) FROM DINESHMILLS.D_MIR_INV_RECEIVED WHERE MIR_NO='"+MIRNo+"' AND MIR_DATE='"+MIRDate+"' "
                        + " AND MIR_SR_NO="+srNo+"");
                    System.out.println(datafound);
                if(datafound==0){
                    rs.next();
                    continue;
                }
                }
                }
                
                // rowData[0]=rs.getString("");
                rowData[0] = cnt++;
                rowData[1] = UtilFunctions.getString(rs, "MIR_NO", "");
                rowData[2] = df.format(rs.getDate("MIR_DATE"));
                rowData[3] = UtilFunctions.getString(rs, "SUPP_NAME", "");
                rowData[4] = UtilFunctions.getString(rs, "GSTIN_NO", "");
                rowData[5] = UtilFunctions.getString(rs, "INVOICE_NO", "");
                if (rs.getString("INVOICE_DATE").equals("") || rs.getString("INVOICE_DATE")==null || rs.getString("INVOICE_DATE").equals("0000-00-00")) {
                    rowData[6] = "";
                } else {
                    rowData[6] = df.format(rs.getDate("INVOICE_DATE"));
                }
                rowData[7] = UtilFunctions.getString(rs, "ITEM_ID", "");
                rowData[8] = UtilFunctions.getString(rs, "ITEM_EXTRA_DESC", "");                
                rowData[9] = UtilFunctions.getString(rs, "INVOICE_AMOUNT", "");
                rowData[10] = "24-Gujarat";
                rowData[11] = "N";
                rowData[12] = "R";
                //rowData[13] = UtilFunctions.getString(rs, "HSN_SAC_CODE", "");
                rowData[13]=clsItem.getHsnSacCode(EITLERPGLOBAL.gCompanyID, UtilFunctions.getString(rs, "ITEM_ID", ""));
                rowData[14] = UtilFunctions.getInt(rs, "QTY", 0);
                rowData[15] = clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT", UtilFunctions.getInt(rs, "UNIT", 0));
                rowData[16] = UtilFunctions.getInt(rs, "TAX_RATE", 0);
                rowData[17] = UtilFunctions.getInt(rs, "TAXABLE_AMOUNT", 0);
                rowData[18] = UtilFunctions.getInt(rs, "IGST_AMOUNT", 0);
                IGSTAmt += UtilFunctions.getDouble(rs, "IGST_AMOUNT", 0);
                rowData[19] = UtilFunctions.getInt(rs, "CGST_AMOUNT", 0);
                CGSTAmt += UtilFunctions.getDouble(rs, "CGST_AMOUNT", 0);
                rowData[20] = UtilFunctions.getInt(rs, "SGST_AMOUNT", 0);
                SGSTAmt += UtilFunctions.getDouble(rs, "SGST_AMOUNT", 0);
                rowData[21] = UtilFunctions.getInt(rs, "CESS_AMOUNT", 0);
                rowData[22] = "0";
                rowData[23] = "0";
                rowData[24] = "0";
                rowData[25] = "0";
                rowData[26] = "0";

                DataModelHSNDetail.addRow(rowData);
                rs.next();
            }
            rs.close();

        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
        
        String sql;
        if(Parameter.equals("MATERIALRECEIVEDANDSERVICE")){
        sql = "SELECT SUM(INV_AMT) FROM " +
"(SELECT SUM(INVOICE_VALUE) AS INV_AMT FROM DINESHMILLS.D_MIR_INV_RECEIVED WHERE MIR_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"' " +
"AND MIR_DATE<='"+ EITLERPGLOBAL.formatDateDB(txtToDate.getText()) +"' " +
"UNION ALL " +
"SELECT SUM(INVOICE_AMOUNT) AS INV_AMT FROM DINESHMILLS.D_INV_MIR_HEADER H WHERE APPROVED=1 AND CANCELLED=0 AND " +
"MIR_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"' AND MIR_DATE<='"+ EITLERPGLOBAL.formatDateDB(txtToDate.getText()) +"' AND H.MIR_TYPE=3) AS A";
        }
        else{
        sql = "SELECT SUM(INVOICE_AMOUNT) FROM DINESHMILLS.D_INV_MIR_HEADER H WHERE APPROVED=1 AND CANCELLED=0 "+strCondition+" AND MIR_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"' AND MIR_DATE<='"+ EITLERPGLOBAL.formatDateDB(txtToDate.getText()) +"'";
        }
        String invAmt = data.getStringValueFromDB(sql);
        totalInvAmt1.setText(invAmt);
        
        if(Parameter.equals("MATERIALRECEIVEDANDSERVICE")){
        sql="SELECT ROUND(SUM(TAXABLE_AMOUNT),2) FROM " +
"(SELECT ROUND(SUM(TAXABLE_VALUE),2) AS TAXABLE_AMOUNT FROM D_MIR_INV_RECEIVED WHERE MIR_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"' " +
"AND MIR_DATE<='"+ EITLERPGLOBAL.formatDateDB(txtToDate.getText()) +"' " +
"UNION ALL " +
"SELECT ROUND(SUM((D.TOTAL_AMOUNT-D.COLUMN_1_AMT)+D.COLUMN_2_AMT+D.COLUMN_12_AMT),2) AS TAXABLE_AMOUNT " +
"FROM DINESHMILLS.D_INV_MIR_HEADER H, DINESHMILLS.D_INV_MIR_DETAIL D WHERE H.MIR_NO=D.MIR_NO " +
"AND H.APPROVED=1 AND H.CANCELLED=0 AND H.MIR_TYPE=3 AND MIR_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"' AND " +
"MIR_DATE<='"+ EITLERPGLOBAL.formatDateDB(txtToDate.getText()) +"') AS A";
        }else{
        sql = "SELECT ROUND(SUM((D.TOTAL_AMOUNT-D.COLUMN_1_AMT)+D.COLUMN_2_AMT+D.COLUMN_12_AMT),2) AS TAXABLE_AMOUNT FROM DINESHMILLS.D_INV_MIR_HEADER H, DINESHMILLS.D_INV_MIR_DETAIL D WHERE H.MIR_NO=D.MIR_NO AND H.APPROVED=1 AND H.CANCELLED=0 "+strCondition+" AND MIR_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"' AND MIR_DATE<='"+ EITLERPGLOBAL.formatDateDB(txtToDate.getText()) +"'";
        }
        String TaxableAmt = data.getStringValueFromDB(sql);
        totalTaxAmt1.setText(TaxableAmt);
        
        totalSGSTAmt1.setText(String.valueOf(EITLERPGLOBAL.round(SGSTAmt, 2)));
        //totalSGSTAmt1.setText(String.valueOf(SGSTAmt));
        
        totalCGSTAmt1.setText(String.valueOf(EITLERPGLOBAL.round(CGSTAmt, 2)));
        
        totalIGSTAmt1.setText(String.valueOf(EITLERPGLOBAL.round(IGSTAmt, 2)));
    }
    
    public void GenerateHSNSummary(String ORDER_BY) {
        double IGSTAmt = 0, CGSTAmt = 0, SGSTAmt = 0,TaxableAmt=0;
        String strCondition="";
        try {
            if(Parameter.equals("MATERIAL")){
                strCondition=" AND H.MIR_TYPE IN (1,2) ";
            }
            if(Parameter.equals("SERVICE")){
                strCondition=" AND H.MIR_TYPE IN (3) ";
            }
            String strSQL="";
            if(Parameter.equals("MATERIALRECEIVEDANDSERVICE")){
            strSQL="SELECT HSN_SAC_CODE,ROUND(SUM(TAXABLE_AMOUNT),2) AS TAXABLE_AMOUNT,SUM(CGST_AMOUNT) AS CGST_AMOUNT, " +
"SUM(SGST_AMOUNT) AS SGST_AMOUNT,SUM(IGST_AMOUNT) AS IGST_AMOUNT FROM " +
"(SELECT B.HSN_SAC_CODE,A.ITEM_ID,TAXABLE_AMOUNT,CGST_AMOUNT,SGST_AMOUNT,IGST_AMOUNT FROM  " +
"(SELECT MIR_NO,MIR_DATE,ITEM_ID,TAXABLE_VALUE AS TAXABLE_AMOUNT,INTEGRATED_TAX_PAID AS IGST_AMOUNT, " +
"CENTRAL_TAX_PAID AS CGST_AMOUNT,STATE_TAX_PAID AS SGST_AMOUNT,QUANTITY AS QTY " +
" FROM DINESHMILLS.D_MIR_INV_RECEIVED WHERE MIR_DATE>='" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' AND MIR_DATE<='" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "' " +
"UNION ALL " +
"SELECT H.MIR_NO,H.MIR_DATE,D.ITEM_ID, " +
"(D.TOTAL_AMOUNT-D.COLUMN_1_AMT)+D.COLUMN_2_AMT+D.COLUMN_12_AMT AS TAXABLE_AMOUNT, " +
"D.COLUMN_5_AMT AS IGST_AMOUNT,D.COLUMN_3_AMT AS CGST_AMOUNT,D.COLUMN_4_AMT AS SGST_AMOUNT,QTY " +
"FROM D_INV_MIR_HEADER H,D_INV_MIR_DETAIL D WHERE H.MIR_NO=D.MIR_NO AND H.APPROVED=1 AND H.CANCELLED=0  " +
"AND H.MIR_TYPE IN (3)  AND H.MIR_DATE>='" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' AND H.MIR_DATE<='" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "') AS A " +
"LEFT JOIN " +
"(SELECT ITEM_ID,HSN_SAC_CODE FROM D_INV_ITEM_MASTER WHERE APPROVED=1 AND CANCELLED=0) AS B " +
"ON A.ITEM_ID=B.ITEM_ID) AS AB GROUP BY HSN_SAC_CODE ORDER BY HSN_SAC_CODE";
            }else{
            strSQL = "SELECT HSN_SAC_CODE,ROUND(SUM(TAXABLE_AMOUNT),2) AS TAXABLE_AMOUNT,SUM(CGST_AMOUNT) AS CGST_AMOUNT,"
                    + "SUM(SGST_AMOUNT) AS SGST_AMOUNT,SUM(IGST_AMOUNT) AS IGST_AMOUNT FROM "
                    + "(SELECT B.HSN_SAC_CODE,A.ITEM_ID,TAXABLE_AMOUNT,CGST_AMOUNT,SGST_AMOUNT,IGST_AMOUNT FROM  "
                    + "(SELECT H.MIR_NO,H.MIR_DATE,D.ITEM_ID,(D.TOTAL_AMOUNT-D.COLUMN_1_AMT)+D.COLUMN_2_AMT+D.COLUMN_12_AMT AS TAXABLE_AMOUNT,D.COLUMN_5_AMT AS IGST_AMOUNT,D.COLUMN_3_AMT AS CGST_AMOUNT,D.COLUMN_4_AMT AS SGST_AMOUNT,QTY FROM D_INV_MIR_HEADER H,D_INV_MIR_DETAIL D WHERE H.MIR_NO=D.MIR_NO AND H.APPROVED=1 AND H.CANCELLED=0 "+strCondition+" AND H.MIR_DATE>='" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' AND H.MIR_DATE<='" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "') AS A "
                    + "LEFT JOIN "
                    + "(SELECT ITEM_ID,HSN_SAC_CODE FROM D_INV_ITEM_MASTER WHERE APPROVED=1 AND CANCELLED=0) AS B "
                    + "ON A.ITEM_ID=B.ITEM_ID) AS AB "
                    + "GROUP BY HSN_SAC_CODE "
                    + "ORDER BY HSN_SAC_CODE";
                
            }
            
            System.out.println("QUERY : "+strSQL);
            ResultSet rs = data.getResult(strSQL);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {

                Object[] rowData = new Object[7];
                // rowData[0]=rs.getString("");
                rowData[0] = cnt++;
                rowData[1] = UtilFunctions.getString(rs, "HSN_SAC_CODE", "");                
                rowData[2] = UtilFunctions.getDouble(rs, "TAXABLE_AMOUNT", 0);
                TaxableAmt += UtilFunctions.getDouble(rs, "TAXABLE_AMOUNT", 0);
                rowData[3] = UtilFunctions.getInt(rs, "CGST_AMOUNT", 0);
                CGSTAmt += UtilFunctions.getDouble(rs, "CGST_AMOUNT", 0);
                rowData[4] = UtilFunctions.getInt(rs, "SGST_AMOUNT", 0); 
                SGSTAmt += UtilFunctions.getDouble(rs, "SGST_AMOUNT", 0);
                rowData[5] = UtilFunctions.getInt(rs, "IGST_AMOUNT", 0);
                IGSTAmt += UtilFunctions.getDouble(rs, "IGST_AMOUNT", 0);
                
                DataModelHSNSummary.addRow(rowData);
                rs.next();
            }
            rs.close();

        } catch (SQLException sqe) {
            sqe.printStackTrace();
        } 
        
        //totalTaxAmt2.setText(String.valueOf(EITLERPGLOBAL.round(TaxableAmt, 2)));
        //totalTaxAmt2.setText(String.valueOf(TaxableAmt));
        //totalTaxAmt2.setText(Double.toString(EITLERPGLOBAL.round(TaxableAmt, 2)));
        totalTaxAmt2.setText(new BigDecimal(EITLERPGLOBAL.round(TaxableAmt, 2)).setScale(2, BigDecimal.ROUND_HALF_UP).toString());
        
        totalSGSTAmt2.setText(String.valueOf(EITLERPGLOBAL.round(SGSTAmt, 2)));
        
        totalCGSTAmt2.setText(String.valueOf(EITLERPGLOBAL.round(CGSTAmt, 2)));
        
        totalIGSTAmt2.setText(String.valueOf(EITLERPGLOBAL.round(IGSTAmt, 2)));
        
    }

}
