/* frmFeltSalesInfo.java 
 * 
 * 
 * Created on July 13, 2005, 10:47 AM
 */
package EITLERP.Excise;

import EITLERP.*;
import EITLERP.Finance.FinanceGlobal;
import EITLERP.Finance.UtilFunctions;
import java.awt.Color;
import java.awt.Font;
import java.io.File;
import java.sql.*;
import javax.swing.*;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author ashutosh/RISHI
 */
public class frmMaterialInvReceived extends javax.swing.JApplet {

    public boolean forceToChange = false;
    public boolean cancelled = false;
    private EITLTableModel[] DataModel;
    private EITLTableModel DataModelMaterialInvList = new EITLTableModel();
    private EITLTableModel DataModelK3TaxList = new EITLTableModel();
    private EITLTableModel DataModelK3TaxInsertedList = new EITLTableModel();    
    private EITLTableModel DataModelReceivedList = new EITLTableModel();
    private EITLTableCellRenderer Render=new EITLTableCellRenderer();
    
    private EITLComboModel cmbCompanyTypeModel;
    private EITLComboModel cmbHierarchyModel;
    private clsMaterialInvReceived ObjInvReceived=new clsMaterialInvReceived();
    String strProductCode = "";
    private JDialog aDialog;
    DateFormat df = new SimpleDateFormat("dd-MMM-yy");
    HashMap hmListToUpload = new HashMap();
    String ORDER_BY = "";
    String Parameter="";
    private clsExcel_Exporter exp = new clsExcel_Exporter();

    public void init() {
        initComponents();
        file1.setVisible(false);
        FormatGrid();//780, 560
        FormatGridReceived();
        setSize(780, 560);
        GenerateCombos();
        jLabel1.setForeground(Color.WHITE);
        //txtFromDate.setText("01/05/2018");
        //txtToDate.setText("31/05/2018");
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStatus = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        file1 = new javax.swing.JFileChooser();
        mnuMaterialInvoice = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jLabel2 = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        txtToDate = new javax.swing.JTextField();
        CLR_BTN = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        btnShowGST = new javax.swing.JButton();
        ExportExcel = new javax.swing.JButton();
        btnUpload = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        TableReceived = new javax.swing.JTable();
        btnShowGSTReports = new javax.swing.JButton();
        ExportExcel1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jMenuItem1.setText("All");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        mnuMaterialInvoice.add(jMenuItem1);

        jMenuItem2.setText("Invoice Not Received");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        mnuMaterialInvoice.add(jMenuItem2);

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabel2.setBackground(new java.awt.Color(0, 102, 153));
        jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 60, 780, 10);

        txtFromDate = new JTextFieldHint(new JTextField(),"DD/MM/YYYY");
        getContentPane().add(txtFromDate);
        txtFromDate.setBounds(200, 30, 90, 20);

        txtToDate = new JTextFieldHint(new JTextField(),"DD/MM/YYYY");
        txtToDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToDateFocusGained(evt);
            }
        });
        getContentPane().add(txtToDate);
        txtToDate.setBounds(370, 30, 90, 20);

        CLR_BTN.setText("Clear");
        CLR_BTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        CLR_BTN.setMargin(new java.awt.Insets(2, 7, 2, 7));
        CLR_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLR_BTNActionPerformed(evt);
            }
        });
        getContentPane().add(CLR_BTN);
        CLR_BTN.setBounds(670, 30, 80, 30);

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setFont(new java.awt.Font("Liberation Sans", 1, 13)); // NOI18N
        jLabel1.setText("MIR Material Invoice Received Form");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 780, 25);

        jPanel10.setLayout(null);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table.getTableHeader().setFont(new Font("Plain", Font.BOLD, 12));
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        jScrollPane10.setViewportView(Table);

        jPanel10.add(jScrollPane10);
        jScrollPane10.setBounds(10, 60, 720, 270);

        btnShowGST.setText("Show List");
        btnShowGST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowGSTActionPerformed(evt);
            }
        });
        jPanel10.add(btnShowGST);
        btnShowGST.setBounds(10, 20, 130, 30);

        ExportExcel.setText("EXPORT TO EXCEL");
        ExportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportExcelActionPerformed(evt);
            }
        });
        jPanel10.add(ExportExcel);
        ExportExcel.setBounds(540, 20, 170, 27);

        btnUpload.setText("Upload");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });
        jPanel10.add(btnUpload);
        btnUpload.setBounds(260, 340, 90, 27);

        jTabbedPane1.addTab("Invoice Received  Entry", jPanel10);

        jPanel1.setLayout(null);

        TableReceived.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableReceived.setSelectionBackground(new java.awt.Color(208, 220, 234));
        TableReceived.setSelectionForeground(new java.awt.Color(231, 16, 16));
        TableReceived.getTableHeader().setFont(new Font("Plain", Font.BOLD, 12));
        TableReceived.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableReceivedMouseClicked(evt);
            }
        });
        TableReceived.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableReceivedKeyPressed(evt);
            }
        });
        jScrollPane11.setViewportView(TableReceived);

        jPanel1.add(jScrollPane11);
        jScrollPane11.setBounds(10, 60, 720, 270);

        btnShowGSTReports.setText("Show List");
        btnShowGSTReports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowGSTReportsActionPerformed(evt);
            }
        });
        jPanel1.add(btnShowGSTReports);
        btnShowGSTReports.setBounds(10, 20, 130, 30);

        ExportExcel1.setText("EXPORT TO EXCEL");
        ExportExcel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportExcel1ActionPerformed(evt);
            }
        });
        jPanel1.add(ExportExcel1);
        ExportExcel1.setBounds(540, 20, 170, 27);

        jTabbedPane1.addTab("Invoice Received", jPanel1);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(10, 80, 760, 450);
        jTabbedPane1.getAccessibleContext().setAccessibleName("GST Upload  Entry");

        jLabel6.setFont(new java.awt.Font("Liberation Sans", 1, 13)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("MIR APPROVED From Date :");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(10, 30, 180, 20);

        jLabel7.setFont(new java.awt.Font("Liberation Sans", 1, 13)); // NOI18N
        jLabel7.setText("To Date :");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(300, 30, 70, 20);
    }// </editor-fold>//GEN-END:initComponents

    private void txtToDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToDateFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtToDateFocusGained

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

    }//GEN-LAST:event_formMouseClicked

    private void btnShowGSTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowGSTActionPerformed
//    if (!Validate()) {
//            return;
//        }
//        data.Execute("UPDATE FINANCE.D_FIN_PARTY_MASTER FM ,DINESHMILLS.D_COM_SUPP_MASTER  SM \n" +
//"SET FM.GSTIN_NO= SM.GSTIN_NO,FM.STATE_GST_CODE= SM.STATE_GST_CODE,FM.STATE_CODE= SM.STATE_CODE,FM.STATE = SM.STATE \n" +
//"WHERE FM.PARTY_CODE = SM.SUPPLIER_CODE AND SM.GSTIN_NO != ''");
        //FormatGrid();
        //GenerateData(ORDER_BY);
        mnuMaterialInvoice.show(jPanel10, btnShowGST.getX(), btnShowGST.getY()+btnShowGST.getHeight());
    }//GEN-LAST:event_btnShowGSTActionPerformed

    private void ExportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportExcelActionPerformed
        //        // TODO add your handling code here:
        //        try{
        //            exp.fillData(Table_b2b,new File("/root/Desktop/gstr1_B2B.xls"));
        //            exp.fillData(Table_b2b,new File("D://gstr1_B2B.xls"));
        //            JOptionPane.showMessageDialog(null, "Data saved at " +
        //                "'/root/Desktop/gstr1_B2B.xls' successfully in Linux PC or 'D://gstr1_B2B.xls' successfully in Windows PC    ", "Message",
        //                JOptionPane.INFORMATION_MESSAGE);
        //        }
        //        catch(Exception ex) {
        //            ex.printStackTrace();
        //        }
        // TODO add your handling code here:
        File file = null;
        file1.setVisible(true);
        try {
            int returnVal = file1.showOpenDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exp.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), "GSTR2");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file1.getSelectedFile().toString() + " successfully... ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_ExportExcelActionPerformed

    private void CLR_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLR_BTNActionPerformed
        txtFromDate.setText("");
        txtToDate.setText("");
        
        FormatGrid();
        FormatGridReceived();
    }//GEN-LAST:event_CLR_BTNActionPerformed

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
//        for(int r=0;r<Table.getRowCount();r++) {
//                if(Table.getValueAt(r,0).equals(new Boolean(true))) {
//                    //DataModelMaterialInvList.getValueAt(r,2).toString();
//                    if(Table.getValueAt(r, 1).equals("")){
//                        JOptionPane.showMessageDialog(null,"Uploaded month is not selected for "+Table.getValueAt(r, 7).toString());                                           
//                        return;
//                    }
//                }
//        }
        
        GenerateListToUpload();
       //ObjInvReceived =new clsMaterialInvReceived();
       if(ObjInvReceived.Insert()){
         JOptionPane.showMessageDialog(null,"Data are inserted successfully.");                                           
       }
       else{
           JOptionPane.showMessageDialog(null,"Data are not successfully inserted.");                                           
       }
       //FormatGrid();
    }//GEN-LAST:event_btnUploadActionPerformed

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
    if(Table.getSelectedColumn()==0){
            if(Table.getValueAt(Table.getSelectedRow(),0).equals(new Boolean(true))){
                 String MIRNo=Table.getValueAt(Table.getSelectedRow(),1).toString();
                 String MIRDate=Table.getValueAt(Table.getSelectedRow(),2).toString();
                 int srNo=Integer.parseInt(Table.getValueAt(Table.getSelectedRow(),3).toString());                         
                 
                 //System.out.println(voucherNo);
                 if(data.IsRecordExist("SELECT MIR_NO FROM DINESHMILLS.D_MIR_INV_RECEIVED WHERE MIR_NO='"+MIRNo+"' AND MIR_DATE='"+EITLERPGLOBAL.formatDateDB(MIRDate)+"' AND MIR_SR_NO="+srNo+"")) {                
                     JOptionPane.showMessageDialog(null,"MIR No is already received with Sr no."+srNo);
                     Table.setValueAt(new Boolean(false),Table.getSelectedRow(), 0);                     
            }
            }
        }
    }//GEN-LAST:event_TableMouseClicked

    private void TableReceivedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableReceivedMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TableReceivedMouseClicked

    private void TableReceivedKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableReceivedKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TableReceivedKeyPressed

    private void btnShowGSTReportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowGSTReportsActionPerformed
        if (!Validate()) {
            return;
        }
        FormatGridReceived();
        GenerateReceivedData(ORDER_BY);        
    }//GEN-LAST:event_btnShowGSTReportsActionPerformed

    private void ExportExcel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportExcel1ActionPerformed
File file = null;
        file1.setVisible(true);
        try {
            int returnVal = file1.showOpenDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exp.fillData(TableReceived, new File(file1.getSelectedFile().toString() + ".xls"), "GSTR2");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file1.getSelectedFile().toString() + " successfully... ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_ExportExcel1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        //FormatGridInserted();
        //Parameter="";
        //GenerateInsertedData(Parameter);
        if (!Validate()) {
            return;
        }
        FormatGrid();
        Parameter="";
        GenerateData(Parameter);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
//        FormatGridInserted();
//        Parameter="AMOUNT_DIFFERS";
//        GenerateInsertedData(Parameter);
        if (!Validate()) {
            return;
        }
        FormatGrid();
        Parameter="NOT_RECEIVED";
        GenerateData(Parameter);
    }//GEN-LAST:event_jMenuItem2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CLR_BTN;
    private javax.swing.JButton ExportExcel;
    private javax.swing.JButton ExportExcel1;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableReceived;
    private javax.swing.JButton btnShowGST;
    private javax.swing.JButton btnShowGSTReports;
    private javax.swing.JButton btnUpload;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JPopupMenu mnuMaterialInvoice;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables

    private boolean Validate() {
        //Form level validations
        if (txtFromDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter from Date");
            return false;
        } else if (!EITLERPGLOBAL.isDate(txtFromDate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid From Date in DD/MM/YYYY format.");
            return false;
        }

        if (txtToDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter To Date");
            return false;
        } else if (!EITLERPGLOBAL.isDate(txtToDate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid To Date in DD/MM/YYYY format.");
            return false;
        }

        return true;
    }
    
    private void GenerateCombos() {
        
    }

    private void FormatGrid() {
        try {
            DataModelMaterialInvList= new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModelMaterialInvList);
            TableColumnModel ColModel=Table.getColumnModel();
            Table.setAutoResizeMode(0);
            
            DataModelMaterialInvList.addColumn("*"); //0            
            DataModelMaterialInvList.addColumn("MIR No"); //1
            DataModelMaterialInvList.addColumn("MIR Date");//2
            DataModelMaterialInvList.addColumn("Sr.No");//3
            DataModelMaterialInvList.addColumn("Supplier Id"); //4
            DataModelMaterialInvList.addColumn("Supp. Name"); //5
            DataModelMaterialInvList.addColumn("Supp. GSTIN");//6
            DataModelMaterialInvList.addColumn("Invoice No");//7
            DataModelMaterialInvList.addColumn("Inv Date");//8
            DataModelMaterialInvList.addColumn("Item Id"); //9
            DataModelMaterialInvList.addColumn("Item Desc"); //10
            DataModelMaterialInvList.addColumn("Invoice Value"); //11
            DataModelMaterialInvList.addColumn("Place Of Supply");//12            
            DataModelMaterialInvList.addColumn("Reverse Charge"); //13
            DataModelMaterialInvList.addColumn("Invoice Type"); //14
            DataModelMaterialInvList.addColumn("HSN Code"); //15
            DataModelMaterialInvList.addColumn("Quantity");//16
            DataModelMaterialInvList.addColumn("Unit"); //17    
            DataModelMaterialInvList.addColumn("Rate"); //18
            DataModelMaterialInvList.addColumn("Taxable Value"); //19
            DataModelMaterialInvList.addColumn("Integrated Tax Paid"); //20
            DataModelMaterialInvList.addColumn("Central Tax Paid"); //21
            DataModelMaterialInvList.addColumn("State/UT Tax Paid"); //22
            DataModelMaterialInvList.addColumn("Cess Paid"); //23
            DataModelMaterialInvList.addColumn("Eligibility For ITC"); //24
            DataModelMaterialInvList.addColumn("Availed ITC Integrated Tax"); //25
            DataModelMaterialInvList.addColumn("Availed ITC Central Tax"); //26
            DataModelMaterialInvList.addColumn("Availed ITC State/UT Tax"); //27
            DataModelMaterialInvList.addColumn("Availed ITC Cess"); //28            
            DataModelMaterialInvList.addColumn("Companyid"); //29
            DataModelMaterialInvList.addColumn("Unitnumber");//30
            DataModelMaterialInvList.addColumn("MIR Approved Date");//31
            
            

//            DataModelMaterialInvList.SetVariable(0,"UPLOADED"); 
//            DataModelMaterialInvList.SetVariable(1,"UPLOADED_MONTH"); 
//            DataModelMaterialInvList.SetVariable(2,"REMARKS");
//            DataModelMaterialInvList.SetVariable(4, "SUB_ACCOUNT_CODE");
//            DataModelMaterialInvList.SetVariable(5,"SUB_ACCOUNT_NAME");
//            DataModelMaterialInvList.SetVariable(6,"GSTIN_NO");
//            DataModelMaterialInvList.SetVariable(7,"VOUCHER_NO");
//            DataModelMaterialInvList.SetVariable(8, "VOUCHER_DATE");
//            DataModelMaterialInvList.SetVariable(9, "MAIN_ACCOUNT_CODE");
//            DataModelMaterialInvList.SetVariable(10, "MAIN_ACCOUNT_NAME");
//            DataModelMaterialInvList.SetVariable(11, "EFFECT");
//            DataModelMaterialInvList.SetVariable(12, "AMOUNT");
//            DataModelMaterialInvList.SetVariable(13, "DIFFER_AMOUNT");
//            DataModelMaterialInvList.SetVariable(14, "HSN_SAC_CODE");
//            DataModelMaterialInvList.SetVariable(15, "INVOICE_NO");
//            DataModelMaterialInvList.SetVariable(16, "INVOICE_DATE");
//            DataModelMaterialInvList.SetVariable(17, "BOOK_CODE");
//            DataModelMaterialInvList.SetVariable(18, "VOUCHER_TYPE");
//            DataModelMaterialInvList.SetVariable(19, "LEGACY_NO");
//            DataModelMaterialInvList.SetVariable(20,"LEGACY_DATE");
//            DataModelMaterialInvList.SetVariable(21, "COMPANY_ID");
//            DataModelMaterialInvList.SetVariable(22, "VOUCHER_SR_NO");
//            
            
            
            
//            DataModelMaterialInvList.SetNumeric(7, true);
//            DataModelMaterialInvList.SetNumeric(11, true);
//            DataModelMaterialInvList.SetNumeric(12, true);
//            DataModelMaterialInvList.SetNumeric(13, true);
//            DataModelMaterialInvList.SetNumeric(14, true);
//            DataModelMaterialInvList.SetNumeric(15, true);
//            DataModelMaterialInvList.SetNumeric(16, true);
//            

//            for (int i = 0; i <= 21; i++) {
//                DataModelMaterialInvList.SetReadOnly(i);
//            }

//            Table.getColumnModel().getColumn(0).setMinWidth(30);
//            for (int i = 1; i <= 21; i++) {
//                Table.getColumnModel().getColumn(i).setMinWidth(100);
//            }
            Table.getColumnModel().getColumn(0).setMaxWidth(20);
            //Table.getColumnModel().getColumn(1).setMinWidth(100);
            Table.getColumnModel().getColumn(3).setMaxWidth(45);
            Table.removeColumn(Table.getColumnModel().getColumn(30));
            Table.removeColumn(Table.getColumnModel().getColumn(29));
            //Table.removeColumn(Table.getColumnModel().getColumn(30));
            
            
            Render.setCustomComponent(0,"CheckBox");
            Table.getColumnModel().getColumn(0).setCellRenderer(Render);
            Table.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));
            
            /*TableColumn dateColumn = Table.getColumnModel().getColumn(1);
            JComboBox monthbox = new JComboBox();
            String month_name = "";
            java.util.Date date = new java.util.Date();
            int month=0;
            //int month = date.getMonth();
            //int year = date.getYear() + 1900;
            int year=2018;
            for (int i = 0; i < 40; i++) {
                month = month + 1;
                if (month >= 13) {
                    month = 1;
                    year = year + 1;
                }
                if (month == 1) {
                    month_name = "Jan";
                } else if (month == 2) {
                    month_name = "Feb";
                } else if (month == 3) {
                    month_name = "Mar";
                } else if (month == 4) {
                    month_name = "Apr";
                } else if (month == 5) {
                    month_name = "May";
                } else if (month == 6) {
                    month_name = "Jun";
                } else if (month == 7) {
                    month_name = "Jul";
                } else if (month == 8) {
                    month_name = "Aug";
                } else if (month == 9) {
                    month_name = "Sep";
                } else if (month == 10) {
                    month_name = "Oct";
                } else if (month == 11) {
                    month_name = "Nov";
                } else if (month == 12) {
                    month_name = "Dec";
                }
                monthbox.addItem(month_name + " - " + year);
            }
            dateColumn.setCellEditor(new DefaultCellEditor(monthbox));
            */

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void FormatGridReceived() {
        try {
            DataModelReceivedList= new EITLTableModel();
            TableReceived.removeAll();

            TableReceived.setModel(DataModelReceivedList);
            TableColumnModel ColModel=TableReceived.getColumnModel();
            TableReceived.setAutoResizeMode(0);
            
            DataModelReceivedList.addColumn("Sr.No");//0
            DataModelReceivedList.addColumn("MIR No"); //1
            DataModelReceivedList.addColumn("MIR Date");//2
            DataModelReceivedList.addColumn("MIR Sr.No");//3
            DataModelReceivedList.addColumn("Supplier Id"); //4
            DataModelReceivedList.addColumn("Supp. Name"); //5
            DataModelReceivedList.addColumn("Supp. GSTIN");//6
            DataModelReceivedList.addColumn("Invoice No");//7
            DataModelReceivedList.addColumn("Inv Date");//8
            DataModelReceivedList.addColumn("Item Id"); //9
            DataModelReceivedList.addColumn("Item Desc"); //10
            DataModelReceivedList.addColumn("Invoice Value"); //11
            DataModelReceivedList.addColumn("Place Of Supply");//12            
            DataModelReceivedList.addColumn("Reverse Charge"); //13
            DataModelReceivedList.addColumn("Invoice Type"); //14
            DataModelReceivedList.addColumn("HSN Code"); //15
            DataModelReceivedList.addColumn("Quantity");//16
            DataModelReceivedList.addColumn("Unit"); //17    
            DataModelReceivedList.addColumn("Rate"); //18
            DataModelReceivedList.addColumn("Taxable Value"); //19
            DataModelReceivedList.addColumn("Integrated Tax Paid"); //20
            DataModelReceivedList.addColumn("Central Tax Paid"); //21
            DataModelReceivedList.addColumn("State/UT Tax Paid"); //22
            DataModelReceivedList.addColumn("Cess Paid"); //23
            DataModelReceivedList.addColumn("Eligibility For ITC"); //24
            DataModelReceivedList.addColumn("Availed ITC Integrated Tax"); //25
            DataModelReceivedList.addColumn("Availed ITC Central Tax"); //26
            DataModelReceivedList.addColumn("Availed ITC State/UT Tax"); //27
            DataModelReceivedList.addColumn("Availed ITC Cess"); //28            
            DataModelReceivedList.addColumn("MIR Approved Date"); //29            
            

//            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    
    
    
    
    public void GenerateData(String Parameter) {
 double IGSTAmt = 0, CGSTAmt = 0, SGSTAmt = 0;
 String strCondition="";
        try {
            
            String strSQL = "SELECT MIR_NO, MIR_DATE, MIR_SUPP_ID, INVOICE_NO, INVOICE_DATE, INVOICE_AMOUNT, TAX_RATE,  "
                    + "SUM(TAXABLE_AMOUNT) AS TAXABLE_AMOUNT, SUM(IGST_AMOUNT) AS IGST_AMOUNT,  "
                    + "SUM(CGST_AMOUNT) AS CGST_AMOUNT, SUM(SGST_AMOUNT) AS SGST_AMOUNT, SUM(CESS_AMOUNT) AS CESS_AMOUNT,  "
                    + "SUPP_ID, SUPPLIER_CODE, SUPP_NAME, GSTIN_NO,HSN_SAC_CODE,QTY,ITEM_ID,ITEM_EXTRA_DESC,UNIT,SR_NO,COMPANY_ID,APPROVED_DATE  "
                    + "FROM (SELECT * FROM "                    
                    + "(SELECT H.MIR_NO,H.MIR_DATE,H.SUPP_ID AS MIR_SUPP_ID,H.INVOICE_NO,H.INVOICE_DATE,H.INVOICE_AMOUNT,HSN_SAC_CODE,QTY,ITEM_ID,ITEM_EXTRA_DESC,UNIT,  "
                    + "(D.COLUMN_3_PER+D.COLUMN_4_PER+D.COLUMN_5_PER) AS TAX_RATE, "
                    + "(D.TOTAL_AMOUNT-D.COLUMN_1_AMT)+D.COLUMN_2_AMT+D.COLUMN_12_AMT AS TAXABLE_AMOUNT, "
                    + "D.COLUMN_5_AMT AS IGST_AMOUNT, "
                    + "D.COLUMN_3_AMT AS CGST_AMOUNT, "
                    + "D.COLUMN_4_AMT AS SGST_AMOUNT, "
                    + "D.COLUMN_8_AMT AS CESS_AMOUNT,SR_NO,D.COMPANY_ID AS COMPANY_ID,H.APPROVED_DATE AS APPROVED_DATE "
                    + "FROM DINESHMILLS.D_INV_MIR_HEADER H, DINESHMILLS.D_INV_MIR_DETAIL D "
                    + "WHERE H.MIR_NO=D.MIR_NO "
                    + "AND H.APPROVED=1 AND H.CANCELLED=0 "
                    + "AND H.MIR_TYPE IN (1,2) "
                    //+ "AND H.MIR_DATE>='" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' "
                    //+ "AND H.MIR_DATE<='" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "') AS MIR "
                    + "AND H.APPROVED_DATE>='" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' "
                    + "AND H.APPROVED_DATE<='" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "'"
                    + " UNION ALL "
                    + "SELECT H.JOB_NO AS MIR_NO,H.JOB_DATE AS MIR_DATE,H.SUPP_ID AS MIR_SUPP_ID,H.INVOICE_NO,H.INVOICE_DATE,H.INVOICE_AMOUNT, "
                    + "HSN_SAC_CODE,QTY,ITEM_ID,ITEM_EXTRA_DESC,UNIT,(D.COLUMN_4_PER+D.COLUMN_5_PER+D.COLUMN_6_PER) AS  "
                    + "TAX_RATE, (D.TOTAL_AMOUNT-D.COLUMN_1_AMT)+D.COLUMN_2_AMT+D.COLUMN_15_AMT AS TAXABLE_AMOUNT, "
                    + "D.COLUMN_6_AMT AS IGST_AMOUNT, D.COLUMN_4_AMT AS CGST_AMOUNT, D.COLUMN_5_AMT AS SGST_AMOUNT, "
                    + "D.COLUMN_9_AMT AS CESS_AMOUNT,SR_NO,D.COMPANY_ID AS COMPANY_ID,H.APPROVED_DATE AS APPROVED_DATE "
                    + " FROM DINESHMILLS.D_INV_JOB_HEADER H,DINESHMILLS.D_INV_JOB_DETAIL D "
                    + "WHERE H.JOB_NO=D.JOB_NO AND H.APPROVED=1 AND H.CANCELLED=0 AND H.APPROVED_DATE>='" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' AND "
                    + "H.APPROVED_DATE<='" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "') AS MIR "
                    + "LEFT JOIN  "
                    + "(SELECT SUPP_ID,SUPPLIER_CODE ,SUPP_NAME,GSTIN_NO FROM DINESHMILLS.D_COM_SUPP_MASTER) AS SUPP "
                    + "ON SUPP.SUPPLIER_CODE=MIR.MIR_SUPP_ID)AS T "
                    + "GROUP BY MIR_NO,MIR_DATE,TAX_RATE "
                    + "ORDER BY MIR_NO,SR_NO,TAX_RATE " ;

            System.out.println("QUERY : "+strSQL);
            ResultSet rs = data.getResult(strSQL);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {

                Object[] rowData = new Object[35];
                if(Parameter.equals("NOT_RECEIVED")){
                String MIRNo=UtilFunctions.getString(rs, "MIR_NO", "");
                Date MIRDate=rs.getDate("MIR_DATE");
                System.out.println(MIRDate);                
                int srNo=UtilFunctions.getInt(rs, "SR_NO", 0);
                int datafound=data.getIntValueFromDB("SELECT COUNT(*) FROM DINESHMILLS.D_MIR_INV_RECEIVED WHERE MIR_NO='"+MIRNo+"' AND MIR_DATE='"+MIRDate+"' "
                        + " AND MIR_SR_NO="+srNo+""); 
                if(datafound>0){
                    rs.next();
                    continue;
                }
                }
                
                // rowData[0]=rs.getString("");
                //rowData[0] = cnt++;
                rowData[0] = new Boolean(false);
                rowData[1] = UtilFunctions.getString(rs, "MIR_NO", "");
                //rowData[2] = df.format(rs.getDate("MIR_DATE"));
                rowData[2] = EITLERPGLOBAL.formatDate(rs.getDate("MIR_DATE"));
                rowData[3] = UtilFunctions.getInt(rs, "SR_NO", 0);
                rowData[4] = UtilFunctions.getString(rs, "SUPPLIER_CODE", "");
                rowData[5] = UtilFunctions.getString(rs, "SUPP_NAME", "");
                rowData[6] = UtilFunctions.getString(rs, "GSTIN_NO", "");
                rowData[7] = UtilFunctions.getString(rs, "INVOICE_NO", "");
                if (rs.getString("INVOICE_DATE").equals("") || rs.getString("INVOICE_DATE")==null || rs.getString("INVOICE_DATE").equals("0000-00-00")) {
                    rowData[8] = "";
                } else {
                    //rowData[8] = df.format(rs.getDate("INVOICE_DATE"));
                    rowData[8]=EITLERPGLOBAL.formatDate(rs.getDate("INVOICE_DATE"));
                }
                rowData[9] = UtilFunctions.getString(rs, "ITEM_ID", "");
                rowData[10] = UtilFunctions.getString(rs, "ITEM_EXTRA_DESC", "");                
                rowData[11] = UtilFunctions.getString(rs, "INVOICE_AMOUNT", "");
                rowData[12] = "24-Gujarat";
                rowData[13] = "N";
                rowData[14] = "R";
                //rowData[13] = UtilFunctions.getString(rs, "HSN_SAC_CODE", "");
                rowData[15]=clsItem.getHsnSacCode(EITLERPGLOBAL.gCompanyID, UtilFunctions.getString(rs, "ITEM_ID", ""));
                rowData[16] = UtilFunctions.getInt(rs, "QTY", 0);
                rowData[17] = clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT", UtilFunctions.getInt(rs, "UNIT", 0));
                rowData[18] = UtilFunctions.getInt(rs, "TAX_RATE", 0);
                rowData[19] = UtilFunctions.getInt(rs, "TAXABLE_AMOUNT", 0);
                //rowData[20] = UtilFunctions.getInt(rs, "IGST_AMOUNT", 0);
                rowData[20] = EITLERPGLOBAL.round(UtilFunctions.getDouble(rs, "IGST_AMOUNT", 0),2);
                IGSTAmt += UtilFunctions.getDouble(rs, "IGST_AMOUNT", 0);
                //rowData[21] = UtilFunctions.getInt(rs, "CGST_AMOUNT", 0);
                rowData[21] = EITLERPGLOBAL.round(UtilFunctions.getDouble(rs, "CGST_AMOUNT", 0),2);
                CGSTAmt += UtilFunctions.getDouble(rs, "CGST_AMOUNT", 0);
                //rowData[22] = UtilFunctions.getInt(rs, "SGST_AMOUNT", 0);
                rowData[22] = EITLERPGLOBAL.round(UtilFunctions.getDouble(rs, "SGST_AMOUNT", 0),2);
                SGSTAmt += UtilFunctions.getDouble(rs, "SGST_AMOUNT", 0);
                rowData[23] = UtilFunctions.getInt(rs, "CESS_AMOUNT", 0);
                rowData[24] = "0";                
                rowData[25] = "0";
                rowData[26] = "0";
                rowData[27] = "0";
                rowData[28] = "0";
                rowData[29] = UtilFunctions.getInt(rs, "COMPANY_ID", 0);
                rowData[30] = UtilFunctions.getInt(rs, "UNIT", 0);
                rowData[31] = EITLERPGLOBAL.formatDate(rs.getDate("APPROVED_DATE"));

                DataModelMaterialInvList.addRow(rowData);
                rs.next();
            }
            rs.close();

        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
        

    }   
    
    
    public void GenerateReceivedData(String Parameter) {
        double IGSTAmt = 0, CGSTAmt = 0, SGSTAmt = 0;
        try {
            String strCondition="";
            if(!txtFromDate.getText().trim().equals("")){
                strCondition+=" AND MIR_APPROVED_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
            }
            if(!txtToDate.getText().trim().equals("")){
                strCondition+=" AND MIR_APPROVED_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
            }
                    
            String strSQL = "SELECT * FROM DINESHMILLS.D_MIR_INV_RECEIVED WHERE RECEIVED=1 "+strCondition                    
                          + "ORDER BY INVOICE_NO,INVOICE_DATE,MIR_NO,MIR_DATE";

            System.out.println("QUERY : "+strSQL);
            ResultSet rs = data.getResult(strSQL);
            int cnt = 1;            
            while (!rs.isAfterLast()) {
                Object[] rowData = new Object[30];
                // rowData[0]=rs.getString("");
                rowData[0] = cnt++;                
                rowData[1] = UtilFunctions.getString(rs, "MIR_NO", "");
                //rowData[2] = df.format(rs.getDate("MIR_DATE"));
                rowData[2] = EITLERPGLOBAL.formatDate(rs.getDate("MIR_DATE"));
                rowData[3] = UtilFunctions.getInt(rs, "MIR_SR_NO", 0);
                rowData[4] = UtilFunctions.getString(rs, "SUPPLIER_ID", "");
                rowData[5] = UtilFunctions.getString(rs, "SUPPLIER_NAME", "");
                rowData[6] = UtilFunctions.getString(rs, "SUPPLIER_GSTIN", "");
                rowData[7] = UtilFunctions.getString(rs, "INVOICE_NO", "");
                if (rs.getString("INVOICE_DATE").equals("") || rs.getString("INVOICE_DATE")==null || rs.getString("INVOICE_DATE").equals("0000-00-00")) {
                    rowData[8] = "";
                } else {
                    //rowData[8] = df.format(rs.getDate("INVOICE_DATE"));
                    rowData[8]=EITLERPGLOBAL.formatDate(rs.getDate("INVOICE_DATE"));
                }
                rowData[9] = UtilFunctions.getString(rs, "ITEM_ID", "");
                rowData[10] = UtilFunctions.getString(rs, "ITEM_DESC", "");                
                rowData[11] = UtilFunctions.getString(rs, "INVOICE_VALUE", "");
                //rowData[12] = "24-Gujarat";                
                //rowData[13] = "N";
                //rowData[14] = "R";
                rowData[12] = UtilFunctions.getString(rs, "PLACE_OF_SUPPLY", "");                
                rowData[13] = UtilFunctions.getString(rs, "REVERSE_CHARGE", "");                
                rowData[14] = UtilFunctions.getString(rs, "INVOICE_TYPE", "");                
                
                rowData[15] = UtilFunctions.getString(rs, "HSN_SAC_CODE", "");
                //rowData[15]=clsItem.getHsnSacCode(EITLERPGLOBAL.gCompanyID, UtilFunctions.getString(rs, "ITEM_ID", ""));
                rowData[16] = UtilFunctions.getInt(rs, "QUANTITY", 0);
                rowData[17] = clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT", UtilFunctions.getInt(rs, "UNIT", 0));
                rowData[18] = UtilFunctions.getInt(rs, "RATE", 0);
                rowData[19] = UtilFunctions.getInt(rs, "TAXABLE_VALUE", 0);
                rowData[20] = UtilFunctions.getInt(rs, "INTEGRATED_TAX_PAID", 0);                
                rowData[21] = UtilFunctions.getInt(rs, "CENTRAL_TAX_PAID", 0);                
                rowData[22] = UtilFunctions.getInt(rs, "STATE_TAX_PAID", 0);                
                rowData[23] = UtilFunctions.getInt(rs, "CESS_PAID", 0);
                rowData[24] = "0";                
                rowData[25] = "0";
                rowData[26] = "0";
                rowData[27] = "0";
                rowData[28] = "0";
                rowData[29] = EITLERPGLOBAL.formatDate(rs.getDate("MIR_APPROVED_DATE"));

                DataModelReceivedList.addRow(rowData);
                rs.next();
            }
            rs.close();

        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
        

    }
    
    public void GenerateK3TaxInsertedData(String Parameter) {
        double IGSTAmt = 0, CGSTAmt = 0, SGSTAmt = 0;
        try {
            String strCondition="";
            if(!txtFromDate.getText().trim().equals("")){
                strCondition+=" AND VOUCHER_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
            }
            if(!txtToDate.getText().trim().equals("")){
                strCondition+=" AND VOUCHER_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
            }
            if(Parameter.equals("JV_PREPARED")){
                strCondition+=" AND (JV_NO!='' OR JV_NO IS NOT NULL) ";
            }
            if(Parameter.equals("JV_NOT_PREPATED")){
                strCondition+=" AND (JV_NO='' OR JV_NO IS NULL) ";
            }
            String strSQL = "SELECT * FROM FINANCE.D_FIN_GST_UPLOADED_DETAIL WHERE UPLOADED=1 AND MAIN_ACCOUNT_CODE IN ('231761') "+strCondition                    
                          + "ORDER BY INVOICE_NO,INVOICE_DATE,VOUCHER_NO,VOUCHER_DATE";
                    
            
            /*String strSQL = "SELECT D.VOUCHER_NO AS VOUCHER_NO,EFFECT,MAIN_ACCOUNT_CODE,AMOUNT,D.REMARKS,PO_NO,PO_DATE,INVOICE_NO,INVOICE_DATE,"
                    + "GRN_NO,GRN_DATE,INVOICE_AMOUNT,D.LINK_NO,REF_VOUCHER_NO,HSN_SAC_CODE,ITEM_DESCRIPTION,"
                    + "VOUCHER_DATE,BOOK_CODE,CHEQUE_NO,CHEQUE_DATE,CHEQUE_AMOUNT,VOUCHER_TYPE,"
                    + "LEGACY_NO,LEGACY_DATE,D.COMPANY_ID AS COMPANY_ID FROM FINANCE.D_FIN_VOUCHER_HEADER H,FINANCE.D_FIN_VOUCHER_DETAIL D WHERE "
                    + "H.COMPANY_ID=D.COMPANY_ID AND H.VOUCHER_NO=D.VOUCHER_NO AND H.APPROVED=1 AND "
                    + "H.CANCELLED=0 AND H.COMPANY_ID="+cmbCompanyTypeModel.getCode((long) cmbCompany.getSelectedIndex())+" "
                    + "AND D.COMPANY_ID="+cmbCompanyTypeModel.getCode((long) cmbCompany.getSelectedIndex())+" AND D.MAIN_ACCOUNT_CODE IN "
                    + "('231756','231757','231758') "+strCondition
                    +" ORDER BY VOUCHER_DATE";
                    */
            System.out.println("QUERY : "+strSQL);
            ResultSet rs = data.getResult(strSQL);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {

                Object[] rowData = new Object[30];
                // rowData[0]=rs.getString("");
                rowData[0]=cnt++;
                rowData[1]=UtilFunctions.getString(rs, "UPLOADED_MONTH", "");
                rowData[2] = UtilFunctions.getString(rs, "REMARKS", "");
                rowData[3] =UtilFunctions.getString(rs, "SUB_ACCOUNT_CODE", "");                                
                rowData[4]=UtilFunctions.getString(rs, "SUB_ACCOUNT_NAME", "");
                rowData[5]=UtilFunctions.getString(rs, "GSTIN_NO", "");                
                rowData[6] = UtilFunctions.getString(rs, "VOUCHER_NO", "");
                rowData[7] = EITLERPGLOBAL.formatDate(rs.getDate("VOUCHER_DATE"));
                rowData[8] = UtilFunctions.getString(rs, "MAIN_ACCOUNT_CODE", "");                
                rowData[9] = UtilFunctions.getString(rs, "MAIN_ACCOUNT_NAME", "");                
                if(UtilFunctions.getString(rs,"EFFECT","").equals("C")){
                    rowData[10]="Cr";
                }else{
                rowData[10]="Dr";
                }
                rowData[11] = UtilFunctions.getString(rs, "AMOUNT", "");
                
                rowData[12] = UtilFunctions.getString(rs, "JV_NO", "");
                rowData[13] = EITLERPGLOBAL.formatDate(rs.getDate("JV_DATE"));
                if(UtilFunctions.getString(rs,"JV_EFFECT","").equals("C")){
                    rowData[14]="Cr";
                }else{
                rowData[14]="Dr";
                }
                rowData[15] = UtilFunctions.getString(rs, "GSTPORTAL_OR_JV_AMOUNT", "");             
                
                rowData[16] = UtilFunctions.getString(rs, "DIFFER_AMOUNT", "");
                rowData[17] = UtilFunctions.getString(rs, "HSN_SAC_CODE", "");
                //if (rs.getString("INVOICE_DATE").equals("") || rs.getString("INVOICE_DATE")==null || rs.getString("INVOICE_DATE").equals("0000-00-00")) {
                //    rowData[6] = "";
                //} else {
                //    rowData[6] = df.format(rs.getDate("INVOICE_DATE"));
                //}
                rowData[18]=UtilFunctions.getString(rs, "INVOICE_NO", "");
                rowData[19] = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rs, "INVOICE_DATE", ""));
                rowData[20]=UtilFunctions.getString(rs, "BOOK_CODE", "");
                rowData[21] = UtilFunctions.getString(rs, "VOUCHER_TYPE", "");
                rowData[22] = UtilFunctions.getString(rs, "LEGACY_NO", "");
                rowData[23] = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rs, "LEGACY_DATE", ""));
                rowData[24] = UtilFunctions.getInt(rs, "COMPANY_ID", 0);
//                rowData[10] = "R";
//                rowData[11] = UtilFunctions.getInt(rs, "TAX_RATE", 0);
//                rowData[12] = UtilFunctions.getInt(rs, "TAXABLE_AMOUNT", 0);
//                rowData[13] = UtilFunctions.getInt(rs, "IGST_AMOUNT", 0);
//                IGSTAmt += UtilFunctions.getDouble(rs, "IGST_AMOUNT", 0);
//                rowData[14] = UtilFunctions.getInt(rs, "CGST_AMOUNT", 0);
//                CGSTAmt += UtilFunctions.getDouble(rs, "CGST_AMOUNT", 0);
//                rowData[15] = UtilFunctions.getInt(rs, "SGST_AMOUNT", 0);
//                SGSTAmt += UtilFunctions.getDouble(rs, "SGST_AMOUNT", 0);
//                rowData[16] = UtilFunctions.getInt(rs, "CESS_AMOUNT", 0);
//                rowData[17] = "0";
//                rowData[18] = "0";
//                rowData[19] = "0";
//                rowData[20] = "0";
//                rowData[21] = "0";

                DataModelK3TaxInsertedList.addRow(rowData);
                rs.next();
            }
            rs.close();

        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
        

    }
    
 private void GenerateListToUpload(){
      try { 
            
            ObjInvReceived.hmListItems.clear();
            //hmListToUpload.clear();            
            for(int r=0;r<Table.getRowCount();r++) {
                if(Table.getValueAt(r,0).equals(new Boolean(true))) {
                    clsMaterialInvReceived objItem=new clsMaterialInvReceived();
                    
                    int Received = (Boolean)DataModelMaterialInvList.getValueAt(r,0) ? 1 : 0;
                    //objItem.setAttribute("RECEIVED",DataModelMaterialInvList.getValueAt(r,0));
                    objItem.setAttribute("RECEIVED", Received);
                    
                    
                    objItem.setAttribute("MIR_NO",DataModelMaterialInvList.getValueAt(r, 1).toString());
                    objItem.setAttribute("MIR_DATE",DataModelMaterialInvList.getValueAt(r,2).toString());
                    objItem.setAttribute("MIR_SR_NO",Integer.parseInt(DataModelMaterialInvList.getValueAt(r,3).toString()));
                    objItem.setAttribute("SUPPLIER_ID",DataModelMaterialInvList.getValueAt(r,4).toString());
                    objItem.setAttribute("SUPPLIER_NAME",DataModelMaterialInvList.getValueAt(r,5).toString());
                    objItem.setAttribute("SUPPLIER_GSTIN",DataModelMaterialInvList.getValueAt(r,6).toString());
                    objItem.setAttribute("INVOICE_NO",DataModelMaterialInvList.getValueAt(r,7).toString());
                    objItem.setAttribute("INVOICE_DATE",DataModelMaterialInvList.getValueAt(r,8).toString());
                    objItem.setAttribute("ITEM_ID",DataModelMaterialInvList.getValueAt(r,9).toString());
                    objItem.setAttribute("ITEM_DESC",DataModelMaterialInvList.getValueAt(r,10).toString());
                    objItem.setAttribute("INVOICE_VALUE",Double.parseDouble(DataModelMaterialInvList.getValueAt(r,11).toString()));
                    objItem.setAttribute("PLACE_OF_SUPPLY", DataModelMaterialInvList.getValueAt(r, 12).toString());
                    objItem.setAttribute("REVERSE_CHARGE", DataModelMaterialInvList.getValueAt(r, 13).toString());                                   
                    objItem.setAttribute("INVOICE_TYPE", DataModelMaterialInvList.getValueAt(r, 14).toString());
                    objItem.setAttribute("HSN_SAC_CODE", DataModelMaterialInvList.getValueAt(r, 15).toString());
                    objItem.setAttribute("QUANTITY",Double.parseDouble(DataModelMaterialInvList.getValueAt(r,16).toString()));
                    objItem.setAttribute("UNIT", Integer.parseInt(DataModelMaterialInvList.getValueAt(r, 30).toString()));
                    objItem.setAttribute("RATE",Double.parseDouble(DataModelMaterialInvList.getValueAt(r,18).toString()));
                    objItem.setAttribute("TAXABLE_VALUE",Double.parseDouble(DataModelMaterialInvList.getValueAt(r,19).toString()));
                    System.out.println(Double.parseDouble(DataModelMaterialInvList.getValueAt(r,20).toString()));
                    objItem.setAttribute("INTEGRATED_TAX_PAID",Double.parseDouble(DataModelMaterialInvList.getValueAt(r,20).toString()));
                    objItem.setAttribute("CENTRAL_TAX_PAID",Double.parseDouble(DataModelMaterialInvList.getValueAt(r,21).toString()));
                    objItem.setAttribute("STATE_TAX_PAID",Double.parseDouble(DataModelMaterialInvList.getValueAt(r,22).toString()));
                    objItem.setAttribute("CESS_PAID",Double.parseDouble(DataModelMaterialInvList.getValueAt(r,23).toString()));
                    objItem.setAttribute("ELIGIBILITY_FOR_ITC",Double.parseDouble(DataModelMaterialInvList.getValueAt(r,24).toString()));
                    objItem.setAttribute("AVAILED_ITC_INTEGRATED_TAX",Double.parseDouble(DataModelMaterialInvList.getValueAt(r,25).toString()));
                    objItem.setAttribute("AVAILED_ITC_CENTRAL_TAX",Double.parseDouble(DataModelMaterialInvList.getValueAt(r,26).toString()));
                    objItem.setAttribute("AVAILED_ITC_STATE_TAX",Double.parseDouble(DataModelMaterialInvList.getValueAt(r,27).toString()));
                    objItem.setAttribute("AVAILED_ITC_CESS",Double.parseDouble(DataModelMaterialInvList.getValueAt(r,28).toString()));
                    objItem.setAttribute("MIR_APPROVED_DATE",DataModelMaterialInvList.getValueAt(r,31).toString());
                    
                    System.out.println(DataModelMaterialInvList.getValueAt(r,0));
                    
             objItem.setAttribute("COMPANY_ID",Integer.parseInt(DataModelMaterialInvList.getValueAt(r,29).toString()));       
                    //objItem.setAttribute("COMPANY_ID",UtilFunctions.CInt(DataModelMaterialInvList.getValueByVariable("COMPANY_ID",r)));
                    
                    //hmListToUpload.put(Integer.toString(hmListToUpload.size()+1),objItem);
                    ObjInvReceived.hmListItems.put(Integer.toString(ObjInvReceived.hmListItems.size()+1), objItem);
                    System.out.println(ObjInvReceived.hmListItems.size());
                }
            }
            
            //Cancelled=false;
            //aDialog.dispose();            
        }
        catch(Exception e) {
            //Cancelled=true;
            //aDialog.dispose();
            e.printStackTrace();
        }
        
}
 
 
}
