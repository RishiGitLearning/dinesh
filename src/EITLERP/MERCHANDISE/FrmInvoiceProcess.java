/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.MERCHANDISE;

import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableCellRenderer;
import EITLERP.EITLTableModel;
import EITLERP.data;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;

/**
 *
 * @author Dharmendra
 */
public class FrmInvoiceProcess extends javax.swing.JApplet {

    /**
     * Initializes the applet FrmInvoiceProcess
     */
    private EITLTableModel DataModel;
    ResultSet rs, rsTmp;
    Connection Conn;
    Statement STMT;
    String sql;

    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        //</editor-fold>

        /* Create and display the applet */
        initComponents();
        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            Conn = DriverManager.getConnection("jdbc:mysql://200.0.0.227:3306/DINESHMILLS?zeroDateTimeBehavior=convertToNull",EITLERPGLOBAL.DBUserName,EITLERPGLOBAL.DBPassword);
            STMT = Conn.createStatement();
            sql = "START TRANSACTION";
            STMT.execute(sql);
            sql = "SET AUTOCOMMIT=0";
            STMT.execute(sql);
        } catch (Exception e) {
            e.printStackTrace();
        }
        FormatGrid();
        GenerateData();
    }

    public void destroy() {
        try {
            STMT.close();
            Conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdprocess = new javax.swing.JButton();

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Table);

        cmdprocess.setText("Invoice Process");
        cmdprocess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdprocessActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 689, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdprocess, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdprocess, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmdprocessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdprocessActionPerformed
        // TODO add your handling code here:
        new Thread() {
            public void run() {
                String pckno = "";
                for (int i = 0; i < Table.getRowCount(); i++) {
                    if (Table.getValueAt(i, 0).equals(true)) {
                        if (pckno.trim().length() > 0) {
                            pckno += "," + Table.getValueAt(i, 1).toString();
                        } else {
                            pckno = Table.getValueAt(i, 1).toString();
                        }
                    }
                }
                if (pckno.trim().length() > 0) {
                    try {
                        
                        String nxtinvno, agent, nxtagntno;                        
                        int nxtaccsrno,myear;
                        System.out.println("Packing No. :" + pckno);
                        String str_pck[] = pckno.split(",");
                        STMT.execute("TRUNCATE TABLE MERCHANDISE.d_mr_invoice_detail_temp");
                        for (int i = 0; i < str_pck.length; i++) {
                            if(EITLERPGLOBAL.getCurrentMonth()<4){
                                myear=EITLERPGLOBAL.FinYearFrom+1;
                            }
                            else{
                                myear=EITLERPGLOBAL.FinYearFrom;
                            }
                            sql = "SELECT COALESCE(MAX(RIGHT(INVOICE_NO,4)*1),0) AS INV_NO FROM MERCHANDISE.d_mr_invoice_header d WHERE PACKING_NO LIKE '" + str_pck[i].substring(0, 3) + "%' AND INH_FINYEAR='" + EITLERPGLOBAL.FinYearFrom + "-" + EITLERPGLOBAL.FinYearTo + "'";
                            System.out.println("Query :" + sql);
                            rsTmp = STMT.executeQuery(sql);
                            rsTmp.first();
                            nxtinvno = str_pck[i].substring(0, 3) + "/" + String.valueOf(rsTmp.getInt("INV_NO") + 10001).substring(1);
                            System.out.println("Next InvNo." + nxtinvno);

                            sql = "SELECT COALESCE(MAX(accountsrno*1),800000) AS ACC_SR_NO FROM MERCHANDISE.d_mr_invoice_header d WHERE  INH_FINYEAR='" + EITLERPGLOBAL.FinYearFrom + "-" + EITLERPGLOBAL.FinYearTo + "'";
                            System.out.println("Query :" + sql);
                            rsTmp = STMT.executeQuery(sql);
                            rsTmp.first();
                            nxtaccsrno = (rsTmp.getInt("ACC_SR_NO") + 1);
                            System.out.println("Next nxtaccsrno." + nxtaccsrno);

                            sql = "SELECT ORDER_NO FROM MERCHANDISE.d_mr_packing_detail d WHERE PACKING_NO LIKE '" + str_pck[i] + "%' AND PD_CAL_YEAR='" + myear + "'";
                            System.out.println("Query :" + sql);
                            rsTmp = STMT.executeQuery(sql);
                            rsTmp.first();
                            agent = rsTmp.getString("ORDER_NO").substring(0, 2);
                            System.out.println(" agent." + agent);

                            sql = "SELECT COALESCE(MAX(RIGHT(AGENT_SERIAL_NO,4)*1),0) AS AGENT FROM MERCHANDISE.d_mr_invoice_header d WHERE AGENT_SERIAL_NO LIKE '" + agent + "%' AND INH_FINYEAR='" + EITLERPGLOBAL.FinYearFrom + "-" + EITLERPGLOBAL.FinYearTo + "'";
                            System.out.println("Query :" + sql);
                            rsTmp = STMT.executeQuery(sql);
                            rsTmp.first();
                            nxtagntno = agent + "/" +  String.valueOf(rsTmp.getInt("AGENT") + 10001).substring(1);
                            System.out.println("Next nxtagntno." + nxtagntno);

                            sql = "INSERT INTO MERCHANDISE.d_mr_invoice_detail (IND_CAL_YEAR,IND_FINYEAR,AGENT_SERIAL_NO,"
                                    + "INVOICE_NO,NET_RATE,accountsrno,PACKING_NO,QUALITY_CODE,SIZE38,SIZE40,SIZE42,"
                                    + "SIZE44,TOT_UNIT,SP,MRP,MRPEXC45,TOTMRPEXC45,DISC_AMOUNT,DISCOUNT,ROUND_AMOUNT,"
                                    + "NET_AMOUNT,SIZE32,SIZE34,SIZE36,SIZE26,SIZE28,SIZE30,SIZE46) "
                                    + "(SELECT  '" + myear + "','" + EITLERPGLOBAL.FinYearFrom + "-" + EITLERPGLOBAL.FinYearTo + "','"
                                    + nxtagntno + "','" + nxtinvno + "',sp,'" + nxtaccsrno + "',A.Packing_no,A.Quality_code,"
                                    + "A.size38,A.size40,A.size42,A.size44,A.tot_unit,Sp,MRP,(mrp*100)/100, (mrp*100/100)*A.tot_unit , 0,0,0,"
                                    + "SP*(A.tot_unit),A.size32,A.size34,A.size36,A.size26,A.size28,A.Size30,A.size46  "
                                    + "from MERCHANDISE.d_mr_packing_detail A,MERCHANDISE.d_mr_packing_header B,MERCHANDISE.d_mr_quality_master C "
                                    + "where C.quality_code= A.quality_code and  A.Packing_no = B.Packing_no and  "
                                    + "A.Packing_no ='" + str_pck[i] + "' and ph_cal_year = '" + myear + "' and ph_cal_year = pd_cal_year )";
                            STMT.execute(sql);

                            sql = "INSERT INTO MERCHANDISE.d_mr_invoice_header (INH_CAL_YEAR,INH_FINYEAR,ROUND_AMOUNT,INVOICE_AMOUNT,INVOICE_NO,"
                                    + "accountsrno,INVOICE_DATE,PACKING_NO,PACKING_DATE,ORDER_NO,ORDER_DATE,"
                                    + "PARTY_CODE,PARTY_NAME,ADDRESS1,ADDRESS2,PINCODE,CITY_ID,CHARGE_CODE,AGENT_SERIAL_NO,AGENT_ALPHA,"
                                    + "AGENT_CODE,AGENT_NAME,AGENT_ADDRESS1,AGENT_ADDRESS2,AGENT_PINCODE,AGENT_CITY_ID,DESTINATION,PAYMENT_MODE,"
                                    + "HUNDI,BANK_CHARGES,OTHER_CHARGES,TOTAL_CHARGES,TIN_NO,TIN_DATE,YEAR_RET,INSURANCE_CODE,INSURANCE_PERCENTAGE,"
                                    + "INSURANCE_AMOUNT,VAT_PERCENTAGE,VAT,ADDITIONAL_PERCENTAGE,MRPEXC45,TOTMRPEXC45,EXCISE10,EXCISE01,EXCISE03,"
                                    + "ADDITIONAL_TAX,ROUNDINV_AMT,INH_ISSUE_DATE,INH_ISSUE_TIME,INH_REMOVAL_DATE,INH_REMOVAL_TIME,INH_TOTUNIT,"
                                    + "INH_TOTALEXCISE,INH_TOTAL_MRP,INH_SIZE38,INH_SIZE40,INH_SIZE42,INH_SIZE44,INH_SIZE32,INH_SIZE34,INH_SIZE36,"
                                    + "INH_SIZE26,INH_SIZE28,INH_SIZE30,INH_SIZE46) "
                                    + "(SELECT d.IND_CAL_YEAR,d.IND_FINYEAR,SUM(d.NET_AMOUNT),SUM(d.NET_AMOUNT),d.INVOICE_NO,d.ACCOUNTSRNO,CURDATE(),d.PACKING_NO,"
                                    + "p.PACKING_DATE,p.ORDER_NO,p.PACKING_DATE,h.PARTY_CODE,h.PARTY_NAME,h.PARTY_ADDRESS1,h.PARTY_ADDRESS2,h.PINCODE,h.CITY_ID,CONCAT(m.CHARGE_CODE,'2'),"
                                    + "d.AGENT_SERIAL_NO,NULL,h.PARTY_CODE,NULL,NULL,NULL,NULL,NULL,'-',m.DOCUMENT_THROUGH,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,"
                                    + "0,0,0,0,0,0,0,0,0,0,0,ROUND(SUM(d.NET_AMOUNT),0),NOW(),'11:00',NOW(),'15:30',SUM(d.TOT_UNIT),0,0,SUM(d.SIZE38),SUM(d.SIZE40),"
                                    + "SUM(d.SIZE42),SUM(d.SIZE44),SUM(d.SIZE32),SUM(d.SIZE34),SUM(d.SIZE36),SUM(d.SIZE26),SUM(d.SIZE28),SUM(d.SIZE30),SUM(d.SIZE46) "
                                    + " FROM "
                                    + "MERCHANDISE.d_mr_invoice_detail d,MERCHANDISE.d_mr_packing_detail p,MERCHANDISE.d_mr_salesorder_header h,MERCHANDISE.d_mr_party_master m "
                                    + "where d.packing_no='" + str_pck[i] + "' and d.ind_cal_year='" + myear + "' and p.pd_cal_year='" + myear + "' and h.soh_cal_year='" + myear + "' and "
                                    + "d.packing_no=p.packing_no and d.quality_code=p.quality_code and p.order_no=h.order_no and h.party_code=m.party_code "
                                    + "GROUP BY d.PACKING_NO)";
                            System.out.println("Insert into Header:"+sql);
                            STMT.execute(sql);
                            sql = "UPDATE MERCHANDISE.d_mr_packing_header "
                                    + "SET INVOICED_FLAG=1 "
                                    + "WHERE PACKING_NO='" + str_pck[i] + "' AND PH_CAL_YEAR='" + myear + "'";
                            STMT.execute(sql);

                        }
                        STMT.execute("COMMIT");
                        JOptionPane.showMessageDialog(null, "Invoice Generated...");
                        FormatGrid();
                        GenerateData();

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    JOptionPane.showMessageDialog(FrmInvoiceProcess.this, "Please Select Any Packing To Process Invoice", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            }
        ;
    }
                .start();

    
    }//GEN-LAST:event_cmdprocessActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JButton cmdprocess;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
private void FormatGrid() {
        try {

            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            Table.setAutoResizeMode(0);

            EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
            //Renderer.setColor(0, 0, Color.LIGHT_GRAY);

            DataModel.addColumn("Select"); //0 - Read Only
            DataModel.addColumn("Packing No"); //
            DataModel.addColumn("Packing Date"); //
            DataModel.addColumn("Order No.");

            Renderer.setCustomComponent(0, "CheckBox");
            Table.getColumnModel().getColumn(0).setCellRenderer(Renderer);
            Table.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));

            DataModel.SetVariable(0, ""); //0 - Read Only
            DataModel.SetVariable(1, "Packing_No"); //1
            DataModel.SetVariable(2, "Packing_Date"); //2
            DataModel.SetVariable(3, "Order_No");

            DataModel.SetReadOnly(1);
            DataModel.SetReadOnly(2);
            DataModel.SetReadOnly(3);

            Table.getColumnModel().getColumn(0).setMinWidth(70);
            Table.getColumnModel().getColumn(0).setMaxWidth(70);
            Table.getColumnModel().getColumn(1).setMinWidth(150);
            Table.getColumnModel().getColumn(1).setMaxWidth(150);
            Table.getColumnModel().getColumn(2).setMinWidth(150);
            Table.getColumnModel().getColumn(2).setMaxWidth(150);
            Table.getColumnModel().getColumn(3).setMinWidth(200);
            Table.getColumnModel().getColumn(3).setMaxWidth(200);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void GenerateData() {
        String Sql;
        try {
            Sql = "SELECT PACKING_NO,DATE_FORMAT(PACKING_DATE,'%d/%m/%Y') AS PACKING_DATE,ORDER_NO FROM MERCHANDISE.d_mr_packing_header WHERE  INVOICED_FLAG!=1";
            rsTmp = STMT.executeQuery(Sql);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                while (!rsTmp.isAfterLast()) {
                    Object[] rowData = new Object[20];
                    rowData[0] = false;
                    rowData[1] = rsTmp.getString("PACKING_NO");
                    rowData[2] = rsTmp.getString("PACKING_DATE");
                    rowData[3] = rsTmp.getString("ORDER_NO");
                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
