/*
 * frmRptGRNInfo.java
 *
 * Created on April 16, 2008, 12:01 PM
 */
package EITLERP.FeltWH;

/**
 *
 * @author root
 */
import EITLERP.*;
import EITLERP.FeltSales.common.FeltInvCalc;
import EITLERP.FeltSales.common.clsOrderValueCalc;
import EITLERP.Finance.*;
import EITLERP.Utils.*;
import EITLERP.Utils.SimpleDataProvider.*;
import javax.swing.*;
import java.awt.*;
import java.sql.*;
import java.net.*;
import java.util.*;
import TReportWriter.*;
import java.util.HashMap;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.net.URL;
import javax.swing.JOptionPane;
import java.io.*;
import java.sql.ResultSet;
import javax.swing.JTable;
import EITLERP.Production.ReportUI.JTextFieldHint;
import java.text.DecimalFormat;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

public class frmFeltWHBaleRegister extends javax.swing.JApplet {

    private clsExcel_Exporter exp = new clsExcel_Exporter();
    EITLTableModel DataModel = new EITLTableModel();
    EITLTableModel DataModel_IBNP = new EITLTableModel();
    EITLTableModel DataModel_PBNG = new EITLTableModel();
    EITLTableModel DataModel_GBNO = new EITLTableModel();
    EITLTableModel DataModelStock = new EITLTableModel();

    /**
     * Initializes the applet frmRptGRNInfo
     */
    public void init() {
        // TODO add your handling code here:

        initComponents();
        file1.show(false);
        file_IBNP.show(false);
        file_PBNG.show(false);
        file_GBNO.show(false);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(dim.width, dim.height);
        FormatGrid();
        FormatGrid_IBNP();
        FormatGrid_PBNG();
        FormatGrid_GBNO();
        txtFromDate.setText(EITLERPGLOBAL.formatDate(EITLERPGLOBAL.getFinYearStartDate(EITLERPGLOBAL.getCurrentDateDB())));
        btnFinYear.setSelected(true);
        btnFinYearActionPerformed(null);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        txtToDate = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TResult = new javax.swing.JTable();
        btnxls = new javax.swing.JButton();
        btnGetReport = new javax.swing.JButton();
        file1 = new javax.swing.JFileChooser();
        btnShowData = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TResult_IBNP = new javax.swing.JTable();
        btnxls_IBNP = new javax.swing.JButton();
        file_IBNP = new javax.swing.JFileChooser();
        btnShowData_IBNP = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TResult_PBNG = new javax.swing.JTable();
        btnxls_PBNG = new javax.swing.JButton();
        file_PBNG = new javax.swing.JFileChooser();
        btnShowData_PBNG = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TResult_GBNO = new javax.swing.JTable();
        btnxls_GBNO = new javax.swing.JButton();
        file_GBNO = new javax.swing.JFileChooser();
        btnShowData_GBNO = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblDivertedFinishing = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        btnxlsDFS = new javax.swing.JButton();
        btnFinYear = new javax.swing.JRadioButton();
        btnFromToDate = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        getContentPane().setLayout(null);

        jPanel3.setBackground(new java.awt.Color(0, 102, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel3.setName("PARTYWISE SANCTION REPORT"); // NOI18N
        jPanel3.setLayout(null);

        jLabel6.setBackground(new java.awt.Color(0, 102, 153));
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Felt W/H Bale Register");
        jPanel3.add(jLabel6);
        jLabel6.setBounds(10, 5, 330, 20);

        getContentPane().add(jPanel3);
        jPanel3.setBounds(0, 0, 1410, 30);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("From Date : ");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(330, 40, 100, 30);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("To Date : ");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(560, 40, 80, 30);

        txtFromDate = new EITLERP.FeltSales.common.DatePicker.DateTextField();
        txtFromDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFromDateFocusLost(evt);
            }
        });
        getContentPane().add(txtFromDate);
        txtFromDate.setBounds(430, 40, 120, 30);

        txtToDate = new EITLERP.FeltSales.common.DatePicker.DateTextField();
        txtToDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtToDateFocusLost(evt);
            }
        });
        getContentPane().add(txtToDate);
        txtToDate.setBounds(650, 40, 120, 30);

        jPanel1.setLayout(null);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        TResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TResult.getTableHeader().setFont(new Font("Plain", Font.BOLD, 12));
        jScrollPane1.setViewportView(TResult);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 30, 1340, 350);

        btnxls.setText("Excel To Export");
        btnxls.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnxlsActionPerformed(evt);
            }
        });
        jPanel1.add(btnxls);
        btnxls.setBounds(1030, 390, 170, 25);

        btnGetReport.setText("Report");
        btnGetReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetReportActionPerformed(evt);
            }
        });
        jPanel1.add(btnGetReport);
        btnGetReport.setBounds(1200, 390, 140, 25);

        file1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file1ActionPerformed(evt);
            }
        });
        jPanel1.add(file1);
        file1.setBounds(740, 0, 250, 110);

        btnShowData.setText("View Register");
        btnShowData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowDataActionPerformed(evt);
            }
        });
        jPanel1.add(btnShowData);
        btnShowData.setBounds(1180, 0, 170, 25);

        jTabbedPane1.addTab("Bale Register", jPanel1);

        jPanel2.setLayout(null);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        TResult_IBNP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TResult.getTableHeader().setFont(new Font("Plain", Font.BOLD, 12));
        jScrollPane2.setViewportView(TResult_IBNP);

        jPanel2.add(jScrollPane2);
        jScrollPane2.setBounds(10, 40, 1340, 340);

        btnxls_IBNP.setText("Excel To Export");
        btnxls_IBNP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnxls_IBNPActionPerformed(evt);
            }
        });
        jPanel2.add(btnxls_IBNP);
        btnxls_IBNP.setBounds(1030, 390, 170, 25);
        jPanel2.add(file_IBNP);
        file_IBNP.setBounds(880, 10, 250, 110);

        btnShowData_IBNP.setText("View Register");
        btnShowData_IBNP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowData_IBNPActionPerformed(evt);
            }
        });
        jPanel2.add(btnShowData_IBNP);
        btnShowData_IBNP.setBounds(1180, 0, 170, 25);

        jTabbedPane1.addTab("Invoiced But Not Post", jPanel2);

        jPanel4.setLayout(null);

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        TResult_PBNG.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TResult.getTableHeader().setFont(new Font("Plain", Font.BOLD, 12));
        jScrollPane3.setViewportView(TResult_PBNG);

        jPanel4.add(jScrollPane3);
        jScrollPane3.setBounds(10, 40, 1340, 340);

        btnxls_PBNG.setText("Excel To Export");
        btnxls_PBNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnxls_PBNGActionPerformed(evt);
            }
        });
        jPanel4.add(btnxls_PBNG);
        btnxls_PBNG.setBounds(1030, 390, 170, 25);
        jPanel4.add(file_PBNG);
        file_PBNG.setBounds(900, 20, 250, 110);

        btnShowData_PBNG.setText("View Register");
        btnShowData_PBNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowData_PBNGActionPerformed(evt);
            }
        });
        jPanel4.add(btnShowData_PBNG);
        btnShowData_PBNG.setBounds(1180, 0, 170, 25);

        jTabbedPane1.addTab("Post Invoiced But Not Gatepass", jPanel4);

        jPanel5.setLayout(null);

        jScrollPane4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        TResult_GBNO.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TResult.getTableHeader().setFont(new Font("Plain", Font.BOLD, 12));
        jScrollPane4.setViewportView(TResult_GBNO);

        jPanel5.add(jScrollPane4);
        jScrollPane4.setBounds(10, 40, 1340, 340);

        btnxls_GBNO.setText("Excel To Export");
        btnxls_GBNO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnxls_GBNOActionPerformed(evt);
            }
        });
        jPanel5.add(btnxls_GBNO);
        btnxls_GBNO.setBounds(1030, 390, 170, 25);
        jPanel5.add(file_GBNO);
        file_GBNO.setBounds(900, 20, 250, 110);

        btnShowData_GBNO.setText("View Register");
        btnShowData_GBNO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowData_GBNOActionPerformed(evt);
            }
        });
        jPanel5.add(btnShowData_GBNO);
        btnShowData_GBNO.setBounds(1180, 0, 170, 25);

        jTabbedPane1.addTab("Gatepass But Not Outword", jPanel5);

        jPanel6.setLayout(null);

        tblDivertedFinishing.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(tblDivertedFinishing);

        jPanel6.add(jScrollPane5);
        jScrollPane5.setBounds(2, 52, 1360, 330);

        jButton1.setText("Show Data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton1);
        jButton1.setBounds(1184, 10, 150, 25);

        btnxlsDFS.setText("Excel To Export");
        btnxlsDFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnxlsDFSActionPerformed(evt);
            }
        });
        jPanel6.add(btnxlsDFS);
        btnxlsDFS.setBounds(1170, 390, 170, 25);

        jTabbedPane1.addTab("Diverted Finishing Stock", jPanel6);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(0, 80, 1390, 480);

        buttonGroup1.add(btnFinYear);
        btnFinYear.setText("Curr Fin Year");
        btnFinYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinYearActionPerformed(evt);
            }
        });
        getContentPane().add(btnFinYear);
        btnFinYear.setBounds(20, 44, 130, 20);

        buttonGroup1.add(btnFromToDate);
        btnFromToDate.setText("From Date to To Date");
        btnFromToDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFromToDateActionPerformed(evt);
            }
        });
        getContentPane().add(btnFromToDate);
        btnFromToDate.setBounds(150, 44, 180, 20);

        jSeparator1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(10, 40, 330, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void btnxlsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnxlsActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exp.fillData(TResult, new File(file1.getSelectedFile().toString() + ".xls"), "Felt W/H Bale Register");

            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnxlsActionPerformed

    private void btnShowDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowDataActionPerformed
        // TODO add your handling code here:
        if (!Validate()) {
            return;
        }
        GenerateReport();
    }//GEN-LAST:event_btnShowDataActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseClicked

    private void btnGetReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetReportActionPerformed
        // TODO add your handling code here:
        if (!Validate()) {
            return;
        }
        PreviewReport();
    }//GEN-LAST:event_btnGetReportActionPerformed

    private void txtFromDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFromDateFocusLost
        // TODO add your handling code here:
        if (txtFromDate.getText().equals("")) {
//            JOptionPane.showMessageDialog(null, "Please enter From Date.");
//            txtFromDate.requestFocus();
        } else if (!EITLERPGLOBAL.isDate(txtFromDate.getText().trim())) {
            JOptionPane.showMessageDialog(null, "Please enter Valid From Date");
            txtFromDate.setText("");
            txtFromDate.requestFocus();
        }
    }//GEN-LAST:event_txtFromDateFocusLost

    private void txtToDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToDateFocusLost
        // TODO add your handling code here:
        if (txtFromDate.getText().equals("") || !EITLERPGLOBAL.isDate(txtFromDate.getText().trim())) {
            txtFromDate.setText("");
            txtFromDate.requestFocus();
        } else {
            if (txtToDate.getText().equals("")) {
                //       JOptionPane.showMessageDialog(null, "Please enter To Date.");
                //       txtToDate.requestFocus();
            } else if (!EITLERPGLOBAL.isDate(txtToDate.getText().trim())) {
                //      JOptionPane.showMessageDialog(null, "Please enter Valid To Date");
                txtToDate.setText("");
                //     txtToDate.requestFocus();
            } else if (data.getIntValueFromDB("SELECT DATEDIFF('" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "','" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "') FROM DUAL") < 0) {
                JOptionPane.showMessageDialog(null, "Please enter Greater Date in To Date from From Date");
                txtToDate.setText("");
                txtToDate.requestFocus();
            }
        }
    }//GEN-LAST:event_txtToDateFocusLost

    private void btnxls_IBNPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnxls_IBNPActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exp.fillData(TResult_IBNP, new File(file1.getSelectedFile().toString() + ".xls"), "Inv_But_Not_PostInv");

            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnxls_IBNPActionPerformed

    private void file1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_file1ActionPerformed

    private void btnxls_PBNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnxls_PBNGActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exp.fillData(TResult_PBNG, new File(file1.getSelectedFile().toString() + ".xls"), "PostInv_But_Not_Gatepass");

            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnxls_PBNGActionPerformed

    private void btnShowData_IBNPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowData_IBNPActionPerformed
        // TODO add your handling code here:
        if (!Validate()) {
            return;
        }
        GenerateReport_IBNP();
    }//GEN-LAST:event_btnShowData_IBNPActionPerformed

    private void btnShowData_PBNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowData_PBNGActionPerformed
        // TODO add your handling code here:
        if (!Validate()) {
            return;
        }
        GenerateReport_PBNG();
    }//GEN-LAST:event_btnShowData_PBNGActionPerformed

    private void btnxls_GBNOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnxls_GBNOActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exp.fillData(TResult_GBNO, new File(file1.getSelectedFile().toString() + ".xls"), "Gatepass_But_Not_Outward");

            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnxls_GBNOActionPerformed

    private void btnShowData_GBNOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowData_GBNOActionPerformed
        // TODO add your handling code here:
        if (!Validate()) {
            return;
        }
        GenerateReport_GBNO();
    }//GEN-LAST:event_btnShowData_GBNOActionPerformed

    private void btnFinYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinYearActionPerformed
        // TODO add your handling code here:
        txtFromDate.setText(EITLERPGLOBAL.formatDate(EITLERPGLOBAL.getFinYearStartDate(EITLERPGLOBAL.getCurrentDateDB())));
        //txtToDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtToDate.setText(EITLERPGLOBAL.formatDate(EITLERPGLOBAL.getFinYearEndDate(EITLERPGLOBAL.getCurrentDateDB())));
        txtFromDate.setEditable(false);
        txtToDate.setEditable(false);
    }//GEN-LAST:event_btnFinYearActionPerformed

    private void btnFromToDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFromToDateActionPerformed
        // TODO add your handling code here:
        txtFromDate.setText("");
        txtToDate.setText("");
        txtFromDate.setEditable(true);
        txtToDate.setEditable(true);
        txtFromDate.requestFocus();
    }//GEN-LAST:event_btnFromToDateActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (!Validate()) {
            return;
        }
        GenerateReport_DFS();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnxlsDFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnxlsDFSActionPerformed
        // TODO add your handling code here:
         try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exp.fillData(tblDivertedFinishing, new File(file1.getSelectedFile().toString() + ".xls"), "Diverted Finishing Stock");

            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnxlsDFSActionPerformed

    private void FormatGridDFS() {
        try {
            ResultSet rs;
            DataModelStock = new EITLTableModel();
            tblDivertedFinishing.removeAll();
            tblDivertedFinishing.setModel(DataModelStock);
            tblDivertedFinishing.setAutoResizeMode(tblDivertedFinishing.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \"Piece Stage\",'' AS \"WIP Status\","
                    + "'' AS \"Group Name\",'' AS \"Party Code\",'' AS \"Party Name\",'' AS \"Piece No\","
                    + "'' AS \"Machine No\",'' AS \"Position No\",'' AS \"Position No(Design)\","
                    + "'' AS \"Position Desc\",'' AS \"UPN\",'' AS \"Order No\",'' AS \"Order Date\","
                    + "'' AS \"Product Code\",'' AS \"Bill Product Code\",'' AS \"Product Desc\",'' AS \"Group\","
                    + "'' AS \"Style\",'' AS \"Bill Style\",'' AS \"Length\",'' AS \"Bill Length\","
                    + "'' AS \"Actual Length\",'' AS \"Width\",'' AS \"Bill Width\",'' AS \"Actual Width\","
                    + "'' AS \"GSM\",'' AS \"Tender GSM\",'' AS \"Bill GSM\",'' AS \"Sq.Mtr\",'' AS \"Bill Sq.Mtr\","
                    + "'' AS \"Thortical Weight\",'' AS \"Tender Weight\","
                    + "'' AS \"Bill Weight\",'' AS \"Actual Weight\",'' AS \"SYN(%)\","
                    + "'' AS \"Req Month\",'' AS \"OC MONTH\",'' AS \"CURR SCH MONTH\","
                    + "'' AS \"WARP DATE\",'' AS \"ORD VS WARP DAYS\",'' AS \"WVG DATE\","
                    + "'' AS \"DAYS ORDER_WVG\",'' AS \"WVG LAYER_REMARK\",'' AS \"WVG WEIGHT\","
                    + "'' AS \"WVG WEIGHT_A\",'' AS \"WVG WEIGHT_B\",'' AS \"SPLICE DATE\",'' AS \"MND DATE\","
                    + "'' AS \"DAYS ORDER_MND\",'' AS \"MND LAYER_REMARK\",'' AS \"MND WEIGHT\","
                    + "'' AS \"MND WEIGHT_A\",'' AS \"MND WEIGHT_B\",'' AS \"NDL DATE\",'' AS \"DAYS ORDER_NDL\","
                    + "'' AS \"NDL WEIGHT\",'' AS \"SEAM DATE\",'' AS \"FNSG DATE\",'' AS \"DAYS ORDER_FNSG\","
                    + "'' AS \"DAYS WRP_WVG\",'' AS \"DAYS WVG_MND\",'' AS \"DAYS MND_NDL\",'' AS \"DAYS NDL_FNSG\","
                    + "'' AS \"DAYS WH_STOCK\",'' AS \"Rate\",'' AS \"Basic Amt\",'' AS \"CHEM TRT CHG\","
                    + "'' AS \"SPIRAL CHG\",'' AS \"Pin CHG\",'' AS \"Seam CHG\",'' AS \"INS Ind\",'' AS \"INS Amt\","
                    + "'' AS \"GST\",'' AS \"Disc Per\",'' AS \"Disc Amt\",'' AS \"Disc Bas Amt\",'' AS \"Amount\","
                    + "'' AS \"Referance\",'' AS \"REF Date\",'' AS \"PO No\","
                    + "'' AS \"PO Date\",'' AS \"OA NO\",'' AS \"OA DATE\",'' AS \"OC NO\",'' AS \"OC DATE\","
                    + "'' AS \"Order Remark\",'' AS \"Piece Remark\",'' AS \"Rejected\","
                    + "'' AS \"Rejected Remark\",'' AS \"Diversion\",'' AS \"Diversion Reason\","
                    + "'' AS \"PartyCode Original\",'' AS \"PieceNo Original\",'' AS \"Incharge\","
                    + "'' AS \"Obsolete Status\",'' AS \"Obsolete Date\",'' AS \"Obsolete Reason\",'' AS \"Packing Doc No\","
                    + "'' AS \"Packing Doc Date\",'' AS \"Inward No\",'' AS \"Rack No\",'' AS \"Location\","
                    + "'' AS \"Days Status\" "
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModelStock.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelStock.addColumn(rsInfo.getColumnName(i));
                DataModelStock.SetReadOnly(i);
            }
            DataModelStock.TableReadOnly(true);
            final TableColumnModel columnModel = tblDivertedFinishing.getColumnModel();
            for (int column = 0; column < tblDivertedFinishing.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < tblDivertedFinishing.getRowCount(); row++) {
                    TableCellRenderer renderer = tblDivertedFinishing.getCellRenderer(row, column);
                    Component comp = tblDivertedFinishing.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DataModelStock.TableReadOnly(true);
        tblDivertedFinishing.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateReport_DFS() {
        String FromDate = EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
        String ToDate = EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim());
        String cndtn = "";
        String grp_cndtn = "";
        double total_weight = 0;
        double total_bill_weight = 0;
        double total_amount = 0;

        try {
            FormatGridDFS();; //clear existing content of table
           // String PartyCode = txtpartycode.getText().toString();
            ResultSet rsTmp;

            
            
            if (!txtFromDate.getText().trim().equals("") && !txtToDate.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_FNSG_DATE >= '" + FromDate + "' AND PR_FNSG_DATE <= '" + ToDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (!txtFromDate.getText().trim().equals("") && txtToDate.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_FNSG_DATE >= '" + FromDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (txtFromDate.getText().trim().equals("") && !txtToDate.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_FNSG_DATE <= '" + ToDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            String strSQL = "";

            strSQL = "SELECT * FROM "
                    + "(SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + " WHERE PR_PRIORITY_HOLD_CAN_FLAG IN ('0','1','2','3','4','5') "
                    + " AND PR_PIECE_STAGE IN ('DIVERTED_FNSG_STOCK') "
                    //+ cndtn + " "
                    + ") AS PR "
                    + "LEFT JOIN  "
                    + "(SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
                    + "ON PR.PR_PARTY_CODE=PM.PARTY_CODE  "
                    + "LEFT JOIN  "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE  "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE  "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  "
                    + "ON PR.PR_PARTY_CODE=GM.GROUP_PARTY_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER  "
                    + "WHERE APPROVED=1 AND CANCELED=0 ORDER BY DOC_NO DESC) AS QM  "
                    + "ON PR.PR_PRODUCT_CODE=QM.PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP  "
                    + "ON PR.PR_POSITION_NO=MP.POSITION_NO "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  "
                    + "ON PR.PR_INCHARGE=IM.INCHARGE_CD ";
                    //+ grp_cndtn;

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_STAGE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIP_STATUS");
                    p++;
                    rowData[p] = rsTmp.getString("GROUP_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MACHINE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_POSITION_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESIGN_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_UPN");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DOC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PRODUCT_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GROUP");
                    p++;
                    rowData[p] = rsTmp.getString("PR_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIDTH");
                    p++;
                    rowData[24] = rsTmp.getString("PR_BILL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_THORITICAL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WEIGHT");
                    p++;
                    total_weight = total_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_ACTUAL_WEIGHT", "0"));
                    total_bill_weight = total_bill_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_BILL_WEIGHT", "0"));

                    rowData[p] = rsTmp.getString("PR_SYN_PER");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REQUESTED_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_MONTHYEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_CURRENT_SCH_MONTH");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WARPED");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("WVG_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPLICE_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MND_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_NDL");
                    p++;

                    rowData[p] = rsTmp.getString("PR_NEEDLING_WEIGHT");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SEAM_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WRP_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WVG_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_MND_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_NDL_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WH_STOCK");
                    p++;

                    FeltInvCalc inv_calc;
                    try {
                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
                                rsTmp.getString("PR_PIECE_NO"),
                                rsTmp.getString("PR_BILL_PRODUCT_CODE"),
                                rsTmp.getString("PR_PARTY_CODE"),
                                Float.parseFloat(rsTmp.getString("PR_BILL_LENGTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WIDTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WEIGHT")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_SQMTR")),
                                EITLERPGLOBAL.getCurrentDateDB());
//            rsTmp.getString("PR_ORDER_DATE"));

                        rowData[p] = inv_calc.getFicRate();
                        p++;
                        rowData[p] = inv_calc.getFicBasAmount();
                        p++;
                        rowData[p] = inv_calc.getFicChemTrtChg();
                        p++;
                        rowData[p] = inv_calc.getFicSpiralChg();
                        p++;
                        rowData[p] = inv_calc.getFicPinChg();
                        p++;
                        rowData[p] = inv_calc.getFicSeamChg();
                        p++;
                        rowData[p] = inv_calc.getFicInsInd();
                        p++;
                        rowData[p] = inv_calc.getFicInsAmt();
                        p++;
                        rowData[p] = inv_calc.getFicGST();
                        p++;
                        rowData[p] = inv_calc.getFicDiscPer();
                        p++;
                        rowData[p] = inv_calc.getFicDiscAmt();
                        p++;
                        rowData[p] = inv_calc.getFicDiscBasamt();
                        p++;
                        rowData[p] = inv_calc.getFicInvAmt();
                        p++;

                        total_amount = total_amount + inv_calc.getFicInvAmt();

                    } catch (Exception e) {
                        System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
                    }

                    rowData[p] = rsTmp.getString("PR_REFERENCE");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PO_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_OA_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OA_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OC_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_ORDER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("INCHARGE_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OBSOLETE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PKG_DP_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PKG_DP_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_INWARD_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_RACK_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_LOCATION");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_STATUS");
                    p++;

                    DecimalFormat df = new DecimalFormat("###.##");
                    
                    DataModelStock.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TResult;
    private javax.swing.JTable TResult_GBNO;
    private javax.swing.JTable TResult_IBNP;
    private javax.swing.JTable TResult_PBNG;
    private javax.swing.JRadioButton btnFinYear;
    private javax.swing.JRadioButton btnFromToDate;
    private javax.swing.JButton btnGetReport;
    private javax.swing.JButton btnShowData;
    private javax.swing.JButton btnShowData_GBNO;
    private javax.swing.JButton btnShowData_IBNP;
    private javax.swing.JButton btnShowData_PBNG;
    private javax.swing.JButton btnxls;
    private javax.swing.JButton btnxlsDFS;
    private javax.swing.JButton btnxls_GBNO;
    private javax.swing.JButton btnxls_IBNP;
    private javax.swing.JButton btnxls_PBNG;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JFileChooser file1;
    private javax.swing.JFileChooser file_GBNO;
    private javax.swing.JFileChooser file_IBNP;
    private javax.swing.JFileChooser file_PBNG;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tblDivertedFinishing;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables

    private void GenerateReport() {
        FormatGrid();

        try {

            String str = "";
            str = "SELECT *,CASE WHEN COALESCE(FELT_AMEND_EXPORT_INV_NO,'') != '' THEN FELT_AMEND_EXPORT_INV_NO ELSE INVOICE_NO END AS INV_NO1,"
                    + "CASE WHEN COALESCE(FELT_AMEND_EXPORT_INV_DATE,'') != '' THEN FELT_AMEND_EXPORT_INV_DATE ELSE INVOICE_DATE END AS INV_DATE1 "
                    + "FROM  "
                    + "(SELECT  "
                    + "H.PKG_BALE_NO,H.PKG_BALE_DATE,D.PKG_PIECE_NO,D.PKG_PRODUCT_CODE,H.PKG_PARTY_CODE,H.PKG_PARTY_NAME,H.PKG_STATION,H.PKG_MODE_PACKING,D.PKG_WEIGHT "
                    + "FROM  "
                    + "PRODUCTION.FELT_PKG_SLIP_HEADER H,  "
                    + "PRODUCTION.FELT_PKG_SLIP_DETAIL D "
                    + "WHERE H.PKG_BALE_NO=D.PKG_BALE_NO AND H.PKG_BALE_DATE=D.PKG_BALE_DATE AND COALESCE(H.PKG_BALE_NO,'') != ''  "
                    + "AND H.PKG_BALE_DATE>='" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "' AND H.PKG_BALE_DATE<='" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'  "
                    + "ORDER BY H.PKG_BALE_NO,H.PKG_BALE_DATE ) AS PKG "
                    + "LEFT JOIN  "
                    + "(SELECT INVOICE_NO,INVOICE_DATE,PIECE_NO,BALE_NO,PACKING_DATE  "
                    + "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 ) AS INV "
                    + "ON PKG.PKG_BALE_NO=INV.BALE_NO AND PKG.PKG_BALE_DATE=INV.PACKING_DATE "
                    + "AND PKG.PKG_PIECE_NO=INV.PIECE_NO "
                    + "LEFT JOIN  "
                    + "(SELECT H.BALE_NO,H.BALE_DATE,D.PIECE_NO,H.DOC_NO,H.CHANGED_DATE  "
                    + "FROM PRODUCTION.FELT_REOPEN_BALE_HEADER H, PRODUCTION.FELT_REOPEN_BALE_DETAIL D "
                    + "WHERE H.BALE_NO=D.BALE_NO AND H.BALE_DATE=D.BALE_DATE  "
                    + "AND H.DOC_NO=D.DOC_NO AND H.APPROVED=1 AND H.CANCELED=0) AS BLR "
                    + "ON PKG.PKG_BALE_NO=BLR.BALE_NO AND PKG.PKG_BALE_DATE=BLR.BALE_DATE "
                    + "LEFT JOIN  "
                    + "(SELECT FELT_AMEND_EXPORT_INV_NO,FELT_AMEND_EXPORT_INV_DATE,FELT_AMEND_PIECE_NO  "
                    + "FROM PRODUCTION.FELT_PIECE_AMEND WHERE FELT_MODULE_ID=624 AND APPROVED=1 AND CANCELED=0) AS EXP "
                    + "ON PKG.PKG_PIECE_NO=EXP.FELT_AMEND_PIECE_NO "
                    + "LEFT JOIN (SELECT INV_NO,INV_DATE,GROSS_WEIGHT FROM PRODUCTION.FELT_POST_INVOICE_DATA) AS PID "
                    + "ON PID.INV_NO=INVOICE_NO AND PID.INV_DATE=INVOICE_DATE "
                    + "LEFT JOIN (SELECT WH_INVOICE_NO,WH_INVOICE_DATE,GATE_OUTWARD_DATE FROM DINESHMILLS.D_INV_NRGP_DETAIL  D "
                    + "LEFT JOIN DINESHMILLS.D_INV_GATE_OUTWARD_HEADER H ON H.GATEPASS_NO=D.GATEPASS_NO "
                    + "WHERE D.GATEPASS_NO LIKE 'FGP%') AS OUTWARD ON WH_INVOICE_NO=INVOICE_NO AND WH_INVOICE_DATE=INVOICE_DATE "
                    + "ORDER BY PKG_BALE_DATE,PKG_BALE_NO ";

            System.out.println(str);
            ResultSet rsTmp = data.getResult(str);
            rsTmp.first();

            int Counter = 0;
            if (rsTmp.getRow() > 0) {

                while (!rsTmp.isAfterLast()) {
                    Counter++;
                    Object[] rowData = new Object[50];

                    rowData[0] = Counter;
                    rowData[1] = UtilFunctions.getString(rsTmp, "PKG_BALE_NO", "");
                    rowData[2] = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp, "PKG_BALE_DATE", ""));
                    rowData[3] = UtilFunctions.getString(rsTmp, "PKG_PIECE_NO", "");
                    rowData[4] = UtilFunctions.getString(rsTmp, "PKG_PRODUCT_CODE", "");
                    rowData[5] = UtilFunctions.getString(rsTmp, "PKG_PARTY_CODE", "");
                    rowData[6] = UtilFunctions.getString(rsTmp, "PKG_PARTY_NAME", "");
                    rowData[7] = UtilFunctions.getString(rsTmp, "PKG_STATION", "");
                    rowData[8] = UtilFunctions.getString(rsTmp, "PKG_MODE_PACKING", "");
                    rowData[9] = UtilFunctions.getString(rsTmp, "PKG_WEIGHT", "");
                    rowData[10] = UtilFunctions.getString(rsTmp, "GROSS_WEIGHT", "");
                    rowData[11] = UtilFunctions.getString(rsTmp, "INV_NO1", "");
                    rowData[12] = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp, "INV_DATE1", ""));
                    rowData[13] = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp, "GATE_OUTWARD_DATE", ""));
                    rowData[14] = UtilFunctions.getString(rsTmp, "DOC_NO", "");
                    rowData[15] = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp, "CHANGED_DATE", ""));

                    DataModel.addRow(rowData);
                    //TResult.changeSelection(TResult.getRowCount() - 1, 1, false, false);
                    TResult.requestFocus();

                    rsTmp.next();
                }
                final TableColumnModel columnModel = TResult.getColumnModel();
                for (int column = 0; column < TResult.getColumnCount(); column++) {
                    int width = 100; // Min width
                    for (int row = 0; row < TResult.getRowCount(); row++) {
                        TableCellRenderer renderer = TResult.getCellRenderer(row, column);
                        Component comp = TResult.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
                DataModel.TableReadOnly(true);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateReport_IBNP() {
        FormatGrid_IBNP();

        try {

            String str = "";

            str = "SELECT H.PARTY_CODE,D.PIECE_NO,D.BALE_NO,H.INVOICE_NO,H.INVOICE_DATE,H.INVOICE_AMT FROM PRODUCTION.FELT_SAL_INVOICE_HEADER H  "
                    + "LEFT JOIN PRODUCTION.FELT_SAL_INVOICE_DETAIL D on H.INVOICE_NO=D.INVOICE_NO AND H.INVOICE_DATE=SUBSTRING(D.INVOICE_DATE,1,10) "
                    + "WHERE H.APPROVED=1 AND H.CANCELLED=0 AND H.INVOICE_DATE>='2019-07-09' "
                    + "AND H.INVOICE_DATE>='" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "' AND H.INVOICE_DATE<='" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'  "
                    + "AND CONCAT(H.INVOICE_NO,H.INVOICE_DATE) NOT IN (SELECT CONCAT(INV_NO,INV_DATE) FROM PRODUCTION.FELT_POST_INVOICE_DATA)";

            System.out.println(str);
            ResultSet rsTmp = data.getResult(str);
            rsTmp.first();

            int Counter = 0;
            if (rsTmp.getRow() > 0) {

                while (!rsTmp.isAfterLast()) {
                    Counter++;
                    Object[] rowData = new Object[50];

                    rowData[0] = Counter;
                    rowData[1] = UtilFunctions.getString(rsTmp, "PARTY_CODE", "");
                    rowData[2] = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, UtilFunctions.getString(rsTmp, "PARTY_CODE", ""));
                    rowData[3] = UtilFunctions.getString(rsTmp, "PIECE_NO", "");
                    rowData[4] = UtilFunctions.getString(rsTmp, "BALE_NO", "");
                    rowData[5] = UtilFunctions.getString(rsTmp, "INVOICE_NO", "");
                    rowData[6] = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp, "INVOICE_DATE", ""));
                    rowData[7] = UtilFunctions.getString(rsTmp, "INVOICE_AMT", "");

                    DataModel_IBNP.addRow(rowData);
                    // TResult_IBNP.changeSelection(TResult_IBNP.getRowCount() - 1, 1, false, false);
                    TResult_IBNP.requestFocus();

                    rsTmp.next();
                }
                final TableColumnModel columnModel = TResult_IBNP.getColumnModel();
                for (int column = 0; column < TResult_IBNP.getColumnCount(); column++) {
                    int width = 100; // Min width
                    for (int row = 0; row < TResult_IBNP.getRowCount(); row++) {
                        TableCellRenderer renderer = TResult_IBNP.getCellRenderer(row, column);
                        Component comp = TResult_IBNP.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
                DataModel_IBNP.TableReadOnly(true);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateReport_PBNG() {
        FormatGrid_PBNG();

        try {

            String str = "";
            str = "SELECT * FROM PRODUCTION.FELT_POST_INVOICE_DATA D "
                    + "LEFT JOIN (SELECT INVOICE_NO,INVOICE_DATE,BALE_NO,INVOICE_AMT FROM PRODUCTION.FELT_SAL_INVOICE_HEADER ) AS INV ON INVOICE_NO=INV_NO AND INVOICE_DATE=INV_DATE AND INV.BALE_NO=D.BALE_NO  "
                    + "WHERE CONCAT(INV_NO,INV_DATE) NOT IN "
                    + "(SELECT CONCAT(WH_INVOICE_NO,WH_INVOICE_DATE) FROM DINESHMILLS.D_INV_NRGP_DETAIL D "
                    + "LEFT JOIN DINESHMILLS.D_INV_NRGP_HEADER H ON H.GATEPASS_NO=D.GATEPASS_NO "
                    + "WHERE  H.APPROVED=1 AND COALESCE(H.CANCELED,0)=0 AND D.GATEPASS_NO LIKE 'FGP%') "
                    + " AND INV_DATE>='" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "' AND INV_DATE<='" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'  ";

            System.out.println(str);
            ResultSet rsTmp = data.getResult(str);
            rsTmp.first();

            int Counter = 0;
            if (rsTmp.getRow() > 0) {

                while (!rsTmp.isAfterLast()) {
                    Counter++;
                    Object[] rowData = new Object[50];

                    rowData[0] = Counter;
                    rowData[1] = UtilFunctions.getString(rsTmp, "PARTY_CODE", "");
                    rowData[2] = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, UtilFunctions.getString(rsTmp, "PARTY_CODE", ""));
                    rowData[3] = UtilFunctions.getString(rsTmp, "PI_PIECE_NO", "");
                    rowData[4] = UtilFunctions.getString(rsTmp, "BALE_NO", "");
                    rowData[5] = UtilFunctions.getString(rsTmp, "INV_NO", "");
                    rowData[6] = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp, "INV_DATE", ""));
                    rowData[7] = UtilFunctions.getString(rsTmp, "INVOICE_AMT", "");

                    DataModel_PBNG.addRow(rowData);
                    //TResult_PBNG.changeSelection(TResult_PBNG.getRowCount() - 1, 1, false, false);
                    TResult_PBNG.requestFocus();

                    rsTmp.next();
                }
                final TableColumnModel columnModel = TResult_PBNG.getColumnModel();
                for (int column = 0; column < TResult_PBNG.getColumnCount(); column++) {
                    int width = 100; // Min width
                    for (int row = 0; row < TResult_PBNG.getRowCount(); row++) {
                        TableCellRenderer renderer = TResult_PBNG.getCellRenderer(row, column);
                        Component comp = TResult_PBNG.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
                DataModel_PBNG.TableReadOnly(true);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateReport_GBNO() {
        FormatGrid_GBNO();

        try {

            String str = "";
            str = "SELECT * FROM DINESHMILLS.D_INV_NRGP_DETAIL H "
                    + "LEFT JOIN PRODUCTION.FELT_POST_INVOICE_DATA D ON D.INV_NO=H.WH_INVOICE_NO AND D.INV_DATE=H.WH_INVOICE_DATE "
                    + "LEFT JOIN (SELECT INVOICE_NO,INVOICE_DATE,BALE_NO,INVOICE_AMT FROM PRODUCTION.FELT_SAL_INVOICE_HEADER ) AS INV ON INVOICE_NO=INV_NO AND INVOICE_DATE=INV_DATE AND INV.BALE_NO=D.BALE_NO "
                    + "WHERE GATEPASS_NO LIKE 'FGP%'"
                    + " AND WH_INVOICE_DATE>='" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "' AND WH_INVOICE_DATE<='" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'  "
                    + " AND "
                    + "GATEPASS_NO NOT IN (SELECT GATEPASS_NO FROM DINESHMILLS.D_INV_GATE_OUTWARD_HEADER WHERE APPROVED=1 AND COALESCE(CANCELLED,0)=0) ";

            System.out.println(str);
            ResultSet rsTmp = data.getResult(str);
            rsTmp.first();

            int Counter = 0;
            if (rsTmp.getRow() > 0) {

                while (!rsTmp.isAfterLast()) {
                    Counter++;
                    Object[] rowData = new Object[50];

                    rowData[0] = Counter;
                    rowData[1] = UtilFunctions.getString(rsTmp, "WH_PARTY_CODE", "");
                    rowData[2] = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, UtilFunctions.getString(rsTmp, "WH_PARTY_CODE", ""));
                    rowData[3] = UtilFunctions.getString(rsTmp, "PI_PIECE_NO", "");
                    rowData[4] = UtilFunctions.getString(rsTmp, "GATEPASS_NO", "");
                    rowData[5] = UtilFunctions.getString(rsTmp, "WH_BALE_NO", "");
                    rowData[6] = UtilFunctions.getString(rsTmp, "INV_NO", "");
                    rowData[7] = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp, "INV_DATE", ""));
                    rowData[8] = UtilFunctions.getString(rsTmp, "INVOICE_AMT", "");

                    DataModel_GBNO.addRow(rowData);
                    //TResult_GBNO.changeSelection(TResult_GBNO.getRowCount() - 1, 1, false, false);
                    TResult_GBNO.requestFocus();

                    rsTmp.next();
                }
                final TableColumnModel columnModel = TResult_GBNO.getColumnModel();
                for (int column = 0; column < TResult_GBNO.getColumnCount(); column++) {
                    int width = 100; // Min width
                    for (int row = 0; row < TResult_GBNO.getRowCount(); row++) {
                        TableCellRenderer renderer = TResult_GBNO.getCellRenderer(row, column);
                        Component comp = TResult_GBNO.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
                DataModel_GBNO.TableReadOnly(true);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGrid() {
        try {
            DataModel = new EITLTableModel();
            TResult.removeAll();
            TResult.setModel(DataModel);
            TResult.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            DataModel.addColumn("SrNo");
            DataModel.addColumn("Bale No");
            DataModel.addColumn("Bale Date");
            DataModel.addColumn("Piece No");
            DataModel.addColumn("Quality Code");
            DataModel.addColumn("Party Code");
            DataModel.addColumn("Party Name");
            DataModel.addColumn("Destination");
            DataModel.addColumn("Type of Packing");
            DataModel.addColumn("Net Weight");
            DataModel.addColumn("Gross Weight");
            DataModel.addColumn("Invoice No");
            DataModel.addColumn("Invoice Date");
            DataModel.addColumn("Actual Dispatch Date");
            DataModel.addColumn("Bale ReOpen No");
            DataModel.addColumn("Bale ReOpen Date");

            for (int j = 0; j < TResult.getColumnCount(); j++) {
                DataModel.SetReadOnly(j);
            }
        } catch (Exception e) {

        }
    }

    private void FormatGrid_IBNP() {
        try {
            DataModel_IBNP = new EITLTableModel();
            TResult_IBNP.removeAll();
            TResult_IBNP.setModel(DataModel_IBNP);
            TResult_IBNP.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            DataModel_IBNP.addColumn("SrNo");
            DataModel_IBNP.addColumn("Party Code");
            DataModel_IBNP.addColumn("Party Name");
            DataModel_IBNP.addColumn("Piece No");
            DataModel_IBNP.addColumn("Bale No");
            DataModel_IBNP.addColumn("Invoice No");
            DataModel_IBNP.addColumn("Invoice Date");
            DataModel_IBNP.addColumn("Invoice Amt");

            for (int j = 0; j < TResult_IBNP.getColumnCount(); j++) {
                DataModel_IBNP.SetReadOnly(j);
                if (j != 0 && j != 2) {
                    TResult_IBNP.getColumnModel().getColumn(j).setMinWidth(100);
                }
            }
            TResult_IBNP.getColumnModel().getColumn(0).setMaxWidth(50);
            TResult_IBNP.getColumnModel().getColumn(2).setMinWidth(200);
        } catch (Exception e) {

        }
    }

    private void FormatGrid_PBNG() {
        try {
            DataModel_PBNG = new EITLTableModel();
            TResult_PBNG.removeAll();
            TResult_PBNG.setModel(DataModel_PBNG);
            TResult_PBNG.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            DataModel_PBNG.addColumn("SrNo");
            DataModel_PBNG.addColumn("Party Code");
            DataModel_PBNG.addColumn("Party Name");
            DataModel_PBNG.addColumn("Piece No");
            DataModel_PBNG.addColumn("Bale No");
            DataModel_PBNG.addColumn("Invoice No");
            DataModel_PBNG.addColumn("Invoice Date");
            DataModel_PBNG.addColumn("Invoice Amt");

            for (int j = 0; j < TResult_PBNG.getColumnCount(); j++) {
                DataModel_PBNG.SetReadOnly(j);
            }
        } catch (Exception e) {

        }
    }

    private void FormatGrid_GBNO() {
        try {
            DataModel_GBNO = new EITLTableModel();
            TResult_GBNO.removeAll();
            TResult_GBNO.setModel(DataModel_GBNO);
            TResult_GBNO.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            DataModel_GBNO.addColumn("SrNo");
            DataModel_GBNO.addColumn("Party Code");
            DataModel_GBNO.addColumn("Party Name");
            DataModel_GBNO.addColumn("Piece No");
            DataModel_GBNO.addColumn("Gatepass No");
            DataModel_GBNO.addColumn("Bale No");
            DataModel_GBNO.addColumn("Invoice No");
            DataModel_GBNO.addColumn("Invoice Date");
            DataModel_GBNO.addColumn("Invoice Amt");
            for (int j = 0; j < TResult_GBNO.getColumnCount(); j++) {
                DataModel_GBNO.SetReadOnly(j);
            }
        } catch (Exception e) {

        }
    }

    private boolean Validate() {
        //Form level validations

        if (txtFromDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter from date");
            return false;
        } else if (!EITLERPGLOBAL.isDate(txtFromDate.getText())) {
            JOptionPane.showMessageDialog(null, "Please enter Valid From Date.");
            return false;
        }

        if (txtToDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter To date");
            return false;
        } else if (!EITLERPGLOBAL.isDate(txtToDate.getText())) {
            JOptionPane.showMessageDialog(null, "Please enter Valid To Date.");
            return false;
        }

        if (data.getIntValueFromDB("SELECT DATEDIFF('" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "','" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "') FROM DUAL") < 0) {
            JOptionPane.showMessageDialog(null, "Please enter Greater Date in To Date from From Date");
            txtToDate.setText("");
            txtToDate.requestFocus();
            return false;
        }

        return true;
    }

    private void PreviewReport() {
        String fromDate = EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
        String toDate = EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim());

        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        try {
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();

            parameterMap.put("RUNDATE", EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime());
            parameterMap.put("FROM_DATE", txtFromDate.getText().trim());
            parameterMap.put("TO_DATE", txtToDate.getText().trim());

            ReportRegister rpt = new ReportRegister(parameterMap, Conn);

            String str = "SELECT *,CASE WHEN COALESCE(FELT_AMEND_EXPORT_INV_NO,'') != '' THEN FELT_AMEND_EXPORT_INV_NO ELSE INVOICE_NO END AS INV_NO,"
                    + "CASE WHEN COALESCE(FELT_AMEND_EXPORT_INV_DATE,'') != '' THEN FELT_AMEND_EXPORT_INV_DATE ELSE INVOICE_DATE END AS INV_DATE "
                    + "FROM  "
                    + "(SELECT  "
                    + "H.PKG_BALE_NO,H.PKG_BALE_DATE,D.PKG_PIECE_NO,D.PKG_PRODUCT_CODE,H.PKG_PARTY_CODE,H.PKG_PARTY_NAME,H.PKG_STATION,H.PKG_MODE_PACKING,D.PKG_WEIGHT "
                    + "FROM  "
                    + "PRODUCTION.FELT_PKG_SLIP_HEADER H,  "
                    + "PRODUCTION.FELT_PKG_SLIP_DETAIL D "
                    + "WHERE H.PKG_BALE_NO=D.PKG_BALE_NO AND H.PKG_BALE_DATE=D.PKG_BALE_DATE AND COALESCE(H.PKG_BALE_NO,'') != ''  "
                    + "AND H.PKG_BALE_DATE>='" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()) + "' AND H.PKG_BALE_DATE<='" + EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()) + "'  "
                    + "ORDER BY H.PKG_BALE_NO,H.PKG_BALE_DATE ) AS PKG "
                    + "LEFT JOIN  "
                    + "(SELECT INVOICE_NO,INVOICE_DATE,PIECE_NO,BALE_NO,PACKING_DATE  "
                    + "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER WHERE APPROVED=1 AND CANCELLED=0 ) AS INV "
                    + "ON PKG.PKG_BALE_NO=INV.BALE_NO AND PKG.PKG_BALE_DATE=INV.PACKING_DATE "
                    + "AND PKG.PKG_PIECE_NO=INV.PIECE_NO "
                    + "LEFT JOIN  "
                    + "(SELECT H.BALE_NO,H.BALE_DATE,D.PIECE_NO,H.DOC_NO,H.CHANGED_DATE  "
                    + "FROM PRODUCTION.FELT_REOPEN_BALE_HEADER H, PRODUCTION.FELT_REOPEN_BALE_DETAIL D "
                    + "WHERE H.BALE_NO=D.BALE_NO AND H.BALE_DATE=D.BALE_DATE  "
                    + "AND H.DOC_NO=D.DOC_NO AND H.APPROVED=1 AND H.CANCELED=0) AS BLR "
                    + "ON PKG.PKG_BALE_NO=BLR.BALE_NO AND PKG.PKG_BALE_DATE=BLR.BALE_DATE "
                    + "LEFT JOIN  "
                    + "(SELECT FELT_AMEND_EXPORT_INV_NO,FELT_AMEND_EXPORT_INV_DATE,FELT_AMEND_PIECE_NO  "
                    + "FROM PRODUCTION.FELT_PIECE_AMEND WHERE FELT_MODULE_ID=624 AND APPROVED=1 AND CANCELED=0) AS EXP "
                    + "ON PKG.PKG_PIECE_NO=EXP.FELT_AMEND_PIECE_NO "
                    + "LEFT JOIN (SELECT INV_NO,INV_DATE,GROSS_WEIGHT FROM PRODUCTION.FELT_POST_INVOICE_DATA) AS PID "
                    + "ON PID.INV_NO=INVOICE_NO AND PID.INV_DATE=INVOICE_DATE "
                    + "LEFT JOIN (SELECT WH_INVOICE_NO,WH_INVOICE_DATE,GATE_OUTWARD_DATE FROM DINESHMILLS.D_INV_NRGP_DETAIL  D "
                    + "LEFT JOIN DINESHMILLS.D_INV_GATE_OUTWARD_HEADER H ON H.GATEPASS_NO=D.GATEPASS_NO "
                    + "WHERE D.GATEPASS_NO LIKE 'FGP%') AS OUTWARD ON WH_INVOICE_NO=INVOICE_NO AND WH_INVOICE_DATE=INVOICE_DATE "
                    + "ORDER BY PKG_BALE_DATE,PKG_BALE_NO ";

            System.out.println("SQL : " + str);
//            rpt.setReportName("/EITLERP/FeltSales/FeltFinishing/FeltFinishingAll.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.setReportName("/EITLERP/FeltWH/FeltWHBaleRegister.jrxml", 1, str); //productlist is the name of my jasper file.
            rpt.callReport();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                st.close();
                Conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}
