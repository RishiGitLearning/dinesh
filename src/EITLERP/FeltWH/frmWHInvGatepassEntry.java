/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */
/*<APPLET CODE=FrmNRGP_General.class HEIGHT=500 WIDTH=800*/
package EITLERP.FeltWH;

/**
 *
 * @author
 */
import javax.swing.*;
import java.awt.*;
import java.util.*;
import EITLERP.*;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import java.text.*;
import javax.swing.text.*;
import java.net.*;
import java.io.*;
import java.sql.*;
import EITLERP.Utils.*;

public class frmWHInvGatepassEntry extends javax.swing.JApplet {

    private int EditMode = 0;
    private EITLTableModel DataModelL;
    private EITLTableCellRenderer Renderer = new EITLTableCellRenderer();

    private clsWHInvGatepassEntry ObjNRGP;

    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private String SelNo = ""; //Selected Prefix Number
    private int FFNo = 0;

    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    private EITLComboModel cmbTransportModel;
    private EITLComboModel cmbTransporterModel;
    private EITLComboModel cmbCartingAgentModel;
    private EITLTableModel DataModelA;
    private EITLComboModel cmbSendToEModel;

    private boolean HistoryView = false;
    private String theDocNo = "";
    private EITLTableModel DataModelHS;

    private boolean DoNotEvaluate = false;

    public frmPendingApprovals frmPA;

    String cellLastValue = "";

    /**
     * Creates new form frmTemplate
     */
    public void init() {
        System.gc();
        setSize(780, 540);
        initComponents();

        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        lblTitle.setForeground(Color.WHITE);

        ObjNRGP = new clsWHInvGatepassEntry();
        SetMenuForRights();
        GenerateCombos();
        GenerateTransportModeCombos();
        GenerateTransporterCombos();
        GenerateCartingAgentCombos();
        FormatGrid();

        if (ObjNRGP.LoadData(EITLERPGLOBAL.gCompanyID)) {
            ObjNRGP.MoveLast();
            DisplayData();
            ShowMessage("Ready...........");
        } else {
            JOptionPane.showMessageDialog(null, "Error occured while loading data. Error is " + ObjNRGP.LastError);
        }

        txtAuditRemarks.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        txtGatepassNo = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        txtGatepassDate = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        cmbTransportMode = new javax.swing.JComboBox();
        jLabel43 = new javax.swing.JLabel();
        cmbTransporter = new javax.swing.JComboBox();
        jLabel44 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        cmdNext_Header = new javax.swing.JButton();
        lblRevNo = new javax.swing.JLabel();
        cmdRemarksBig = new javax.swing.JButton();
        txtGatepassType = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        txtOutwardNo = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        txtOutwardDate = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        txtVehicleNo = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        cmbCartingAgent = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableL = new javax.swing.JTable();
        cmdNext_Detail = new javax.swing.JButton();
        cmdPrev_Detail = new javax.swing.JButton();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdPrev = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        lblTitle = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.setLayout(null);

        jLabel37.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel37.setText("Gatepass No. : ");
        Tab1.add(jLabel37);
        jLabel37.setBounds(10, 10, 110, 15);

        txtGatepassNo.setEnabled(false);
        txtGatepassNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtGatepassNoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtGatepassNoFocusLost(evt);
            }
        });
        Tab1.add(txtGatepassNo);
        txtGatepassNo.setBounds(120, 7, 120, 21);

        jLabel38.setDisplayedMnemonic('d');
        jLabel38.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel38.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel38.setLabelFor(txtGatepassDate);
        jLabel38.setText("Date :");
        Tab1.add(jLabel38);
        jLabel38.setBounds(271, 10, 40, 15);

        txtGatepassDate.setEnabled(false);
        txtGatepassDate.setName("GATEPASS_DATE"); // NOI18N
        txtGatepassDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtGatepassDateFocusGained(evt);
            }
        });
        Tab1.add(txtGatepassDate);
        txtGatepassDate.setBounds(315, 7, 88, 21);

        jLabel39.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel39.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel39.setText("Gatepass Type : ");
        Tab1.add(jLabel39);
        jLabel39.setBounds(10, 30, 110, 20);

        jLabel42.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel42.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel42.setText("Transport Mode : ");
        Tab1.add(jLabel42);
        jLabel42.setBounds(0, 70, 120, 20);

        cmbTransportMode.setEnabled(false);
        cmbTransportMode.setName("WH_MODE_OF_TRANSPORT"); // NOI18N
        cmbTransportMode.setNextFocusableComponent(cmbTransporter);
        cmbTransportMode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbTransportModeFocusGained(evt);
            }
        });
        Tab1.add(cmbTransportMode);
        cmbTransportMode.setBounds(120, 70, 250, 21);

        jLabel43.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel43.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel43.setText("Transporter : ");
        Tab1.add(jLabel43);
        jLabel43.setBounds(10, 100, 110, 20);

        cmbTransporter.setEnabled(false);
        cmbTransporter.setName("WH_TRANSPORTER"); // NOI18N
        cmbTransporter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbTransporterItemStateChanged(evt);
            }
        });
        cmbTransporter.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbTransporterFocusGained(evt);
            }
        });
        Tab1.add(cmbTransporter);
        cmbTransporter.setBounds(120, 100, 250, 20);

        jLabel44.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel44.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel44.setText("Remarks : ");
        Tab1.add(jLabel44);
        jLabel44.setBounds(10, 250, 110, 20);

        txtRemarks.setEnabled(false);
        txtRemarks.setName("REMARKS"); // NOI18N
        txtRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRemarksFocusGained(evt);
            }
        });
        Tab1.add(txtRemarks);
        txtRemarks.setBounds(120, 250, 564, 21);

        cmdNext_Header.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cmdNext_Header.setMnemonic('n');
        cmdNext_Header.setText("Next ");
        cmdNext_Header.setNextFocusableComponent(cmdNext_Header);
        cmdNext_Header.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext_HeaderActionPerformed(evt);
            }
        });
        Tab1.add(cmdNext_Header);
        cmdNext_Header.setBounds(670, 358, 90, 25);

        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(240, 10, 30, 15);

        cmdRemarksBig.setText("...");
        cmdRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemarksBigActionPerformed(evt);
            }
        });
        Tab1.add(cmdRemarksBig);
        cmdRemarksBig.setBounds(700, 250, 39, 21);

        txtGatepassType.setEnabled(false);
        txtGatepassType.setName("CITY"); // NOI18N
        Tab1.add(txtGatepassType);
        txtGatepassType.setBounds(120, 30, 158, 21);

        jLabel40.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel40.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel40.setText("Outward No. : ");
        Tab1.add(jLabel40);
        jLabel40.setBounds(10, 200, 110, 15);

        txtOutwardNo.setEnabled(false);
        txtOutwardNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtOutwardNoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtOutwardNoFocusLost(evt);
            }
        });
        Tab1.add(txtOutwardNo);
        txtOutwardNo.setBounds(120, 200, 120, 21);

        jLabel41.setDisplayedMnemonic('d');
        jLabel41.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel41.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel41.setLabelFor(txtGatepassDate);
        jLabel41.setText("Date : ");
        Tab1.add(jLabel41);
        jLabel41.setBounds(250, 200, 60, 15);

        txtOutwardDate.setEnabled(false);
        txtOutwardDate.setName("GATEPASS_DATE"); // NOI18N
        txtOutwardDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtOutwardDateFocusGained(evt);
            }
        });
        Tab1.add(txtOutwardDate);
        txtOutwardDate.setBounds(310, 200, 88, 21);

        jLabel45.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel45.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel45.setText("Vehicle No : ");
        Tab1.add(jLabel45);
        jLabel45.setBounds(10, 170, 110, 20);

        txtVehicleNo.setEnabled(false);
        txtVehicleNo.setName("CITY"); // NOI18N
        Tab1.add(txtVehicleNo);
        txtVehicleNo.setBounds(120, 170, 158, 21);

        jLabel46.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel46.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel46.setText("Carting Agent : ");
        Tab1.add(jLabel46);
        jLabel46.setBounds(10, 130, 110, 20);

        cmbCartingAgent.setEnabled(false);
        cmbCartingAgent.setName("WH_CARTING_AGENT"); // NOI18N
        cmbCartingAgent.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbCartingAgentItemStateChanged(evt);
            }
        });
        cmbCartingAgent.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbCartingAgentFocusGained(evt);
            }
        });
        Tab1.add(cmbCartingAgent);
        cmbCartingAgent.setBounds(120, 130, 250, 20);

        jTabbedPane1.addTab("NRGP Header", Tab1);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(null);

        jLabel22.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel22.setText("NRGP Items");
        jPanel2.add(jLabel22);
        jLabel22.setBounds(6, 14, 98, 15);

        TableL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableL.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        TableL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableLKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(TableL);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(6, 40, 750, 224);

        cmdNext_Detail.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cmdNext_Detail.setMnemonic('x');
        cmdNext_Detail.setText("Next ");
        cmdNext_Detail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext_DetailActionPerformed(evt);
            }
        });
        jPanel2.add(cmdNext_Detail);
        cmdNext_Detail.setBounds(666, 298, 90, 25);

        cmdPrev_Detail.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cmdPrev_Detail.setMnemonic('o');
        cmdPrev_Detail.setText("Previous");
        cmdPrev_Detail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrev_DetailActionPerformed(evt);
            }
        });
        jPanel2.add(cmdPrev_Detail);
        cmdPrev_Detail.setBounds(572, 298, 90, 25);

        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add");
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        jPanel2.add(cmdAdd);
        cmdAdd.setBounds(540, 10, 88, 25);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        jPanel2.add(cmdRemove);
        cmdRemove.setBounds(630, 10, 90, 25);

        jTabbedPane1.addTab("NRGP Detail", jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setLayout(null);

        jLabel31.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel31.setText("Hierarchy :");
        jPanel3.add(jLabel31);
        jLabel31.setBounds(5, 14, 90, 15);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        jPanel3.add(cmbHierarchy);
        cmbHierarchy.setBounds(105, 14, 184, 24);

        jLabel32.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel32.setText("From :");
        jPanel3.add(jLabel32);
        jLabel32.setBounds(5, 44, 90, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.add(txtFrom);
        txtFrom.setBounds(105, 44, 182, 19);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        jPanel3.add(txtFromRemarks);
        txtFromRemarks.setBounds(105, 74, 518, 19);

        jLabel35.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel35.setText("Remarks :");
        jPanel3.add(jLabel35);
        jLabel35.setBounds(5, 74, 90, 15);

        jLabel36.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Your Action :");
        jPanel3.add(jLabel36);
        jLabel36.setBounds(5, 124, 90, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpgApproveActionPerformed(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 159, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        jPanel3.add(jPanel6);
        jPanel6.setBounds(105, 114, 182, 100);

        jLabel33.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel33.setText("Send To :");
        jPanel3.add(jLabel33);
        jLabel33.setBounds(5, 224, 90, 15);

        cmbSendTo.setNextFocusableComponent(txtRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        jPanel3.add(cmbSendTo);
        cmbSendTo.setBounds(105, 224, 184, 24);

        jLabel34.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Remarks :");
        jPanel3.add(jLabel34);
        jLabel34.setBounds(5, 254, 90, 15);

        txtToRemarks.setEnabled(false);
        txtToRemarks.setNextFocusableComponent(cmdPrev);
        jPanel3.add(txtToRemarks);
        txtToRemarks.setBounds(105, 254, 516, 19);

        cmdPrev.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cmdPrev.setMnemonic('p');
        cmdPrev.setText("Previous");
        cmdPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrevActionPerformed(evt);
            }
        });
        jPanel3.add(cmdPrev);
        cmdPrev.setBounds(650, 300, 90, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        jPanel3.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(630, 73, 39, 21);

        jTabbedPane1.addTab("Approval Hierarchy", jPanel3);

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel5.setLayout(null);

        jLabel26.setText("Document Approval Status");
        jPanel5.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel5.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 672, 144);

        lblDocumentHistory.setText("Document Update History");
        jPanel5.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(14, 193, 182, 15);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel5.add(jScrollPane3);
        jScrollPane3.setBounds(14, 209, 526, 125);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        jPanel5.add(cmdViewHistory);
        cmdViewHistory.setBounds(546, 237, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        jPanel5.add(cmdNormalView);
        cmdNormalView.setBounds(546, 266, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel5.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(546, 294, 132, 24);

        txtAuditRemarks.setEnabled(false);
        jPanel5.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(553, 329, 129, 19);

        jTabbedPane1.addTab("Status", jPanel5);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(2, 66, 768, 414);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("WH INVOICE GATEPASS ENTRY - ");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 770, 25);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(4, 481, 770, 22);
    }// </editor-fold>//GEN-END:initComponents

    private void txtGatepassNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtGatepassNoFocusLost
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD) {
            if (clsWHInvGatepassEntry.IsNRGPExist(EITLERPGLOBAL.gCompanyID, txtGatepassNo.getText())) {
                JOptionPane.showMessageDialog(null, "NRGP no. already exist. Please speciy other no.");
            }
        }
    }//GEN-LAST:event_txtGatepassNoFocusLost

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if (TableHS.getRowCount() > 0 && TableHS.getSelectedRow() >= 0) {
            txtAuditRemarks.setText((String) TableHS.getValueAt(TableHS.getSelectedRow(), 4));
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText = txtAuditRemarks;
            bigEdit.ShowEdit();
        }

    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmdRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdRemarksBigActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        PreviewReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        ObjNRGP.LoadData(EITLERPGLOBAL.gCompanyID);
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo = txtGatepassNo.getText();
        ObjNRGP.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Person name to send for approval ...........");
    }//GEN-LAST:event_cmbSendToFocusGained

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Hierarchy level for further Approval ...........");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void cmdPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrevActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_cmdPrevActionPerformed

    private void cmdPrev_DetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrev_DetailActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(0);
    }//GEN-LAST:event_cmdPrev_DetailActionPerformed

    private void cmdNext_DetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext_DetailActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNext_DetailActionPerformed

    private void cmdNext_HeaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext_HeaderActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext_HeaderActionPerformed

    private void txtRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Remarks if necessary for NRGP ...........");
    }//GEN-LAST:event_txtRemarksFocusGained

    private void txtGatepassDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtGatepassDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Gatepass Date in Format DD/MM/YYYY  ...........");
    }//GEN-LAST:event_txtGatepassDateFocusGained

    private void txtGatepassNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtGatepassNoFocusGained
        // TODO add your handling code here:
        ShowMessage("System will AutoGenerate From FirstFree No. as Gatepass No. ...........");
    }//GEN-LAST:event_txtGatepassNoFocusGained

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        Delete();
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ObjNRGP.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
                    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
                        // TODO add your handling code here:
                        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

                        GenerateFromCombo();

                        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
                            cmbSendTo.setEnabled(true);
                        } else {
                            cmbSendTo.setEnabled(false);
                        }

                        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
                            OpgFinal.setEnabled(true);
                        } else {
                            OpgFinal.setEnabled(false);
                            OpgFinal.setSelected(false);
                        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(true);
        OpgHold.setSelected(false);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(true);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);

        SetupApproval();
    }//GEN-LAST:event_OpgApproveMouseClicked

    private void OpgApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpgApproveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgApproveActionPerformed

    private void txtOutwardNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOutwardNoFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOutwardNoFocusGained

    private void txtOutwardNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOutwardNoFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOutwardNoFocusLost

    private void txtOutwardDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOutwardDateFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOutwardDateFocusGained

    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        Object[] rowData = new Object[1];
        DataModelL.addRow(rowData);
        TableL.changeSelection(TableL.getRowCount() - 1, 1, false, false);
        UpdateSrNo();
    }//GEN-LAST:event_cmdAddActionPerformed

    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        if (TableL.getRowCount() > 0) {
            DataModelL.removeRow(TableL.getSelectedRow());
            UpdateSrNo();
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed

    private void TableLKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableLKeyPressed
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
            String cndtn = "";
            if (!cmbTransporter.getSelectedItem().equals("SELECT TRANSPORTER")) {
                cndtn = " AND TRANSPORTER = '" + cmbTransporter.getSelectedItem() + "' ";
            }
            if (!cmbCartingAgent.getSelectedItem().equals("SELECT CARTING AGENT")) {
                cndtn = " AND CARTING_AGENT = '" + cmbCartingAgent.getSelectedItem() + "' ";
            }
            if (TableL.getSelectedColumn() == 1 && evt.getKeyCode() == 112) //F1 Key pressed
            {
                LOV aList = new LOV();
                aList.SQL = "SELECT INV_NO,INV_DATE,BALE_NO,BALE_DATE,DISPATCH_STATION FROM PRODUCTION.FELT_POST_INVOICE_DATA WHERE INV_DATE>='" + EITLERPGLOBAL.FinFromDateDB + "' AND INV_DATE<='" + EITLERPGLOBAL.FinToDateDB + "' " + cndtn + " AND CONCAT(INV_NO,INV_DATE) NOT IN (SELECT CONCAT(WH_INVOICE_NO,WH_INVOICE_DATE) FROM DINESHMILLS.D_INV_NRGP_HEADER H,DINESHMILLS.D_INV_NRGP_DETAIL D WHERE H.GATEPASS_NO=D.GATEPASS_NO AND H.CANCELED=0 AND WH_INVOICE_DATE>='" + EITLERPGLOBAL.FinFromDateDB + "' AND WH_INVOICE_DATE<='" + EITLERPGLOBAL.FinToDateDB + "' ) ";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 1;

                if (aList.ShowLOV()) {
                    String str = aList.ReturnVal;
                    TableL.setValueAt(aList.ReturnVal, TableL.getSelectedRow(), 1);

                    try {
                        ResultSet rs = data.getResult("SELECT * FROM PRODUCTION.FELT_POST_INVOICE_DATA WHERE INV_NO='" + aList.ReturnVal + "' AND INV_DATE>='" + EITLERPGLOBAL.FinFromDateDB + "' AND INV_DATE<='" + EITLERPGLOBAL.FinToDateDB + "' ");
                        rs.first();

                        TableL.setValueAt(EITLERPGLOBAL.formatDate(rs.getString("INV_DATE")), TableL.getSelectedRow(), 2);
                        TableL.setValueAt(rs.getString("PARTY_CODE"), TableL.getSelectedRow(), 3);
                        TableL.setValueAt(rs.getString("PARTY_NAME"), TableL.getSelectedRow(), 4);
                        TableL.setValueAt(rs.getString("BALE_NO"), TableL.getSelectedRow(), 5);
                        TableL.setValueAt(EITLERPGLOBAL.formatDate(rs.getString("BALE_DATE")), TableL.getSelectedRow(), 6);
                        TableL.setValueAt(rs.getString("DISPATCH_STATION"), TableL.getSelectedRow(), 7);
                        TableL.setValueAt(rs.getString("TRANSPORTER"), TableL.getSelectedRow(), 8);
                        TableL.setValueAt(rs.getString("TYPE_OF_PACKING"), TableL.getSelectedRow(), 9);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }//GEN-LAST:event_TableLKeyPressed

    private void cmbCartingAgentFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbCartingAgentFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbCartingAgentFocusGained

    private void cmbCartingAgentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbCartingAgentItemStateChanged
        // TODO add your handling code here:
        if (!cmbCartingAgent.getSelectedItem().equals("SELECT CARTING AGENT")) {
            cmbTransporter.setSelectedItem("SELECT TRANSPORTER");
        }
    }//GEN-LAST:event_cmbCartingAgentItemStateChanged

    private void cmbTransporterFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbTransporterFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Trasnporters from given trasnporters name list ...........");
    }//GEN-LAST:event_cmbTransporterFocusGained

    private void cmbTransporterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbTransporterItemStateChanged
        // TODO add your handling code here:
        if (!cmbTransporter.getSelectedItem().equals("SELECT TRANSPORTER")) {
            cmbCartingAgent.setSelectedItem("SELECT CARTING AGENT");
        }
    }//GEN-LAST:event_cmbTransporterItemStateChanged

    private void cmbTransportModeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbTransportModeFocusGained
        // TODO add your handling code here:
        ShowMessage("Select transport mode from given Mode of trasnports ...........");
    }//GEN-LAST:event_cmbTransportModeFocusGained

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel Tab1;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JTable TableL;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbCartingAgent;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JComboBox cmbTransportMode;
    private javax.swing.JComboBox cmbTransporter;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext_Detail;
    private javax.swing.JButton cmdNext_Header;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPrev;
    private javax.swing.JButton cmdPrev_Detail;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemarksBig;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtGatepassDate;
    private javax.swing.JTextField txtGatepassNo;
    private javax.swing.JTextField txtGatepassType;
    private javax.swing.JTextField txtOutwardDate;
    private javax.swing.JTextField txtOutwardNo;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtVehicleNo;
    // End of variables declaration//GEN-END:variables

    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }

    //Didplay data on the Screen
    private void DisplayData() {

        //=========== Color Indication ===============//
        try {
            if (EditMode == 0) {
                if (ObjNRGP.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                }

                if (ObjNRGP.getAttribute("APPROVED").getInt() != 1) {
                    lblTitle.setBackground(Color.GRAY);
                }

                if (ObjNRGP.getAttribute("CANCELED").getInt() == 1) {
                    lblTitle.setBackground(Color.RED);
                }

            }
        } catch (Exception c) {

        }
        //============================================//

        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            int ModuleID = 803;

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleID)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        try {
            ClearFields();
            txtGatepassNo.setText((String) ObjNRGP.getAttribute("GATEPASS_NO").getObj());
            lblTitle.setText("WH INVOICE GATEPASS ENTRY - " + txtGatepassNo.getText());
            lblRevNo.setText(Integer.toString((int) ObjNRGP.getAttribute("REVISION_NO").getVal()));
            txtGatepassDate.setText(EITLERPGLOBAL.formatDate((String) ObjNRGP.getAttribute("GATEPASS_DATE").getObj()));
            txtGatepassType.setText((String) ObjNRGP.getAttribute("GATEPASS_TYPE").getObj());

            EITLERPGLOBAL.setComboIndex(cmbTransportMode, (String) ObjNRGP.getAttribute("WH_MODE_OF_TRANSPORT").getObj());
            EITLERPGLOBAL.setComboIndex(cmbTransporter, (String) ObjNRGP.getAttribute("WH_TRANSPORTER").getObj());
            EITLERPGLOBAL.setComboIndex(cmbCartingAgent, (String) ObjNRGP.getAttribute("WH_CARTING_AGENT").getObj());

            txtVehicleNo.setText((String) ObjNRGP.getAttribute("WH_VEHICLE_NO").getObj());
            txtOutwardNo.setText((String) ObjNRGP.getAttribute("WH_OUTWARD_NO").getObj());
            txtOutwardDate.setText(EITLERPGLOBAL.formatDate((String) ObjNRGP.getAttribute("WH_OUTWARD_DATE").getObj()));
            txtRemarks.setText((String) ObjNRGP.getAttribute("REMARKS").getObj());

            EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) ObjNRGP.getAttribute("HIERARCHY_ID").getVal());

            //========= Display Line Items =============//
            FormatGrid();

            DoNotEvaluate = true;

            for (int i = 1; i <= ObjNRGP.colLineItems.size(); i++) {
                //Insert New Row
                Object[] rowData = new Object[1];
                DataModelL.addRow(rowData);
                int NewRow = TableL.getRowCount() - 1;

                clsWHInvGatepassEntryItem ObjItem = (clsWHInvGatepassEntryItem) ObjNRGP.colLineItems.get(Integer.toString(i));

                DataModelL.setValueByVariable("SR_NO", Integer.toString(i), NewRow);
                DataModelL.setValueByVariable("WH_INVOICE_NO", (String) ObjItem.getAttribute("WH_INVOICE_NO").getObj(), NewRow);
                if (ObjItem.getAttribute("WH_INVOICE_DATE").getObj().equals("0000-00-00")) {
                    DataModelL.setValueByVariable("WH_INVOICE_DATE", "", NewRow);
                } else {
                    DataModelL.setValueByVariable("WH_INVOICE_DATE", EITLERPGLOBAL.formatDate((String) ObjItem.getAttribute("WH_INVOICE_DATE").getObj()), NewRow);
                }
                DataModelL.setValueByVariable("WH_PARTY_CODE", (String) ObjItem.getAttribute("WH_PARTY_CODE").getObj(), NewRow);
                DataModelL.setValueByVariable("WH_PARTY_NAME", (String) ObjItem.getAttribute("WH_PARTY_NAME").getObj(), NewRow);
                DataModelL.setValueByVariable("WH_BALE_NO", (String) ObjItem.getAttribute("WH_BALE_NO").getObj(), NewRow);
                if (ObjItem.getAttribute("WH_BALE_DATE").getObj().equals("0000-00-00")) {
                    DataModelL.setValueByVariable("WH_BALE_DATE", "", NewRow);
                } else {
                    DataModelL.setValueByVariable("WH_BALE_DATE", EITLERPGLOBAL.formatDate((String) ObjItem.getAttribute("WH_BALE_DATE").getObj()), NewRow);
                }
                DataModelL.setValueByVariable("WH_DISPATCH_STATION", (String) ObjItem.getAttribute("WH_DISPATCH_STATION").getObj(), NewRow);
                DataModelL.setValueByVariable("WH_ACTUAL_TRANSPORTER", (String) ObjItem.getAttribute("WH_ACTUAL_TRANSPORTER").getObj(), NewRow);
                DataModelL.setValueByVariable("WH_TYPE_OF_PACKING", (String) ObjItem.getAttribute("WH_TYPE_OF_PACKING").getObj(), NewRow);

            }

            UpdateSrNo();

            if (EditMode == 0) {
                DataModelL.TableReadOnly(true);
            }

            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List = new HashMap();
            String DocNo = (String) ObjNRGP.getAttribute("GATEPASS_NO").getObj();
            List = clsFeltProductionApprovalFlow.getDocumentFlow(803, DocNo);
            for (int i = 1; i <= List.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
                Object[] rowData = new Object[7];
                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
                rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();
                DataModelA.addRow(rowData);
            }

            //Showing Audit Trial History
            FormatGridHS();
            HashMap History = clsWHInvGatepassEntry.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
            for (int i = 1; i <= History.size(); i++) {
                clsWHInvGatepassEntry ObjHistory = (clsWHInvGatepassEntry) History.get(Integer.toString(i));
                Object[] rowData = new Object[5];

                rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (long) ObjHistory.getAttribute("UPDATED_BY").getVal());
                rowData[2] = EITLERPGLOBAL.formatDate((String) ObjHistory.getAttribute("ENTRY_DATE").getObj());

                String ApprovalStatus = "";

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = (String) ObjHistory.getAttribute("APPROVER_REMARKS").getObj();

                DataModelHS.addRow(rowData);
            }

            DoNotEvaluate = false;

            //============================================================//
        } catch (Exception e) {
        }
    }

    //Sets data to the Class Object
    private void SetData() {

        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjNRGP.UserDocNo = txtGatepassNo.isEnabled();
            ObjNRGP.setAttribute("GATEPASS_NO", txtGatepassNo.getText());
        } else {
            ObjNRGP.UserDocNo = false;
        }

        //Switched Off
        ObjNRGP.UserDocNo = false;

        ObjNRGP.setAttribute("PREFIX", SelPrefix);
        ObjNRGP.setAttribute("SUFFIX", SelSuffix);
        ObjNRGP.setAttribute("FFNO", FFNo);
        ObjNRGP.setAttribute("COMPANY_ID", EITLERPGLOBAL.gCompanyID);
        ObjNRGP.setAttribute("GATEPASS_NO", txtGatepassNo.getText());
        ObjNRGP.setAttribute("GATEPASS_DATE", EITLERPGLOBAL.formatDateDB(txtGatepassDate.getText()));
        ObjNRGP.setAttribute("REMARKS", txtRemarks.getText());
        ObjNRGP.setAttribute("GATEPASS_TYPE", txtGatepassType.getText());

        ObjNRGP.setAttribute("WH_MODE_OF_TRANSPORT", EITLERPGLOBAL.getCombostrCode(cmbTransportMode));
        ObjNRGP.setAttribute("WH_TRANSPORTER", EITLERPGLOBAL.getCombostrCode(cmbTransporter));
        ObjNRGP.setAttribute("WH_CARTING_AGENT", EITLERPGLOBAL.getCombostrCode(cmbCartingAgent));
        ObjNRGP.setAttribute("WH_VEHICLE_NO", txtVehicleNo.getText());
        ObjNRGP.setAttribute("WH_OUTWARD_NO", txtOutwardNo.getText());
        if (txtOutwardDate.getText().equals("")) {
            ObjNRGP.setAttribute("WH_OUTWARD_DATE", "0000-00-00");
        } else {
            ObjNRGP.setAttribute("WH_OUTWARD_DATE", EITLERPGLOBAL.formatDateDB(txtOutwardDate.getText()));
        }

        //----- Update Approval Specific Fields -----------//
        ObjNRGP.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjNRGP.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        ObjNRGP.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjNRGP.setAttribute("FROM_REMARKS", txtToRemarks.getText());

        if (OpgApprove.isSelected()) {
            ObjNRGP.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            ObjNRGP.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            ObjNRGP.setAttribute("APPROVAL_STATUS", "R");
        }

        if (OpgHold.isSelected()) {
            ObjNRGP.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjNRGP.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            ObjNRGP.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
            ObjNRGP.setAttribute("MODIFIED_BY", "");
            ObjNRGP.setAttribute("MODIFIED_DATE", "0000-00-00");
        } else {
            ObjNRGP.setAttribute("CREATED_BY", "");
            ObjNRGP.setAttribute("CREATED_DATE", "0000-00-00");
            ObjNRGP.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            ObjNRGP.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }

        //=================== Setting up Line Items ==================//
        ObjNRGP.colLineItems.clear();

        for (int i = 0; i < TableL.getRowCount(); i++) {
            clsWHInvGatepassEntryItem ObjNRGPItem = new clsWHInvGatepassEntryItem();

            ObjNRGPItem.setAttribute("SR_NO", (i + 1));
            ObjNRGPItem.setAttribute("WH_INVOICE_NO", DataModelL.getValueByVariable("WH_INVOICE_NO", i));
            ObjNRGPItem.setAttribute("WH_INVOICE_DATE", EITLERPGLOBAL.formatDateDB(DataModelL.getValueByVariable("WH_INVOICE_DATE", i)));
            ObjNRGPItem.setAttribute("WH_PARTY_CODE", DataModelL.getValueByVariable("WH_PARTY_CODE", i));
            ObjNRGPItem.setAttribute("WH_PARTY_NAME", DataModelL.getValueByVariable("WH_PARTY_NAME", i));
            ObjNRGPItem.setAttribute("WH_BALE_NO", DataModelL.getValueByVariable("WH_BALE_NO", i));
            ObjNRGPItem.setAttribute("WH_BALE_DATE", EITLERPGLOBAL.formatDateDB(DataModelL.getValueByVariable("WH_BALE_DATE", i)));
            ObjNRGPItem.setAttribute("WH_DISPATCH_STATION", DataModelL.getValueByVariable("WH_DISPATCH_STATION", i));
            ObjNRGPItem.setAttribute("WH_ACTUAL_TRANSPORTER", DataModelL.getValueByVariable("WH_ACTUAL_TRANSPORTER", i));
            ObjNRGPItem.setAttribute("WH_TYPE_OF_PACKING", DataModelL.getValueByVariable("WH_TYPE_OF_PACKING", i));

            ObjNRGP.colLineItems.put(Integer.toString(ObjNRGP.colLineItems.size() + 1), ObjNRGPItem);
        }
    }

    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List = new HashMap();
        String strCondition = "";

        //----- Generate cmbType ------- //
        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=803");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=803");
        }
        for (int i = 1; i <= List.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
    }

    private void GenerateTransportModeCombos() {
        //Generates Combo Boxes
        ComboData objData1 = new ComboData();
        cmbTransportModel = new EITLComboModel();
        cmbTransportMode.removeAllItems();
        cmbTransportMode.setModel(cmbTransportModel);

        objData1.Text = "SELECT TRANSPORT MODE";
        objData1.strCode = "SELECT TRANSPORT MODE";
        cmbTransportModel.addElement(objData1);

        try {
            ResultSet rs = data.getResult("SELECT DISTINCT MODE_OF_TRANSPORT FROM PRODUCTION.FELT_POST_INVOICE_DATA ORDER BY MODE_OF_TRANSPORT");
            rs.first();

            while (!rs.isAfterLast()) {
                objData1 = new ComboData();
                objData1.Text = rs.getString("MODE_OF_TRANSPORT");
                objData1.strCode = rs.getString("MODE_OF_TRANSPORT");
                cmbTransportModel.addElement(objData1);
                rs.next();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateTransporterCombos() {
        //Generates Combo Boxes
        ComboData objData2 = new ComboData();
        cmbTransporterModel = new EITLComboModel();
        cmbTransporter.removeAllItems();
        cmbTransporter.setModel(cmbTransporterModel);

        objData2.Text = "SELECT TRANSPORTER";
        objData2.strCode = "SELECT TRANSPORTER";
        cmbTransporterModel.addElement(objData2);

        try {
            ResultSet rs = data.getResult("SELECT DISTINCT TRANSPORTER FROM PRODUCTION.FELT_POST_INVOICE_DATA ORDER BY TRANSPORTER");
            rs.first();

            while (!rs.isAfterLast()) {
                objData2 = new ComboData();
                objData2.Text = rs.getString("TRANSPORTER");
                objData2.strCode = rs.getString("TRANSPORTER");
                cmbTransporterModel.addElement(objData2);
                rs.next();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateCartingAgentCombos() {
        //Generates Combo Boxes
        ComboData objData3 = new ComboData();
        cmbCartingAgentModel = new EITLComboModel();
        cmbCartingAgent.removeAllItems();
        cmbCartingAgent.setModel(cmbCartingAgentModel);

        objData3.Text = "SELECT CARTING AGENT";
        objData3.strCode = "SELECT CARTING AGENT";
        cmbCartingAgentModel.addElement(objData3);

        try {
            ResultSet rs = data.getResult("SELECT DISTINCT CARTING_AGENT FROM PRODUCTION.FELT_POST_INVOICE_DATA ORDER BY CARTING_AGENT");
            rs.first();

            while (!rs.isAfterLast()) {
                objData3 = new ComboData();
                objData3.Text = rs.getString("CARTING_AGENT");
                objData3.strCode = rs.getString("CARTING_AGENT");
                cmbCartingAgentModel.addElement(objData3);
                rs.next();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbSendToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbSendToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbSendToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbSendToModel);

                List = clsFeltProductionApprovalFlow.getRemainingUsers(803, (String) ObjNRGP.getAttribute("GATEPASS_NO").getObj());
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
        }
    }

    private void UpdateSrNo() {
        int SrCol = 0;

        for (int i = 0; i < TableL.getRowCount(); i++) {
            TableL.setValueAt(Integer.toString(i + 1), i, SrCol);
        }
    }

    private void SetupApproval() {
        // --- Hierarchy Change Rights Check --------

        /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,575)) {
         cmbHierarchy.setEnabled(true);
         }
        
         else {
         cmbHierarchy.setEnabled(false);
         }*/
        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {

            int FromUserID = clsFeltProductionApprovalFlow.getFromID(803, (String) ObjNRGP.getAttribute("GATEPASS_NO").getObj());
            lnFromID = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = clsFeltProductionApprovalFlow.getFromRemarks(803, FromUserID, (String) ObjNRGP.getAttribute("GATEPASS_NO").getObj());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }

    }

    private void FormatGrid() {
        try {
            DataModelL = new EITLTableModel();
            TableL.removeAll();

            TableL.setModel(DataModelL);
            TableColumnModel ColModel = TableL.getColumnModel();
            TableL.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            DataModelL.addColumn("Sr.No"); //0
            DataModelL.addColumn("Invoice No"); //1
            DataModelL.addColumn("Invoice Date"); //2
            DataModelL.addColumn("Party Code"); //3
            DataModelL.addColumn("Party Name"); //4
            DataModelL.addColumn("Bale No"); //5
            DataModelL.addColumn("Bale Date"); //6
            DataModelL.addColumn("Dispatch Station"); //7
            DataModelL.addColumn("Actual Transporter"); //8
            DataModelL.addColumn("Type of Packing"); //9

            DataModelL.SetVariable(0, "SR_NO");
            DataModelL.SetVariable(1, "WH_INVOICE_NO");
            DataModelL.SetVariable(2, "WH_INVOICE_DATE");
            DataModelL.SetVariable(3, "WH_PARTY_CODE");
            DataModelL.SetVariable(4, "WH_PARTY_NAME");
            DataModelL.SetVariable(5, "WH_BALE_NO");
            DataModelL.SetVariable(6, "WH_BALE_DATE");
            DataModelL.SetVariable(7, "WH_DISPATCH_STATION");
            DataModelL.SetVariable(8, "WH_ACTUAL_TRANSPORTER");
            DataModelL.SetVariable(9, "WH_TYPE_OF_PACKING");

//            DataModelL.SetReadOnly(0);
            for (int i = 0; i <= 9; i++) {
                DataModelL.SetReadOnly(i);
            }

            if (EditMode != 0) {
                //------- Install Table List Selection Listener ------//
                TableL.getColumnModel().getSelectionModel().addListSelectionListener(new ListSelectionListener() {
                    public void valueChanged(ListSelectionEvent e) {
                        int column = TableL.getSelectedColumn();
                        String strVar = DataModelL.getVariable(column);
                        //=============== Cell Editing Routine =======================//
                        TableL.editCellAt(TableL.getSelectedRow(), column);
                        if (TableL.getEditorComponent() instanceof JTextComponent) {
                            ((JTextComponent) TableL.getEditorComponent()).selectAll();
                        }
                        if (column == 1) {
                            ShowMessage("Press F1 for Invoice No List...");
                        }
                        //============= Cell Editing Routine Ended =================//
                    }
                });

                //----- Install Table Model Event Listener For Displaying Party code and Group -------//
                TableL.getModel().addTableModelListener(new TableModelListener() {
                    public void tableChanged(TableModelEvent e) {
                        if (e.getType() == TableModelEvent.UPDATE) {
                            int row = TableL.getSelectedRow();
                            int column = e.getColumn();

                            //=========== Cell Update Prevention Check ===========//
                            String curValue = ((String) TableL.getValueAt(row, column)).trim();
                            if (curValue.equals("")) {
                                return;
                            }
                            //====================================================//
                            if (DoNotEvaluate) {
                                return;
                            }
                        }
                    }
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjNRGP.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjNRGP.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjNRGP.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjNRGP.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        ShowMessage("Ready");
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void SetFields(boolean pStat) {
        txtGatepassNo.setEnabled(false);
        txtGatepassDate.setEnabled(false);
        txtGatepassType.setEnabled(false);

        txtOutwardNo.setEnabled(false);
        txtOutwardDate.setEnabled(false);

        txtVehicleNo.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);

        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);

        cmbTransportMode.setEnabled(pStat);
        cmbTransporter.setEnabled(pStat);
        cmbCartingAgent.setEnabled(pStat);
        cmbHierarchy.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);

        SetupApproval();

        DataModelL.TableReadOnly(true);
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6241, 62411)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6241, 62412)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6241, 62413)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6241, 62415)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }

    private void Add() {
        //== Financial Year Validation-------------//
//        if (!EITLERPGLOBAL.YearIsOpen) {
//            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
//            return;
//        }
        //----------------------------------//
        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = 803;

        if (aList.ShowList()) {

            EditMode = EITLERPGLOBAL.ADD;
            SetFields(true);
            ObjNRGP.colLineItems.clear();
            FormatGrid();
            DisableToolbar();
            ClearFields();
            SelPrefix = aList.Prefix; //Selected Prefix;
            SelSuffix = aList.Suffix;
            FFNo = aList.FirstFreeNo;

            txtGatepassNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 803, SelPrefix, SelSuffix, false));
            txtGatepassDate.setText(EITLERPGLOBAL.getCurrentDate());
            txtGatepassType.setText("FGP");

            SelNo = aList.DocNo;
            SetupApproval();
            txtGatepassDate.requestFocus();

            lblTitle.setText("WH INVOICE GATEPASS ENTRY - " + txtGatepassNo.getText());
            lblTitle.setBackground(Color.BLUE);
        } else {
            JOptionPane.showMessageDialog(null, "You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
    }

    private void ClearFields() {
        //txtGatepassNo.setText("");
        //txtGatepassDate.setText("");
        txtVehicleNo.setText("");
        txtRemarks.setText("");
        txtOutwardNo.setText("");
        txtOutwardDate.setText("");

        txtToRemarks.setText("");

        FormatGrid();
        FormatGridA();
        FormatGridHS();
    }

    private void Edit() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        String lDocNo = (String) ObjNRGP.getAttribute("GATEPASS_NO").getObj();
        if (ObjNRGP.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {

            EITLERPGLOBAL.ChangeCursorToWait(this);

            EditMode = EITLERPGLOBAL.EDIT;

            //---New Change ---//
            GenerateCombos();
            DisplayData();
            //----------------//

            if (clsFeltProductionApprovalFlow.IsCreator(803, lDocNo)) {// || clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 10002, 100022)
                SetFields(true);
            } else {
                EnableApproval();
            }

            DisableToolbar();

            EITLERPGLOBAL.ChangeCursorToDefault(this);
        } else {
            JOptionPane.showMessageDialog(null, "You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
    }

    private void Delete() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        String lDocNo = (String) ObjNRGP.getAttribute("GATEPASS_NO").getObj();

        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this record ?", "SDML ERP", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            if (ObjNRGP.CanDelete(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
                if (ObjNRGP.Delete(EITLERPGLOBAL.gNewUserID)) {
                    MoveLast();
                } else {
                    JOptionPane.showMessageDialog(null, "Error occured while deleting. Error is " + ObjNRGP.LastError);
                }
            } else {
                JOptionPane.showMessageDialog(null, "You cannot delete this record. It is either approved/rejected record or waiting approval for other user or is referred in other documents");
            }
        }
    }

    private void Save() {
        //Form level validations
        if (Validate() == false) {
            return; //Validation failed
        }

        EITLERPGLOBAL.ChangeCursorToWait(this);

        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (ObjNRGP.Insert(SelPrefix, SelNo)) {
                MoveLast();
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while saving. Error is " + ObjNRGP.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (ObjNRGP.Update()) {
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while saving. Error is " + ObjNRGP.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        ShowMessage("Ready");
        try {
            frmPA.RefreshView();
        } catch (Exception e) {
        }
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.FeltWH.frmFindWHInvGatepassEntry", true);
        frmFindWHInvGatepassEntry ObjReturn = (frmFindWHInvGatepassEntry) ObjLoader.getObj();

        if (ObjReturn.Cancelled == false) {
            if (!ObjNRGP.Filter(ObjReturn.stringFindQuery, EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null, "No records found.");
            }
            MoveLast();
        }

    }

    private boolean Validate() {
        int ValidEntryCount = 0;

        //Validates Item Entries
        if (TableL.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(null, "Please enter at least one item");
            return false;
        }

        if (txtVehicleNo.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter Vehicle No");
            return false;
        }

        //Now Header level validations
        if (txtGatepassDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter Gatepass Date");
            return false;
        }

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Please select the hierarchy.");
            return false;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(null, "Please select the Approval Action");
            return false;
        }

        /*if(!clsSupplier.IsValidSuppCode(EITLERPGLOBAL.gCompanyID,txtSuppCode.getText())) {
         JOptionPane.showMessageDialog(null,"Please enter valid supplier code");
         return false;
         }*/
        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter the remarks for rejection");
            return false;
        }

        //        if( (OpgApprove.isSelected()||OpgReject.isSelected())&&cmbSendTo.getItemCount()<=0)
        //        {
        //          JOptionPane.showMessageDialog(null,"Please select the user, to whom rejected document to be send");
        //          return false;
        //        }
        return true;
    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }

    private void FormatGridA() {
        DataModelA = new EITLTableModel();

        TableA.removeAll();
        TableA.setModel(DataModelA);

        //Set the table Readonly
        DataModelA.TableReadOnly(true);

        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");

        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);

    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //========== Setting Up Header Fields ================//
        String FieldName = "";
        int SelHierarchy = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        for (int i = 0; i < Tab1.getComponentCount() - 1; i++) {
            if (Tab1.getComponent(i).getName() != null) {

                FieldName = Tab1.getComponent(i).getName();
                if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {

                    Tab1.getComponent(i).setEnabled(true);
                }

            }
        }
        //=============== Header Fields Setup Complete =================//

        //=============== Setting Table Fields ==================//
        DataModelL.ClearAllReadOnly();
        for (int i = 0; i < TableL.getColumnCount(); i++) {
            FieldName = DataModelL.getVariable(i);

            if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "L", FieldName)) {
                //Do Nothing
            } else {
                DataModelL.SetReadOnly(i);
            }
        }
        //=======================================================//
    }

    public void FindEx(int pCompanyID, String pDocNo) {
        ObjNRGP.Filter(" WHERE COMPANY_ID=" + Integer.toString(pCompanyID) + " AND GATEPASS_NO='" + pDocNo + "'", pCompanyID);
        ObjNRGP.MoveLast();
        DisplayData();
    }

    public void FindWaiting() {
        ObjNRGP.Filter(" WHERE GATEPASS_NO IN(SELECT D_INV_NRGP_HEADER.GATEPASS_NO FROM D_INV_NRGP_HEADER,PRODUCTION.FELT_PROD_DOC_DATA WHERE D_INV_NRGP_HEADER.GATEPASS_NO=PRODUCTION.FELT_PROD_DOC_DATA.DOC_NO AND D_INV_NRGP_HEADER.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND PRODUCTION.FELT_PROD_DOC_DATA.USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND PRODUCTION.FELT_PROD_DOC_DATA.STATUS='W' AND PRODUCTION.FELT_PROD_DOC_DATA.MODULE_ID=803)", EITLERPGLOBAL.gCompanyID);
        ObjNRGP.MoveLast();
        DisplayData();
    }

    private void FormatGridHS() {
        DataModelHS = new EITLTableModel();

        TableHS.removeAll();
        TableHS.setModel(DataModelHS);

        //Set the table Readonly
        DataModelHS.TableReadOnly(true);

        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");

        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }

    private void PreviewReport() {
        if (ObjNRGP.getAttribute("APPROVED").getInt() == 1) {
            try {
                Connection Conn = EITLERP.data.getConn();
                HashMap parameterMap = new HashMap();

                parameterMap.put("CONTEXT","http://200.0.0.227:8080/SDMLERP/");

                EITLERP.ReportRegister rpt = new EITLERP.ReportRegister(parameterMap, Conn);
                String strSQL = "";
                strSQL = "SELECT * FROM  "
                        + "(SELECT H.GATEPASS_NO,H.GATEPASS_DATE, "
                        + "CASE WHEN H.WH_CARTING_AGENT LIKE 'SELECT %' THEN H.WH_TRANSPORTER ELSE H.WH_CARTING_AGENT END AS WH_TRANSPORTER, "
                        + "H.WH_VEHICLE_NO,H.WH_MODE_OF_TRANSPORT, "
                        + "D.WH_BALE_NO,D.WH_INVOICE_NO,D.WH_INVOICE_DATE,D.WH_DISPATCH_STATION,D.WH_ACTUAL_TRANSPORTER "
                        + "FROM DINESHMILLS.D_INV_NRGP_HEADER H, DINESHMILLS.D_INV_NRGP_DETAIL D "
                        + "WHERE H.GATEPASS_NO = D.GATEPASS_NO AND H.GATEPASS_TYPE='FGP' AND H.GATEPASS_NO='" + txtGatepassNo.getText() + "' ) AS HD "
                        + "LEFT JOIN (SELECT COUNT(*) AS TCNT,H.GATEPASS_NO AS T_GATEPASS_NO FROM DINESHMILLS.D_INV_NRGP_HEADER H, DINESHMILLS.D_INV_NRGP_DETAIL D "
                        + "WHERE H.GATEPASS_NO = D.GATEPASS_NO AND H.GATEPASS_TYPE='FGP' AND H.GATEPASS_NO='" + txtGatepassNo.getText() + "' ) AS CNT "
                        + "ON HD.GATEPASS_NO=CNT.T_GATEPASS_NO "
                        + "LEFT JOIN ( SELECT GATEPASS_NO AS G_GATEPASS_NO,GROUP_CONCAT(CONCAT(A,' ',B)) AS PACKING_TYPE FROM (SELECT H.GATEPASS_NO,COUNT(WH_TYPE_OF_PACKING) AS A,WH_TYPE_OF_PACKING AS B FROM DINESHMILLS.D_INV_NRGP_HEADER H, DINESHMILLS.D_INV_NRGP_DETAIL D "
                        + "WHERE H.GATEPASS_NO = D.GATEPASS_NO AND H.GATEPASS_TYPE='FGP' AND H.GATEPASS_NO='" + txtGatepassNo.getText() + "' GROUP BY GATEPASS_NO,WH_TYPE_OF_PACKING) AS SUB GROUP BY GATEPASS_NO) AS PK "
                        + "ON HD.GATEPASS_NO=PK.G_GATEPASS_NO ";
                System.out.println("Report :" + strSQL);
                rpt.setReportName("/EITLERP/FeltWH/FELT_WH_GATEPASS.jrxml", 1, strSQL); //productlist is the name of my jasper file.
                rpt.callReport();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Document is Not Final Approved... Please Final Approve for Print...");
        }
    }
}
