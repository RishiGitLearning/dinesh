/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */

package EITLERP;

/**
 * 
 * @author  nrpithva
 */

/*<APPLET CODE=frmItemHierarchy.class HEIGHT=430 WIDTH=650></APPLET>*/

import javax.swing.*;
import java.awt.*;
import java.util.*;
import javax.swing.table.*;
  

public class frmItemHierarchy extends javax.swing.JApplet {
    private int EditMode=0;
    private EITLTableModel DataModel=new EITLTableModel();
    private EITLComboModel cmbUserModel=new EITLComboModel();
    private clsItemHierarchy ObjItemHierarchy;
        
    /** Creates new form frmTemplate */
    public frmItemHierarchy() {
        System.gc();
        ObjItemHierarchy=new clsItemHierarchy();
        setSize(650,430);
        
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        
        //Now load data
        if(ObjItemHierarchy.LoadData(EITLERPGLOBAL.gCompanyID))
        {
            GenerateCombo();
            DisplayData();
            //------- Set the menu for User rights ----- //
            SetMenuForRights();
            
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Failed to load the data from table.");
            //Code to exit the form
        }
           
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtDescription = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cmbUser = new javax.swing.JComboBox();
        chkChange = new javax.swing.JCheckBox();
        chkSkip = new javax.swing.JCheckBox();
        chkFinal = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        cmdUP = new javax.swing.JButton();
        cmdDown = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        chkDefault = new javax.swing.JCheckBox();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setForeground(java.awt.Color.white);
        jLabel1.setText(" ITEM APPROVAL HIERARCHY");
        jLabel1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 40, 650, 25);

        jPanel3.setLayout(null);

        jPanel3.setBorder(new javax.swing.border.EtchedBorder());
        jLabel2.setText("Hierarchy Name :");
        jPanel3.add(jLabel2);
        jLabel2.setBounds(10, 10, 108, 16);

        txtDescription.setNextFocusableComponent(chkDefault);
        txtDescription.setEnabled(false);
        jPanel3.add(txtDescription);
        txtDescription.setBounds(120, 10, 210, 22);

        jLabel3.setText("User :");
        jPanel3.add(jLabel3);
        jLabel3.setBounds(20, 70, 33, 16);

        cmbUser.setNextFocusableComponent(chkChange);
        cmbUser.setEnabled(false);
        jPanel3.add(cmbUser);
        cmbUser.setBounds(70, 70, 160, 22);

        chkChange.setText("Can Change Hierarchy");
        chkChange.setNextFocusableComponent(chkSkip);
        chkChange.setEnabled(false);
        jPanel3.add(chkChange);
        chkChange.setBounds(20, 110, 151, 25);

        chkSkip.setText("Can Skip Sequence");
        chkSkip.setNextFocusableComponent(chkFinal);
        chkSkip.setEnabled(false);
        jPanel3.add(chkSkip);
        chkSkip.setBounds(190, 110, 152, 25);

        chkFinal.setText("Can Final Approve");
        chkFinal.setNextFocusableComponent(cmdAdd);
        chkFinal.setEnabled(false);
        jPanel3.add(chkFinal);
        chkFinal.setBounds(350, 110, 148, 25);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setNextFocusableComponent(txtDescription);
        jScrollPane1.setViewportView(Table);

        jPanel3.add(jScrollPane1);
        jScrollPane1.setBounds(10, 150, 480, 150);

        cmdAdd.setText("Add");
        cmdAdd.setNextFocusableComponent(cmdRemove);
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });

        jPanel3.add(cmdAdd);
        cmdAdd.setBounds(510, 150, 80, 25);

        cmdRemove.setText("Remove");
        cmdRemove.setNextFocusableComponent(cmdUP);
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });

        jPanel3.add(cmdRemove);
        cmdRemove.setBounds(510, 180, 81, 25);

        cmdUP.setFont(new java.awt.Font("Tahoma", 0, 10));
        cmdUP.setText("up");
        cmdUP.setNextFocusableComponent(cmdDown);
        cmdUP.setEnabled(false);
        cmdUP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUPActionPerformed(evt);
            }
        });

        jPanel3.add(cmdUP);
        cmdUP.setBounds(510, 240, 60, 23);

        cmdDown.setFont(new java.awt.Font("Tahoma", 0, 10));
        cmdDown.setText("down");
        cmdDown.setNextFocusableComponent(Table);
        cmdDown.setEnabled(false);
        cmdDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDownActionPerformed(evt);
            }
        });

        jPanel3.add(cmdDown);
        cmdDown.setBounds(510, 270, 61, 23);

        jPanel3.add(jPanel4);
        jPanel4.setBounds(10, 40, 610, 5);

        chkDefault.setText("Default Hierarchy");
        chkDefault.setNextFocusableComponent(cmbUser);
        chkDefault.setEnabled(false);
        chkDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDefaultActionPerformed(evt);
            }
        });

        jPanel3.add(chkDefault);
        chkDefault.setBounds(400, 10, 148, 25);

        getContentPane().add(jPanel3);
        jPanel3.setBounds(0, 70, 640, 330);

    }//GEN-END:initComponents

    private void chkDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDefaultActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_chkDefaultActionPerformed

    private void cmdDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDownActionPerformed
        // Add your handling code here:
        Object[] rowOne=new Object[6];
        Object[] rowTwo=new Object[6];
        
        if(Table.getRowCount()>1&&Table.getSelectedRow()<Table.getRowCount()-1)
        {
            int CurRow=Table.getSelectedRow();
            int DownRow=CurRow+1;
            
            //Record current row
            rowOne[0]=Table.getValueAt(CurRow,0);
            //rowOne[1]=Table.getValueAt(CurRow,1);
            rowOne[2]=Table.getValueAt(CurRow,2);
            rowOne[3]=Table.getValueAt(CurRow,3);
            rowOne[4]=Table.getValueAt(CurRow,4);
            rowOne[5]=Table.getValueAt(CurRow,5);
            
            //Record Up Row
            rowTwo[0]=Table.getValueAt(DownRow,0);
            //rowTwo[1]=Table.getValueAt(UpRow,1);
            rowTwo[2]=Table.getValueAt(DownRow,2);
            rowTwo[3]=Table.getValueAt(DownRow,3);
            rowTwo[4]=Table.getValueAt(DownRow,4);
            rowTwo[5]=Table.getValueAt(DownRow,5);
            
            //Now Replace up row with Row One
            Table.setValueAt(rowOne[0],DownRow,0);
            //Table.setValueAt(rowOne[1],UpRow,1);
            Table.setValueAt(rowOne[2],DownRow,2);
            Table.setValueAt(rowOne[3],DownRow,3);
            Table.setValueAt(rowOne[4],DownRow,4);
            Table.setValueAt(rowOne[5],DownRow,5);
            
            //Now Replace Current row with Row Two
            Table.setValueAt(rowTwo[0],CurRow,0);
            //Table.setValueAt(rowTwo[1],CurRow,1);
            Table.setValueAt(rowTwo[2],CurRow,2);
            Table.setValueAt(rowTwo[3],CurRow,3);
            Table.setValueAt(rowTwo[4],CurRow,4);
            Table.setValueAt(rowTwo[5],CurRow,5);
            
            Table.changeSelection(DownRow,1,false,false);
            //Done
        }
    }//GEN-LAST:event_cmdDownActionPerformed

    private void cmdUPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdUPActionPerformed
        // Add your handling code here:
        Object[] rowOne=new Object[6];
        Object[] rowTwo=new Object[6];
        
        if(Table.getRowCount()>1&&Table.getSelectedRow()>0)
        {
            int CurRow=Table.getSelectedRow();
            int UpRow=CurRow-1;
            
            //Record current row
            rowOne[0]=Table.getValueAt(CurRow,0);
            //rowOne[1]=Table.getValueAt(CurRow,1);
            rowOne[2]=Table.getValueAt(CurRow,2);
            rowOne[3]=Table.getValueAt(CurRow,3);
            rowOne[4]=Table.getValueAt(CurRow,4);
            rowOne[5]=Table.getValueAt(CurRow,5);
            
            //Record Up Row
            rowTwo[0]=Table.getValueAt(UpRow,0);
            //rowTwo[1]=Table.getValueAt(UpRow,1);
            rowTwo[2]=Table.getValueAt(UpRow,2);
            rowTwo[3]=Table.getValueAt(UpRow,3);
            rowTwo[4]=Table.getValueAt(UpRow,4);
            rowTwo[5]=Table.getValueAt(UpRow,5);
            
            //Now Replace up row with Row One
            Table.setValueAt(rowOne[0],UpRow,0);
            //Table.setValueAt(rowOne[1],UpRow,1);
            Table.setValueAt(rowOne[2],UpRow,2);
            Table.setValueAt(rowOne[3],UpRow,3);
            Table.setValueAt(rowOne[4],UpRow,4);
            Table.setValueAt(rowOne[5],UpRow,5);
            
            //Now Replace Current row with Row Two
            Table.setValueAt(rowTwo[0],CurRow,0);
            //Table.setValueAt(rowTwo[1],CurRow,1);
            Table.setValueAt(rowTwo[2],CurRow,2);
            Table.setValueAt(rowTwo[3],CurRow,3);
            Table.setValueAt(rowTwo[4],CurRow,4);
            Table.setValueAt(rowTwo[5],CurRow,5);
            
            Table.changeSelection(UpRow,1,false,false);
            //Done
        }
    }//GEN-LAST:event_cmdUPActionPerformed

    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // Add your handling code here:
        DataModel.removeRow(Table.getSelectedRow());
        
        //Re Arranging the Sr. Nos.
        for(int i=0;i<Table.getRowCount();i++)
        {
            Table.setValueAt(Integer.toString(i+1),i,1);
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed

    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // Add your handling code here:
        long nUserID= cmbUserModel.getCode((long) cmbUser.getSelectedIndex());

        //Check that User id is exist or not 
        for(int i=0;i<Table.getRowCount();i++)
        {
          if(Integer.parseInt((String)Table.getValueAt(i,0))==nUserID)
          {
              JOptionPane.showMessageDialog(null,"User already added to the list");
              return;
          }
        }
        
        
        Object[] rowData=new Object[6];
        rowData[0]=Long.toString(nUserID);
        rowData[1]=Long.toString(Table.getRowCount()+1);
        rowData[2]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,nUserID);
        
        if(chkChange.isSelected())
        {
            rowData[3]="Y";
        }
        else
        {
            rowData[3]=" ";
        }
        
        if(chkSkip.isSelected())
        {
            rowData[4]="Y";
        }
        else
        {
            rowData[4]=" ";
        }

        if(chkFinal.isSelected())
        {
            rowData[5]="Y";
        }
        else
        {
            rowData[5]=" ";
        }
        
        DataModel.addRow(rowData);
        
    }//GEN-LAST:event_cmdAddActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // Add your handling code here:
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // Add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // Add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // Add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // Add your handling code here:
        Delete();
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // Add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // Add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // Add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // Add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // Add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // Add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JCheckBox chkChange;
    private javax.swing.JCheckBox chkDefault;
    private javax.swing.JCheckBox chkFinal;
    private javax.swing.JCheckBox chkSkip;
    private javax.swing.JComboBox cmbUser;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdDown;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdUP;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtDescription;
    // End of variables declaration//GEN-END:variables

  private void EnableToolbar()
  {
      //Puts toolbar in enable mode
      cmdTop.setEnabled(true);
      cmdBack.setEnabled(true);
      cmdNext.setEnabled(true);
      cmdLast.setEnabled(true);
      cmdNew.setEnabled(true);
      cmdEdit.setEnabled(true);
      cmdDelete.setEnabled(true);
      cmdSave.setEnabled(false);
      cmdCancel.setEnabled(false);
      cmdFilter.setEnabled(true);
      cmdPreview.setEnabled(true);
      cmdPrint.setEnabled(true);
      cmdExit.setEnabled(true);
        SetMenuForRights();      
  }
  
  private void DisableToolbar()
  {
      //Puts toolbar in enable mode
      cmdTop.setEnabled(false);
      cmdBack.setEnabled(false);
      cmdNext.setEnabled(false);
      cmdLast.setEnabled(false);
      cmdNew.setEnabled(false);
      cmdEdit.setEnabled(false);
      cmdDelete.setEnabled(false);
      cmdSave.setEnabled(true);
      cmdCancel.setEnabled(true);
      cmdFilter.setEnabled(false);
      cmdPreview.setEnabled(false);
      cmdPrint.setEnabled(false);
      cmdExit.setEnabled(false);
  }
  
  //Didplay data on the Screen
  private void DisplayData()
  {
      txtDescription.setText((String)ObjItemHierarchy.getAttribute("DESCRIPTION").getObj());
      
      if((boolean)ObjItemHierarchy.getAttribute("IS_DEFAULT").getBool())
      {
          chkDefault.setSelected(true);
      }
      else
      {
          chkDefault.setSelected(false);
      }
      
      //Now Generate the Table
      FormatGrid();
      
      for(int i=1;i<=ObjItemHierarchy.colUsers.size();i++)
      {
         clsItemHierarchyUser ObjUser=(clsItemHierarchyUser) ObjItemHierarchy.colUsers.get(Integer.toString(i));
         Object[] rowData=new Object[6];
         
         rowData[0]=Integer.toString((int)ObjUser.getAttribute("USER_ID").getVal());
         rowData[1]=Integer.toString((int)ObjUser.getAttribute("SR_NO").getVal());
         rowData[2]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(long)ObjUser.getAttribute("USER_ID").getVal());
         
         if((boolean)ObjUser.getAttribute("CAN_CHANGE").getBool())
         {
             rowData[3]="Y";
         }
         else
         {
             rowData[3]=" ";
         }
         
         if((boolean)ObjUser.getAttribute("CAN_SKIP").getBool())
         {
             rowData[4]="Y";
         }
         else
         {
             rowData[4]=" ";
         }
         
         if((boolean)ObjUser.getAttribute("CAN_FINAL_APPROVE").getBool())
         {
             rowData[5]="Y";
         }
         else
         {
             rowData[5]=" ";
         }
         
         DataModel.addRow(rowData);
      }//End of For loop
      
  }

  
  //Sets data to the Class Object
  private void SetData()
  {
    //long nCompanyID = cmbCompanyModel.getCode((long) cmbCompany.getSelectedIndex());
    
     ObjItemHierarchy.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
     ObjItemHierarchy.setAttribute("DESCRIPTION",txtDescription.getText());
     
     if(chkDefault.isSelected())
     {
     ObjItemHierarchy.setAttribute("IS_DEFAULT",true);
     }
     else
     {
     ObjItemHierarchy.setAttribute("IS_DEFAULT",false);
     }
     
     if(EditMode==EITLERPGLOBAL.ADD)
     {
       ObjItemHierarchy.setAttribute("CREATED_BY",EITLERPGLOBAL.gUserID);
       ObjItemHierarchy.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
       ObjItemHierarchy.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gUserID);
       ObjItemHierarchy.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
     }
     
     if(EditMode==EITLERPGLOBAL.EDIT)
     {
       ObjItemHierarchy.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gUserID);
       ObjItemHierarchy.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
     }
     
     //Now Set the detail records
     ObjItemHierarchy.colUsers.clear();
     
     int Rows= Table.getRowCount();
     
     for(int i=0;i<Rows;i++)
     {
        clsItemHierarchyUser ObjUser=new clsItemHierarchyUser();
        
        ObjUser.setAttribute("SR_NO",Integer.parseInt((String) Table.getValueAt(i,1))); //Sr. No.
        ObjUser.setAttribute("USER_ID",Integer.parseInt((String)Table.getValueAt(i,0))); //User ID
        if((String) Table.getValueAt(i,3) =="Y")
        {
         ObjUser.setAttribute("CAN_CHANGE",true);
        }
        else
        {
         ObjUser.setAttribute("CAN_CHANGE",false);
        }
        
        if((String)Table.getValueAt(i,4)=="Y")
        {
            ObjUser.setAttribute("CAN_SKIP",true);
        }
        else
        {
            ObjUser.setAttribute("CAN_SKIP",false);
        }
        
        if((String)Table.getValueAt(i,5)=="Y")
        {
            ObjUser.setAttribute("CAN_FINAL_APPROVE",true);
        }
        else
        {
            ObjUser.setAttribute("CAN_FINAL_APPROVE",false);
        }
        //Add to collection
        ObjItemHierarchy.colUsers.put(Integer.toString(ObjItemHierarchy.colUsers.size()+1),ObjUser);
     }
  }

  
  
  private void GenerateCombo()
  {
       clsUser ObjUser=new clsUser();
       HashMap List = new HashMap();
      
       List=ObjUser.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID));

       for(int i=1;i<=List.size();i++)
        {
           ObjUser=(clsUser) List.get(Integer.toString(i));

           ComboData aData=new ComboData();

           aData.Text=(String) ObjUser.getAttribute("USER_NAME").getObj();
           aData.Code=(long)ObjUser.getAttribute("USER_ID").getVal();
           
           cmbUserModel.addElement(aData);
        }
       cmbUser.setModel(cmbUserModel);
  }
  
  
  private void FormatGrid()
  {  

      DataModel=new EITLTableModel();
      
      Table.removeAll();
      Table.setModel(DataModel);
      
      //Set the table Readonly
      DataModel.TableReadOnly(true);
      
      DefaultTableModel a;
      
      
      //Add Columns
      DataModel.addColumn("UserID");
      DataModel.addColumn("Sr.");
      DataModel.addColumn("User");
      DataModel.addColumn("Change");
      DataModel.addColumn("Skip");
      DataModel.addColumn("Final");
      
      //Now hide the column 1
      TableColumnModel ColModel=Table.getColumnModel();
      Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
      ColModel.getColumn(0).setMinWidth(0);
      ColModel.getColumn(0).setPreferredWidth(0);
}
  
  
private void MoveFirst()
{
    ObjItemHierarchy.MoveFirst();
    DisplayData();
}

private void MovePrevious()
{
    ObjItemHierarchy.MovePrevious();
    DisplayData();
}

private void MoveNext()
{
    ObjItemHierarchy.MoveNext();
    DisplayData();
}

private void MoveLast()
{
    ObjItemHierarchy.MoveLast();
    DisplayData();
}

private void Add()
{
   DisableToolbar();
   SetFields(true);
   EditMode=EITLERPGLOBAL.ADD;
   ClearFields();
}

private void Edit()
{
   DisableToolbar();
   SetFields(true);
   EditMode=EITLERPGLOBAL.EDIT;

}

private void Delete()
{
    if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION)
    {
        if(ObjItemHierarchy.Delete())
        {
            DisplayData();
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Error occured while deleting the record. Error is "+ObjItemHierarchy.LastError);
        }
    }
}



private void Save()
{

    //Form level validations 
    if(txtDescription.getText().equals(""))
    {
        JOptionPane.showMessageDialog(null,"Please enter the name for hierarchy");
        txtDescription.requestFocus();
        return;
    }
    
    if(Table.getRowCount()<=0)
    {
        JOptionPane.showMessageDialog(null,"Please specify at least one user for hierarchy");
        return;
    }
    
    SetData();
    
    if(EditMode==EITLERPGLOBAL.ADD)
    {
        if(ObjItemHierarchy.Insert())
        {
            //Nothing to do
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjItemHierarchy.LastError);
            return;
        }
    }
    
    
    if(EditMode==EITLERPGLOBAL.EDIT)
    {
        if(ObjItemHierarchy.Update())
        {
            //Nothing to do
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjItemHierarchy.LastError);
            return;
        }
    }
    
    EditMode=0;
    SetFields(false);
    EnableToolbar();
    SetMenuForRights();
}


private void Cancel()
{
    DisplayData();
    EditMode=0;
    SetFields(false);
    EnableToolbar();
    SetMenuForRights();
}

private void Find()
{
    
}

private void SetFields(boolean pStat)
{
    txtDescription.setEnabled(pStat);
    cmbUser.setEnabled(pStat);
    chkChange.setEnabled(pStat);
    chkSkip.setEnabled(pStat);
    chkFinal.setEnabled(pStat);
    chkDefault.setEnabled(pStat);
    cmdAdd.setEnabled(pStat);
    cmdRemove.setEnabled(pStat);
    cmdUP.setEnabled(pStat);
    cmdDown.setEnabled(pStat);
}


private void ClearFields()
{
    txtDescription.setText("");
    chkChange.setSelected(false);
    chkSkip.setSelected(false);
    chkFinal.setSelected(false);
    chkDefault.setSelected(false);
    FormatGrid();
}

    private void SetMenuForRights() {
        // --- Add Rights --
         if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,221)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
         }
        
        // --- Edit Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,222)) {
            cmdEdit.setEnabled(true);
        }
        else {
            cmdEdit.setEnabled(false);
        }
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,223)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,224)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }


}
