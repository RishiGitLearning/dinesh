/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */

package EITLERP;
  
/** 
 *
 * @author  nhpatel
 */
import javax.swing.*;
import java.awt.*;
import java.net.*;
import java.sql.*;
import java.text.*;
import java.util.*;
import EITLERP.*;
 
public class FrmLocation extends javax.swing.JApplet {
    
    private int EditMode=0;
    private clsLocation ObjLocation;
    private EITLComboModel cmbWarehouseModel;
    /** Creates new form frmTemplate */
    public FrmLocation() {
        System.gc();
        setSize(600,400);
        initComponents();
        GenerateCombos();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        ObjLocation=new clsLocation();
        
        if(ObjLocation.LoadData())
        {
            SetFields(false); 
            ObjLocation.MoveFirst();
            DisplayData();
            Generate_List();
            SetMenuForRights();
            ShowMessage("Ready ........");
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Error loading location data. Error is "+ObjLocation.LastError);
        }

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        ListWarehouse = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtLocationID = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtLocationName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListLocation = new javax.swing.JList();
        jLabel5 = new javax.swing.JLabel();
        txtWarning = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtTotalCapacity = new javax.swing.JTextField();
        ChkMutliLevel = new javax.swing.JCheckBox();
        cmbWarehouse = new javax.swing.JComboBox();
        lblStatus = new javax.swing.JLabel();
        
        getContentPane().setLayout(null);
        
        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdTop);
        
        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdBack);
        
        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdNext);
        
        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdLast);
        
        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdNew);
        
        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdEdit);
        
        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdDelete);
        
        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdSave);
        
        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdCancel);
        
        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdFilter);
        
        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdPreview);
        
        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdPrint);
        
        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        
        ToolBar.add(cmdExit);
        
        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);
        
        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setForeground(java.awt.Color.white);
        jLabel1.setText("Location Master");
        jLabel1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 40, 644, 25);
        
        ListWarehouse.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ListWarehouse.setToolTipText("Select Warehouse Name from list");
        getContentPane().add(ListWarehouse);
        ListWarehouse.setBounds(0, 0, 0, 0);
        
        jLabel2.setText("Warehouse Name");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(210, 110, 120, 15);
        
        jLabel3.setText("Location ID");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(210, 140, 90, 15);
        
        txtLocationID.setNextFocusableComponent(txtLocationName);
        txtLocationID.setEnabled(false);
        txtLocationID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtLocationIDFocusGained(evt);
            }
        });
        
        getContentPane().add(txtLocationID);
        txtLocationID.setBounds(330, 140, 80, 19);
        
        jLabel4.setText("Location Name");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(210, 170, 120, 20);
        
        txtLocationName.setNextFocusableComponent(txtWarning);
        txtLocationName.setEnabled(false);
        txtLocationName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtLocationNameFocusGained(evt);
            }
        });
        
        getContentPane().add(txtLocationName);
        txtLocationName.setBounds(330, 170, 230, 19);
        
        ListLocation.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ListLocation.setToolTipText("Select Warehouse Name from list");
        ListLocation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListLocationMouseClicked(evt);
            }
        });
        
        jScrollPane1.setViewportView(ListLocation);
        
        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 70, 190, 270);
        
        jLabel5.setText("Warning Capacity");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(210, 200, 110, 20);
        
        txtWarning.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtWarning.setNextFocusableComponent(txtTotalCapacity);
        txtWarning.setEnabled(false);
        txtWarning.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtWarningFocusGained(evt);
            }
        });
        
        getContentPane().add(txtWarning);
        txtWarning.setBounds(330, 200, 100, 19);
        
        jLabel6.setText("Total Capacity");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(210, 230, 100, 20);
        
        txtTotalCapacity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalCapacity.setNextFocusableComponent(ChkMutliLevel);
        txtTotalCapacity.setEnabled(false);
        txtTotalCapacity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTotalCapacityFocusGained(evt);
            }
        });
        
        getContentPane().add(txtTotalCapacity);
        txtTotalCapacity.setBounds(330, 230, 100, 19);
        
        ChkMutliLevel.setText("Multi Level Location");
        ChkMutliLevel.setNextFocusableComponent(cmbWarehouse);
        ChkMutliLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkMutliLevelActionPerformed(evt);
            }
        });
        ChkMutliLevel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ChkMutliLevelFocusGained(evt);
            }
        });
        
        getContentPane().add(ChkMutliLevel);
        ChkMutliLevel.setBounds(330, 260, 180, 23);
        
        cmbWarehouse.setNextFocusableComponent(txtLocationID);
        cmbWarehouse.setEnabled(false);
        cmbWarehouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbWarehouseActionPerformed(evt);
            }
        });
        cmbWarehouse.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbWarehouseFocusGained(evt);
            }
        });
        cmbWarehouse.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbWarehouseItemStateChanged(evt);
            }
        });
        cmbWarehouse.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                cmbWarehousePropertyChange(evt);
            }
        });
        
        getContentPane().add(cmbWarehouse);
        cmbWarehouse.setBounds(330, 110, 230, 24);
        
        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 350, 610, 22);
        
    }//GEN-END:initComponents

    private void ChkMutliLevelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ChkMutliLevelFocusGained
        // TODO add your handling code here:
          ShowMessage("Are Multiple items stored in this location ?........");
    }//GEN-LAST:event_ChkMutliLevelFocusGained

    private void txtTotalCapacityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTotalCapacityFocusGained
        // TODO add your handling code here:
            ShowMessage("Enter Total Capacity Allowable in particular Location........");
    }//GEN-LAST:event_txtTotalCapacityFocusGained

    private void txtWarningFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtWarningFocusGained
        // TODO add your handling code here:
           ShowMessage("Enter Warning Capacity for system Blinkage's........");
    }//GEN-LAST:event_txtWarningFocusGained

    private void txtLocationNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLocationNameFocusGained
        // TODO add your handling code here:
            ShowMessage("Enter Location Name ........");
    }//GEN-LAST:event_txtLocationNameFocusGained

    private void txtLocationIDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLocationIDFocusGained
        // TODO add your handling code here:
            ShowMessage("Enter Location Id ........");
    }//GEN-LAST:event_txtLocationIDFocusGained

    private void cmbWarehouseFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbWarehouseFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Warehouse Name from given list ........");
    }//GEN-LAST:event_cmbWarehouseFocusGained

    private void cmbWarehouseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbWarehouseItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbWarehouseItemStateChanged

    private void cmbWarehouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbWarehouseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbWarehouseActionPerformed

    private void cmbWarehousePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cmbWarehousePropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbWarehousePropertyChange

    private void ListLocationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListLocationMouseClicked
        // TODO add your handling code here:
        EITLTreeModel aData=(EITLTreeModel)ListLocation.getModel().getElementAt(ListLocation.getSelectedIndex());
        ObjLocation.Find(aData.Key);
        DisplayData();
    }//GEN-LAST:event_ListLocationMouseClicked

    private void ChkMutliLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkMutliLevelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ChkMutliLevelActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        Delete();
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox ChkMutliLevel;
    private javax.swing.JList ListLocation;
    private javax.swing.JList ListWarehouse;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JComboBox cmbWarehouse;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdTop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextField txtLocationID;
    private javax.swing.JTextField txtLocationName;
    private javax.swing.JTextField txtTotalCapacity;
    private javax.swing.JTextField txtWarning;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar()
 {
     //Puts toolbar in enable mode
     cmdTop.setEnabled(true);
     cmdBack.setEnabled(true);
     cmdNext.setEnabled(true);
     cmdLast.setEnabled(true);
     cmdNew.setEnabled(true);
     cmdEdit.setEnabled(true);
     cmdDelete.setEnabled(true);
     cmdSave.setEnabled(false);
     cmdCancel.setEnabled(false);
     cmdFilter.setEnabled(true);
     cmdPreview.setEnabled(true);
     cmdPrint.setEnabled(true);
     cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar()
 {
     //Puts toolbar in enable mode
     cmdTop.setEnabled(false);
     cmdBack.setEnabled(false);
     cmdNext.setEnabled(false);
     cmdLast.setEnabled(false);
     cmdNew.setEnabled(false);
     cmdEdit.setEnabled(false);
     cmdDelete.setEnabled(false);
     cmdSave.setEnabled(true);
     cmdCancel.setEnabled(true);
     cmdFilter.setEnabled(false);
     cmdPreview.setEnabled(false);
     cmdPrint.setEnabled(false);
     cmdExit.setEnabled(false);
    }
    
    //Display data on the Screen
 private void DisplayData()
 {
     EITLERPGLOBAL.setComboIndex(cmbWarehouse,(String)ObjLocation.getAttribute("WAREHOUSE_ID").getObj());
     txtLocationID.setText((String)ObjLocation.getAttribute("LOCATION_ID").getObj()) ;
     txtLocationName.setText((String)ObjLocation.getAttribute("LOCATION_NAME").getObj());
     txtWarning.setText(Double.toString(ObjLocation.getAttribute("WARNING_CAPACITY").getVal()));
     txtTotalCapacity.setText(Double.toString(ObjLocation.getAttribute("TOTAL_CAPACITY").getVal()));
     if ((boolean) ObjLocation.getAttribute("MULTI_LEVEL_LOCATION").getBool())
     {   
        ChkMutliLevel.setSelected(true);
     }else
     {
         ChkMutliLevel.setSelected(false);
     } 
 }
    
    //Sets data to the Class Object
    private void SetData()
 {
      ObjLocation.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
      ObjLocation.setAttribute("WAREHOUSE_ID",EITLERPGLOBAL.getComboCode(cmbWarehouse));
      ObjLocation.setAttribute("LOCATION_ID",txtLocationID.getText());     
      ObjLocation.setAttribute("LOCATION_NAME",txtLocationName.getText());
      ObjLocation.setAttribute("WARNING_CAPACITY",Double.parseDouble(txtWarning.getText()));
      ObjLocation.setAttribute("TOTAL_CAPACITY",Double.parseDouble(txtTotalCapacity.getText()));
      if(ChkMutliLevel.isSelected())
      {
          ObjLocation.setAttribute("MULTI_LEVEL_LOCATION",true);
      }
      else
      {
          ObjLocation.setAttribute("MULTI_LEVEL_LOCATION",false);
      }
      if(EditMode==EITLERPGLOBAL.ADD)
      {
          ObjLocation.setAttribute("CREATED_BY",EITLERPGLOBAL.gUserID);
          ObjLocation.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
      }
      else
      {
          ObjLocation.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gUserID);
          ObjLocation.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
      }
  }
    
private void ClearFields()
{
    txtLocationID.setText("");
    txtLocationName.setText("");
    cmbWarehouse.setSelectedIndex(-1);
    txtWarning.setText("");
    txtTotalCapacity.setText("");
    ChkMutliLevel.setSelected(false);
}

  private void SetFields(boolean pStat)
  {
      txtLocationID.setEnabled(pStat); 
      txtLocationName.setEnabled(pStat);
      cmbWarehouse.setEnabled(pStat);
      txtWarning.setEnabled(pStat);
      txtTotalCapacity.setEnabled(pStat);
      ChkMutliLevel.setEnabled(pStat);
  }    

  private void Cancel()
  {
      DisplayData();
      EditMode=0;
      SetFields(false);
      EnableToolbar();
      ShowMessage("Ready ........");
  }
  
  private void MoveFirst()
  {
    ObjLocation.MoveFirst();
    DisplayData();
  }
  
  private void MovePrevious()
  {
    ObjLocation.MovePrevious();
    DisplayData();
  }
  
  private void MoveNext()
  {
    ObjLocation.MoveNext();
    DisplayData();
  }
  
  private void MoveLast()
  {
    ObjLocation.MoveLast();
    DisplayData();
  }
    
  private void Add()
  {
     EditMode=EITLERPGLOBAL.ADD;
     DisableToolbar();
     SetFields(true);
     ClearFields();
     cmbWarehouse.requestFocus();
  }
  
  private void Edit()
  {
     EditMode=EITLERPGLOBAL.EDIT;
     DisableToolbar();
     SetFields(true);
     cmbWarehouse.setEnabled(false);
     txtLocationID.setEnabled(false);
     txtLocationName.requestFocus();
  }
  
  
  private void Delete()
  {
       if(ObjLocation.Delete())
       {
        MoveLast();
        DisplayData();
        Generate_List();
       }
       else
       {
          JOptionPane.showMessageDialog(null,"Error occured while deleting. Error is"+ObjLocation.LastError);
       }
  }

  private void Save()
  {
      // --------- Form Level Validations ------------ //
      
      if(cmbWarehouse.getSelectedIndex()== -1)
      {
      JOptionPane.showMessageDialog(null,"Please enter Warehouse Name");
          return;
      }
      
      if(txtLocationID.getText().equals(""))
      {
          JOptionPane.showMessageDialog(null,"Please enter Location ID");
          return;
      }

      if(txtLocationName.getText().equals(""))
      {
          JOptionPane.showMessageDialog(null,"Please enter Location Name");
          return;
      }
      
      if(Double.parseDouble(txtWarning.getText()) <= 0)
      {
          JOptionPane.showMessageDialog(null,"Warning Capacity should be more then Zero");
          return;
      }

      if(Double.parseDouble(txtTotalCapacity.getText()) <= 0)
      {
          JOptionPane.showMessageDialog(null,"Total Capacity should be more then Zero");
          return;
      }

      if(Double.parseDouble(txtWarning.getText()) > Double.parseDouble(txtTotalCapacity.getText()))
      {
          JOptionPane.showMessageDialog(null,"Total Capacity should be less then Warning Capacity");
          return;
      }

      SetData();
      if(ChkMutliLevel.isSelected())
      {
       ObjLocation.setAttribute("MULTI_LEVEL_LOCATION",true);
      }
      else
      {
          ObjLocation.setAttribute("MULTI_LEVEL_LOCATION",false);
      }
      
      
      ObjLocation.setAttribute("WAREHOUSE_ID",EITLERPGLOBAL.getCombostrCode(cmbWarehouse));
      if(EditMode==EITLERPGLOBAL.ADD)
      {
        if(ObjLocation.Insert())
        {
            MoveLast();
            DisplayData();
        }
        else
        {
          JOptionPane.showMessageDialog(null,"Error occured while saving item. Error is"+ObjLocation.LastError);
          return;
        }
      }      

      if(EditMode==EITLERPGLOBAL.EDIT)
      {
       if(ObjLocation.Update())  
       {
        //Nothing to do
       }
       else
       {
        JOptionPane.showMessageDialog(null,"Error occured while saving item. Error is"+ObjLocation.LastError);
        return;
       }
      }
      
      EditMode=0;
      SetFields(false);
      EnableToolbar();
      Generate_List();
      ShowMessage("Ready ........");
  }    

 private void Generate_List()
 {
   HashMap List= new HashMap();
   String strCondition=" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID;

   EITLListModel aModel=new EITLListModel();
   ListLocation.removeAll();
   ListLocation.setModel(aModel);
   EITLTreeModel aData;
    
   List = clsLocation.getList(strCondition);
   for(int i=1;i<=List.size();i++)
   {
       clsLocation ObjLoc=(clsLocation) List.get(Integer.toString(i));
       String var = (String) ObjLoc.getAttribute("LOCATION_ID").getObj();
       aData=new EITLTreeModel((String)ObjLoc.getAttribute("LOCATION_ID").getObj(),(String)ObjLoc.getAttribute("LOCATION_NAME").getObj());
       aModel.addElement(aData);
    }
  }

 private void SetMenuForRights()
  {
   // --- Add Rights --
   if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,121))
   {
      cmdNew.setEnabled(true);
   }
   else
   {
       cmdNew.setEnabled(false);
   }
      
   // --- Edit Rights --
   if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,122))
   {
      cmdEdit.setEnabled(true);
   }
   else
   {
       cmdEdit.setEnabled(false);
   }
   
   // --- Delete Rights --
   if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,123))
   {
      cmdDelete.setEnabled(true);
   }
   else
   {
      cmdDelete.setEnabled(false);
   }
   
   // --- Print Rights --
   if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,124))
   {
      cmdPreview.setEnabled(true);
      cmdPrint.setEnabled(true);
   }
   else
   {
      cmdPreview.setEnabled(false);
      cmdPrint.setEnabled(false);
   }
   }

  private void GenerateCombos()
  {
   //Generates Combo Boxes
   HashMap List=new HashMap();
   String strCondition="";
   
   //----- Generate cmbType ------- //
   cmbWarehouseModel=new EITLComboModel();
   cmbWarehouse.removeAllItems();
   cmbWarehouse.setModel(cmbWarehouseModel);
   
   strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID);
   
   List=clsWarehouse.getList(strCondition);
   for(int i=1;i<=List.size();i++)
   {
       clsWarehouse ObjWare=(clsWarehouse) List.get(Integer.toString(i));
       ComboData aData=new ComboData();
       //aData.Code=(int) ObjWare.getAttribute("WAREHOUSE_ID").getVal();
       aData.Text=(String)ObjWare.getAttribute("WAREHOUSE_NAME").getObj();
       aData.strCode=(String) ObjWare.getAttribute("WAREHOUSE_ID").getObj();
       cmbWarehouseModel.addElement(aData);
   }
  }   

 private void ShowMessage(String pMessage)
 {
     lblStatus.setText(pMessage);
 }
  
}
