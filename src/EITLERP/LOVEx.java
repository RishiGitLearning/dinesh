/*
 * LOVEx.java
 *
 * Created on April 7, 2004, 5:11 PM
 */

package EITLERP;

/*<APPLET CODE=LOV.Class HEIGHT=300 WIDTH=200></APPLT>
 */

import java.util.*;
import javax.swing.*;
import java.awt.*;
import javax.swing.table.*;
import java.sql.*;
import java.net.*;
import java.awt.Frame;
import EITLERP.Utils.SimpleDataProvider.*;

/**
 *
 * @author  nrpithva
 */

public class LOVEx extends javax.swing.JApplet {
    
    public int SearchColumn=0;
    public boolean Cancelled=true;
    public TRow ReturnVal=new TRow();
    public int SelectedRow=0;
    
    private JDialog aDialog;
    private EITLTableModel DataModel=new EITLTableModel();
    
    private TTable objData;
    
    public LOVEx(TTable LOVData,int pDefaultSearchOn) {
        SearchColumn=pDefaultSearchOn;
        objData=LOVData;
    }
    
    public boolean ShowLOV() {
        try {
            initComponents();
            GenerateLOV();
            
            setSize(400,350);
            
            Frame f=findParentFrame(this);
            
            
            aDialog=new JDialog(f,"Selection",true);
            
            aDialog.addComponentListener(new java.awt.event.ComponentAdapter() {
                public void componentResized(java.awt.event.ComponentEvent evt) {
                    DialogResized(evt);
                }
            });
            
            aDialog.getContentPane().add("Center",this);
            Dimension appletSize = this.getSize();
            aDialog.setSize(appletSize);
            aDialog.setResizable(true);
            
            //Place it to center of the screen
            Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
            aDialog.setLocation((int)(screenSize.width-appletSize.getWidth())/2,(int)(screenSize.height-appletSize.getHeight())/2);
            
            aDialog.setDefaultCloseOperation(javax.swing.JDialog.DISPOSE_ON_CLOSE);
            aDialog.show();
        }
        catch(Exception e) {
        }
        return !Cancelled;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        lblSearch = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        cmdOK = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        TablePane = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();

        getContentPane().setLayout(null);

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
        });

        lblSearch.setText("Search");
        getContentPane().add(lblSearch);
        lblSearch.setBounds(10, 0, 50, 20);

        txtSearch.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                OnKeyPressed(evt);
            }
        });

        getContentPane().add(txtSearch);
        txtSearch.setBounds(10, 20, 380, 19);

        cmdOK.setText("OK");
        cmdOK.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        cmdOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOKActionPerformed(evt);
            }
        });

        getContentPane().add(cmdOK);
        cmdOK.setBounds(230, 290, 70, 30);

        cmdCancel.setText("Cancel");
        cmdCancel.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        getContentPane().add(cmdCancel);
        cmdCancel.setBounds(310, 290, 70, 30);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                OnChange(evt);
            }
        });
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
        });
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OnDblClicked(evt);
            }
        });

        TablePane.setViewportView(Table);

        getContentPane().add(TablePane);
        TablePane.setBounds(10, 50, 380, 230);

    }//GEN-END:initComponents
    
    private void OnDblClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OnDblClicked
        // Add your handling code here:
        
        if(evt.getClickCount()==2) {
            if(Table.getRowCount()<=0) {
                Cancelled=true;
            }
            else {
                Cancelled=false;
                
                SelectedRow=Integer.parseInt(DataModel.getValueByVariable("SR_NO", Table.getSelectedRow()));
                ReturnVal=objData.Rows(SelectedRow);
                
            }
            aDialog.dispose();
            return;
        }
        else {
            SearchColumn=Table.getSelectedColumn();
        }
    }//GEN-LAST:event_OnDblClicked
    
    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        // Add your handling code here:
        try {
            if(evt.getKeyCode()==10) //Enter key pressed
            {
                if(Table.getRowCount()<=0) {
                    Cancelled=true;
                }
                else {
                    Cancelled=false;
                    
                    SelectedRow=Integer.parseInt(DataModel.getValueByVariable("SR_NO", Table.getSelectedRow()));
                    ReturnVal=objData.Rows(SelectedRow);
                    
                }
                aDialog.dispose();
                return;
            }
            
            if(evt.getKeyCode()==27) //Escape key pressed
            {
                Cancelled=true;
                aDialog.dispose();
                return;
            }
            
            
        }
        catch(Exception e)
        {}
    }//GEN-LAST:event_txtSearchKeyPressed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // Add your handling code here:
        Cancelled=true;
        aDialog.dispose();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void OnKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_OnKeyPressed
        // Add your handling code here:
        SearchRow(evt.getKeyChar());
    }//GEN-LAST:event_OnKeyPressed
    
    private void cmdOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOKActionPerformed
        // Add your handling code here:
        if(Table.getRowCount()<=0) {
            Cancelled=true;
        }
        else {
            Cancelled=false;
            
            SelectedRow=Integer.parseInt(DataModel.getValueByVariable("SR_NO", Table.getSelectedRow()));
            ReturnVal=objData.Rows(SelectedRow);
        }
        aDialog.dispose();
    }//GEN-LAST:event_cmdOKActionPerformed
    
    private void OnChange(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_OnChange
        // Add your handling code here:
    }//GEN-LAST:event_OnChange
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JScrollPane TablePane;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdOK;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
    
    
    //Generates Table from the Data
    private void GenerateLOV() {
        try {
            
            HashMap columns=objData.getColumns();
            
            DataModel.addColumn("Sr.");
            DataModel.SetVariable(0, "SR_NO");
            
            Iterator ColumnNames= objData.getColumns().keySet().iterator();
            
            while(ColumnNames.hasNext()) {
                String ColumnName=(String)ColumnNames.next();
                TColumn objColumn=(TColumn)columns.get(ColumnName);
                DataModel.addColumn(ColumnName);
                DataModel.SetVariable(DataModel.getColumnCount()-1, ColumnName);
            }
            
            Table.setModel(DataModel);
            Table.setColumnSelectionAllowed(true);
            DataModel.TableReadOnly(true);
            
            TableColumnModel ColModel=Table.getColumnModel();
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
            
            //Generate the Table
            for(int r=1;r<=objData.getRowCount();r++) {
                DataModel.addRow(new Object[1]);
                DataModel.setValueByVariable("SR_NO",Integer.toString(r), DataModel.getRowCount()-1);
                
                ColumnNames= objData.getColumns().keySet().iterator();
                
                while(ColumnNames.hasNext()) {
                    String ColumnName=(String)ColumnNames.next();
                    DataModel.setValueByVariable(ColumnName,objData.Rows(r).getValue(ColumnName), DataModel.getRowCount()-1);
                }
            }
            
            
            Table.changeSelection(0,0,false,false);
            txtSearch.requestFocus();
            
        }
        catch(Exception e) {
            
        }
    }
    
    
    private void SearchRow(char RecentKey) {
        //All Columns will have String Data
        String txtData=txtSearch.getText()+RecentKey;
        String txtTableData="";
        
        int Rows=Table.getModel().getRowCount();
        
        if(txtData.equals("")) {
            Table.changeSelection(0,0, false, false);
            return;
        }
        
        //Loop through Table
        for(int i=0;i<Rows;i++) {
            //Read the table data
            txtTableData=(String) Table.getModel().getValueAt(i,SearchColumn);
            
            //Compare with partial search
            if(txtData.length()>txtTableData.length()) {
            }
            else {
                if(txtTableData.substring(0,txtData.length()).toLowerCase().equals(txtData.toLowerCase())) {
                    //Move the row pointer to selected row
                    int row = i;
                    int col = SearchColumn-1;
                    boolean toggle = false;
                    boolean extend = false;
                    Table.changeSelection(row, col, toggle, extend);
                    
                    //Exit the loop
                    i=Table.getModel().getRowCount();
                }
            }
        }
    }
    
    //Recurses through the hierarchy of classes
    //until it finds Frame
    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while(c != null) {
            if (c instanceof Frame)
                return (Frame)c;
            
            c = c.getParent();
        }
        return (Frame)null;
    }
    
    private void DialogResized(java.awt.event.ComponentEvent evt) {
        try {
            
            TablePane.setBounds(TablePane.getX(),TablePane.getY(), aDialog.getWidth()-30, aDialog.getHeight()-120);
            txtSearch.setBounds(txtSearch.getX(),txtSearch.getY(), aDialog.getWidth()-30 , txtSearch.getHeight());
            
            cmdOK.setLocation(aDialog.getWidth()-170,aDialog.getHeight()-60);
            
            cmdCancel.setLocation(aDialog.getWidth()-90,aDialog.getHeight()-60);
            
        }
        catch(Exception e) {
            
        }
    }
    
}
