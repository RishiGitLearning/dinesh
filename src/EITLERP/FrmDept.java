/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */

/**
 *
 * @author  nhpatel
 */
package EITLERP;

import javax.swing.*;
import java.awt.*;
import EITLERP.*;
import java.net.*;
import java.sql.*;
import java.text.*;
import java.util.*;



public class FrmDept extends javax.swing.JApplet {
    
    private int EditMode=0;
    private clsDepartment ObjDept;
    
    private EITLTableModel DataModel;
    private EITLTableModel DataModelA;
    private EITLComboModel cmbUserModel;
    private EITLComboModel cmbHODModel;
    
    private EITLComboModel cmbApproverModel;
    private EITLComboModel cmbModuleModel;
    
    
    /** Creates new form frmTemplate */
    public FrmDept() {
        System.gc();
        setSize(650,560);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        ObjDept=new clsDepartment();
        
        if(ObjDept.LoadData()) {
            ShowMessage("Please wait for a while Loading Data ......");
            SetFields(false);
            ObjDept.MoveFirst();
            Generate_List();
            SetMenuForRights();
            GenerateCombos();
            FormatApproverGrid();
            DisplayData();
            ShowMessage("Ready Data Loaded ........");
        }
        else {
            JOptionPane.showMessageDialog(null,"Error loading Department data. Error is "+ObjDept.LastError);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        ListLocation = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        txtDeptID = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtDeptDesc = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListDept = new javax.swing.JList();
        lblStatus = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        cmbUser = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        cmbModule = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        cmbApprover = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        cmdAddA = new javax.swing.JButton();
        cmdRemoveA = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        chkFinal = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        cmbHOD = new javax.swing.JComboBox();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdNExtActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setForeground(java.awt.Color.white);
        jLabel1.setText("Department Master");
        jLabel1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 40, 690, 25);

        ListLocation.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ListLocation.setToolTipText("Select Warehouse Name from list");
        getContentPane().add(ListLocation);
        ListLocation.setBounds(0, 0, 0, 0);

        jLabel3.setText("Department ID");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(210, 78, 97, 15);

        txtDeptID.setNextFocusableComponent(txtDeptDesc);
        txtDeptID.setEnabled(false);
        txtDeptID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDeptIDActionPerformed(evt);
            }
        });
        txtDeptID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDeptIDFocusGained(evt);
            }
        });

        getContentPane().add(txtDeptID);
        txtDeptID.setBounds(328, 77, 70, 19);

        jLabel4.setText("Department Desc");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(210, 108, 120, 20);

        txtDeptDesc.setNextFocusableComponent(cmbUser);
        txtDeptDesc.setEnabled(false);
        txtDeptDesc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDeptDescFocusGained(evt);
            }
        });

        getContentPane().add(txtDeptDesc);
        txtDeptDesc.setBounds(327, 108, 230, 19);

        ListDept.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ListDept.setToolTipText("Select Warehouse Name from list");
        ListDept.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ListDeptFocusGained(evt);
            }
        });
        ListDept.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListDeptMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(ListDept);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(4, 67, 201, 428);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(1, 501, 683, 22);

        jPanel1.setLayout(null);

        jPanel1.setBorder(new javax.swing.border.EtchedBorder());
        cmbUser.setNextFocusableComponent(cmdAdd);
        cmbUser.setEnabled(false);
        jPanel1.add(cmbUser);
        cmbUser.setBounds(67, 17, 180, 24);

        jLabel2.setText("User");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(23, 19, 40, 15);

        cmdAdd.setText("Add User");
        cmdAdd.setNextFocusableComponent(cmdRemove);
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });

        jPanel1.add(cmdAdd);
        cmdAdd.setBounds(123, 55, 104, 25);

        cmdRemove.setText("Remove User");
        cmdRemove.setNextFocusableComponent(Table);
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });

        jPanel1.add(cmdRemove);
        cmdRemove.setBounds(231, 55, 126, 25);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setNextFocusableComponent(txtDeptID);
        jScrollPane2.setViewportView(Table);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(19, 87, 340, 110);

        jTabbedPane1.addTab("Dept. Users", jPanel1);

        jPanel2.setLayout(null);

        jPanel2.setBorder(new javax.swing.border.EtchedBorder());
        jLabel5.setText("Document");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(8, 19, 87, 15);

        cmbModule.setNextFocusableComponent(cmdAdd);
        cmbModule.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbModuleItemStateChanged(evt);
            }
        });

        jPanel2.add(cmbModule);
        cmbModule.setBounds(86, 14, 290, 24);

        jLabel6.setText("Users Authorized to approve the document");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(8, 59, 302, 15);

        cmbApprover.setNextFocusableComponent(cmdAdd);
        cmbApprover.setEnabled(false);
        jPanel2.add(cmbApprover);
        cmbApprover.setBounds(63, 96, 180, 24);

        jLabel7.setText("User");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(19, 98, 40, 15);

        cmdAddA.setText("Add User");
        cmdAddA.setNextFocusableComponent(cmdRemove);
        cmdAddA.setEnabled(false);
        cmdAddA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddAActionPerformed(evt);
            }
        });

        jPanel2.add(cmdAddA);
        cmdAddA.setBounds(166, 135, 104, 25);

        cmdRemoveA.setText("Remove User");
        cmdRemoveA.setNextFocusableComponent(Table);
        cmdRemoveA.setEnabled(false);
        cmdRemoveA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveAActionPerformed(evt);
            }
        });

        jPanel2.add(cmdRemoveA);
        cmdRemoveA.setBounds(274, 135, 126, 25);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableA.setNextFocusableComponent(txtDeptID);
        jScrollPane3.setViewportView(TableA);

        jPanel2.add(jScrollPane3);
        jScrollPane3.setBounds(62, 166, 340, 110);

        chkFinal.setText("Is Final Approver ?");
        chkFinal.setEnabled(false);
        jPanel2.add(chkFinal);
        chkFinal.setBounds(263, 96, 161, 23);

        jTabbedPane1.addTab("Approval Authorities", jPanel2);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(209, 173, 475, 321);

        jLabel8.setText("H.O.D.");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(277, 146, 45, 15);

        cmbHOD.setNextFocusableComponent(cmdAdd);
        cmbHOD.setEnabled(false);
        getContentPane().add(cmbHOD);
        cmbHOD.setBounds(329, 141, 226, 24);

    }//GEN-END:initComponents
    
    private void cmdRemoveAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveAActionPerformed
        // TODO add your handling code here:
        
        int SrNo=Integer.parseInt((String)TableA.getValueAt(TableA.getSelectedRow(),4));
        
        ObjDept.colApprovers.remove(Integer.toString(SrNo));
        
        if(TableA.getSelectedRow()>=0) {
            DataModelA.removeRow(TableA.getSelectedRow());
        }
        
        //ReArrange();
        
        
    }//GEN-LAST:event_cmdRemoveAActionPerformed
    
    private void cmbModuleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbModuleItemStateChanged
        // TODO add your handling code here:
        GenerateGrid(EITLERPGLOBAL.getComboCode(cmbModule));
    }//GEN-LAST:event_cmbModuleItemStateChanged
    
    private void cmdAddAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddAActionPerformed
        // TODO add your handling code here:
        if(cmbModule.getSelectedIndex()<0) {
            JOptionPane.showMessageDialog(null,"Please select the document");
        }
        
        if(cmbApprover.getSelectedIndex()<0) {
            JOptionPane.showMessageDialog(null,"Please select the approver");
        }
        
        clsDeptApprovers ObjUser=new clsDeptApprovers();
        ObjUser.setAttribute("MODULE_ID",EITLERPGLOBAL.getComboCode(cmbModule));
        ObjUser.setAttribute("USER_ID",EITLERPGLOBAL.getComboCode(cmbApprover));
        ObjUser.setAttribute("SR_NO",ObjDept.colApprovers.size()+1);
        ObjUser.setAttribute("FINAL_APPROVER",chkFinal.isSelected());
        
        //ReArrange();
        ObjDept.colApprovers.put(Integer.toString(ObjDept.colApprovers.size()+1),ObjUser);
        
        //Add Row to the Grid
        GenerateGrid(EITLERPGLOBAL.getComboCode(cmbModule));
    }//GEN-LAST:event_cmdAddAActionPerformed
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        if(Table.getSelectedRow()>=0) {
            DataModel.removeRow(Table.getSelectedRow());
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        if(cmbUser.getSelectedIndex()>=0) {
            int SelUserID=EITLERPGLOBAL.getComboCode(cmbUser);
            
            //Check the duplication
            for(int i=0;i<Table.getRowCount();i++) {
                int UserID=Integer.parseInt((String)Table.getValueAt(i, 1));
                
                if(UserID==SelUserID) {
                    JOptionPane.showMessageDialog(null,"User already added to the list");
                    return;
                }
            }
            
            Object[] rowData=new Object[3];
            
            rowData[0]=Integer.toString(Table.getRowCount()+1);
            rowData[1]=Integer.toString(EITLERPGLOBAL.getComboCode(cmbUser));
            rowData[2]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.getComboCode(cmbUser));
            
            DataModel.addRow(rowData);
        }
        else {
            JOptionPane.showMessageDialog(null,"Please select the user");
        }
    }//GEN-LAST:event_cmdAddActionPerformed
    
    private void ListDeptFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ListDeptFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Department Description for all details");
    }//GEN-LAST:event_ListDeptFocusGained
    
    private void txtDeptDescFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDeptDescFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Department Desc.");
    }//GEN-LAST:event_txtDeptDescFocusGained
    
    private void txtDeptIDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDeptIDFocusGained
        // TODO add your handling code here:
        //        ShowMessage("Enter Department ID.");
    }//GEN-LAST:event_txtDeptIDFocusGained
    
    private void txtDeptIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDeptIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDeptIDActionPerformed
    
    private void ListDeptMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListDeptMouseClicked
        // TODO add your handling code here:
        EITLTreeModel aData=(EITLTreeModel)ListDept.getModel().getElementAt(ListDept.getSelectedIndex());
        ObjDept.Find(aData.Key);
        DisplayData();
    }//GEN-LAST:event_ListDeptMouseClicked
    
    private void CmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdExitActionPerformed
        // TODO add your handling code here:
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_CmdExitActionPerformed
    
    private void CmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CmdPrintActionPerformed
    
    private void CmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdPreviewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CmdPreviewActionPerformed
    
    private void CmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CmdFilterActionPerformed
    
    private void CmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_CmdCancelActionPerformed
    
    private void CmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_CmdSaveActionPerformed
    
    private void CmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdDeleteActionPerformed
        // TODO add your handling code here:
        Delete();
    }//GEN-LAST:event_CmdDeleteActionPerformed
    
    private void CmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_CmdEditActionPerformed
    
    private void CmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_CmdNewActionPerformed
    
    private void CmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_CmdLastActionPerformed
    
    private void CmdNExtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdNExtActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_CmdNExtActionPerformed
    
    private void CmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_CmdBackActionPerformed
    
    private void CmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_CmdTopActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList ListDept;
    private javax.swing.JList ListLocation;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableA;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JCheckBox chkFinal;
    private javax.swing.JComboBox cmbApprover;
    private javax.swing.JComboBox cmbHOD;
    private javax.swing.JComboBox cmbModule;
    private javax.swing.JComboBox cmbUser;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdAddA;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdRemoveA;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdTop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextField txtDeptDesc;
    private javax.swing.JTextField txtDeptID;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        txtDeptID.setText(Double.toString(ObjDept.getAttribute("DEPT_ID").getVal()));
        txtDeptDesc.setText((String)ObjDept.getAttribute("DEPT_DESC").getObj());
        EITLERPGLOBAL.setComboIndex(cmbHOD,(int)ObjDept.getAttribute("HOD").getVal());
        
        
        //Generating Grid of Users
        FormatGrid();
        
        for(int i=1;i<=ObjDept.colUsers.size();i++) {
            clsDeptUsers ObjUser=(clsDeptUsers)ObjDept.colUsers.get(Integer.toString(i));
            
            Object[] rowData=new Object[3];
            rowData[0]=Integer.toString((int)ObjUser.getAttribute("SR_NO").getVal());
            rowData[1]=Integer.toString((int)ObjUser.getAttribute("USER_ID").getVal());
            rowData[2]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjUser.getAttribute("USER_ID").getVal());
            
            DataModel.addRow(rowData);
        }
        
        GenerateGrid(EITLERPGLOBAL.getComboCode(cmbModule));
        
    }
    
    //Sets data to the Class Object
    private void SetData() {
        ObjDept.setAttribute("DEPT_ID",txtDeptID.getText());
        ObjDept.setAttribute("DEPT_DESC",txtDeptDesc.getText());
        ObjDept.setAttribute("HOD",EITLERPGLOBAL.getComboCode(cmbHOD));
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjDept.setAttribute("CREATED_BY",EITLERPGLOBAL.gUserID);
            ObjDept.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        else {
            ObjDept.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gUserID);
            ObjDept.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        
        //Setting User Data
        ObjDept.colUsers.clear();
        
        for(int i=0;i<Table.getRowCount();i++) {
            clsDeptUsers ObjUser=new clsDeptUsers();
            
            ObjUser.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
            ObjUser.setAttribute("SR_NO",i);
            ObjUser.setAttribute("USER_ID",Integer.parseInt((String)Table.getValueAt(i,1)));
            
            ObjDept.colUsers.put(Integer.toString(ObjDept.colUsers.size()+1),ObjUser);
        }
        
    }
    
    private void ClearFields() {
        txtDeptID.setText("");
        txtDeptDesc.setText("");
        
        FormatGrid();
    }
    
    private void SetFields(boolean pStat) {
        txtDeptID.setEnabled(pStat);
        txtDeptDesc.setEnabled(pStat);
        
        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        
        cmbUser.setEnabled(pStat);
        
        //cmbModule.setEnabled(pStat);
        cmbApprover.setEnabled(pStat);
        chkFinal.setEnabled(pStat);
        cmdAddA.setEnabled(pStat);
        cmdRemoveA.setEnabled(pStat);
        cmbHOD.setEnabled(pStat);
        
    }
    
    private void Cancel() {
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        ShowMessage("Ready.....");
    }
    
    private void MoveFirst() {
        ObjDept.MoveFirst();
        DisplayData();
    }
    
    private void MovePrevious() {
        ObjDept.MovePrevious();
        DisplayData();
    }
    
    private void MoveNext() {
        ObjDept.MoveNext();
        DisplayData();
    }
    
    private void MoveLast() {
        ObjDept.MoveLast();
        DisplayData();
    }
    
    private void Add() {
        EditMode=EITLERPGLOBAL.ADD;
        DisableToolbar();
        SetFields(true);
        txtDeptID.setEnabled(false);
        txtDeptDesc.requestFocus();
        ObjDept.colApprovers.clear();
        FormatApproverGrid();
        ClearFields();
    }
    
    private void Edit() {
        EditMode=EITLERPGLOBAL.EDIT;
        DisableToolbar();
        SetFields(true);
        txtDeptID.setEnabled(false);
        txtDeptDesc.requestFocus();
    }
    
    
    private void Delete() {
        if(ObjDept.Delete()) {
            MoveLast();
            DisplayData();
            Generate_List();
        }
        else {
            JOptionPane.showMessageDialog(null,"Error occured while deleting. Error is"+ObjDept.LastError);
        }
    }
    
    
    private void Save() {
        // --------- Form Level Validations ------------ //
        
        ShowMessage("Saving Department ...........");
        if(txtDeptDesc.getText().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter Department Description or Department Name");
            return;
        }
        
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjDept.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving item. Error is"+ObjDept.LastError);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjDept.Update()) {
                //Nothing to do
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving item. Error is"+ObjDept.LastError);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        Generate_List();
        ShowMessage("Ready....");
    }
    
    private void Generate_List() {
        HashMap List= new HashMap();
        String strCondition=" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID;
        
        EITLListModel aModel=new EITLListModel();
        ListDept.removeAll();
        ListDept.setModel(aModel);
        EITLTreeModel aData;
        
        List = clsDepartment.getList(strCondition);
        for(int i=1;i<=List.size();i++) {
            clsDepartment ObjDept=(clsDepartment) List.get(Integer.toString(i));
            int j = (int) ObjDept.getAttribute("DEPT_ID").getVal();
            aData=new EITLTreeModel(Integer.toString(j),(String) ObjDept.getAttribute("DEPT_DESC").getObj());
            aModel.addElement(aData);
        }
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,131)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,132)) {
            cmdEdit.setEnabled(true);
        }
        else {
            cmdEdit.setEnabled(false);
        }
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,133)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,134)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        String strCondition="";
        
        
        //-------- Generating Buyer Combo --------//
        cmbUserModel=new EITLComboModel();
        cmbUser.removeAllItems();
        cmbUser.setModel(cmbUserModel);
        clsUser ObjUser=new clsUser();
        List=ObjUser.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID));
        for(int i=1;i<=List.size();i++) {
            ObjUser=(clsUser) List.get(Integer.toString(i));
            
            ComboData aData=new ComboData();
            
            aData.Text=(String) ObjUser.getAttribute("USER_NAME").getObj();
            aData.Code=(long)ObjUser.getAttribute("USER_ID").getVal();
            
            cmbUserModel.addElement(aData);
        }
        //----------------------------------------//
        
        
        
        //-------- Generating Buyer Combo --------//
        cmbHODModel=new EITLComboModel();
        cmbHOD.removeAllItems();
        cmbHOD.setModel(cmbHODModel);
        ObjUser=new clsUser();
        List=ObjUser.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID));
        for(int i=1;i<=List.size();i++) {
            ObjUser=(clsUser) List.get(Integer.toString(i));
            
            ComboData aData=new ComboData();
            
            aData.Text=(String) ObjUser.getAttribute("USER_NAME").getObj();
            aData.Code=(long)ObjUser.getAttribute("USER_ID").getVal();
            
            cmbHODModel.addElement(aData);
        }
        //----------------------------------------//
        
        
        
        //-------- Generating Buyer Combo --------//
        cmbApproverModel=new EITLComboModel();
        cmbApprover.removeAllItems();
        cmbApprover.setModel(cmbApproverModel);
        ObjUser=new clsUser();
        List=ObjUser.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID));
        for(int i=1;i<=List.size();i++) {
            ObjUser=(clsUser) List.get(Integer.toString(i));
            
            ComboData aData=new ComboData();
            
            aData.Text=(String) ObjUser.getAttribute("USER_NAME").getObj();
            aData.Code=(long)ObjUser.getAttribute("USER_ID").getVal();
            
            cmbApproverModel.addElement(aData);
        }
        //----------------------------------------//
        
        
        //----- Generate cmbType ------- //
        cmbModuleModel=new EITLComboModel();
        cmbModule.removeAllItems();
        cmbModule.setModel(cmbModuleModel);
        
        strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID);
        
        List=clsModules.getList(strCondition);
        for(int i=1;i<=List.size();i++) {
            clsModules ObjModules=(clsModules) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Text=(String) ObjModules.getAttribute("MODULE_DESC").getObj();
            aData.Code=(int) ObjModules.getAttribute("MODULE_ID").getVal();
            cmbModuleModel.addElement(aData);
        }
        
        
        
    }
    
    
    private void GenerateGrid(int pModuleID) {
        int SrNo=0;
        FormatApproverGrid();
        
        Iterator objIt=ObjDept.colApprovers.keySet().iterator();
        
        
        while(objIt.hasNext()) {
                clsDeptApprovers ObjUser=(clsDeptApprovers)ObjDept.colApprovers.get(objIt.next());
                
                int ModuleID=(int)ObjUser.getAttribute("MODULE_ID").getVal();
                
                if(ModuleID==pModuleID) {
                    SrNo++;
                    Object[] rowData=new Object[5];
                    rowData[0]=Integer.toString(SrNo);
                    rowData[1]=Integer.toString((int)ObjUser.getAttribute("USER_ID").getVal());
                    rowData[2]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(long)ObjUser.getAttribute("USER_ID").getVal());
                    
                    boolean FinalApprover=ObjUser.getAttribute("FINAL_APPROVER").getBool();
                    if(FinalApprover) {
                        rowData[3]="Y";
                    }
                    else {
                        rowData[3]="";
                    }
                    
                    rowData[4]=Integer.toString((int)ObjUser.getAttribute("SR_NO").getVal());
                    
                    DataModelA.addRow(rowData);
                }

        }
        
        
    }
    
    
    
    
    private void FormatGrid() {
        DataModel=new EITLTableModel();
        
        Table.removeAll();
        Table.setModel(DataModel);
        
        //Set the table Readonly
        DataModel.TableReadOnly(true);
        
        //Add the columns
        DataModel.addColumn("Sr.");
        DataModel.addColumn("User ID");
        DataModel.addColumn("User Name");
        
        DataModel.SetNumeric(0, true);
        DataModel.SetNumeric(1,true);
        
        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);
    }
    
    
    
    private void FormatApproverGrid() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User ID");
        DataModelA.addColumn("User Name");
        DataModelA.addColumn("Final Approver");
        DataModelA.addColumn("Entry No.");
        
        DataModelA.SetNumeric(0, true);
        DataModelA.SetNumeric(1,true);
        DataModelA.SetNumeric(4,true);
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
    }

    private void ReArrange()
    {
      HashMap colNew=new HashMap();  
      Iterator objIt=ObjDept.colApprovers.keySet().iterator();
      
      int Counter=0;
      while(objIt.hasNext())
      {
         clsDeptApprovers objUser=(clsDeptApprovers)ObjDept.colApprovers.get(objIt.next());
         Counter++;
         objUser.setAttribute("SR_NO",new Variant(Counter));
         colNew.put(Integer.toString(Counter),objUser);
      }
      
      ObjDept.colApprovers.clear();
      
      for(int i=1;i<=colNew.size();i++)
      {
         clsDeptApprovers objUser=(clsDeptApprovers)colNew.get(Integer.toString(i));
         ObjDept.colApprovers.put(Integer.toString(i),objUser);
      }
      
    }
}
